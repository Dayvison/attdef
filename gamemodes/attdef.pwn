/*

	v2.7

	- Other fighting styles are made usable now with the power of /fightstyle.
	- AC Update allowing functions to be used without the plugin loaded.
	- Make sure you leave a message to your dead enemies using /deathdiss.
	- Fixed team win bug that could make wrong results in a round.
	- Server-sided health is real now
*/

#define GM_NAME				"Attack-Defend v2.7 (a)"

#include <a_samp>			// Most samp functions (e.g. GetPlayerHealth and etc)
#include <foreach> 			// Used to loop through all connected players
#include <zcmd> 			// Used for commands.
#include <geolocation> 		// Shows player country based on IP
#include <strlib>
#include <progress2>

#include <sampac> // THE MIGHTY NEW ANTICHEAT


#define MAILER_URL "sixtytiger.com/khalid/AttDef_API/Mailer/mailer.php"

#include <mailer>

#define ENABLED_TDM     1 	// DISABLE TDM IF YOU WANT e.e
#define ANTICHEAT       0 	// If you want Whitetiger's Anti-Cheat, put 1 else 0.
#define PLUGINS         0 	// If you want to use plugins then put 1 else leave 0.
#define INTROTEXT       0 	// Adds intro textdraw.
#define MYSQL           0 	// Use MySQL system
#define STATS           0 	// Shows ESL player stats from duels and VERSUS.
#define OBJECTS         0   // Loads extra objects/maps
#define XMAS            0   // Loads Christmas stuff
#define MATCH_SYNC      0   // (Beta) Uploads each match data somewhere so that it can be easily displayed in a website.
#define SKINICONS       0	// Loads skin icons in round stats
#define SILENTAIMDETECT 1   // Anti Wallhack/Silent Aim

native gpci (playerid, serial [], len);
native IsValidVehicle(vehicleid);


#undef MAX_PLAYERS
#define MAX_PLAYERS      		40

#if OBJECTS == 1 || XMAS == 1
    #include <streamer>
#endif

#if ANTICHEAT == 1
	#define _sampac_PLUGINS PLUGINS
	#include <sampac_api>
#endif

#if PLUGINS == 1
	#include <sscanf2>

#endif

#if MYSQL == 1
#include <sql>

#define SQL_HOST    ""
#define SQL_USER    ""
#define SQL_PW      ""
#define SQL_DB      ""

#endif

#define GTA_V_INTRO 0

#define PUB:%1(%2) forward %1(%2); public %1(%2)
#define FREEZE_SECONDS 3
enum pinfo
{
	firstspawn,
	pname[MAX_PLAYER_NAME],
	hacker
};
new gpInfo[MAX_PLAYERS][pinfo];


// freecam
enum noclipenum
{
	cameramode,
	flyobject,
	noclipcammode,
	lrold,
	udold,
	lastmove,
	Float:accelmul,
	bool:FlyMode
}
new noclipdata[MAX_PLAYERS][noclipenum];

new FightStyleIDs[6] =
{
	4,
	5,
	6,
	7,
	15,
	16
};

new FightStyleNames[6][11] =
{
	"Normal",
	"Boxing",
	"KungFu",
	"Knee-head",
	"Grab-kick",
	"Elbow-kick"
};

new bool:UpdateAKA = true;

new HeliWoodenBoard[MAX_VEHICLES];

// DestroyVehicle hooked for the sake of disco boards
stock _HOOKED_DestroyVehicle(vehicleid)
{
	if(HeliWoodenBoard[vehicleid] > -1)
    {
        DestroyObject(HeliWoodenBoard[vehicleid]);
        HeliWoodenBoard[vehicleid] = -1;
    }
	return DestroyVehicle(vehicleid);
}

#if defined _ALS_DestroyVehicle
	#undef DestroyVehicle
#else
	#define _ALS_DestroyVehicle
#endif

#define DestroyVehicle _HOOKED_DestroyVehicle

// Hooked some functions to reject unsafe game-texts.
stock _HOOKED_GameTextForPlayer(playerid, string[], time, style)
{
	if(!IsSafeGametext(string))
	    return -1;

	return GameTextForPlayer(playerid, string, time, style);
}

#if defined _ALS_GameTextForPlayer
	#undef GameTextForPlayer
#else
	#define _ALS_GameTextForPlayer
#endif

#define GameTextForPlayer _HOOKED_GameTextForPlayer

stock _HOOKED_GameTextForAll(string[], time, style)
{
	if(!IsSafeGametext(string))
	    return -1;

	return GameTextForAll(string, time, style);
}

#if defined _ALS_GameTextForAll
	#undef GameTextForAll
#else
	#define _ALS_GameTextForAll
#endif

#define GameTextForAll _HOOKED_GameTextForAll

stock Text:_HOOKED_TextDrawCreate(Float:x, Float:y, text[])
{
	if(!IsSafeGametext(text))
	    return Text:INVALID_TEXT_DRAW;

	return TextDrawCreate(x, y, text);
}

#if defined _ALS_TextDrawCreate
	#undef TextDrawCreate
#else
	#define _ALS_TextDrawCreate
#endif

#define TextDrawCreate _HOOKED_TextDrawCreate

stock PlayerText:_HOOKED_CreatePlayerTextDraw(playerid, Float:x, Float:y, text[])
{
	if(!IsSafeGametext(text))
	    return PlayerText:INVALID_TEXT_DRAW;

	return CreatePlayerTextDraw(playerid, x, y, text);
}

#if defined _ALS_CreatePlayerTextDraw
	#undef CreatePlayerTextDraw
#else
	#define _ALS_CreatePlayerTextDraw
#endif

#define CreatePlayerTextDraw _HOOKED_CreatePlayerTextDraw

stock _HOOKED_TextDrawSetString(Text:text, string[])
{
	if(!IsSafeGametext(string))
	    return -1;

	return TextDrawSetString(text, string);
}

#if defined _ALS_TextDrawSetString
	#undef TextDrawSetString
#else
	#define _ALS_TextDrawSetString
#endif

#define TextDrawSetString _HOOKED_TextDrawSetString

stock _HOOKED_PlayerTextDrawSetString(playerid, PlayerText:text, string[])
{
	if(!IsSafeGametext(string))
	    return -1;

	return PlayerTextDrawSetString(playerid, text, string);
}

#if defined _ALS_PlayerTextDrawSetString
	#undef PlayerTextDrawSetString
#else
	#define _ALS_PlayerTextDrawSetString
#endif

#define PlayerTextDrawSetString _HOOKED_PlayerTextDrawSetString

// Definations

#define NON 				0 	// Team nothing, used for when the player join the server
#define ATTACKER 			1 	// Attacker team
#define DEFENDER 			2 	// Defender team
#define REFEREE 			3 	// Referee team
#define ATTACKER_SUB 		4 	//
#define DEFENDER_SUB 		5


#define ATTACKER_PLAYING 		0xFF003355 	// Bright red color with 55 transparency (Range 00 - 99 - FF)
#define ATTACKER_NOT_PLAYING 	0xFF555555 	// Orange red color
#define ATTACKER_SUB_COLOR 		0xFFAAAA55 	// Yello red color
#define DEFENDER_PLAYING 		0x3344FF55 	// Bright blue color
#define DEFENDER_NOT_PLAYING 	0x3377FF55 	// Light blue color
#define DEFENDER_SUB_COLOR		0xAAAAFF55 	// Very light blue color
#define REFEREE_COLOR 			0xFFFF0055 	// Bright Yellow color
#define ATTACKER_ASKING_HELP    0xFF777788 	// Orange red color
#define DEFENDER_ASKING_HELP    0x7777FF88 	// Light blue color
#define TEAM_LEADER_COLOUR 		0xB7FFAEFF  // Light green colour



#define COL_PRIM    "{01A2F8}" // 0044FF   F36164 /* Dont change value of COL_PRIM define */

#define COL_SEC     "{FFFFFF}"

new MAIN_BACKGROUND_COLOUR = (0xEEEEEE33);
new MAIN_TEXT_COLOUR[16] /*   =	("~l~")*/;
new ColScheme[10] = ""COL_PRIM"";
// Freecam

#define MOVE_SPEED              100.0
#define ACCEL_RATE              0.03

#define CAMERA_MODE_NONE    	0
#define CAMERA_MODE_FLY     	1

#define MOVE_FORWARD    		1
#define MOVE_BACK       		2
#define MOVE_LEFT       		3
#define MOVE_RIGHT      		4
#define MOVE_FORWARD_LEFT       5
#define MOVE_FORWARD_RIGHT      6
#define MOVE_BACK_LEFT          7
#define MOVE_BACK_RIGHT         8

#define KNIFE           4
#define SILENCER        23
#define DEAGLE          24
#define SHOTGUN         25
#define COMBAT          27
#define MP5             29
#define AK47            30
#define M4              31
#define RIFLE           33
#define SNIPER          34
#define PARACHUTE		46

#define BASE            0
#define ARENA           1
#define DUEL            2
#define TDM           	3

#define ANTILAG_TEAM    6

#define MAX_BASES 			100
#define MAX_ARENAS      	100
#define MAX_TEAMS 			6
#define MAX_DMS 			50
#define MAX_DUELS       	50
#define SAVE_SLOTS      	50
#define MAX_CHANNELS    	1000
#define DRAW_DISTANCE   	25
#define MAX_STATS       	30
#define MAX_INI_ENTRY_TEXT 	80


#define DIALOG_NO_RESPONSE              0
#define DIALOG_WEAPONS_TYPE     		1
#define DIALOG_CURRENT_TOTAL    		2
#define DIALOG_TEAM_SCORE       		3
#define DIALOG_ATT_NAME         		4
#define DIALOG_DEF_NAME         		5
#define DIALOG_ATT_SCORE        		6
#define DIALOG_DEF_SCORE        		7
#define DIALOG_WEAPONS_LIMIT    		8
#define DIALOG_SET_1            		9
#define DIALOG_SET_2            		10
#define DIALOG_SET_3            		11
#define DIALOG_SET_4            		12
#define DIALOG_SET_5            		13
#define DIALOG_SET_6            		14
#define DIALOG_SET_7            		15
#define DIALOG_SET_8            		16
#define DIALOG_SET_9            		17
#define DIALOG_SET_10           		18
#define DIALOG_WAR_RESET        		19
#define DIALOG_SERVER_PASS      		20
#define DIALOG_LOGIN            		21
#define DIALOG_REGISTER         		22
#define DIALOG_ADMINS           		23
#define DIALOG_CLICK_STATS      		24
#define DIALOG_ARENA_GUNS       		25
#define DIALOG_CHANNEL_PLAYERS  		26
#define DIALOG_AKA			   		 	27
#define DIALOG_SERVER_HELP     		 	28
#define DIALOG_SWITCH_TEAM      		29
#define DIALOG_ESL_TEAMS        		30
#define DIALOG_DUEL_NAME        		31
#define DIALOG_VERSUS_STATS     		32
#define DIALOG_DUEL_STATS       		33
#define DIALOG_ANTICHEAT        		34
#define DIALOG_SERVER_STATS     		35
#define DIALOG_CONFIG		    		36
#define DIALOG_CONFIG_SET_TEAM_NAME     37
#define DIALOG_CONFIG_SET_TEAM_SKIN     38
#define DIALOG_CONFIG_SET_WEAPONS       39
#define DIALOG_CONFIG_SET_AAD           40
#define DIALOG_CONFIG_SET_TEAM_COLOR    41
#define DIALOG_CONFIG_SET_MAX_PING      42
#define DIALOG_CONFIG_SET_MAX_PACKET    43
#define DIALOG_CONFIG_SET_MIN_FPS       44
#define DIALOG_CONFIG_SET_DEF_SKIN      45
#define DIALOG_CONFIG_SET_ATT_SKIN      46
#define DIALOG_CONFIG_SET_ROUND_TIME    47
#define DIALOG_CONFIG_SET_CP_TIME       48
#define DIALOG_CONFIG_SET_ROUND_HEALTH  49
#define DIALOG_CONFIG_SET_ROUND_ARMOUR  50
#define DIALOG_CONFIG_SET_FIRST_WEAPON  51
#define DIALOG_CONFIG_SET_SECOND_WEAPON 52
#define EDITSHORTCUTS_DIALOG            53
#define GETVAL_DIAG                     54
#define DIALOG_HELPS                    55
#define PLAYERCLICK_DIALOG              56
#define DIALOG_SWITCH_TEAM_CLASS        57
#define DIALOG_ROUND_LIST               58 // dialog for showing list of rounds played in last match mode or current.
#define DIALOG_THEME_CHANGE1            59
#define DIALOG_THEME_CHANGE2            60
#define GRAFFMainDialog      			61
#define OModelDialog    				62
#define TextDialog      				63
#define SizesDialog     				64
#define FontNDialog     				65
#define FontSDialog     				66
#define BoldDialog      				67
#define ColorDialog     				68
#define BackgDialog     				69
#define BackgColorD     				70
#define AlignDialog     				71
#define GRAFFSaveDialog                 72
#define ColorDialog2                    73
#define ColorDialog3                    74
#define ColorDialog4                    75
#define ColorDialog5                    76
#define DIALOG_ADMIN_CODE               77
#define DIALOG_REPLACE_FIRST            78
#define DIALOG_REPLACE_SECOND           79

new w0[MAX_PLAYERS];	//heartnarmor
new REPLACE_ToAddID[MAX_PLAYERS]; // replace with dialogs

#define PRESSED(%0) 	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define RELEASED(%0) 	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

#define ATTACKER_CHANGES_X      19.4
#define ATTACKER_CHANGES_Y      0
#define DEFENDER_CHANGES_X      -79
#define DEFENDER_CHANGES_Y      0

#if MYSQL == 1
new SQL:sqlconnection;
#endif
new DB:sqliteconnection;

#if INTROTEXT == 1
//-------- Server Join Textdraw ---------//

new Text: introBg1;
new Text: introBg2;
new Text: introBg3;
new Text: AttackerText;
new Text: DefenderText;
new Text: RefereeText;
new Text: AutoAssignText;
new Text: introAutoBG;
new Text: introRefBG;
new Text: introName;
new Text: introLogo;
new Text: introRules;
new Text: introRules2;
new Text: introDef;
new Text: introAtt;
new Text: introSelect;

//----------------------------------------
#endif

// - Global Textdraws -

new Text: AntiLagTD; // Antilag
new Text: WebText;
new Text: ACText;
new Text: AnnTD;
new Text: PauseTD;
new Text: RoundStats; // Shows team names, players alive and team hp.
new Text: RoundsPlayed; // Shows how many rounds are played out of for example 9 rounds. (Rounds 3/9)
new Text: TeamScoreText; // Shows team name and score (e.g. TeK 3 CZE 3)
new Text: WeaponLimitTD;
new Text: LockServerTD;
new Text: CloseText;
new Text: WarModeText;
new Text: SettingBox;
new Text: AttHpLose;
new Text: DefHpLose;
new Text: TeamHpLose[2];
new Text: EN_AttackerBox;
new Text: EN_DefenderBox;
new Text: AttackerTeam[4];
new Text: DefenderTeam[4];
/* //ROUND_REMOVED
new Text: EN_TAttackerKills;
new Text: EN_TAttackerDeaths;
new Text: EN_TAttackerRoundsPlayed;
new Text: EN_TAttackerAccuracy;
new Text: EN_TAttackerDamage;
new Text: EN_TDefenderKills;
new Text: EN_TDefenderDeaths;
new Text: EN_TDefenderRoundsPlayed;
new Text: EN_TDefenderAccuracy;
new Text: EN_TDefenderDamage;*/
new Text: EN_CheckPoint;
new Text: Ready[2];
new GotHit[MAX_PLAYERS];
//new Text: LOGO;

//new Text: AttackersAlive[15];
//new Text: DefendersAlive[15];

new thetrain, traintrailer1, traintrailer2;

#if SKINICONS == 1
new Text: A1;
new Text: A2;
new Text: A3;
new Text: A4;
new Text: A5;
new Text: A6;
new Text: A7;
new Text: A8;
new Text: A9;
new Text: A10;

new Text: D1;
new Text: D2;
new Text: D3;
new Text: D4;
new Text: D5;
new Text: D6;
new Text: D7;
new Text: D8;
new Text: D9;
new Text: D10;
#endif

// - Round Textdraws - added by Niko_boy // -

new Text:centerblackBG;
new Text:fullBox3D;
new Text:leftRedBG;
new Text:rightBlueBG;
new Text:timerCenterTD;
new Text:leftTeamData;
new Text:rightTeamData;
new Text:centerTeamNames;

//

// - Result Textdraws - added by Niko_boy // -

	new //designer:
		Text: leftBG		, 	Text: rightBG     	,
		Text: leftUpBG		, 	Text: rightUpBG 	,
		Text: leftHeader	,	Text: rightHeader	,
		Text: leftULine		, 	Text: rightULine	,
		Text: leftUpText	, 	Text: rightUpText	,
		Text: leftText		, 	Text: rightText		,
	 	Text: leftTop		,	//Text: rightTop      ,
	 	Text: lowerBG		,	Text: lowerULine	,
	 	Text: topTextScore  , 	Text: teamWonHow	,
	 	//contents:
        Text: leftNames		, 	Text: rightNames	,
        Text: leftKills		, 	Text: rightKills	,
        Text: leftHP		, 	Text: rightHP		,
        Text: leftDeaths    ,   Text: rightDeaths   ,
        Text: leftDmg		, 	Text: rightDmg		,
        Text: leftAcc		, 	Text: rightAcc		,
        Text: leftPlayed	, 	Text: rightPlayed

	;// 17 + 12 tds

	// -EndRound TextDraw
/*  //ROUND_REMOVED
new Text: EN_WhoWon;
new Text: EN_AttackerTitle;
new Text: EN_AttackerTitleBox;
new Text: EN_DefenderTitle;
new Text: EN_DefenderTitleBox;
new Text: EN_AttackerList;
new Text: EN_AttackerKills;
new Text: EN_AttackerHP;
new Text: EN_AttackerAccuracy;
new Text: EN_AttackerDamage;
new Text: EN_DefenderList;
new Text: EN_DefenderKills;
new Text: EN_DefenderHP;
new Text: EN_DefenderAccuracy;
new Text: EN_DefenderDamage;
*/
// - Player Textdraws -


new PlayerText: FPSPingPacket; // Ping, FPS and Packetloss textdraw on top right corner.
new PlayerText: RoundKillDmgTDmg; // Shows Kills, Damage and Total Damage on the left hand side of the radar.
new PlayerText: DoingDamage[3]; // Shows when player hit someone.
new PlayerText: GettingDamaged[3]; // Shows when someone hit you.
new PlayerText: RoundText; // Shows round start time.
new PlayerText: WhoSpec[2]; // Shows who is spectating you.
new PlayerText: SpecText[4]; // Shows spectated player info.
new PlayerText: AreaCheckTD; // Show countdown textdraw when the player is out of arena.
new PlayerText: AreaCheckBG;
new PlayerText: DeathText[2];
new PlayerText: TD_RoundSpec;
new PlayerText: ArmourTextDraw;
new PlayerText: HPTextDraw_TD;
new PlayerText: BaseID_VS;
new PlayerText: BITCH;
new PlayerText: TargetInfoTD;
new PlayerText: DeathMessage[2]; new DeathMessageStr[MAX_PLAYERS][64];
new PlayerBar: HealthBar, PlayerBar:ArmourBar;


new ThemeChange_listitem[MAX_PLAYERS];

#if ENABLED_TDM == 1
new TeamTDMKills[MAX_TEAMS];
new LowPlayers[MAX_TEAMS];
#define DEFAULT_TDM_TIME 15 // in mins , because TDM is meant to be played for long time ;)
#endif
new MaxTDMKills = 10;

// object sign var's
new g_oSignText[4];

// - Player Variables -

new Float:PlayerHealth[MAX_PLAYERS], Float:PlayerArmour[MAX_PLAYERS];

enum PlayerVariables {
	#if ENABLED_TDM == 1
	bool: InTDM,
	#endif
	Name[MAX_PLAYER_NAME],
	NameWithoutTag[MAX_PLAYER_NAME],
	bool:Logged,
	bool:IgnoreSpawn,
	bool:InDM,
	bool:InDuel,
	bool:Syncing,
	bool:Playing,
	bool:WasInCP,
	bool:IsKicked,
	bool:Spectating,
	bool:BeingSpeced,
	bool:CalledByPlayer,
	bool:WasInBase,
	bool:TextDrawOnScreen,
	bool:Spawned,
	bool:IsAFK,
	bool:IsFrozen,
	bool:IsGettingKicked,
	bool:AskingForHelp,
	AskingForHelpTimer,
	bool:Mute,
	bool:ToAddInRound,
	bool:DontPause,
	bool:Readied,
	bool:VoteForReset,
	bool:VoteToUnpause,
	bool:AntiLag,
	bool:InHeadShot,
	bool:TextPos,
	bool:ShowSpecs,
	bool:blockedall,
	bool:FakePacketRenovation,
	bool:HasVoted,
	bool:PROT_HPAutoRefilled,
	RadioID,
	NetCheck,
	FPSCheck,
	PLCheck,
	PingCheck,
	challengerid,
    duelweap1,
    duelweap2,
	DuelsWon,
	DuelsLost,
	LastMsgr,
	blockedid,
	Style,
	FightStyle,

	#if GTA_V_INTRO == 1

	Float: Camera_PosX,
	Float: Camera_PosY,
    Float: Camera_PosZ,

	#endif

	#if STATS == 1 && MYSQL == 1
	vKills,
	vDeaths,
	vDamage,
	vRPlayed,
	vRWon,
	vRLost,
	vPlayed,
	vWon,
	vLost,
	dKills,
	dDeaths,
	dDamage,
	dRPlayed,
	dRWon,
	dRLost,
	dPlayed,
	dWon,
	dLost,
	#endif
	VoteToAddID,
	VoteToNetCheck,
	IsSpectatingID,
	Level,
	ChatChannel,
	Weather,
	Time,
	Team,
	TeamBeforeDuel,
	TempTeam,
	DLlast,
	FPS,
	Float:pHealth,
	Float:pArmour,
	DMReadd,
	RoundKills,
	RoundDeaths,
	Float:RoundDamage,
	TotalKills,
	TotalDeaths,
	Float:TotalDamage,
	WeaponPicked,
	OutOfArena,
	PacketKick,
	PingKick,
	FPSKick,
	ACKick,
	DeathIcon,
	LastVehicle,
	TimesSpawned,
	VWorld,
	lastChat,
	LastAskLeader,
	RoundPlayed,
	shotsHit,
	Float:Accuracy,
	Float:TotalAccuracy,
	TotalshotsHit,
	TotalBulletsFired,
	RconTry,
	PauseCount,
	Votekick,
	SpectatingRound,
	SpectatingType,
	HitBy,
	HitWith,
	HitSound,
	GetHitSound,
	iLastVehicle,
	LastEditWepLimit,
	LastEditWeaponSlot,
	WeaponStat[55],
	PlayerTypeByWeapon[32],
	bool:ToGiveParachute,
	bool:OnGunmenu,
	bool:SetToReconnect,
	ReaddOrAddTickCount

}
new Player[MAX_PLAYERS][PlayerVariables];

enum ShortcutsStruct
{
	Shortcut1[50],
	Shortcut2[50],
	Shortcut3[50],
	Shortcut4[50]
}

new PlayerShortcut[MAX_PLAYERS][ShortcutsStruct];
new EditingShortcutOf[MAX_PLAYERS];
new LastClickedPlayer[MAX_PLAYERS];

new TargetInfoTimer[MAX_PLAYERS];

// bool:TargetInfoShown[MAX_PLAYERS];

enum save_vars
{
	pName[24],
	pNameWithoutTag[24],
	Float:gHealth,
	Float:gArmour,
	pTeam,
	pInterior,
	pVWorld,
	Float:pCoords[4],
	Float:RDamage,
	Float:TDamage,
	RKills,
	TKills,
	RDeaths,
	TDeaths,
	WeaponsPicked,
	RoundID,
	TPlayed,
	iAccuracy,
	tshotsHit,
	tBulletsShot,
	bool:WasCrashedInStart,
	bool:ToBeAdded,
	bool:CheckScore,
	bool:PauseWait,
	WeaponStat[55],
	pVehicleID,
	pSeatID,
	HadParachute
}
new SaveVariables[SAVE_SLOTS][save_vars];

enum rankingEnum {
    player_Score,
    player_Team,
    player_Kills,
    player_Deaths,
    player_TPlayed,
    player_HP,
    player_Acc,
    player_ID
}

// - Base Variables -

new Float:BAttackerSpawn[MAX_BASES][3];
new Float:BDefenderSpawn[MAX_BASES][3];
new Float:BCPSpawn[MAX_BASES][3];
new BInterior[MAX_BASES];
new BName[MAX_BASES][128];
new bool:BExist[MAX_BASES] = false;
new TotalBases;
new VoteCount[MAX_BASES] = 0;


// - Arena Variables -

new Float:AAttackerSpawn[MAX_ARENAS][3];
new Float:ADefenderSpawn[MAX_ARENAS][3];
new Float:ACPSpawn[MAX_ARENAS][3];
new AInterior[MAX_ARENAS];
new AName[MAX_ARENAS][128];
new Float:AMax[MAX_ARENAS][2];
new Float:AMin[MAX_ARENAS][2];
new bool:AExist[MAX_ARENAS] = false;
new TotalArenas;

new ArenaWeapons[2][MAX_PLAYERS];
new MenuID[MAX_PLAYERS];

// - DM Variables -

new Float:DMSpawn[MAX_DMS][4];
new DMInterior[MAX_DMS];
new DMWeapons[MAX_DMS][3];
new bool:DMExist[MAX_DMS] = false;

// - AntiLag Variables -


// - Duel Variables -

new Float:DuelASpawn[MAX_DUELS][4];
new Float:DuelBSpawn[MAX_DUELS][4];
new Float:DuelCamera[MAX_DUELS][3];
new DuelInterior[MAX_DUELS];
new DuelWeapons[MAX_DUELS][2];
new bool:DuelExists[MAX_DUELS] = false;
new DuelName[MAX_DUELS][128];
new Float:DuelMax[MAX_DUELS][2];
new Float:DuelMin[MAX_DUELS][2];
new TotalDuels;
//new DuelIDForName;
//new CreateDuelString[128];

new bool:OneOnOne = false;

new Float:ZMax[2];
new Float:ZMin[2];

enum round_record
{
    round__ID,
	round__type, //1 base | 2 arena
	bool: round__completed
}
new MatchRoundsRecord[ 101 ][ round_record ];
new MatchRoundsStarted = 0;


// - Config Variables -

new MainWeather; // Server start up weather
new MainTime; // Server start up time
new ConfigCPTime;
new ConfigRoundTime;
new Float:MainSpawn[4];
new MainInterior;
new TotalRounds;
new WeatherLimit = 50;
new TimeLimit = 50;
new WebString[128];
new VotingTime = 20;

new link[128];
new link1[128];
new link2[128];
new link3[128];
new link4[128];
new link5[128];
new link6[128];
new link7[128];
new link8[128];
new link9[128];
new link10[128];
new bool:TeamHPDamage = true; //If "true", hides the spectate information and enables the textdraws on the left and right hand sid of the screen for player HP and Damage in round.
new bool:ToggleTargetInfo = false; //Shows target player information.
new bool:ServerAntiLag = false; //Enalbe/Disable AntiLag in the whole script.
new bool:GiveKnife = true; // Auto-gives knives to players in round
new bool:ShowBodyLabels = true; // Enable/Disable show 3d text labels on body (ping fps etc)
new bool:VoteRound = true; // Enable/Disable /vote command.
new bool:ChangeName = true; // Enable/Disable /changename command.
new bool:VoteInProgress = false;

//1=Hardcore NL, 2=ChartHits, 3=MUSIK.MAIN, 4=idobi, 5=DEFJAY US
//6=181.FM Hiphop, 7=Indian Radio HSL, 8=BlackBeats.FM, 9=TechnoBase.FM, 10=HouseTime.FM


new Float:RoundHP = 100.0, Float:RoundAR = 100.0;

new Skin[MAX_TEAMS];
new TextColor[MAX_TEAMS][10];
new TDC[MAX_TEAMS][7];
new bool:TeamHasLeader[MAX_TEAMS];
new TeamLeader[MAX_TEAMS];


new GunMenuWeapons[10][2];

new OnlineInChannel[MAX_CHANNELS];

// - Global Strings -

new WeaponStatsStr[3000];
new ChatString[128];
new ServerPass[128];
new hostname[64];
new lagcompmode;
new ScoreString[4][256];
new TotalStr[2500];
//new Exception[24];

new AttList[256];
new AttKills[256];
new AttDeaths[256];
new AttPlayed[256];
new AttAcc[256];
new AttDamage[256];

new DefList[256];
new DefKills[256];
new DefDeaths[256];
new DefPlayed[256];
new DefAcc[256];
new DefDamage[256];

new AKAString[1024];
new HelpString[3000];


// - boolen variables

new bool:AllowStartBase = true;
new bool:PreMatchResultsShowing = false;
new bool:PlayerOnInterface[MAX_PLAYERS];
new bool:AllMuted = false;
#if ANTICHEAT == 1
	new bool:AntiCheat = false;
	new ACTimer;

#endif
#if ANTICHEAT == 1
new ESLAC;
#endif
#if SKINICONS == 1
new bool:ShowIcons = true;
#endif
new bool:AutoBal = true;
new bool:AntiSpam = true;
new bool:ShortCuts = false;
new bool:AutoPause = true;
new bool:LobbyGuns = true;
new bool:DidSomeoneTimeout = false;
new bool:DatabaseLoading = false;
new AnnTimer;


// - Numerical Variables

new ViewTimer;
new PauseCountdown;
new CurrentCPTime;
new HighestID;


new IconTimer[MAX_PLAYERS];
new AttHpTimer;
new DefHpTimer;

// - Round Variables

new bool:BaseStarted 	= false;
new bool:ArenaStarted 	= false;
new bool:RoundPaused 	= false;
new bool:RoundUnpausing = false;
new bool:WarMode 		= false;
new bool:PausePressed 	= false;
new bool:ServerLocked 	= false;
new bool:PermLocked 	= false;
#if ANTICHEAT == 1
new bool:PermAC 		= false;
#endif
//new bool:AttWin 		= true;
new bool:MatchEnded 	= false;
new bool:FallProtection = false;
//new bool:Trolling 	= false;

new Current = -1;
new WeaponLimit[10];
new TimesPicked[MAX_TEAMS][10];
new PlayersAlive[MAX_TEAMS];
new bool:TeamHelp[MAX_TEAMS];
new Float:TeamHP[MAX_TEAMS];
new TeamName[MAX_TEAMS][24];
new TeamScore[MAX_TEAMS];
new Float:TempDamage[MAX_TEAMS];
new ServerLastPlayed;
new ServerLastPlayedType;

new PlayersInCP;
new RoundMints;
new RoundSeconds;
new GameType;
new CurrentRound;
new Float:VehiclePos[MAX_PLAYERS][3];
new Float:VehicleVelc[MAX_VEHICLES][3];
new CPZone;
new ArenaZone;
new ElapsedTime;

new RecentBase[MAX_BASES];
new RecentArena[MAX_ARENAS];
new ArenasPlayed;
new BasesPlayed;

new Float:Max_Packetloss;
new Max_Ping;
new Min_FPS;

new UnpauseTimer;


// - OnPlayerTakeDamage Variables


new gLastHit[6][MAX_PLAYERS];
new TakeDmgCD[6][MAX_PLAYERS];
//new Float:HPLost[MAX_PLAYERS][MAX_PLAYERS];
new Float:DamageDone[6][MAX_PLAYERS];
new DmgLabelStr[3][MAX_PLAYERS][128];




// - 3D Textdraws

new Text3D:PingFPS[MAX_PLAYERS];
new Text3D:DmgLabel[MAX_PLAYERS];
//new Text3D:Vehicle3DText[MAX_VEHICLES];


// - ESL Variables

new bool:ESLMode = true;
new VoteKickedPlayer = -1;
new VotesForVotekick = 0;
new TimedOutPlayers = 0;
new ESLPauseTime = 120;
new MaxESLPlayers;

new ReadyText[2][256];
new EslString[1500];
#if STATS == 1 && MYSQL == 1
new StatsString[5000];
#endif
// - ESL STATS -
#if STATS == 1 && MYSQL == 1

new VNames[MAX_STATS][MAX_PLAYER_NAME];
new VKills[MAX_STATS];
new VDeaths[MAX_STATS];
new VDamage[MAX_STATS];
new VRoundsPlayed[MAX_STATS];
new VRoundsWon[MAX_STATS];
new VRoundsLost[MAX_STATS];
new VMatchesPlayed[MAX_STATS];
new VMatchesWon[MAX_STATS];
new VMatchesLost[MAX_STATS];

new DNames[MAX_STATS][MAX_PLAYER_NAME];
new DKills[MAX_STATS];
new DDeaths[MAX_STATS];
new DDamage[MAX_STATS];
new DRoundsPlayed[MAX_STATS];
new DRoundsWon[MAX_STATS];
new DRoundsLost[MAX_STATS];
new DuelsPlayed[MAX_STATS];
new DuelsWon[MAX_STATS];
new DuelsLost[MAX_STATS];

#endif

new WeaponNames[55][] =
{
        {"Punch"},{"Brass Knuckles"},{"Golf Club"},{"Nite Stick"},{"Knife"},{"Baseball Bat"},{"Shovel"},{"Pool Cue"},{"Katana"},{"Chainsaw"},{"Purple Dildo"},
        {"Smal White Vibrator"},{"Large White Vibrator"},{"Silver Vibrator"},{"Flowers"},{"Cane"},{"Grenade"},{"Tear Gas"},{"Molotov Cocktail"},
        {""},{""},{""}, // Empty spots for ID 19-20-21 (invalid weapon id's)
        {"9mm"},{"Silenced 9mm"},{"Deagle"},{"Shotgun"},{"Sawn-off"},{"Combat"},{"Micro SMG"},{"MP5"},{"AK-47"},{"M4"},{"Tec9"},
        {"Rifle"},{"Sniper"},{"Rocket"},{"HS Rocket"},{"Flamethrower"},{"Minigun"},{"Satchel Charge"},{"Detonator"},
        {"Spraycan"},{"Fire Extinguisher"},{"Camera"},{"Nightvision Goggles"},{"Thermal Goggles"},{"Parachute"}, {"Fake Pistol"},{""}, {"Vehicle"}, {"Helicopter Blades"},
		{"Explosion"}, {""}, {"Suicide"}, {"Collision"}
};


new aVehicleNames[212][] =
{
        {"Landstalker"},    {"Bravura"},            {"Buffalo"},            {"Linerunner"},     {"Perrenial"},      {"Sentinel"},       {"Dumper"},
        {"Firetruck"},      {"Trashmaster"},        {"Stretch"},            {"Manana"},         {"Infernus"},       {"Voodoo"},         {"Pony"},           {"Mule"},
        {"Cheetah"},        {"Ambulance"},          {"Leviathan"},          {"Moonbeam"},       {"Esperanto"},      {"Taxi"},           {"Washington"},
        {"Bobcat"},         {"Mr Whoopee"},         {"BF Injection"},       {"Hunter"},         {"Premier"},        {"Enforcer"},       {"Securicar"},
        {"Banshee"},        {"Predator"},           {"Bus"},{"Rhino"},      {"Barracks"},       {"Hotknife"},       {"Artic Trailer 1"},      {"Previon"},
        {"Coach"},          {"Cabbie"},             {"Stallion"},           {"Rumpo"},          {"RC Bandit"},      {"Romero"},         {"Packer"},         {"Monster"},
        {"Admiral"},        {"Squalo"},             {"Seasparrow"},         {"Pizzaboy"},       {"Tram"},           {"Artic Trailer 2"},      {"Turismo"},
        {"Speeder"},        {"Reefer"},             {"Tropic"},             {"Flatbed"},        {"Yankee"},         {"Caddy"},          {"Solair"},         {"Berkley's RC Van"},
        {"Skimmer"},        {"PCJ-6_0_0"},          {"Faggio"},             {"Freeway"},        {"RC Baron"},       {"RC Raider"},      {"Glendale"},       {"Oceanic"},
        {"Sanchez"},        {"Sparrow"},            {"Patriot"},            {"Quad"},           {"Coastguard"},     {"Dinghy"},         {"Hermes"},         {"Sabre"},
        {"Rustler"},        {"ZR-3_5_0"},           {"Walton"},             {"Regina"},         {"Comet"},{"BMX"},  {"Burrito"},        {"Camper"},         {"Marquis"},
        {"Baggage"},        {"Dozer"},              {"Maverick"},           {"News Chopper"},   {"Rancher"},        {"FBI Rancher"},    {"Virgo"},          {"Greenwood"},
        {"Jetmax"},         {"Hotring"},            {"Sandking"},           {"Blista Compact"}, {"Police Maverick"},{"Boxville"},       {"Benson"},
        {"Mesa"},           {"RC Goblin"},          {"Hotring Racer A"},    {"Hotring Racer B"},{"Bloodring Banger"},{"Rancher"},
        {"Super GT"},       {"Elegant"},            {"Journey"},            {"Bike"},           {"Mountain Bike"},  {"Beagle"},         {"Cropdust"},       {"Stunt"},
        {"Tanker"},         {"Roadtrain"},          {"Nebula"},             {"Majestic"},       {"Buccaneer"},      {"Shamal"},         {"Hydra"},          {"FCR-900"},
        {"NRG-500"},        {"HPV1000"},            {"Cement Truck"},       {"Tow Truck"},      {"Fortune"},        {"Cadrona"},        {"FBI Truck"},
        {"Willard"},        {"Forklift"},           {"Tractor"},            {"Combine"},        {"Feltzer"},        {"Remington"},      {"Slamvan"},
        {"Blade"},          {"Freight"},            {"Streak"},             {"Vortex"},         {"Vincent"},        {"Bullet"},         {"Clover"},         {"Sadler"},
        {"Firetruck LA"},   {"Hustler"},            {"Intruder"},           {"Primo"},          {"Cargobob"},       {"Tampa"},          {"Sunrise"},        {"Merit"},
        {"Utility"},        {"Nevada"},             {"Yosemite"},           {"Windsor"},        {"Monster A"},      {"Monster B"},      {"Uranus"},         {"Jester"},
        {"Sultan"},         {"Stratum"},            {"Elegy"},              {"Raindance"},      {"RC Tiger"},       {"Flash"},          {"Tahoma"},         {"Savanna"},
        {"Bandito"},        {"Freight Flat"},       {"Streak Carriage"},    {"Kart"},           {"Mower"},          {"Duneride"},       {"Sweeper"},
        {"Broadway"},       {"Tornado"},            {"AT-400"},             {"DFT-30"},         {"Huntley"},        {"Stafford"},       {"BF-400"},         {"Newsvan"},
        {"Tug"},            {"Chemical Trailer"},          {"Emperor"},            {"Wayfarer"},       {"Euros"},          {"Hotdog"},         {"Club"},           {"Freight Carriage"},
        {"Artic Trailer 3"},      {"Andromada"},          {"Dodo"},               {"RC Cam"},         {"Launch"},         {"Police Car LSPD"},{"Police Car SFPD"},
        {"Police _LVPD"},   {"Police Ranger"},      {"Picador"},            {"SWAT. Van"},      {"Alpha"},          {"Phoenix"},        {"Glendale"},
        {"Sadler"},         {"Luggage Trailer A"},  {"Luggage Trailer B"},  {"Stair Trailer"},{"Boxville"},         {"Farm Plow"},
        {"Utility Trailer"}
};

new const Float:AntiLagSpawn[6][4] = {
	{-1131.4969,1041.7166,1345.7367,272.7359},
	{-1110.4144,1084.2610,1341.9084,268.4978},
	{-1074.6858,1044.4030,1344.1488,353.0150},
	{-996.6344,1035.2316,1341.9446,69.4899},
	{-995.8419,1088.6527,1342.1597,137.4838},
	{-972.4203,1076.5132,1345.0020,85.2820}
};

new ValidSounds[] =
{
    1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
    1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041,
    1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
    1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083,
    1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104,
    1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125,
    1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146,
    1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167,
    1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188,
    1189, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819,
    1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
    2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031,
    2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052,
    2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073,
    2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094,
    2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115,
    2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136,
    2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157,
    2158, 2159, 2160, 2161, 2162, 2163, 2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212, 2213, 2214,
    2400, 2401, 2402, 2403, 2404, 2600, 2601, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2800, 2801, 2802, 2803, 2804, 2805, 2806,
    2807, 2808, 2809, 2810, 2811, 2812, 2813, 3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013,
    3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034,
    3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051, 3052, 3053, 3054, 3055,
    3056, 3057, 3200, 3201, 3400, 3401, 3600, 3800, 4000, 4001, 4200, 4201, 4202, 4203, 4400, 4600, 4601, 4602, 4603, 4604, 4800,
    4801, 4802, 4803, 4804, 4805, 4806, 4807, 5000, 5001, 5002, 5003, 5004, 5005, 5006, 5007, 5008, 5009, 5010, 5011, 5012, 5013,
    5014, 5200, 5201, 5202, 5203, 5204, 5205, 5206, 5400, 5401, 5402, 5403, 5404, 5405, 5406, 5407, 5408, 5409, 5410, 5411, 5412,
    5413, 5414, 5415, 5416, 5417, 5418, 5419, 5420, 5421, 5422, 5423, 5424, 5425, 5426, 5427, 5428, 5429, 5430, 5431, 5432, 5433,
    5434, 5435, 5436, 5437, 5438, 5439, 5440, 5441, 5442, 5443, 5444, 5445, 5446, 5447, 5448, 5449, 5450, 5451, 5452, 5453, 5454,
    5455, 5456, 5457, 5458, 5459, 5460, 5461, 5462, 5463, 5464, 5600, 5601, 5602, 5800, 5801, 5802, 5803, 5804, 5805, 5806, 5807,
    5808, 5809, 5810, 5811, 5812, 5813, 5814, 5815, 5816, 5817, 5818, 5819, 5820, 5821, 5822, 5823, 5824, 5825, 5826, 5827, 5828,
    5829, 5830, 5831, 5832, 5833, 5834, 5835, 5836, 5837, 5838, 5839, 5840, 5841, 5842, 5843, 5844, 5845, 5846, 5847, 5848, 5849,
    5850, 5851, 5852, 5853, 5854, 5855, 5856, 6000, 6001, 6002, 6003, 6200, 6201, 6202, 6203, 6204, 6205, 6400, 6401, 6402, 6600,
    6601, 6602, 6603, 6800, 6801, 6802, 7000, 7001, 7002, 7003, 7004, 7005, 7006, 7007, 7008, 7009, 7010, 7011, 7012, 7013, 7014,
    7015, 7016, 7017, 7018, 7019, 7020, 7021, 7022, 7023, 7024, 7025, 7026, 7027, 7028, 7029, 7030, 7031, 7032, 7033, 7034, 7035,
    7036, 7037, 7038, 7039, 7040, 7041, 7042, 7043, 7044, 7045, 7046, 7047, 7048, 7049, 7050, 7051, 7052, 7053, 7054, 7055, 7056,
    7057, 7058, 7059, 7060, 7061, 7062, 7063, 7064, 7065, 7066, 7200, 7201, 7202, 7203, 7204, 7205, 7206, 7207, 7208, 7209, 7210,
    7211, 7212, 7213, 7214, 7215, 7216, 7217, 7218, 7219, 7220, 7221, 7222, 7223, 7224, 7225, 7226, 7227, 7228, 7229, 7230, 7231,
    7232, 7233, 7234, 7235, 7236, 7237, 7238, 7239, 7400, 7401, 7402, 7403, 7404, 7405, 7406, 7407, 7408, 7409, 7410, 7411, 7412,
    7413, 7414, 7415, 7416, 7417, 7418, 7419, 7420, 7421, 7600, 7601, 7602, 7603, 7604, 7605, 7606, 7607, 7608, 7609, 7610, 7611,
    7612, 7800, 7801, 7802, 7803, 7804, 7805, 7806, 7807, 7808, 7809, 7810, 7811, 7812, 7813, 7814, 7815, 7816, 7817, 7818, 7819,
    7820, 7821, 7822, 7823, 7824, 7825, 7826, 7827, 7828, 7829, 7830, 7831, 7832, 7833, 7834, 7835, 7836, 7837, 7838, 7839, 7840,
    7841, 7842, 7843, 7844, 7845, 7846, 7847, 7848, 7849, 7850, 7851, 7852, 7853, 7854, 7855, 7856, 7857, 7858, 7859, 7860, 7861,
    7862, 7863, 7864, 7865, 7866, 7867, 7868, 7869, 7870, 7871, 7872, 7873, 7874, 7875, 7876, 7877, 7878, 7879, 7880, 7881, 7882,
    7883, 7884, 7885, 7886, 7887, 7888, 7889, 7890, 7891, 7892, 7893, 7894, 7895, 7896, 7897, 7898, 7899, 7900, 7901, 7902, 8000,
    8001, 8002, 8003, 8004, 8005, 8006, 8007, 8008, 8009, 8010, 8011, 8012, 8013, 8014, 8015, 8016, 8017, 8200, 8201, 8202, 8203,
    8204, 8205, 8206, 8207, 8208, 8209, 8210, 8211, 8212, 8213, 8214, 8215, 8216, 8217, 8218, 8219, 8220, 8221, 8222, 8223, 8224,
    8225, 8226, 8227, 8228, 8229, 8230, 8231, 8232, 8233, 8234, 8235, 8236, 8237, 8238, 8239, 8240, 8241, 8242, 8243, 8244, 8245,
    8246, 8247, 8248, 8249, 8250, 8251, 8252, 8253, 8254, 8255, 8256, 8257, 8258, 8259, 8260, 8261, 8262, 8263, 8264, 8265, 8266,
    8267, 8268, 8269, 8270, 8271, 8272, 8273, 8274, 8275, 8276, 8277, 8278, 8400, 8401, 8402, 8403, 8404, 8405, 8406, 8407, 8408,
    8409, 8410, 8411, 8412, 8600, 8601, 8602, 8603, 8604, 8605, 8606, 8607, 8608, 8609, 8610, 8611, 8612, 8613, 8614, 8615, 8616,
    8617, 8618, 8619, 8620, 8621, 8622, 8623, 8624, 8625, 8626, 8627, 8628, 8629, 8630, 8631, 8632, 8633, 8634, 8635, 8636, 8637,
    8638, 8639, 8640, 8641, 8642, 8643, 8644, 8645, 8646, 8647, 8648, 8649, 8650, 8651, 8652, 8653, 8654, 8655, 8656, 8657, 8658,
    8659, 8660, 8661, 8662, 8663, 8664, 8665, 8666, 8667, 8668, 8669, 8670, 8671, 8672, 8673, 8674, 8675, 8676, 8677, 8678, 8679,
    8680, 8681, 8682, 8683, 8684, 8685, 8686, 8687, 8688, 8689, 8690, 8691, 8692, 8693, 8694, 8695, 8696, 8697, 8698, 8699, 8700,
    8701, 8702, 8703, 8704, 8705, 8706, 8707, 8708, 8709, 8710, 8711, 8712, 8713, 8714, 8715, 8716, 8717, 8718, 8719, 8720, 8721,
    8722, 8723, 8724, 8725, 8726, 8727, 8728, 8729, 8730, 8731, 8732, 8733, 8734, 8735, 8736, 8737, 8738, 8800, 8801, 8802, 8803,
    8804, 8805, 8806, 8807, 8808, 8809, 8810, 8811, 8812, 8813, 8814, 8815, 8816, 8817, 8818, 8819, 8820, 8821, 8822, 8823, 8824,
    8825, 8826, 8827, 8828, 8829, 8830, 8831, 8832, 8833, 8834, 8835, 8836, 8837, 8838, 8839, 8840, 9000, 9001, 9002, 9003, 9004,
    9005, 9006, 9007, 9008, 9009, 9010, 9011, 9012, 9013, 9014, 9015, 9016, 9017, 9018, 9019, 9020, 9021, 9022, 9023, 9024, 9025,
    9026, 9027, 9028, 9029, 9030, 9031, 9200, 9201, 9400, 9401, 9402, 9403, 9404, 9405, 9406, 9407, 9408, 9409, 9410, 9411, 9412,
    9413, 9414, 9415, 9416, 9417, 9418, 9419, 9420, 9421, 9422, 9423, 9424, 9425, 9426, 9427, 9428, 9429, 9430, 9431, 9432, 9433,
    9434, 9435, 9436, 9437, 9438, 9439, 9440, 9441, 9442, 9443, 9444, 9445, 9446, 9447, 9448, 9449, 9450, 9451, 9600, 9601, 9602,
    9603, 9604, 9605, 9606, 9607, 9608, 9609, 9610, 9611, 9612, 9613, 9614, 9615, 9616, 9617, 9618, 9619, 9620, 9621, 9622, 9623,
    9624, 9625, 9626, 9627, 9628, 9629, 9630, 9631, 9632, 9633, 9634, 9635, 9636, 9637, 9638, 9639, 9640, 9641, 9642, 9643, 9644,
    9645, 9646, 9647, 9648, 9649, 9650, 9651, 9652, 9653, 9654, 9655, 9656, 9657, 9658, 9659, 9660, 9661, 9662, 9663, 9664, 9665,
    9666, 9667, 9668, 9669, 9670, 9671, 9672, 9673, 9674, 9675, 9676, 9800, 9801, 9802, 9803, 9804, 9805, 9806, 9807, 9808, 9809,
    9810, 9811, 9812, 9813, 9814, 9815, 9816, 9817, 9818, 9819, 9820, 9821, 9822, 9823, 9824, 9825, 9826, 9827, 9828, 9829, 9830,
    9831, 9832, 9833, 9834, 9835, 9836, 9837, 9838, 9839, 9840, 9841, 9842, 9843, 9844, 9845, 9846, 9847, 9848, 9849, 9850, 9851,
    9852, 9853, 9854, 9855, 9856, 9857, 9858, 9859, 9860, 9861, 9862, 9863, 9864, 9865, 9866, 9867, 9868, 9869, 9870, 9871, 9872,
    9873, 9874, 9875, 9876, 9877, 9878, 9879, 9880, 9881, 9882, 9883, 9884, 9885, 9886, 9887, 9888, 9889, 9890, 9891, 9892, 9893,
    9894, 9895, 9896, 9897, 9898, 9899, 9900, 9901, 9902, 9903, 9904, 9905, 9906, 9907, 9908, 9909, 9910, 9911, 9912, 9913, 9914,
    10000, 10001, 10002, 10003, 10004, 10005, 10006, 10007, 10008, 10009, 10010, 10011, 10012, 10013, 10014, 10015, 10200, 10201,
    10202, 10203, 10204, 10205, 10206, 10207, 10208, 10209, 10210, 10211, 10212, 10213, 10214, 10400, 10401, 10402, 10403, 10404,
    10405, 10406, 10407, 10408, 10409, 10600, 10601, 10602, 10603, 10604, 10605, 10606, 10607, 10608, 10609, 10610, 10611, 10612,
    10613, 10614, 10615, 10616, 10617, 10618, 10619, 10620, 10621, 10622, 10623, 10624, 10625, 10626, 10627, 10628, 10629, 10630,
    10631, 10632, 10633, 10634, 10635, 10636, 10637, 10638, 10639, 10640, 10641, 10642, 10643, 10644, 10645, 10646, 10647, 10648,
    10649, 10650, 10651, 10652, 10653, 10654, 10655, 10656, 10657, 10658, 10659, 10660, 10661, 10662, 10663, 10800, 10801, 10802,
    10803, 10804, 10805, 10806, 10807, 10808, 10809, 10810, 10811, 10812, 10813, 10814, 10815, 10816, 10817, 10818, 10819, 10820,
    10821, 10822, 10823, 10824, 10825, 10826, 10827, 10828, 10829, 10830, 10831, 10832, 11000, 11001, 11002, 11003, 11004, 11005,
    11006, 11007, 11008, 11009, 11010, 11200, 11400, 11401, 11402, 11403, 11404, 11405, 11406, 11407, 11408, 11409, 11410, 11411,
    11412, 11413, 11414, 11415, 11416, 11417, 11418, 11419, 11420, 11421, 11422, 11423, 11424, 11425, 11426, 11427, 11428, 11429,
    11430, 11431, 11432, 11433, 11434, 11435, 11436, 11437, 11438, 11439, 11440, 11441, 11442, 11443, 11444, 11445, 11446, 11447,
    11448, 11449, 11450, 11451, 11452, 11453, 11454, 11455, 11600, 11601, 11602, 11603, 11604, 11605, 11606, 11607, 11608, 11609,
    11610, 11611, 11612, 11613, 11614, 11615, 11616, 11617, 11618, 11619, 11620, 11621, 11622, 11623, 11624, 11625, 11626, 11627,
    11628, 11629, 11630, 11631, 11632, 11633, 11634, 11635, 11636, 11637, 11638, 11639, 11640, 11641, 11642, 11643, 11644, 11645,
    11646, 11647, 11648, 11649, 11650, 11651, 11652, 11653, 11654, 11655, 11800, 11801, 11802, 11803, 11804, 11805, 11806, 11807,
    11808, 11809, 11810, 11811, 11812, 11813, 11814, 11815, 11816, 11817, 11818, 11819, 11820, 11821, 11822, 11823, 11824, 11825,
    11826, 11827, 11828, 11829, 11830, 11831, 11832, 11833, 11834, 11835, 11836, 11837, 11838, 11839, 11840, 11841, 11842, 11843,
    11844, 11845, 11846, 11847, 11848, 11849, 11850, 11851, 11852, 11853, 11854, 11855, 12000, 12001, 12002, 12003, 12004, 12005,
    12006, 12007, 12008, 12009, 12010, 12011, 12012, 12013, 12014, 12015, 12016, 12017, 12018, 12019, 12020, 12021, 12022, 12023,
    12024, 12025, 12026, 12027, 12028, 12029, 12030, 12031, 12032, 12033, 12034, 12035, 12036, 12037, 12038, 12039, 12040, 12041,
    12042, 12043, 12044, 12045, 12046, 12047, 12048, 12049, 12050, 12051, 12052, 12053, 12054, 12055, 12200, 12201, 12400, 12401,
    12402, 12403, 12404, 12405, 12406, 12407, 12408, 12409, 12410, 12411, 12600, 12601, 12602, 12603, 12604, 12605, 12800, 12801,
    12802, 12803, 12804, 12805, 12806, 12807, 12808, 12809, 12810, 12811, 12812, 12813, 12814, 12815, 12816, 12817, 12818, 12819,
    12820, 12821, 12822, 12823, 12824, 12825, 12826, 12827, 12828, 12829, 12830, 12831, 12832, 13000, 13001, 13002, 13003, 13004,
    13005, 13006, 13007, 13008, 13009, 13010, 13011, 13012, 13013, 13014, 13015, 13016, 13017, 13018, 13019, 13020, 13021, 13022,
    13023, 13024, 13025, 13026, 13027, 13028, 13029, 13030, 13031, 13032, 13033, 13034, 13035, 13036, 13037, 13038, 13200, 13201,
    13202, 13203, 13204, 13205, 13206, 13207, 13208, 13209, 13210, 13211, 13212, 13213, 13214, 13215, 13216, 13400, 13401, 13402,
    13403, 13404, 13405, 13406, 13407, 13408, 13409, 13410, 13411, 13412, 13413, 13414, 13415, 13416, 13417, 13418, 13419, 13600,
    13601, 13602, 13603, 13604, 13605, 13606, 13607, 13608, 13609, 13610, 13611, 13612, 13613, 13614, 13615, 13616, 13617, 13618,
    13619, 13620, 13621, 13622, 13623, 13624, 13625, 13626, 13627, 13628, 13629, 13630, 13631, 13632, 13633, 13634, 13635, 13636,
    13637, 13638, 13639, 13640, 13641, 13642, 13643, 13644, 13645, 13646, 13800, 13801, 13802, 13803, 14000, 14001, 14002, 14003,
    14004, 14005, 14006, 14007, 14008, 14009, 14010, 14011, 14012, 14013, 14014, 14015, 14016, 14017, 14018, 14019, 14020, 14021,
    14022, 14023, 14024, 14025, 14026, 14027, 14028, 14029, 14030, 14031, 14032, 14033, 14034, 14035, 14036, 14037, 14038, 14039,
    14040, 14041, 14200, 14400, 14401, 14402, 14403, 14404, 14405, 14406, 14407, 14408, 14409, 14410, 14600, 14800, 15000, 15001,
    15002, 15003, 15004, 15005, 15006, 15007, 15008, 15009, 15010, 15011, 15012, 15013, 15014, 15015, 15016, 15017, 15018, 15019,
    15020, 15021, 15022, 15023, 15024, 15025, 15026, 15027, 15028, 15200, 15201, 15202, 15203, 15204, 15205, 15206, 15207, 15208,
    15209, 15210, 15211, 15212, 15213, 15214, 15215, 15216, 15217, 15218, 15219, 15220, 15221, 15222, 15223, 15224, 15225, 15226,
    15227, 15228, 15229, 15230, 15231, 15232, 15233, 15234, 15235, 15236, 15237, 15238, 15239, 15240, 15241, 15242, 15243, 15244,
    15245, 15246, 15247, 15248, 15249, 15250, 15251, 15252, 15253, 15254, 15255, 15256, 15257, 15258, 15400, 15401, 15402, 15403,
    15404, 15405, 15406, 15407, 15408, 15600, 15601, 15602, 15603, 15800, 15801, 15802, 15803, 15804, 15805, 15806, 15807, 15808,
    15809, 15810, 15811, 15812, 15813, 15814, 15815, 15816, 15817, 15818, 15819, 15820, 15821, 15822, 15823, 15824, 15825, 15826,
    15827, 15828, 15829, 15830, 15831, 15832, 15833, 15834, 15835, 15836, 15837, 15838, 15839, 15840, 15841, 15842, 15843, 15844,
    15845, 15846, 15847, 15848, 15849, 15850, 15851, 15852, 15853, 15854, 15855, 15856, 15857, 15858, 15859, 15860, 15861, 15862,
    15863, 15864, 15865, 15866, 15867, 15868, 15869, 15870, 15871, 15872, 15873, 15874, 15875, 15876, 15877, 15878, 15879, 15880,
    15881, 15882, 15883, 15884, 15885, 15886, 15887, 15888, 15889, 15890, 15891, 15892, 15893, 15894, 15895, 15896, 15897, 15898,
    15899, 15900, 15901, 15902, 15903, 15904, 15905, 15906, 15907, 15908, 15909, 15910, 15911, 15912, 15913, 15914, 15915, 15916,
    15917, 15918, 15919, 15920, 15921, 15922, 15923, 15924, 15925, 15926, 15927, 15928, 15929, 15930, 15931, 15932, 15933, 15934,
    15935, 15936, 15937, 15938, 15939, 15940, 15941, 15942, 15943, 15944, 15945, 15946, 15947, 15948, 15949, 15950, 16000, 16001,
    16002, 16003, 16004, 16005, 16006, 16007, 16008, 16009, 16010, 16011, 16012, 16013, 16014, 16015, 16016, 16017, 16018, 16200,
    16400, 16401, 16402, 16403, 16404, 16405, 16406, 16407, 16408, 16409, 16410, 16411, 16412, 16413, 16414, 16415, 16416, 16417,
    16418, 16419, 16420, 16421, 16422, 16423, 16424, 16425, 16426, 16427, 16428, 16429, 16430, 16431, 16432, 16433, 16434, 16435,
    16436, 16437, 16438, 16439, 16440, 16441, 16442, 16443, 16444, 16445, 16446, 16447, 16448, 16449, 16450, 16451, 16452, 16453,
    16454, 16455, 16456, 16457, 16458, 16459, 16460, 16461, 16462, 16463, 16464, 16465, 16466, 16467, 16468, 16469, 16470, 16471,
    16472, 16473, 16474, 16475, 16476, 16477, 16478, 16479, 16480, 16481, 16482, 16483, 16484, 16485, 16486, 16487, 16488, 16489,
    16490, 16491, 16492, 16493, 16494, 16495, 16496, 16497, 16498, 16499, 16500, 16501, 16502, 16503, 16504, 16600, 16601, 16602,
    16603, 16604, 16605, 16606, 16607, 16608, 16609, 16610, 16611, 16612, 16613, 16614, 16800, 16801, 16802, 16803, 17000, 17001,
    17002, 17003, 17004, 17005, 17006, 17200, 17400, 17401, 17402, 17403, 17404, 17405, 17406, 17407, 17408, 17409, 17410, 17411,
    17412, 17413, 17414, 17415, 17416, 17417, 17418, 17419, 17420, 17421, 17422, 17423, 17424, 17425, 17426, 17427, 17428, 17429,
    17430, 17431, 17432, 17433, 17434, 17435, 17436, 17437, 17438, 17439, 17440, 17441, 17442, 17443, 17444, 17445, 17446, 17447,
    17448, 17449, 17450, 17451, 17452, 17453, 17454, 17455, 17600, 17601, 17602, 17603, 17604, 17605, 17606, 17607, 17608, 17609,
    17610, 17611, 17612, 17613, 17614, 17615, 17616, 17617, 17618, 17619, 17620, 17621, 17622, 17800, 17801, 17802, 17803, 17804,
    17805, 17806, 17807, 18000, 18001, 18002, 18003, 18004, 18005, 18006, 18007, 18008, 18009, 18010, 18011, 18012, 18013, 18014,
    18015, 18016, 18017, 18018, 18019, 18020, 18021, 18022, 18023, 18024, 18025, 18200, 18201, 18202, 18203, 18204, 18205, 18206,
    18207, 18208, 18209, 18210, 18211, 18212, 18213, 18214, 18215, 18216, 18400, 18401, 18402, 18403, 18404, 18405, 18406, 18407,
    18408, 18409, 18410, 18411, 18412, 18413, 18414, 18415, 18416, 18417, 18418, 18419, 18420, 18421, 18422, 18423, 18424, 18425,
    18426, 18427, 18428, 18429, 18430, 18431, 18432, 18433, 18434, 18600, 18601, 18602, 18603, 18604, 18605, 18606, 18607, 18608,
    18609, 18610, 18611, 18612, 18613, 18614, 18615, 18616, 18800, 18801, 18802, 18803, 18804, 18805, 18806, 18807, 19000, 19001,
    19002, 19003, 19004, 19005, 19006, 19007, 19008, 19009, 19010, 19011, 19012, 19013, 19014, 19015, 19016, 19017, 19018, 19019,
    19020, 19021, 19022, 19023, 19024, 19025, 19026, 19027, 19028, 19029, 19030, 19031, 19032, 19033, 19034, 19035, 19036, 19037,
    19038, 19039, 19040, 19041, 19042, 19043, 19044, 19045, 19046, 19047, 19048, 19049, 19050, 19051, 19052, 19053, 19054, 19055,
    19056, 19057, 19058, 19059, 19060, 19061, 19062, 19063, 19064, 19065, 19066, 19067, 19068, 19069, 19070, 19071, 19072, 19073,
    19074, 19075, 19076, 19077, 19078, 19079, 19080, 19081, 19082, 19083, 19084, 19085, 19086, 19087, 19088, 19089, 19090, 19091,
    19092, 19093, 19094, 19095, 19096, 19097, 19098, 19099, 19100, 19101, 19102, 19103, 19104, 19105, 19106, 19107, 19108, 19109,
    19110, 19111, 19112, 19113, 19114, 19115, 19116, 19117, 19118, 19119, 19120, 19121, 19122, 19123, 19124, 19125, 19126, 19127,
    19128, 19129, 19130, 19131, 19132, 19133, 19134, 19135, 19200, 19201, 19202, 19203, 19204, 19205, 19206, 19207, 19208, 19209,
    19210, 19211, 19212, 19213, 19214, 19215, 19216, 19217, 19218, 19219, 19400, 19401, 19402, 19403, 19600, 19601, 19602, 19603,
    19604, 19800, 20000, 20001, 20002, 20003, 20004, 20005, 20006, 20007, 20008, 20009, 20010, 20011, 20012, 20013, 20014, 20015,
    20016, 20017, 20018, 20019, 20020, 20021, 20022, 20023, 20024, 20025, 20026, 20027, 20028, 20029, 20030, 20031, 20032, 20033,
    20034, 20035, 20036, 20037, 20038, 20039, 20040, 20041, 20042, 20043, 20044, 20045, 20046, 20047, 20048, 20049, 20050, 20051,
    20052, 20053, 20054, 20055, 20056, 20057, 20058, 20059, 20060, 20061, 20062, 20063, 20064, 20065, 20066, 20067, 20068, 20069,
    20070, 20071, 20072, 20200, 20201, 20202, 20203, 20204, 20205, 20206, 20207, 20208, 20209, 20210, 20211, 20212, 20213, 20214,
    20215, 20216, 20217, 20218, 20219, 20220, 20221, 20222, 20223, 20224, 20225, 20226, 20227, 20228, 20229, 20230, 20231, 20232,
    20233, 20234, 20235, 20236, 20237, 20238, 20239, 20240, 20241, 20242, 20243, 20244, 20245, 20246, 20247, 20248, 20400, 20401,
    20402, 20403, 20404, 20405, 20406, 20407, 20408, 20409, 20410, 20411, 20412, 20413, 20414, 20415, 20416, 20417, 20418, 20419,
    20420, 20421, 20422, 20423, 20424, 20600, 20800, 20801, 20802, 20803, 20804, 21000, 21001, 21002, 21200, 21201, 21202, 21203,
    21204, 21205, 21206, 21207, 21400, 21401, 21402, 21403, 21404, 21405, 21406, 21407, 21408, 21409, 21410, 21411, 21412, 21413,
    21414, 21415, 21416, 21417, 21418, 21419, 21420, 21421, 21422, 21423, 21424, 21425, 21426, 21427, 21428, 21429, 21430, 21431,
    21432, 21433, 21434, 21435, 21436, 21437, 21438, 21439, 21440, 21441, 21442, 21443, 21444, 21445, 21446, 21447, 21448, 21449,
    21450, 21451, 21452, 21453, 21454, 21455, 21456, 21600, 21601, 21602, 21603, 21604, 21605, 21606, 21607, 21608, 21609, 21610,
    21611, 21612, 21613, 21614, 21615, 21616, 21617, 21618, 21619, 21620, 21621, 21622, 21623, 21624, 21625, 21626, 21627, 21628,
    21629, 21630, 21631, 21632, 21633, 21634, 21635, 21636, 21637, 21638, 21639, 21640, 21641, 21642, 21643, 21644, 21645, 21646,
    21647, 21648, 21649, 21650, 21651, 21652, 21653, 21654, 21655, 21656, 21657, 21658, 21659, 21660, 21661, 21662, 21663, 21664,
    21665, 21666, 21800, 21801, 21802, 21803, 21804, 21805, 21806, 21807, 21808, 22000, 22001, 22002, 22003, 22004, 22005, 22006,
    22007, 22008, 22009, 22010, 22011, 22012, 22013, 22014, 22015, 22016, 22017, 22018, 22019, 22020, 22021, 22022, 22023, 22024,
    22025, 22026, 22027, 22028, 22029, 22030, 22031, 22032, 22033, 22034, 22035, 22036, 22037, 22038, 22039, 22200, 22201, 22202,
    22203, 22204, 22205, 22206, 22207, 22208, 22209, 22210, 22211, 22212, 22213, 22214, 22215, 22216, 22217, 22400, 22401, 22402,
    22403, 22404, 22405, 22406, 22600, 22800, 22801, 22802, 22803, 22804, 22805, 22806, 22807, 22808, 22809, 22810, 22811, 22812,
    22813, 22814, 22815, 22816, 22817, 22818, 22819, 22820, 22821, 22822, 22823, 22824, 22825, 22826, 22827, 22828, 22829, 22830,
    22831, 22832, 22833, 22834, 22835, 22836, 22837, 22838, 22839, 23000, 23200, 23201, 23202, 23203, 23204, 23205, 23206, 23207,
    23208, 23209, 23400, 23600, 23800, 23801, 23802, 23803, 23804, 23805, 23806, 23807, 23808, 23809, 23810, 23811, 23812, 23813,
    23814, 23815, 23816, 23817, 23818, 23819, 23820, 23821, 23822, 23823, 23824, 23825, 23826, 23827, 23828, 23829, 23830, 23831,
    23832, 23833, 23834, 23835, 24000, 24001, 24002, 24003, 24004, 24005, 24006, 24007, 24008, 24009, 24010, 24011, 24012, 24013,
    24014, 24015, 24016, 24017, 24018, 24019, 24020, 24021, 24022, 24023, 24024, 24025, 24026, 24027, 24028, 24029, 24030, 24031,
    24032, 24033, 24034, 24035, 24036, 24037, 24038, 24039, 24040, 24041, 24042, 24043, 24044, 24045, 24046, 24047, 24048, 24049,
    24050, 24051, 24052, 24053, 24054, 24055, 24056, 24057, 24058, 24059, 24060, 24061, 24062, 24063, 24200, 24201, 24202, 24203,
    24204, 24205, 24206, 24207, 24208, 24209, 24210, 24211, 24212, 24213, 24214, 24215, 24216, 24217, 24218, 24219, 24400, 24401,
    24402, 24403, 24404, 24405, 24406, 24407, 24408, 24409, 24410, 24411, 24412, 24413, 24414, 24415, 24416, 24417, 24418, 24419,
    24420, 24421, 24422, 24423, 24424, 24425, 24426, 24427, 24428, 24429, 24430, 24431, 24432, 24433, 24600, 24800, 24801, 24802,
    24803, 24804, 24805, 24806, 24807, 24808, 24809, 24810, 24811, 24812, 24813, 24814, 24815, 24816, 24817, 24818, 24819, 24820,
    24821, 24822, 24823, 24824, 24825, 24826, 24827, 24828, 24829, 25000, 25001, 25002, 25003, 25004, 25005, 25006, 25007, 25008,
    25009, 25010, 25011, 25012, 25013, 25014, 25015, 25016, 25017, 25018, 25019, 25020, 25021, 25022, 25023, 25024, 25025, 25026,
    25027, 25028, 25029, 25030, 25031, 25032, 25033, 25034, 25035, 25036, 25037, 25038, 25039, 25040, 25041, 25042, 25043, 25044,
    25045, 25046, 25047, 25200, 25201, 25202, 25203, 25204, 25205, 25206, 25207, 25208, 25209, 25210, 25211, 25212, 25213, 25214,
    25215, 25216, 25217, 25218, 25219, 25220, 25221, 25222, 25223, 25224, 25225, 25226, 25227, 25228, 25229, 25230, 25231, 25232,
    25233, 25234, 25235, 25236, 25237, 25238, 25239, 25240, 25241, 25242, 25243, 25244, 25245, 25246, 25247, 25248, 25249, 25250,
    25251, 25252, 25253, 25254, 25255, 25256, 25257, 25258, 25259, 25260, 25261, 25262, 25263, 25264, 25265, 25266, 25267, 25268,
    25269, 25270, 25271, 25272, 25273, 25274, 25275, 25276, 25277, 25278, 25279, 25280, 25281, 25282, 25283, 25284, 25285, 25286,
    25287, 25288, 25289, 25290, 25291, 25292, 25293, 25294, 25295, 25296, 25297, 25298, 25299, 25300, 25301, 25302, 25303, 25304,
    25305, 25306, 25307, 25308, 25309, 25310, 25311, 25312, 25313, 25314, 25315, 25316, 25317, 25318, 25319, 25400, 25401, 25402,
    25403, 25404, 25405, 25406, 25407, 25408, 25409, 25410, 25411, 25412, 25413, 25414, 25415, 25416, 25417, 25418, 25419, 25420,
    25421, 25422, 25423, 25600, 25601, 25602, 25603, 25604, 25800, 25801, 26000, 26001, 26002, 26003, 26004, 26005, 26006, 26007,
    26008, 26009, 26200, 26201, 26202, 26203, 26204, 26205, 26206, 26207, 26208, 26209, 26210, 26211, 26212, 26213, 26214, 26215,
    26216, 26217, 26218, 26219, 26220, 26221, 26222, 26223, 26400, 26401, 26402, 26403, 26404, 26405, 26406, 26407, 26408, 26409,
    26410, 26411, 26412, 26600, 26601, 26602, 26603, 26604, 26605, 26606, 26607, 26608, 26609, 26610, 26611, 26612, 26613, 26614,
    26615, 26616, 26617, 26618, 26619, 26620, 26621, 26622, 26623, 26624, 26625, 26626, 26627, 26628, 26629, 26630, 26631, 26632,
    26633, 26800, 26801, 26802, 26803, 26804, 26805, 26806, 26807, 26808, 26809, 26810, 26811, 27000, 27001, 27002, 27003, 27004,
    27005, 27006, 27007, 27008, 27009, 27010, 27011, 27012, 27013, 27014, 27015, 27016, 27017, 27018, 27200, 27201, 27202, 27203,
    27204, 27205, 27400, 27401, 27402, 27403, 27404, 27405, 27406, 27407, 27408, 27409, 27410, 27411, 27412, 27413, 27414, 27415,
    27416, 27417, 27418, 27419, 27420, 27421, 27422, 27600, 27601, 27602, 27603, 27604, 27605, 27606, 27607, 27608, 27609, 27610,
    27611, 27612, 27613, 27614, 27615, 27616, 27617, 27618, 27619, 27620, 27621, 27800, 27801, 27802, 27803, 27804, 27805, 27806,
    27807, 27808, 27809, 27810, 27811, 27812, 27813, 27814, 27815, 27816, 27817, 27818, 27819, 27820, 27821, 27822, 27823, 27824,
    27825, 27826, 27827, 27828, 27829, 27830, 27831, 27832, 27833, 28000, 28200, 28201, 28202, 28203, 28204, 28400, 28401, 28402,
    28403, 28404, 28405, 28406, 28407, 28408, 28409, 28410, 28411, 28412, 28413, 28414, 28415, 28416, 28417, 28418, 28419, 28420,
    28421, 28422, 28423, 28424, 28425, 28426, 28427, 28600, 28601, 28602, 28603, 28604, 28605, 28606, 28607, 28608, 28609, 28610,
    28611, 28612, 28613, 28614, 28615, 28616, 28617, 28618, 28619, 28620, 28621, 28622, 28800, 28801, 28802, 28803, 28804, 28805,
    28806, 28807, 28808, 28809, 28810, 28811, 29000, 29001, 29002, 29003, 29004, 29005, 29006, 29007, 29008, 29009, 29010, 29011,
    29012, 29013, 29014, 29015, 29016, 29017, 29018, 29019, 29020, 29021, 29022, 29023, 29024, 29025, 29026, 29027, 29028, 29029,
    29030, 29031, 29032, 29033, 29034, 29035, 29036, 29037, 29038, 29039, 29040, 29041, 29042, 29043, 29044, 29045, 29046, 29047,
    29048, 29049, 29050, 29051, 29052, 29053, 29054, 29055, 29056, 29057, 29058, 29059, 29060, 29061, 29062, 29063, 29064, 29065,
    29066, 29067, 29068, 29069, 29070, 29071, 29072, 29073, 29074, 29075, 29076, 29077, 29078, 29079, 29080, 29081, 29082, 29083,
    29084, 29085, 29086, 29087, 29088, 29089, 29090, 29091, 29092, 29093, 29094, 29095, 29096, 29097, 29098, 29099, 29100, 29101,
    29102, 29103, 29104, 29105, 29106, 29107, 29108, 29109, 29110, 29111, 29112, 29113, 29114, 29115, 29116, 29117, 29118, 29119,
    29120, 29121, 29122, 29123, 29124, 29125, 29126, 29127, 29128, 29129, 29130, 29131, 29132, 29133, 29134, 29135, 29136, 29137,
    29138, 29139, 29140, 29141, 29142, 29143, 29144, 29145, 29146, 29147, 29148, 29149, 29150, 29151, 29152, 29153, 29154, 29155,
    29200, 29201, 29202, 29203, 29204, 29205, 29206, 29207, 29208, 29209, 29210, 29211, 29212, 29213, 29214, 29215, 29216, 29217,
    29400, 29401, 29402, 29403, 29404, 29405, 29406, 29407, 29408, 29409, 29410, 29411, 29412, 29413, 29600, 29601, 29602, 29603,
    29604, 29605, 29606, 29607, 29608, 29609, 29610, 29611, 29612, 29613, 29614, 29615, 29616, 29617, 29618, 29619, 29620, 29621,
    29622, 29623, 29624, 29625, 29626, 29627, 29628, 29629, 29630, 29631, 29632, 29633, 29634, 29635, 29636, 29637, 29638, 29639,
    29640, 29641, 29642, 29643, 29644, 29645, 29646, 29647, 29648, 29649, 29650, 29651, 29652, 29653, 29654, 29655, 29656, 29657,
    29658, 29659, 29660, 29661, 29662, 29663, 29664, 29665, 29800, 29801, 29802, 29803, 29804, 29805, 29806, 29807, 29808, 29809,
    29810, 29811, 29812, 29813, 29814, 29815, 29816, 29817, 29818, 29819, 29820, 29821, 29822, 29823, 29824, 29825, 30000, 30001,
    30002, 30003, 30004, 30005, 30006, 30007, 30008, 30009, 30010, 30011, 30012, 30013, 30014, 30015, 30016, 30017, 30018, 30019,
    30020, 30021, 30022, 30023, 30024, 30025, 30026, 30027, 30028, 30029, 30030, 30031, 30032, 30033, 30034, 30035, 30036, 30037,
    30038, 30039, 30040, 30041, 30042, 30043, 30044, 30045, 30046, 30047, 30048, 30049, 30050, 30051, 30052, 30053, 30054, 30055,
    30056, 30057, 30058, 30059, 30060, 30061, 30062, 30063, 30064, 30065, 30066, 30067, 30068, 30069, 30070, 30071, 30072, 30073,
    30074, 30075, 30076, 30077, 30078, 30079, 30080, 30081, 30082, 30200, 30201, 30202, 30203, 30204, 30205, 30206, 30207, 30208,
    30209, 30210, 30211, 30212, 30213, 30214, 30215, 30216, 30217, 30218, 30219, 30220, 30221, 30400, 30401, 30402, 30403, 30404,
    30405, 30406, 30407, 30408, 30409, 30410, 30411, 30412, 30413, 30414, 30415, 30416, 30600, 30800, 30801, 30802, 30803, 31000,
    31001, 31200, 31201, 31202, 31203, 31204, 31205, 31400, 31600, 31601, 31602, 31603, 31604, 31605, 31800, 31801, 31802, 31803,
    31804, 31805, 31806, 31807, 31808, 31809, 31810, 32000, 32200, 32201, 32400, 32401, 32402, 32600, 32800, 32801, 32802, 32803,
    32804, 32805, 32806, 32807, 32808, 32809, 32810, 32811, 32812, 32813, 32814, 32815, 32816, 32817, 32818, 32819, 32820, 32821,
    32822, 32823, 32824, 32825, 32826, 32827, 32828, 32829, 32830, 32831, 32832, 32833, 32834, 32835, 32836, 32837, 32838, 32839,
    32840, 32841, 32842, 32843, 32844, 32845, 32846, 32847, 33000, 33001, 33002, 33003, 33004, 33005, 33006, 33007, 33008, 33009,
    33010, 33011, 33012, 33013, 33014, 33015, 33016, 33017, 33018, 33019, 33020, 33021, 33022, 33023, 33024, 33025, 33026, 33027,
    33028, 33029, 33030, 33031, 33032, 33033, 33034, 33035, 33036, 33037, 33038, 33039, 33040, 33041, 33042, 33043, 33044, 33045,
    33046, 33047, 33048, 33049, 33050, 33051, 33052, 33053, 33054, 33055, 33056, 33057, 33058, 33059, 33060, 33061, 33062, 33063,
    33064, 33065, 33066, 33067, 33068, 33069, 33070, 33071, 33072, 33073, 33074, 33075, 33076, 33077, 33078, 33079, 33080, 33081,
    33082, 33083, 33084, 33085, 33086, 33087, 33088, 33200, 33201, 33202, 33203, 33204, 33205, 33206, 33207, 33208, 33209, 33210,
    33211, 33212, 33213, 33214, 33215, 33216, 33217, 33218, 33219, 33220, 33221, 33222, 33223, 33224, 33225, 33226, 33227, 33228,
    33229, 33230, 33231, 33232, 33233, 33234, 33235, 33236, 33237, 33238, 33239, 33240, 33241, 33242, 33243, 33244, 33245, 33246,
    33247, 33248, 33249, 33250, 33251, 33252, 33253, 33254, 33255, 33256, 33257, 33258, 33259, 33260, 33261, 33262, 33263, 33264,
    33265, 33266, 33267, 33268, 33269, 33270, 33271, 33272, 33273, 33274, 33275, 33276, 33277, 33278, 33279, 33280, 33281, 33282,
    33283, 33284, 33285, 33286, 33287, 33288, 33289, 33290, 33291, 33292, 33293, 33294, 33295, 33296, 33297, 33298, 33299, 33300,
    33301, 33302, 33303, 33304, 33400, 33401, 33402, 33403, 33600, 33601, 33602, 33603, 33604, 33605, 33606, 33607, 33608, 33609,
    33610, 33611, 33612, 33613, 33614, 33615, 33616, 33617, 33618, 33619, 33620, 33621, 33622, 33623, 33624, 33625, 33626, 33627,
    33628, 33629, 33630, 33631, 33632, 33633, 33634, 33635, 33636, 33637, 33638, 33639, 33640, 33641, 33642, 33643, 33644, 33645,
    33646, 33647, 33648, 33649, 33650, 33651, 33652, 33653, 33654, 33655, 33656, 33657, 33658, 33659, 33660, 33661, 33662, 33663,
    33664, 33665, 33666, 33667, 33668, 33669, 33670, 33671, 33672, 33673, 33674, 33675, 33676, 33800, 33801, 33802, 33803, 33804,
    33805, 33806, 33807, 33808, 33809, 33810, 33811, 33812, 33813, 33814, 33815, 33816, 33817, 33818, 33819, 33820, 33821, 33822,
    33823, 33824, 33825, 33826, 33827, 33828, 33829, 33830, 33831, 33832, 33833, 33834, 33835, 33836, 33837, 33838, 33839, 33840,
    33841, 33842, 33843, 33844, 33845, 33846, 33847, 33848, 33849, 33850, 33851, 33852, 33853, 33854, 33855, 33856, 33857, 33858,
    33859, 33860, 33861, 33862, 33863, 33864, 33865, 33866, 33867, 33868, 33869, 33870, 33871, 33872, 33873, 33874, 33875, 33876,
    33877, 33878, 33879, 33880, 33881, 33882, 33883, 33884, 33885, 33886, 33887, 33888, 33889, 34000, 34001, 34002, 34003, 34004,
    34005, 34006, 34007, 34008, 34009, 34010, 34011, 34012, 34013, 34014, 34015, 34016, 34017, 34018, 34019, 34020, 34021, 34022,
    34023, 34024, 34025, 34026, 34027, 34028, 34029, 34030, 34031, 34032, 34033, 34034, 34035, 34036, 34037, 34038, 34039, 34040,
    34041, 34042, 34043, 34044, 34045, 34046, 34047, 34048, 34049, 34050, 34051, 34052, 34053, 34054, 34055, 34056, 34057, 34058,
    34059, 34060, 34061, 34062, 34063, 34064, 34065, 34066, 34067, 34200, 34201, 34202, 34203, 34204, 34205, 34206, 34207, 34208,
    34209, 34210, 34211, 34212, 34213, 34214, 34215, 34216, 34217, 34218, 34219, 34220, 34221, 34222, 34223, 34224, 34225, 34226,
    34227, 34228, 34229, 34230, 34231, 34232, 34233, 34234, 34235, 34236, 34237, 34238, 34239, 34240, 34241, 34242, 34243, 34244,
    34245, 34246, 34247, 34248, 34249, 34250, 34251, 34252, 34253, 34254, 34255, 34256, 34257, 34258, 34259, 34260, 34261, 34262,
    34263, 34264, 34265, 34266, 34267, 34268, 34269, 34270, 34271, 34272, 34273, 34400, 34401, 34402, 34403, 34404, 34405, 34406,
    34407, 34408, 34409, 34410, 34411, 34412, 34413, 34414, 34415, 34600, 34601, 34602, 34603, 34604, 34605, 34606, 34800, 34801,
    34802, 34803, 34804, 34805, 34806, 34807, 34808, 34809, 34810, 34811, 34812, 34813, 34814, 34815, 34816, 34817, 34818, 34819,
    34820, 34821, 34822, 34823, 34824, 34825, 34826, 34827, 34828, 34829, 34830, 34831, 35000, 35001, 35002, 35003, 35004, 35005,
    35006, 35007, 35008, 35009, 35010, 35011, 35012, 35013, 35014, 35015, 35016, 35017, 35018, 35019, 35020, 35021, 35022, 35023,
    35024, 35025, 35026, 35027, 35028, 35029, 35030, 35031, 35032, 35033, 35034, 35035, 35036, 35037, 35038, 35039, 35040, 35041,
    35042, 35043, 35044, 35045, 35046, 35047, 35048, 35049, 35050, 35051, 35052, 35053, 35054, 35055, 35056, 35057, 35058, 35059,
    35060, 35061, 35062, 35063, 35064, 35065, 35066, 35067, 35068, 35069, 35070, 35071, 35072, 35073, 35074, 35075, 35200, 35201,
    35202, 35203, 35204, 35205, 35206, 35207, 35208, 35209, 35210, 35211, 35212, 35213, 35214, 35215, 35216, 35217, 35218, 35219,
    35220, 35221, 35222, 35223, 35224, 35225, 35226, 35227, 35228, 35229, 35230, 35231, 35232, 35233, 35234, 35235, 35236, 35237,
    35238, 35239, 35240, 35400, 35401, 35402, 35403, 35404, 35405, 35406, 35407, 35408, 35409, 35410, 35411, 35412, 35413, 35414,
    35415, 35416, 35417, 35418, 35419, 35420, 35421, 35422, 35423, 35424, 35425, 35426, 35427, 35428, 35429, 35430, 35431, 35432,
    35433, 35434, 35435, 35436, 35437, 35438, 35439, 35440, 35441, 35442, 35443, 35444, 35445, 35446, 35447, 35448, 35449, 35450,
    35451, 35452, 35453, 35454, 35455, 35456, 35457, 35458, 35459, 35460, 35461, 35462, 35463, 35464, 35465, 35466, 35467, 35468,
    35469, 35470, 35471, 35472, 35473, 35474, 35475, 35476, 35477, 35478, 35479, 35480, 35481, 35482, 35483, 35484, 35485, 35486,
    35487, 35488, 35600, 35601, 35602, 35603, 35604, 35605, 35606, 35607, 35608, 35609, 35610, 35611, 35612, 35613, 35614, 35615,
    35616, 35617, 35618, 35619, 35620, 35621, 35622, 35623, 35624, 35625, 35626, 35627, 35628, 35629, 35630, 35631, 35632, 35633,
    35634, 35635, 35636, 35637, 35638, 35639, 35640, 35641, 35642, 35643, 35644, 35645, 35646, 35647, 35648, 35649, 35650, 35651,
    35652, 35653, 35654, 35655, 35656, 35657, 35658, 35659, 35660, 35661, 35662, 35663, 35664, 35665, 35666, 35667, 35668, 35669,
    35670, 35671, 35672, 35673, 35674, 35675, 35676, 35677, 35678, 35679, 35680, 35681, 35682, 35683, 35684, 35685, 35686, 35687,
    35688, 35689, 35690, 35691, 35692, 35693, 35694, 35695, 35696, 35697, 35698, 35699, 35700, 35701, 35702, 35703, 35704, 35705,
    35706, 35707, 35708, 35709, 35710, 35711, 35712, 35713, 35714, 35715, 35716, 35717, 35718, 35719, 35720, 35721, 35722, 35723,
    35724, 35725, 35726, 35727, 35728, 35729, 35730, 35731, 35732, 35733, 35800, 35801, 35802, 35803, 35804, 35805, 35806, 35807,
    35808, 35809, 35810, 35811, 35812, 35813, 35814, 35815, 35816, 35817, 35818, 35819, 35820, 35821, 35822, 35823, 35824, 35825,
    35826, 35827, 35828, 35829, 35830, 35831, 35832, 35833, 35834, 35835, 35836, 35837, 35838, 35839, 35840, 35841, 35842, 35843,
    35844, 35845, 35846, 35847, 35848, 35849, 35850, 35851, 35852, 35853, 35854, 35855, 35856, 35857, 35858, 35859, 35860, 35861,
    35862, 35863, 35864, 35865, 35866, 35867, 35868, 35869, 35870, 35871, 35872, 35873, 35874, 35875, 35876, 35877, 35878, 35879,
    35880, 35881, 35882, 35883, 36000, 36200, 36201, 36202, 36203, 36204, 36205, 36400, 36401, 36600, 36601, 36602, 36603, 36604,
    36800, 36801, 36802, 36803, 36804, 36805, 36806, 36807, 36808, 36809, 36810, 36811, 36812, 36813, 36814, 36815, 36816, 36817,
    36818, 36819, 36820, 36821, 36822, 36823, 36824, 36825, 36826, 36827, 36828, 36829, 36830, 36831, 36832, 36833, 36834, 36835,
    36836, 36837, 36838, 36839, 36840, 36841, 36842, 36843, 36844, 36845, 36846, 36847, 36848, 36849, 36850, 36851, 36852, 36853,
    36854, 36855, 36856, 36857, 36858, 36859, 36860, 37000, 37001, 37002, 37003, 37004, 37005, 37006, 37007, 37008, 37009, 37010,
    37011, 37012, 37013, 37014, 37015, 37016, 37017, 37018, 37019, 37020, 37021, 37022, 37023, 37024, 37025, 37026, 37027, 37028,
    37029, 37030, 37031, 37032, 37033, 37034, 37035, 37200, 37201, 37202, 37203, 37204, 37205, 37206, 37207, 37208, 37209, 37210,
    37211, 37212, 37213, 37214, 37215, 37216, 37217, 37218, 37219, 37220, 37221, 37222, 37223, 37224, 37225, 37226, 37227, 37228,
    37229, 37230, 37231, 37232, 37233, 37234, 37235, 37236, 37237, 37238, 37239, 37240, 37241, 37242, 37243, 37244, 37245, 37400,
    37401, 37402, 37403, 37404, 37405, 37406, 37407, 37408, 37409, 37410, 37411, 37412, 37413, 37414, 37415, 37416, 37417, 37418,
    37419, 37420, 37421, 37422, 37423, 37424, 37425, 37426, 37427, 37428, 37429, 37430, 37431, 37432, 37433, 37434, 37435, 37436,
    37437, 37438, 37439, 37440, 37441, 37442, 37443, 37444, 37445, 37446, 37447, 37448, 37449, 37450, 37451, 37452, 37453, 37454,
    37455, 37456, 37457, 37458, 37459, 37460, 37461, 37462, 37463, 37464, 37465, 37466, 37467, 37468, 37469, 37470, 37471, 37472,
    37473, 37474, 37475, 37476, 37477, 37478, 37479, 37480, 37481, 37482, 37483, 37484, 37485, 37486, 37487, 37488, 37489, 37490,
    37491, 37492, 37493, 37494, 37600, 37601, 37602, 37603, 37604, 37605, 37606, 37607, 37608, 37609, 37610, 37611, 37612, 37613,
    37614, 37615, 37616, 37617, 37618, 37619, 37620, 37621, 37622, 37623, 37624, 37625, 37626, 37627, 37628, 37629, 37630, 37631,
    37632, 37633, 37634, 37635, 37636, 37637, 37638, 37639, 37640, 37641, 37642, 37643, 37644, 37645, 37646, 37647, 37648, 37649,
    37650, 37651, 37652, 37653, 37654, 37655, 37656, 37657, 37658, 37659, 37660, 37661, 37662, 37663, 37664, 37665, 37666, 37667,
    37668, 37669, 37670, 37671, 37672, 37673, 37674, 37675, 37676, 37677, 37678, 37679, 37680, 37681, 37800, 37801, 37802, 37803,
    37804, 37805, 37806, 37807, 37808, 37809, 37810, 37811, 37812, 37813, 37814, 37815, 37816, 37817, 37818, 37819, 37820, 37821,
    37822, 37823, 37824, 37825, 37826, 37827, 37828, 37829, 37830, 37831, 37832, 37833, 37834, 37835, 37836, 37837, 37838, 37839,
    37840, 37841, 37842, 37843, 37844, 37845, 37846, 37847, 37848, 37849, 37850, 37851, 37852, 37853, 37854, 37855, 37856, 37857,
    37858, 37859, 37860, 37861, 37862, 37863, 37864, 37865, 37866, 37867, 37868, 37869, 37870, 37871, 37872, 37873, 38000, 38001,
    38002, 38003, 38004, 38005, 38006, 38007, 38008, 38009, 38010, 38011, 38012, 38013, 38014, 38015, 38016, 38017, 38018, 38019,
    38020, 38021, 38022, 38023, 38024, 38025, 38026, 38027, 38028, 38029, 38030, 38031, 38032, 38033, 38034, 38035, 38036, 38037,
    38038, 38039, 38040, 38041, 38042, 38043, 38044, 38045, 38046, 38047, 38048, 38049, 38050, 38051, 38052, 38053, 38054, 38055,
    38056, 38057, 38058, 38059, 38060, 38200, 38201, 38202, 38203, 38204, 38205, 38206, 38207, 38208, 38209, 38210, 38211, 38212,
    38213, 38214, 38215, 38216, 38217, 38218, 38219, 38220, 38221, 38222, 38223, 38224, 38225, 38226, 38227, 38228, 38229, 38230,
    38231, 38232, 38233, 38234, 38235, 38236, 38237, 38238, 38400, 38401, 38402, 38403, 38404, 38405, 38406, 38407, 38408, 38409,
    38410, 38411, 38412, 38413, 38414, 38415, 38416, 38417, 38418, 38419, 38420, 38421, 38422, 38423, 38424, 38425, 38426, 38427,
    38428, 38429, 38430, 38431, 38432, 38433, 38434, 38435, 38436, 38437, 38438, 38439, 38440, 38441, 38442, 38443, 38444, 38445,
    38446, 38447, 38448, 38449, 38450, 38451, 38452, 38453, 38454, 38455, 38456, 38457, 38458, 38459, 38460, 38461, 38462, 38463,
    38464, 38465, 38466, 38467, 38468, 38469, 38470, 38471, 38600, 38601, 38602, 38603, 38604, 38605, 38606, 38607, 38608, 38609,
    38610, 38611, 38612, 38613, 38614, 38615, 38616, 38617, 38618, 38619, 38620, 38621, 38622, 38623, 38624, 38625, 38626, 38627,
    38628, 38629, 38630, 38631, 38632, 38633, 38634, 38635, 38636, 38637, 38638, 38639, 38640, 38641, 38642, 38643, 38644, 38800,
    38801, 38802, 38803, 38804, 38805, 38806, 38807, 38808, 38809, 38810, 38811, 38812, 38813, 38814, 38815, 38816, 38817, 38818,
    38819, 38820, 38821, 38822, 38823, 38824, 38825, 38826, 38827, 38828, 38829, 38830, 38831, 38832, 38833, 38834, 38835, 38836,
    38837, 38838, 38839, 38840, 38841, 38842, 38843, 38844, 38845, 38846, 38847, 38848, 38849, 38850, 38851, 38852, 38853, 38854,
    39000, 39001, 39002, 39003, 39004, 39005, 39006, 39007, 39008, 39009, 39010, 39011, 39012, 39013, 39014, 39015, 39016, 39017,
    39018, 39019, 39020, 39021, 39022, 39023, 39024, 39025, 39026, 39027, 39028, 39029, 39030, 39031, 39032, 39033, 39034, 39035,
    39036, 39037, 39038, 39039, 39040, 39041, 39042, 39043, 39044, 39045, 39046, 39047, 39048, 39049, 39050, 39051, 39052, 39053,
    39054, 39055, 39056, 39057, 39058, 39059, 39060, 39061, 39062, 39063, 39064, 39065, 39066, 39067, 39068, 39069, 39070, 39071,
    39072, 39073, 39074, 39075, 39076, 39077, 39078, 39200, 39201, 39202, 39203, 39204, 39205, 39206, 39207, 39208, 39209, 39210,
    39211, 39212, 39213, 39214, 39215, 39216, 39217, 39218, 39219, 39220, 39221, 39222, 39223, 39400, 39401, 39402, 39403, 39404,
    39405, 39406, 39407, 39408, 39409, 39410, 39411, 39412, 39413, 39600, 39601, 39602, 39603, 39604, 39605, 39606, 39607, 39608,
    39609, 39610, 39611, 39612, 39613, 39614, 39615, 39616, 39617, 39618, 39619, 39620, 39621, 39622, 39623, 39624, 39625, 39626,
    39627, 39628, 39629, 39630, 39631, 39632, 39633, 39634, 39635, 39636, 39637, 39638, 39639, 39640, 39641, 39642, 39643, 39644,
    39645, 39646, 39647, 39648, 39649, 39650, 39651, 39652, 39653, 39654, 39655, 39656, 39657, 39658, 39659, 39660, 39661, 39662,
    39663, 39664, 39665, 39666, 39667, 39800, 39801, 39802, 39803, 39804, 39805, 39806, 39807, 39808, 39809, 39810, 39811, 39812,
    39813, 39814, 39815, 40000, 40200, 40201, 40202, 40203, 40204, 40205, 40206, 40207, 40208, 40209, 40210, 40211, 40212, 40213,
    40214, 40215, 40216, 40217, 40218, 40219, 40220, 40221, 40222, 40223, 40224, 40225, 40226, 40227, 40228, 40229, 40230, 40231,
    40232, 40233, 40234, 40235, 40236, 40237, 40238, 40400, 40401, 40402, 40403, 40404, 40405, 40406, 40407, 40408, 40600, 40800,
    40801, 40802, 40803, 40804, 40805, 40806, 40807, 40808, 40809, 40810, 40811, 40812, 40813, 40814, 40815, 40816, 40817, 40818,
    40819, 40820, 41000, 41001, 41002, 41003, 41004, 41005, 41006, 41007, 41008, 41009, 41010, 41011, 41012, 41013, 41014, 41015,
    41016, 41017, 41018, 41019, 41020, 41021, 41022, 41023, 41024, 41025, 41026, 41027, 41028, 41029, 41030, 41031, 41032, 41033,
    41034, 41035, 41036, 41037, 41038, 41039, 41040, 41041, 41042, 41200, 41201, 41202, 41203, 41204, 41205, 41206, 41207, 41208,
    41209, 41210, 41211, 41212, 41213, 41214, 41215, 41216, 41217, 41218, 41219, 41220, 41221, 41222, 41223, 41224, 41225, 41226,
    41227, 41228, 41229, 41230, 41231, 41232, 41233, 41234, 41235, 41236, 41237, 41238, 41239, 41240, 41241, 41242, 41243, 41244,
    41245, 41246, 41247, 41248, 41249, 41250, 41251, 41252, 41253, 41254, 41255, 41256, 41257, 41258, 41259, 41260, 41261, 41262,
    41263, 41264, 41265, 41266, 41267, 41268, 41269, 41270, 41271, 41272, 41400, 41401, 41402, 41403, 41404, 41405, 41406, 41407,
    41408, 41409, 41410, 41411, 41412, 41413, 41414, 41415, 41416, 41417, 41418, 41419, 41420, 41421, 41422, 41423, 41424, 41425,
    41426, 41427, 41428, 41429, 41430, 41431, 41432, 41600, 41601, 41602, 41603, 41604, 41800, 42000, 42001, 42002, 42003, 42004,
    42005, 42006, 42007, 42008, 42009, 42010, 42011, 42200, 42201, 42202, 42203, 42204, 42205, 42206, 42207, 42208, 42400, 42401,
    42402, 42403, 42404, 42405, 42406, 42407, 42408, 42409, 42410, 42411, 42412, 42413, 42414, 42415, 42416, 42417, 42418, 42419,
    42420, 42421, 42422, 42423, 42424, 42600, 42601, 42800, 42801, 42802, 42803, 43000, 43001, 43200, 43201, 43202, 43203, 43204,
    43205, 43206, 43400, 43401, 43402, 43403, 43404, 43405, 43406, 43407, 43600, 43601, 43602, 43603, 43604, 43605, 43606, 43607,
    43608, 43609, 43610, 43611, 43612, 43613, 43614, 43615, 43616, 43617, 43618, 43619, 43620, 43621, 43622, 43623, 43624, 43625,
    43626, 43627, 43628, 43629, 43630, 43631, 43632, 43633, 43634, 43635, 43636, 43637, 43638, 43639, 43640, 43641, 43642, 43643,
    43644, 43645, 43646, 43647, 43648, 43649, 43650, 43651, 43652, 43653, 43654, 43655, 43656, 43657, 43658, 43659, 43660, 43661,
    43662, 43663, 43664, 43800, 43801, 43802, 43803, 43804, 43805, 43806, 43807, 43808, 43809, 43810, 43811, 43812, 43813, 43814,
    43815, 43816, 43817, 43818, 43819, 43820, 43821, 43822, 43823, 43824, 43825, 43826, 43827, 43828, 43829, 43830, 43831, 43832,
    43833, 43834, 43835, 43836, 43837, 43838, 43839, 43840, 43841, 43842, 43843, 43844, 43845, 43846, 43847, 43848, 43849, 43850,
    43851, 43852, 43853, 43854, 43855, 43856, 43857, 43858, 43859, 43860, 43861, 43862, 43863, 43864, 43865, 43866, 43867, 43868,
    43869, 43870, 43871, 43872, 43873, 43874, 43875, 43876, 43877, 43878, 43879, 43880, 43881, 43882, 43883, 43884, 43885, 43886,
    43887, 43888, 43889, 43890, 43891, 43892, 43893, 43894, 43895, 43896, 43897, 43898, 43899, 43900, 43901, 43902, 43903, 43904,
    43905, 44000, 44001, 44002, 44003, 44004, 44005, 44006, 44007, 44008, 44009, 44010, 44011, 44012, 44013, 44014, 44015, 44016,
    44017, 44018, 44019, 44020, 44021, 44022, 44023, 44024, 44025, 44026, 44027, 44028, 44029, 44030, 44031, 44032, 44033, 44034,
    44035, 44036, 44037, 44038, 44039, 44040, 44041, 44042, 44043, 44044, 44045, 44046, 44047, 44048, 44049, 44050, 44051, 44052,
    44053, 44054, 44055, 44056, 44057, 44058, 44059, 44060, 44061, 44062, 44063, 44064, 44065, 44066, 44067, 44068, 44069, 44070,
    44071, 44072, 44073, 44074, 44075, 44076, 44077, 44078, 44079, 44080, 44081, 44082, 44083, 44084, 44085, 44086, 44087, 44088,
    44089, 44090, 44091, 44092, 44093, 44094, 44095, 44096, 44097, 44098, 44099, 44100, 44101, 44102, 44103, 44104, 44105, 44106,
    44107, 44200, 44201, 44202, 44203, 44204, 44205, 44206, 44207, 44208, 44209, 44210, 44211, 44212, 44213, 44214, 44215, 44216,
    44217, 44218, 44219, 44220, 44221, 44222, 44223, 44224, 44225, 44226, 44227, 44228, 44229, 44230, 44231, 44232, 44233, 44234,
    44235, 44236, 44237, 44238, 44239, 44240, 44241, 44242, 44243, 44244, 44245, 44246, 44247, 44400, 44401, 44402, 44403, 44404,
    44405, 44406, 44407, 44408, 44409, 44410, 44411, 44412, 44413, 44414, 44415, 44416, 44417, 44418, 44419, 44420, 44421, 44422,
    44423, 44424, 44425, 44426, 44427, 44428, 44429, 44430, 44431, 44432, 44433, 44434, 44435, 44436, 44437, 44438, 44439, 44440,
    44441, 44442, 44443, 44444, 44600, 44601, 44602, 44603, 44604, 44605, 44606, 44607, 44608, 44609, 44610, 44611, 44612, 44613,
    44614, 44615, 44616, 44617, 44618, 44619, 44620, 44621, 44622, 44623, 44624, 44625, 44626, 44627, 44628, 44629, 44630, 44631,
    44800, 44801, 44802, 44803, 44804, 44805, 44806, 44807, 44808, 44809, 44810, 44811, 44812, 44813, 44814, 44815, 44816, 44817,
    44818, 44819, 44820, 45000, 45001, 45002, 45003, 45004, 45005, 45006, 45007, 45008, 45009, 45010, 45011, 45200, 45201, 45202,
    45203, 45204, 45205, 45206, 45207, 45208, 45209, 45210, 45211, 45212, 45213, 45214, 45215, 45216, 45217, 45218, 45219, 45220,
    45221, 45222, 45223, 45224, 45225, 45226, 45227, 45228, 45229, 45230, 45231, 45232, 45233, 45234, 45235, 45236, 45237, 45238,
    45239, 45240, 45241, 45242, 45243, 45244, 45245, 45246, 45247, 45248, 45249, 45250, 45251, 45252, 45253, 45254, 45255, 45400
};

enum intinfo
{
    int_interior,
    Float:int_x,
    Float:int_y,
    Float:int_z,
    Float:int_a,
    int_name[40]
}

new const Interiors[][intinfo] = {
{0,	  0.0,        0.0,        0.0,           0.0,         " "},
{5,   770.8033,   -0.7033,    1000.7267,     22.8599,     "Ganton Gym"},
{3,   974.0177,   -9.5937,    1001.1484,     22.6045,     "Brothel"},
{3,   961.9308,   -51.9071,   1001.1172,     95.5381,     "Brothel2"},
{3,   830.6016,   5.9404,     1004.1797,     125.8149,    "Inside Track Betting"},
{3,   1037.8276,  0.397,      1001.2845,     353.933,     "Blastin' Fools Records"},
{3,   1212.1489,  -28.5388,   1000.9531,     170.5692,    "The Big Spread Ranch"},
{18,  1290.4106,  1.9512,     1001.0201,     179.9419,    "Warehouse 1"},
{1,   1412.1472,  -2.2836,    1000.9241,     114.661,     "Warehouse 2"},
{3,   1527.0468,  -12.0236,   1002.0971,     350.0013,    "B Dup's Apartment"},
{0,   2547.1853,  2824.2493,  10.8203,       262.7038,    "KACC Miltary Warehouse"},
{3,   612.2191,   -123.9028,  997.9922,      266.5704,    "Wheel Arch Angels"},
{3,   512.9291,   -11.6929,   1001.5653,     198.7669,    "OG Loc's House"},
{3,   418.4666,   -80.4595,   1001.8047,     343.2358,    "Barber Shop"},
{3,   386.5259,   173.6381,   1008.3828,     63.7399,     "Planning Department"},
{3,   288.4723,   170.0647,   1007.1794,     22.0477,     "Las Venturas Police Department"},
{3,   206.4627,   -137.7076,  1003.0938,     10.9347,     "Pro-Laps"},
{3,   -100.2674,  -22.9376,   1000.7188,     17.285,      "Sex Shop"},
{3,   -201.2236,  -43.2465,   1002.2734,     45.8613,     "Las Venturas Tattoo parlor"},
{17,  -202.9381,  -6.7006,    1002.2734,     204.2693,    "Lost San Fierro Tattoo parlor"},
{17,  -17.9142,   -173.4321,  1003.5469,     45.1436,     "24/7 (version 1)"},
{5,   454.9853,   -107.2548,  999.4376,      309.0195,    "Diner 1"},
{5,   372.5565,   -131.3607,  1001.4922,     354.2285,    "Pizza Stack"},
{17,  378.026,    -190.5155,  1000.6328,     141.0245,    "Rusty Brown's Donuts"},
{7,   315.244,    -140.8858,  999.6016,      7.4226,      "Ammu-nation"},
{5,   225.0306,   -9.1838,    1002.218,      85.5322,     "Victim"},
{2,   611.3536,   -77.5574,   997.9995,      320.9263,    "Loco Low Co"},
{10,  246.0688,   108.9703,   1003.2188,     0.2922,      "San Fierro Police Department"},
{10,  6.0856,     -28.8966,   1003.5494,     5.0365,      "24/7 (version 2 - large)"},
{7,   773.7318,   -74.6957,   1000.6542,     5.2304,      "Below The Belt Gym (Las Venturas)"},
{1,   621.4528,   -23.7289,   1000.9219,     15.6789,     "Transfenders"},
{1,  445.6003,   -6.9823,    1000.7344,     172.2105,     "World of Coq"},
{1,   285.8361,   -39.0166,   1001.5156,     0.7529,      "Ammu-nation (version 2)"},
{1,   204.1174,   -46.8047,   1001.8047,     357.5777,    "SubUrban"},
{1,   245.2307,   304.7632,   999.1484,      273.4364,    "Denise's Bedroom"},
{3,   290.623,    309.0622,   999.1484,      89.9164,     "Helena's Barn"},
{5,   322.5014,   303.6906,   999.1484,      8.1747,      "Barbara's Love nest"},
{1,   -2041.2334, 178.3969,   28.8465,       156.2153,    "San Fierro Garage"},
{1,   -1402.6613, 106.3897,   1032.2734,     105.1356,    "Oval Stadium"},
{7,   -1403.0116, -250.4526,  1043.5341,     355.8576,    "8-Track Stadium"},
{2,   1207.5087,  3.6289,     1000.9219,     214.6596,    "The Pig Pen (strip club 2)"},
{10,  2016.1156,  1017.1541,  996.875,       88.0055,     "Four Dragons"},
{1,   -741.8495,  493.0036,   1371.9766,     71.7782,     "Liberty City"},
{2,   2447.8704,  -1704.4509, 1013.5078,     314.5253,    "Ryder's house"},
{1,   2527.0176,  -1679.2076, 1015.4986,     260.9709,    "Sweet's House"},
{10,  -1129.8909, 1057.5424,  1346.4141,     274.5268,    "RC Battlefield"},
{3,   2496.0549,  -1695.1749, 1014.7422,     179.2174,    "The Johnson House"},
{10,  366.0248,   -73.3478,   1001.5078,     292.0084,    "Burger shot"},
{1,   2233.9363,  1711.8038,  1011.6312,     184.3891,    "Caligula's Casino"},
{2,   269.6405,   305.9512,   999.1484,      215.6625,    "Katie's Lovenest"},
{2,   414.2987,   -18.8044,   1001.8047,     41.4265,     "Barber Shop 2 (Reece's)"},
{2,   1.1853,     -3.2387,    999.4284,      87.5718,     "Angel Pine Trailer"},
{18,  -30.9875,   -89.6806,   1003.5469,     359.8401,    "24/7 (version 3)"},
{18,  161.4048,   -94.2416,   1001.8047,     0.7938,      "Zip"},
{3,   -2638.8232, 1407.3395,  906.4609,      94.6794,     "The Pleasure Domes"},
{5,   1267.8407,  -776.9587,  1091.9063,     231.3418,    "Madd Dogg's Mansion"},
{2,   2536.5322,  -1294.8425, 1044.125,      254.9548,    "Big Smoke's Crack Palace"},
{5,   2350.1597,  -1181.0658, 1027.9766,     99.1864,     "Burning Desire Building"},
{1,   -2158.6731, 642.09,     1052.375,      86.5402,     "Wu-Zi Mu's"},
{10,  419.8936,   2537.1155,  10.0000,       67.6537,     "Abandoned AC tower"},
{14,  256.9047,   -41.6537,   1002.0234,     85.8774,     "Wardrobe/Changing room"},
{14,  204.1658,   -165.7678,  1000.5234,     181.7583,    "Didier Sachs"},
{12,  1133.35,    -7.8462,    1000.6797,     165.8482,    "Casino (Redsands West)"},
{14,  -1420.4277, 1616.9221,  1052.5313,     159.1255,    "Kickstart Stadium"},
{17,  488.4389,   -11.4271,   1000.6797,     130.6844,    "Club"},
{18,  1727.2853,  -1642.9451, 20.2254,       172.4193,    "Atrium"},
{16,  -202.842,   -24.0325,   1002.2734,     252.8154,    "Los Santos Tattoo Parlor"},
{5,   2233.6919,  -1112.8107, 1050.8828,     8.6483,      "Safe House group 1"},
{6,   1211.2484,  1049.0234,  1050.9410,     170.9341,    "Safe House group 2"},
{9,   2319.1272,  -1023.9562, 1050.2109,     167.3959,    "Safe House group 3"},
{10,  2261.0977,  -1137.8833, 1050.6328,     266.88,      "Safe House group 4"},
{17,  -944.2402,  1886.1536,  5.0051,        179.8548,    "Sherman Dam"},
{16,  -24.6959,   -130.3763,  1003.5469,     178.9616,    "24/7 (version 4)"},
{15,  2217.281,   -1150.5349, 1025.7969,     273.7328,    "Jefferson Motel"},
{1,   1.5491,     23.3183,    1199.5938,     359.9054,    "Jet Interior"},
{1,   681.6216,   -451.8933,  -25.6172,      166.166,     "The Welcome Pump"},
{3,   234.6087,   1187.8195,  1080.2578,     349.4844,    "Burglary House X1"},
{2,   225.5707,   1240.0643,  1082.1406,     96.2852,     "Burglary House X2"},
{1,   224.288,    1289.1907,  1082.1406,     359.868,     "Burglary House X3"},
{5,   239.2819,   1114.1991,  1080.9922,     270.2654,    "Burglary House X4"},
{15,  207.5219,   -109.7448,  1005.1328,     358.62,      "Binco"},
{15,  295.1391,   1473.3719,  1080.2578,     352.9526,    "4 Burglary houses"},
{15,  -1417.8927, 932.4482,   1041.5313,     0.7013,      "Blood Bowl Stadium"},
{12,  446.3247,   509.9662,   1001.4195,     330.5671,    "Budget Inn Motel Room"},
{0,   2306.3826,  -15.2365,   26.7496,       274.49,      "Palamino Bank"},
{0,   2331.8984,  6.7816,     26.5032,       100.2357,    "Palamino Diner"},
{0,   663.0588,   -573.6274,  16.3359,       264.9829,    "Dillimore Gas Station"},
{18,  -227.5703,  1401.5544,  27.7656,       269.2978,    "Lil' Probe Inn"},
{0,   -688.1496,  942.0826,   13.6328,       177.6574,    "Torreno's Ranch"},
{0,   -1916.1268, 714.8617,   46.5625,       152.2839,    "Zombotech - lobby area"},
{0,   818.7714,   -1102.8689, 25.794,        91.1439,     "Crypt in LS cemetery (temple)"},
{0,   255.2083,   -59.6753,   1.5703,        1.4645,      "Blueberry Liquor Store"},
{2,   446.626,    1397.738,   1084.3047,     343.9647,    "Pair of Burglary Houses"},
{5,   227.3922,   1114.6572,  1080.9985,     267.459,     "Crack Den"},
{5,   227.7559,   1114.3844,  1080.9922,     266.2624,    "Burglary House X11"},
{4,   261.1165,   1287.2197,  1080.2578,     178.9149,    "Burglary House X12"},
{4,   291.7626,   -80.1306,   1001.5156,     290.2195,    "Ammu-nation (version 3)"},
{4,   449.0172,   -88.9894,   999.5547,      89.6608,     "Jay's Diner"},
{4,   -27.844,    -26.6737,   1003.5573,     184.3118,    "24/7 (version 5)"},
{0,   2135.2004,  -2276.2815, 20.6719,       318.59,      "Warehouse 3"},
{4,   306.1966,   307.819,    1003.3047,     203.1354,    "Michelle's Love Nest*"},
{10,  24.3769,    1341.1829,  1084.375,      8.3305,      "Burglary House X14"},
{1,   963.0586,   2159.7563,  1011.0303,     175.313,     "Sindacco Abatoir"},
{0,   2548.4807,  2823.7429,  10.8203,       270.6003,    "K.A.C.C. Military Fuels Depot"},
{0,   215.1515,   1874.0579,  13.1406,       177.5538,    "Area 69"},
{4,   221.6766,   1142.4962,  1082.6094,     184.9618,    "Burglary House X13"},
{12,  2323.7063,  -1147.6509, 1050.7101,     206.5352,    "Unused Safe House"},
{6,   344.9984,   307.1824,   999.1557,      193.643,     "Millie's Bedroom"},
{12,  411.9707,   -51.9217,   1001.8984,     173.3449,    "Barber Shop"},
{4,   -1421.5618, -663.8262,  1059.5569,     170.9341,    "Dirtbike Stadium"},
{6,   773.8887,   -47.7698,   1000.5859,     10.7161,     "Cobra Gym"},
{6,   246.6695,   65.8039,    1003.6406,     7.9562,      "Los Santos Police Department"},
{14,  -1864.9434, 55.7325,    1055.5276,     85.8541,     "Los Santos Airport"},
{4,   -262.1759,  1456.6158,  1084.3672,     82.459,      "Burglary House X15"},
{5,   22.861,     1404.9165,  1084.4297,     349.6158,    "Burglary House X16"},
{5,   140.3679,   1367.8837,  1083.8621,     349.2372,    "Burglary House X17"},
{3,   1494.8589,  1306.48,    1093.2953,     196.065,     "Bike School"},
{14,  -1813.213,  -58.012,    1058.9641,     335.3199,    "Francis International Airport"},
{16,  -1401.067,  1265.3706,  1039.8672,     178.6483,    "Vice Stadium"},
{6,   234.2826,   1065.229,   1084.2101,     4.3864,      "Burglary House X18"},
{6,   -68.5145,   1353.8485,  1080.2109,     3.5742,      "Burglary House X19"},
{6,   -2240.1028, 136.973,    1035.4141,     269.0954,    "Zero's RC Shop"},
{6,   297.144,    -109.8702,  1001.5156,     20.2254,     "Ammu-nation (version 4)"},
{6,   316.5025,   -167.6272,  999.5938,      10.3031,     "Ammu-nation (version 5)"},
{15,  -285.2511,  1471.197,   1084.375,      85.6547,     "Burglary House X20"},
{6,   -26.8339,   -55.5846,   1003.5469,     3.9528,      "24/7 (version 6)"},
{6,   442.1295,   -52.4782,   999.7167,      177.9394,    "Secret Valley Diner"},
{2,   2182.2017,  1628.5848,  1043.8723,     224.8601,    "Rosenberg's Office in Caligulas"},
{6,   748.4623,   1438.2378,  1102.9531,     0.6069,      "Fanny Batter's Whore House"},
{8,   2807.3604,  -1171.7048, 1025.5703,     193.7117,    "Colonel Furhberger's"},
{9,   366.0002,   -9.4338,    1001.8516,     160.528,     "Cluckin' Bell"},
{1,   2216.1282,  -1076.3052, 1050.4844,     86.428,      "The Camel's Toe Safehouse"},
{1,   2268.5156,  1647.7682,  1084.2344,     99.7331,     "Caligula's Roof"},
{2,   2236.6997,  -1078.9478, 1049.0234,     2.5706,      "Old Venturas Strip Casino"},
{3,   -2031.1196, -115.8287,  1035.1719,     190.1877,    "Driving School"},
{8,   2365.1089,  -1133.0795, 1050.875,      177.3947,    "Verdant Bluffs Safehouse"},
{0,   1168.512,   1360.1145,  10.9293,       196.5933,    "Bike School"},
{9,   315.4544,   976.5972,   1960.8511,     359.6368,    "Andromada"},
{10,  1893.0731,  1017.8958,  31.8828,       86.1044,     "Four Dragons' Janitor's Office"},
{11,  501.9578,   -70.5648,   998.7578,      171.5706,    "Bar"},
{8,   -42.5267,   1408.23,    1084.4297,     172.068,     "Burglary House X21"},
{11,  2283.3118,  1139.307,   1050.8984,     19.7032,     "Willowfield Safehouse"},
{9,   84.9244,    1324.2983,  1083.8594,     159.5582,    "Burglary House X22"},
{9,   260.7421,   1238.2261,  1084.2578,     84.3084,     "Burglary House X23"},
{0,   -1658.1656, 1215.0002,  7.25,          103.9074,    "Otto's Autos"},
{0,   -1961.6281, 295.2378,   35.4688,       264.4891,    "Wang Cars"},
{11,  2003.1178,  1015.1948,  33.008,        351.5789,    "Four Dragons' Managerial Suite"},
{0,   1087.5002,  2092.8938,  15.3504,		  92.5994,     "Mafia Chip Making Factory"}
};


// Includes that need global variables to be declared first
#include <gBugFix>
//#include <freecam>

//==========================
/*	Linking function to make a new string that would
	reformat string by replacing COL_PRIM by selected
	color layout
*/
//#define formatz(%1,%2,%3) format(%1,%2,%3),format_fix_color(%1)
//======================================================
/* Changes Occurance of COL_PRIM to value contained in ColScheme */
/* Dont change value of COL_PRIM define */
stock format_fix_color(string[])
{
	new l = 0 , len = 0;
	loop_again:
	l = strfind(string,COL_PRIM,true,l+len);
	if( l != -1 )
	{
	    //printf("%s string // %d // %d", string, l, len );
		len = strlen(COL_PRIM);
		strdel(string,l,l+len);
		strins(string,ColScheme,l, strlen(string) + 10);
		goto loop_again;
	}
	else return 1;
    return 0;
}
// did made this code snippet from editing of Ryder`'s SendFormatMessage!
stock _reformat(string[], const iLen, const szFormat[], { Float, _ }: ...) {
    new
        iArgs = (numargs() - 3) << 2
    ;
    //printf("string: %s // len : %d, %s", string, iLen, szFormat );
    if(iArgs) {
        static
            s_iAddr1,
            s_iAddr2
        ;
        #emit ADDR.PRI szFormat
        #emit STOR.PRI s_iAddr1

        for(s_iAddr2 = s_iAddr1 + iArgs, iArgs += 12; s_iAddr2 != s_iAddr1; s_iAddr2 -= 4) {
            #emit LOAD.PRI s_iAddr2
            #emit LOAD.I
            #emit PUSH.PRI
        }
		//load into primary register
		#emit LOAD.S.PRI string

		//push arguments in order 3 , 2 , 1 respectively
        #emit PUSH.S szFormat // 3
        #emit PUSH.S iLen // 2
        #emit PUSH.PRI  //1 . push information from primary register into stack >.>
        #emit PUSH.S iArgs // number of args
        #emit SYSREQ.C format
		// called ^ native function in format: format( string, ilen,szformat )
        #emit LCTRL 4
        #emit LOAD.S.ALT iArgs
        #emit ADD.C 4
        #emit ADD
        #emit SCTRL 4

        //strcat(string,s_szBuf,iLen);
		//printf("INSIDE reformat1 : %s",string);
		format_fix_color(string);
		//printf("INSIDE reformat2 : %s",string);
        return 1;
    }
    else
    {
        format(string,iLen,szFormat);
    }
    return 0;
}

#if defined _ALS_format
    #undef format
#else
    #define _ALS_format
#endif
// Reroute future calls to our function.
#define format _reformat

//======================================================
stock fixColor_SendClientMessage(playerid,color,mess[])
{
    format_fix_color(mess);
	SendClientMessage(playerid,color,mess);
	return 1;
}
#if defined _ALS_SendClientMessage
    #undef SendClientMessage
#else
    #define _ALS_SendClientMessage
#endif
// Reroute future calls to our function.
#define SendClientMessage fixColor_SendClientMessage

//======================================================
stock fixColor_SendClientMessageToAll(color,mess[])
{
    format_fix_color(mess);
	SendClientMessageToAll(color,mess);
	return 1;
}
#if defined _ALS_SendClientMessageToAll
    #undef SendClientMessageToAll
#else
    #define _ALS_SendClientMessageToAll
#endif
// Reroute future calls to our function.
#define SendClientMessageToAll fixColor_SendClientMessageToAll


//===========================


//------------------------------------------------------------------------------
main(){} //---------------------------------------------------------------------
//------------------------------------------------------------------------------

// match sync <start>
#if MATCH_SYNC == 1

#include <a_mysql>

new
	MATCHSYNC_Kills[MAX_PLAYERS],
	MATCHSYNC_Damage[MAX_PLAYERS],
	MATCHSYNC_Accuracy[MAX_PLAYERS],
	MATCHSYNC_Rounds[MAX_PLAYERS];

stock MATCHSYNC_Init()
{
	mysql_close();
	mysql_debug(1);
 	mysql_connect("", "", "", "");
	return 1;
}

stock MATCHSYNC_DoesNameExist(nametocheck[])
{
	new query[70],result[128];
	format(query, sizeof(query), "SELECT SQLid FROM Players WHERE Name='%s'", nametocheck);
	mysql_query(query);
	mysql_store_result();
	if(mysql_fetch_row(result))
	{
	    mysql_free_result();
	    return 1;
 	}
 	else
 	{
 	    mysql_free_result();
  	}
	return 0;
}

stock MATCHSYNC_SyncPlayerKills(playerid)
{
    new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid, name, sizeof name);
	new query[70],result[128];
	format(query, sizeof(query), "SELECT Kills FROM Players WHERE Name='%s'", name);
	mysql_query(query);
	mysql_store_result();
	if(mysql_fetch_row(result))
	{
	    MATCHSYNC_Kills[playerid] = strval(result);
 	}
 	mysql_free_result();
	return 1;
}

stock MATCHSYNC_SyncPlayerDamage(playerid)
{
    new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid, name, sizeof name);
	new query[70],result[128];
	format(query, sizeof(query), "SELECT Damage FROM Players WHERE Name='%s'", name);
	mysql_query(query);
	mysql_store_result();
	if(mysql_fetch_row(result))
	{
	    MATCHSYNC_Damage[playerid] = strval(result);
 	}
 	mysql_free_result();
	return 1;
}

stock MATCHSYNC_SyncPlayerAccuracy(playerid)
{
    new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid, name, sizeof name);
	new query[70],result[128];
	format(query, sizeof(query), "SELECT Accuracy FROM Players WHERE Name='%s'", name);
	mysql_query(query);
	mysql_store_result();
	if(mysql_fetch_row(result))
	{
	    MATCHSYNC_Accuracy[playerid] = strval(result);
 	}
 	mysql_free_result();
	return 1;
}

stock MATCHSYNC_SyncPlayerRounds(playerid)
{
    new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid, name, sizeof name);
	new query[70],result[128];
	format(query, sizeof(query), "SELECT Rounds FROM Players WHERE Name='%s'", name);
	mysql_query(query);
	mysql_store_result();
	if(mysql_fetch_row(result))
	{
	    MATCHSYNC_Rounds[playerid] = strval(result);
 	}
 	mysql_free_result();
	return 1;
}

stock MATCHSYNC_SyncAllPlayers()
{
    foreach(new i : Player)
    {
        new name[MAX_PLAYER_NAME];
        GetPlayerName(i, name, sizeof name);
        if(strfind(name, "[KHK]", true, 0) != -1 || strfind(name, "[KHKr]", true, 0) != -1 || strfind(name, "[KHKa]", true, 0) != -1)
        {
            MATCHSYNC_SyncPlayerKills(i);
            MATCHSYNC_SyncPlayerDamage(i);
            MATCHSYNC_SyncPlayerAccuracy(i);
            MATCHSYNC_SyncPlayerRounds(i);
        }
    }
	return 1;
}

stock MATCHSYNC_InsertPlayer(playerid)
{
	new query[256];
	new _name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, _name, sizeof(_name));
	format(query, sizeof(query), "INSERT INTO Players (Name, Damage, Kills, Accuracy, Rounds) VALUES ('%s', %d, %d, %d, %d)", _name, floatround(Player[playerid][TotalDamage]), Player[playerid][TotalKills], floatround(Player[playerid][TotalAccuracy]), Player[playerid][RoundPlayed]);
	mysql_query(query);
}

stock MATCHSYNC_UpdatePlayer(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof name);
	new query[256];
	format(query, sizeof(query), "UPDATE Players SET Damage=%d, Kills=%d, Accuracy=%d, Rounds=%d WHERE Name='%s'", MATCHSYNC_Damage[playerid], MATCHSYNC_Kills[playerid], MATCHSYNC_Accuracy[playerid], MATCHSYNC_Rounds[playerid], name);
	mysql_query(query);
	return 1;
}

#define WHEN_ROUND_END 0
#define WHEN_MATCH_END 1

stock MATCHSYNC_UpdateAllPlayers(when)
{
	if(ESLMode == false && WarMode == true)
	{
	    if((strlen(TeamName[ATTACKER]) <= 3 && !strcmp(TeamName[ATTACKER], "KHK", true, 3)) || (strlen(TeamName[DEFENDER]) <= 3 && !strcmp(TeamName[DEFENDER], "KHK", true, 3)))
		{
		    SendClientMessageToAll(-1, ""COL_PRIM"Match-sync: {FFFFFF}Syncing all players data before updating!");
			MATCHSYNC_SyncAllPlayers();
			SendClientMessageToAll(-1, ""COL_PRIM"Match-sync: {FFFFFF}Updating all players data...");
		    foreach(new i : Player)
		    {
		        new name[MAX_PLAYER_NAME];
		        GetPlayerName(i, name, sizeof name);
		        if(strfind(name, "[KHK]", true, 0) != -1 || strfind(name, "[KHKr]", true, 0) != -1 || strfind(name, "[KHKa]", true, 0) != -1)
		        {
		            if(MATCHSYNC_DoesNameExist(name) == 0)
	 					MATCHSYNC_InsertPlayer(i);
					else
					{
					    switch(when)
					    {
					        case WHEN_MATCH_END:
					        {
					            if(Player[i][RoundKills] == 0 && floatround(Player[i][RoundDamage]) == 0 && floatround(Player[i][Accuracy]) == 0)
									goto skipped;
								MATCHSYNC_Kills[i] += Player[i][TotalKills];
								MATCHSYNC_Damage[i] += floatround(Player[i][TotalDamage]);
								MATCHSYNC_Accuracy[i] += floatround(Player[i][TotalAccuracy]); // null
								MATCHSYNC_Rounds[i] += Player[i][RoundPlayed];
							}
							case WHEN_ROUND_END:
							{
							    if(Player[i][RoundKills] == 0 && floatround(Player[i][RoundDamage]) == 0 && floatround(Player[i][Accuracy]) == 0)
									goto skipped;
							    MATCHSYNC_Kills[i] += Player[i][RoundKills];
								MATCHSYNC_Damage[i] += floatround(Player[i][RoundDamage]);
								MATCHSYNC_Accuracy[i] += floatround(Player[i][Accuracy]);
								MATCHSYNC_Rounds[i] ++;
							}
						}
						MATCHSYNC_UpdatePlayer(i);
						skipped:
					}
		        }
		    }
		    SendClientMessageToAll(-1, ""COL_PRIM"Match-sync: {FFFFFF}Synced and updated all players data successfully!");
		}
	}
	return 1;
}

stock MATCHSYNC_InsertMatchStats()
{
    SendClientMessageToAll(-1, ""COL_PRIM"Match-sync: {FFFFFF}Uploading match stats to the MySQL database!");
	new winnerName[16], loserName[16], score[16];
	if(TeamScore[ATTACKER] > TeamScore[DEFENDER])
	{
	    format(winnerName, sizeof winnerName, "%s", TeamName[ATTACKER]);
	    format(loserName, sizeof loserName, "%s", TeamName[DEFENDER]);
	    format(score, sizeof score, "%d:%d", TeamScore[ATTACKER], TeamScore[DEFENDER]);
	}
	else if(TeamScore[DEFENDER] > TeamScore[ATTACKER])
	{
	    format(winnerName, sizeof winnerName, "%s", TeamName[DEFENDER]);
	    format(loserName, sizeof loserName, "%s", TeamName[ATTACKER]);
	    format(score, sizeof score, "%d:%d", TeamScore[DEFENDER], TeamScore[ATTACKER]);
	}
	else
	{
	    format(winnerName, sizeof winnerName, "%s", TeamName[ATTACKER]);
	    format(loserName, sizeof loserName, "%s", TeamName[DEFENDER]);
	    format(score, sizeof score, "%d:%d", TeamScore[ATTACKER], TeamScore[DEFENDER]);
	}
	new date[64];
    new Year, Month, Day;
	getdate(Year, Month, Day);
	new Hours, Minutes, Seconds;
	gettime(Hours, Minutes, Seconds);
	format(date, sizeof date, "[%02d/%02d/%d]:[%02d:%02d:%02d]", Day, Month, Year, Hours, Minutes, Seconds);
	new alAC[16];

	#if ANTICHEAT == 1
	if(AntiCheat == true)
		format(alAC, sizeof alAC, "Was On");
	else
		format(alAC, sizeof alAC, "Was Off");
	#else
 	format(alAC, sizeof alAC, "Was Off");
	#endif

	new query[300];
	format(query, sizeof(query), "INSERT INTO Matches (TeamA, TeamB, Score, DateTime, AC) VALUES ('%s', '%s', '%s', '%s', '%s')", winnerName, loserName, score, date, alAC);
	mysql_query(query);
	SendClientMessageToAll(-1, ""COL_PRIM"Match-sync: {FFFFFF}Match stats has been uploaded successfully!");
}

#endif
// match sync <end>

// version checker <start>
#define VERSION_CHAR_LENGTH     		4

#define VERSION_CHECKER_VERSION_URL		"sixtytiger.com/khalid/AttDef_API/VersionChecker/version.php"
#define VERSION_CHECKER_FORCEUSER_URL	"sixtytiger.com/khalid/AttDef_API/VersionChecker/forceuser.php"
#define VERSION_CHECKER_CHANGELOG_URL	"INVALID SHIT"

#define VERSION_IS_BEHIND       		0
#define VERSION_IS_UPTODATE     		1

#define VERSION_CHECKER_METHOD          1 // (1 for new method which is good when updates are more frequent - 0 for old method)

#if VERSION_CHECKER_METHOD == 0
new 	GM_VERSION[6] =		"2.6.0"; // Don't forget to change the length
#endif

new VersionReport = -1;
new bool:VersionCheckerStatus = false, bool:ForceUserToNewestVersion = false;
new LatestVersionStr[64], LatestVersionChangesStr[512];
new VC_ConnectionFailures = 0;

stock InitVersionChecker(timer = true, moreinfo = false)
{
	if(timer)
	{
		SetTimer("ReportServerVersion", 1 * 60 * 60 * 1000, true);
	}
	if(moreinfo)
	{
	    HTTP(1, HTTP_GET, VERSION_CHECKER_FORCEUSER_URL, "", "ForceUserToUseNewest");
	}
	HTTP(0, HTTP_GET, VERSION_CHECKER_VERSION_URL, "", "SaveVersionInStr");
	return 1;
}

forward ReportServerVersion_Delayed();
public ReportServerVersion_Delayed()
{
    if(!VersionCheckerStatus)
    {
        if(VC_ConnectionFailures < 6)
        {
            SetTimer("ReportServerVersion_Delayed", 2000, false);
        }
	    return 0;
	}
	    
    if(VersionReport == VERSION_IS_BEHIND)
 	{
     	SendClientMessageToAll(-1, ""COL_PRIM"Version checker: {FFFFFF}the version used in this server is out-dated. You can visit "COL_PRIM"www.sixtytiger.com {FFFFFF}to get the latest version");
        #if VERSION_CHECKER_METHOD == 0
		SendClientMessageToAll(-1, sprintf(""COL_PRIM"Server version: {FFFFFF}%s "COL_PRIM"| Newest version: {FFFFFF}%s", GM_VERSION, LatestVersionStr));
		#endif
		#if VERSION_CHECKER_METHOD == 1
        SendClientMessageToAll(-1, sprintf(""COL_PRIM"Server version: {FFFFFF}%s "COL_PRIM"| Newest version: {FFFFFF}%s", GM_NAME, LatestVersionStr));
		#endif
		if(ForceUserToNewestVersion)
		{
		    foreach(new i : Player)
		    {
		        VersionOutdatedKick(i);
		    }
		}
	}
	/*else
 	{
     	SendClientMessageToAll(-1, sprintf(""COL_PRIM"Server version: {FFFFFF}%s "COL_PRIM"| Newest version: {FFFFFF}%s", GM_VERSION, LatestVersionStr));
	}*/
	return 1;
}

forward ReportServerVersion();
public ReportServerVersion()
{
	if(!VersionCheckerStatus)
	    return 0;

    HTTP(0, HTTP_GET, VERSION_CHECKER_VERSION_URL, "", "SaveVersionInStr");
    HTTP(1, HTTP_GET, VERSION_CHECKER_FORCEUSER_URL, "", "ForceUserToUseNewest");
    SetTimer("ReportServerVersion_Delayed", 2000, false);
	return 1;
}

forward ForceUserToUseNewest(index, response_code, data[]);
public ForceUserToUseNewest(index, response_code, data[])
{
    if(response_code == 200)
    {
		new value = strval(data);
		if(value == 0)
		{
		    ForceUserToNewestVersion = false;
		}
		else if(value == 1)
		{
		    ForceUserToNewestVersion = true;
		}
    }
    else
    {
        if(VC_ConnectionFailures < 6)
        {
	        ForceUserToNewestVersion = false;
	        HTTP(1, HTTP_GET, VERSION_CHECKER_FORCEUSER_URL, "", "ForceUserToUseNewest");
	        VC_ConnectionFailures ++;
	 	}
	}
	return 1;
}

forward SaveVersionInStr(index, response_code, data[]);
public SaveVersionInStr(index, response_code, data[])
{
    if(response_code == 200)
    {
		format(LatestVersionStr, sizeof LatestVersionStr, "%s", data);
		VersionCheckerStatus = true;
		VersionReport = ReportVersion();
		//HTTP(0, HTTP_GET, VERSION_CHECKER_CHANGELOG_URL, "", "SaveChangelogInStr");
    }
    else
    {
        if(VC_ConnectionFailures < 6)
        {
	        VersionCheckerStatus = false;
	        HTTP(0, HTTP_GET, VERSION_CHECKER_VERSION_URL, "", "SaveVersionInStr");
	        VC_ConnectionFailures ++;
		}
	}
	return 1;
}

forward SaveChangelogInStr(index, response_code, data[]);
public SaveChangelogInStr(index, response_code, data[])
{
    if(response_code == 200)
    {
		format(LatestVersionChangesStr, sizeof LatestVersionChangesStr, "%s", data);
    }
    else
        VersionCheckerStatus = false;
    return 1;
}

stock ReportVersion()
{
	if(!VersionCheckerStatus)
		return -1;

	#if VERSION_CHECKER_METHOD == 0
	// spliting the version str on the website
	new first[VERSION_CHAR_LENGTH], second[VERSION_CHAR_LENGTH], third[VERSION_CHAR_LENGTH];
	format(first, sizeof first, "");
	format(second, sizeof second, "");
	format(third, sizeof third, "");
	new pos = 0;
	for(new i = 0; i < strlen(LatestVersionStr) + 2; i ++)
	{
	    if(LatestVersionStr[i] == '.')
	    {
			pos ++;
			continue;
		}
        if(!strlen(LatestVersionStr[i]))
		    break;

		switch(pos)
		{
		    case 0:
		    {format(first, sizeof first, "%s%c", first, LatestVersionStr[i]);}
		    case 1:
		    {format(second, sizeof second, "%s%c", second, LatestVersionStr[i]);}
		    case 2:
		    {format(third, sizeof third, "%s%c", third, LatestVersionStr[i]);}
		}
	}
	// spliting the version str on the server
	new svfirst[VERSION_CHAR_LENGTH], svsecond[VERSION_CHAR_LENGTH], svthird[VERSION_CHAR_LENGTH];
	format(svfirst, sizeof svfirst, "");
	format(svsecond, sizeof svsecond, "");
	format(svthird, sizeof svthird, "");
	pos = 0;
	for(new i = 0; i < strlen(GM_VERSION) + 2; i ++)
	{
	    if(GM_VERSION[i] == '.')
	    {
			pos ++;
			continue;
		}
		if(!strlen(GM_VERSION[i]))
		    break;

		switch(pos)
		{
		    case 0:
		    {format(svfirst, sizeof svfirst, "%s%c", svfirst, GM_VERSION[i]);}
		    case 1:
		    {format(svsecond, sizeof svsecond, "%s%c", svsecond, GM_VERSION[i]);}
		    case 2:
		    {format(svthird, sizeof svthird, "%s%c", svthird, GM_VERSION[i]);}
		}
	}
	// comparing them

	if(strval(first) > strval(svfirst))
 	{
 	    return VERSION_IS_BEHIND;
	}

    if(strval(first) == strval(svfirst))
    {
		if(strval(second) > strval(svsecond))
     	{
     	    return VERSION_IS_BEHIND;
		}
	}

    if(strval(first) == strval(svfirst))
    {
    	if(strval(second) == strval(svsecond))
    	{
    	    if(strval(third) > strval(svthird))
        	{
        	    return VERSION_IS_BEHIND;
			}
		}
	}
	#endif
	#if VERSION_CHECKER_METHOD == 1
	if(strcmp(GM_NAME, LatestVersionStr, true) != 0)
	{
		return VERSION_IS_BEHIND;
	}
	#endif

	return VERSION_IS_UPTODATE;
}

CMD:checkversion(playerid, params[])
{
	if(!VersionCheckerStatus)
	    return SendErrorMessage(playerid, "Connection error. Try again later maybe!");
	    
    #if VERSION_CHECKER_METHOD == 1
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Version Checker",
	 sprintf(""COL_PRIM"Server version: {FFFFFF}%s "COL_PRIM"| Newest version: {FFFFFF}%s", GM_NAME, LatestVersionStr), "Okay", "");
	#endif
	#if VERSION_CHECKER_METHOD == 0
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Version Checker",
	 sprintf(""COL_PRIM"Server version: {FFFFFF}%s "COL_PRIM"| Newest version: {FFFFFF}%s", GM_VERSION, LatestVersionStr), "Okay", "");
	#endif
	return 1;
}
// version checker <end>

// graffiti <start>
new GRAFFObject[MAX_PLAYERS],
	Text[MAX_PLAYERS][128],
	Size[MAX_PLAYERS] = 50,
	Index[MAX_PLAYERS] = 0,
	UseBold[MAX_PLAYERS] = 0,
	TextAlign[MAX_PLAYERS] = 1,
	FontName[MAX_PLAYERS][128],
	FontSize[MAX_PLAYERS] = 24,
	GRAFFTextColor[MAX_PLAYERS],
	BackgColor[MAX_PLAYERS],
	OName[MAX_PLAYERS][30],
	ObjectID[MAX_PLAYERS] = 19353,
	Float:GRAFFPos[MAX_PLAYERS][4], Float:GRAFFRot[MAX_PLAYERS][3];

new
	bool:CreatingTextO[MAX_PLAYERS] = false;

#define GRAFF_Grey              "{C4C4C4}"

#define MAX_GRAFFS 200

enum GRAFFITI_DATA
{
	G_id,
 	G_sprayedtext[128],
 	G_materialsize,
	G_fontsize,
	G_bold,
	G_textalignment,
	G_fontface[32],
	G_textcolor,
	G_backcolor,
	G_objectmodel,
	Float:G_pos[6],
	Text3D:G_label
};

new TotalGraffs = 0, GraffData[MAX_GRAFFS][GRAFFITI_DATA], bool:GraffExists[MAX_GRAFFS], bool:IsGraff[MAX_OBJECTS];

stock LoadGraffs()
{
    DeleteAllGraffs();
	#if MYSQL == 0
		new iString[160];
		TotalGraffs = 0;

        new DBResult:res = db_query(sqliteconnection, "SELECT * FROM Graffs ORDER BY ID ASC");
	    for(new i = 0; i < MAX_GRAFFS; i++) GraffExists[i] = false;
	    new i;
	    if(db_num_rows(res) <= 0)
	        goto skipped;
		do {
			db_get_field_assoc(res, "ID", iString, sizeof(iString));
			i = strval(iString);
			GraffData[i][G_id] = i;

			db_get_field_assoc(res, "Text", GraffData[i][G_sprayedtext], 128);

			db_get_field_assoc(res, "MaterialSize", iString, sizeof(iString));
		    GraffData[i][G_materialsize] = strval(iString);

			db_get_field_assoc(res, "FontSize", iString, sizeof(iString));
		    GraffData[i][G_fontsize] = strval(iString);

		    db_get_field_assoc(res, "Bold", iString, sizeof(iString));
		    GraffData[i][G_bold] = strval(iString);

		    db_get_field_assoc(res, "TextAlignment", iString, sizeof(iString));
		    GraffData[i][G_textalignment] = strval(iString);

		    db_get_field_assoc(res, "FontFace", GraffData[i][G_fontface], 32);

		    db_get_field_assoc(res, "TextColor", iString, sizeof(iString));
		    GraffData[i][G_textcolor] = strval(iString);

		    db_get_field_assoc(res, "BackColor", iString, sizeof(iString));
		    GraffData[i][G_backcolor] = strval(iString);

		    db_get_field_assoc(res, "ObjectModel", iString, sizeof(iString));
		    GraffData[i][G_objectmodel] = strval(iString);

		    db_get_field_assoc(res, "X", iString, sizeof(iString));
		    GraffData[i][G_pos][0] = floatstr(iString);

		    db_get_field_assoc(res, "Y", iString, sizeof(iString));
		    GraffData[i][G_pos][1] = floatstr(iString);

		    db_get_field_assoc(res, "Z", iString, sizeof(iString));
		    GraffData[i][G_pos][2] = floatstr(iString);

		    db_get_field_assoc(res, "rX", iString, sizeof(iString));
		    GraffData[i][G_pos][3] = floatstr(iString);

		    db_get_field_assoc(res, "rY", iString, sizeof(iString));
		    GraffData[i][G_pos][4] = floatstr(iString);

		    db_get_field_assoc(res, "rZ", iString, sizeof(iString));
		    GraffData[i][G_pos][5] = floatstr(iString);

			GraffExists[i] = true;

            new obj = CreateObject(GraffData[i][G_objectmodel], GraffData[i][G_pos][0], GraffData[i][G_pos][1], GraffData[i][G_pos][2], GraffData[i][G_pos][3], GraffData[i][G_pos][4], GraffData[i][G_pos][5]);
        	SetObjectMaterialText(obj, GraffData[i][G_sprayedtext], 0, GraffData[i][G_materialsize], GraffData[i][G_fontface],
			GraffData[i][G_fontsize], GraffData[i][G_bold], GraffData[i][G_textcolor], GraffData[i][G_backcolor], GraffData[i][G_textalignment]);
			GraffData[i][G_label] = Create3DTextLabel(sprintf("Graffito ID: %d", i), 0x47B0FEFF, GraffData[i][G_pos][0], GraffData[i][G_pos][1], GraffData[i][G_pos][2], 5.0, 0, 0);
			IsGraff[obj] = true;
			TotalGraffs ++;
		} while(db_next_row(res));
		skipped:
		printf("Graffs Loaded: %d", TotalGraffs);
	#else
	print("Graffiti system is currently not availble on MySQL version!");
	#endif
}

stock PlayerSaveNewGraff(playerid)
{
    new iString[400];
    format(iString, sizeof(iString), "SELECT ID FROM Graffs ORDER BY `ID` DESC LIMIT 1");
	new DBResult:res = db_query(sqliteconnection, iString);

	new GraffID;
	if(db_num_rows(res)) {
		db_get_field_assoc(res, "ID", iString, sizeof(iString));
		GraffID = strval(iString)+1;
    }
    db_free_result(res);

	format(iString, sizeof(iString), "INSERT INTO Graffs (ID, Text, MaterialSize, FontSize, Bold, TextAlignment, FontFace, TextColor, BackColor, ObjectModel, X, Y, Z, rX, rY, rZ) VALUES (%d, '%s', %d, %d, %d, %d, '%s', %d, %d, %d, %f, %f, %f, %f, %f, %f)",
													GraffID, DB_Escape(Text[playerid]), Size[playerid], FontSize[playerid], UseBold[playerid], TextAlign[playerid], DB_Escape(FontName[playerid]), GRAFFTextColor[playerid], BackgColor[playerid], ObjectID[playerid], GRAFFPos[playerid][0], GRAFFPos[playerid][1], GRAFFPos[playerid][2], GRAFFRot[playerid][0], GRAFFRot[playerid][1], GRAFFRot[playerid][2]);

	db_free_result(db_query(sqliteconnection, iString));

	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has just finished spraying {FFFFFF}Graffito ID: %d", Player[playerid][Name], GraffID);
	SendClientMessageToAll(-1, iString);

	LoadGraffs();
	return 1;
}

stock DeleteGraff(GraffID)
{
    db_free_result(db_query(sqliteconnection, sprintf("DELETE FROM Graffs WHERE ID = %d", GraffID)));
	LoadGraffs();
	return 1;
}

stock DeleteAllGraffs()
{
	for(new i = 0; i < MAX_OBJECTS; i ++)
	{
	    if(IsGraff[i] == true)
	    {
	        DestroyObject(i);
	        IsGraff[i] = false;
	    }
	}
	for(new i = 0; i < MAX_GRAFFS; i ++)
	{
	    if(GraffExists[i] == true)
	    {
	        Delete3DTextLabel(GraffData[GraffData[i][G_id]][G_label]);
	    }
	}
	return 1;
}

CMD:seegraff(playerid, params[])
{
    if(isnull(params))
		return SendUsageMessage(playerid,"/seegraff [Graffito ID]");
	new gid = strval(params);

	if(!GraffExists[gid])
		return SendErrorMessage(playerid,"Invalid ID");

	if(Player[playerid][Playing] || Player[playerid][Spectating])
	    return 1;

	SetPlayerPos(playerid, GraffData[gid][G_pos][0], GraffData[gid][G_pos][1], GraffData[gid][G_pos][2] + 5.0);
	return 1;
}

CMD:deletegraff(playerid, params[])
{
    if(Player[playerid][Level] < 4) return SendErrorMessage(playerid,"Your admin level isn't high enough for this.");

    if(isnull(params)) return SendUsageMessage(playerid,"/deletegraff [Graffito ID]");
	new gid = strval(params);
    DeleteGraff(gid);
	return 1;
}

CMD:spray(playerid, params[])
{
    if(Player[playerid][Level] < 4) return SendErrorMessage(playerid,"Your admin level isn't high enough for this.");


    if(CreatingTextO[playerid] == false)
    {
        if(Current != -1)
			return SendErrorMessage(playerid, "You cannot spray a graffito while a round is in progress");
		TextAlign[playerid] = 1,
		Index[playerid] = 0;
        Text[playerid] = "Blank",
		FontName[playerid] = "Arial",
		GRAFFTextColor[playerid] = HexToInt("0xFFFF8200"),
		BackgColor[playerid] = HexToInt("0xFF000000");

    	CreatingTextO[playerid] = true, ShowGraffMainMenu(playerid);
    	GetPlayerPos(playerid, GRAFFPos[playerid][0], GRAFFPos[playerid][1], GRAFFPos[playerid][2]), GetPlayerFacingAngle(playerid, GRAFFPos[playerid][3]);
    	new Float:x = GRAFFPos[playerid][0] + (5.0 * floatsin(-GRAFFPos[playerid][3], degrees));
		new Float:y = GRAFFPos[playerid][1] + (5.0 * floatcos(-GRAFFPos[playerid][3], degrees));

    	GRAFFObject[playerid] = CreatePlayerObject(playerid, ObjectID[playerid], x, y, GRAFFPos[playerid][2]+0.5, 0.0, 0.0, GRAFFPos[playerid][3] - 90.0);

    	SetPlayerObjectMaterialText(playerid, GRAFFObject[playerid], Text[playerid], Index[playerid], Size[playerid], FontName[playerid],
		FontSize[playerid], UseBold[playerid], GRAFFTextColor[playerid], BackgColor[playerid], TextAlign[playerid]);

		SendClientMessage(playerid,-1,"A blank graffito has been sprayed");
	}
	else
		ShowGraffMainMenu(playerid);
	return 1;
}

forward OnMainGraffMenuResponse(playerid, dialogid, response, listitem, inputtext[]);
public OnMainGraffMenuResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(dialogid == GRAFFMainDialog){
	    if(response){
	        switch(listitem) {

	            case 0:{
	                new string[128];
	                format(string, sizeof(string), ""COL_PRIM"Current Object Model ID: {FFFFFF}%d\
					\n"GRAFF_Grey"Please, type below a Model ID for the object (example = 19353):",ObjectID[playerid]);
					ShowPlayerDialog(playerid,OModelDialog,DIALOG_STYLE_INPUT,"    "GRAFF_Grey"Object Model ID",string,"Change","Back");
	            }
	        	case 1:{
	        	    new string[300];
	        	    format(string, sizeof(string),""COL_PRIM"Current Object Text: {FFFFFF}%s\
					\n"GRAFF_Grey"Please, type below your text for the object:",Text[playerid]);
	        	    ShowPlayerDialog(playerid,TextDialog,DIALOG_STYLE_INPUT,"    "GRAFF_Grey"Object Text",string,"Change","Back");
	        	}
				case 2: {
				    new sizes[600];
					strcat(sizes,"{FFFFFF}1. "COL_PRIM"32x32 "GRAFF_Grey"(10)\
								\n{FFFFFF}2. "COL_PRIM"64x32 "GRAFF_Grey"(20)\
								\n{FFFFFF}3. "COL_PRIM"64x64 "GRAFF_Grey"(30)\
								\n{FFFFFF}4. "COL_PRIM"128x32 "GRAFF_Grey"(40)\
								\n{FFFFFF}5. "COL_PRIM"128x64 "GRAFF_Grey"(50)\
								\n{FFFFFF}6. "COL_PRIM"128x128 "GRAFF_Grey"(60)\
								\n{FFFFFF}7. "COL_PRIM"256x32 "GRAFF_Grey"(70)");
					strcat(sizes,"\n{FFFFFF}8. "COL_PRIM"256x64 "GRAFF_Grey"(80)\
								\n{FFFFFF}9. "COL_PRIM"256x128 "GRAFF_Grey"(90)\
								\n{FFFFFF}10. "COL_PRIM"256x256 "GRAFF_Grey"(100)\
								\n{FFFFFF}11. "COL_PRIM"512x64 "GRAFF_Grey"(110)\
								\n{FFFFFF}12. "COL_PRIM"512x128 "GRAFF_Grey"(120)\
								\n{FFFFFF}13. "COL_PRIM"512x256 "GRAFF_Grey"(130)\
								\n{FFFFFF}14. "COL_PRIM"512x512 "GRAFF_Grey"(140)");
					new current[128];
					format(current, sizeof(current),""GRAFF_Grey"Material Size "GRAFF_Grey"| "COL_PRIM"Current size: {FFFFFF}%d",Size[playerid]);
					ShowPlayerDialog(playerid,SizesDialog,DIALOG_STYLE_LIST,current,sizes,"Change","Back");
				}
				case 3: {
				    new string[128];
				    format(string, sizeof(string), ""COL_PRIM"Current Text Font: {FFFFFF}%s\
					\n"GRAFF_Grey"Please, type below the Text Font name which you want use:",FontName[playerid]);
                    ShowPlayerDialog(playerid,FontNDialog,DIALOG_STYLE_INPUT,"    "GRAFF_Grey"Text Font",string,"Change","Back");
				}
				case 4: {
				    new string[128];
				    format(string, sizeof(string), ""COL_PRIM"Current Text Size: {FFFFFF}%d\
					\n"GRAFF_Grey"Please, type below the Text Size which you want use:",FontSize[playerid]);
                    ShowPlayerDialog(playerid,FontSDialog,DIALOG_STYLE_INPUT,"    "GRAFF_Grey"Text Size",string,"Change","Back");
				}
				case 5: {
				    new title[100]; new yesorno[10];
				    if(UseBold[playerid] == 0) yesorno = "No";
				    else if(UseBold[playerid] == 1) yesorno = "Yes";
				    format(title, sizeof(title), ""GRAFF_Grey"Bold Text "GRAFF_Grey"| "COL_PRIM"Using Bold Text: {FFFFFF}%s",yesorno);
                    ShowPlayerDialog(playerid,BoldDialog,DIALOG_STYLE_LIST,title,"{FFFFFF}1. "COL_PRIM"No\n{FFFFFF}2. "COL_PRIM"Yes","Change","Back");
				}
				case 6: {
				    new titulo[100];
				    format(titulo, sizeof(titulo),""GRAFF_Grey"Text Color "GRAFF_Grey"| "COL_PRIM"Current Text Color: {FFFFFF}%i",GRAFFTextColor[playerid]);
                    ShowPlayerDialog(playerid,ColorDialog,DIALOG_STYLE_LIST,titulo,"{FFFFFF}1. "COL_PRIM"Type a ARGB color code\
					\n{FFFFFF}2. "COL_PRIM"Select a predefinded color","Next","Back");
				}
				case 7: {
				    new titulo[100];
				    format(titulo, sizeof(titulo),""GRAFF_Grey"Graffiti Background "GRAFF_Grey"| "COL_PRIM"Current Background Color: {FFFFFF}%i",BackgColor[playerid]);
                    ShowPlayerDialog(playerid,BackgColorD,DIALOG_STYLE_LIST,titulo,"{FFFFFF}1. "COL_PRIM"Disable Background\n{FFFFFF}2. "COL_PRIM"Type a ARGB color code\
					\n{FFFFFF}3. "COL_PRIM"Select a predefinded color","Next","Back");
				}
				case 8: {
                    new title[100]; new position[30];
				    if(TextAlign[playerid] == 0) position = "Left";
				    else if(TextAlign[playerid] == 1) position = "Center";
				    else if(TextAlign[playerid] == 2) position = "Right";
				    format(title, sizeof(title), ""GRAFF_Grey"Text Alignment "GRAFF_Grey"| "COL_PRIM"Current Alignment: {FFFFFF}%s",position);
                    ShowPlayerDialog(playerid,AlignDialog,DIALOG_STYLE_LIST,title,"{FFFFFF}1. "COL_PRIM"Left\n{FFFFFF}2. "COL_PRIM"Center\n{FFFFFF}3. "COL_PRIM"Right","Change","Back");
				}
				case 9: {
				    EditPlayerObject(playerid, GRAFFObject[playerid]);
					SendClientMessage(playerid,-1,""GRAFF_Grey"* "COL_PRIM"INFO: {FFFFFF}Use "COL_PRIM"ESC {FFFFFF}to cancel the object edition.");
				}
				case 10: {
				    if(Current != -1)
						return SendErrorMessage(playerid, "You cannot save a graffito while a round is in progress");
				    ShowPlayerDialog(playerid,GRAFFSaveDialog,DIALOG_STYLE_MSGBOX,"    "GRAFF_Grey"Saving..",
					"Are you sure you want to save this object into the database?","Confirm","Back");
				}
				case 11: {
                    CreatingTextO[playerid] = false, DestroyPlayerObject(playerid, GRAFFObject[playerid]);
					TextAlign[playerid] = 1, Text[playerid] = "Example", FontName[playerid] = "Arial",
					GRAFFTextColor[playerid] = HexToInt("0xFFFF8200"), BackgColor[playerid] = HexToInt("0xFF000000"),
					Size[playerid] = 50, Index[playerid] = 0, UseBold[playerid] = 0,
					FontSize[playerid] = 24, OName[playerid] = "0", ObjectID[playerid] = 19353;
					SendClientMessage(playerid,-1,""GRAFF_Grey"* "COL_PRIM"INFO: {FFFFFF}All settings have been reset.");
					ShowPlayerDialog(playerid, -1, 0, " ", " ", " ", " ");
				}
	        }
	    }
	    return 1;
	}
	if(dialogid == OModelDialog)
	{
	    if(response)
	    {
	        if(!IsNumeric(inputtext)) return SendClientMessage(playerid,-1,"{FFFFFF}* "GRAFF_Grey"ERROR: "GRAFF_Grey"Please, use a numeric value"GRAFF_Grey"!"), ShowGraffMainMenu(playerid);
	        new string[128];
	        ObjectID[playerid] = strval(inputtext);
	        format(string, sizeof(string), ""GRAFF_Grey"* "COL_PRIM"Object Model ID: {FFFFFF}%d",ObjectID[playerid]);
	        SendClientMessage(playerid,-1,string); UpdateGraffObject(playerid), ShowGraffMainMenu(playerid);
	    }
		else { ShowGraffMainMenu(playerid); }
	    return 1;
	}
	if(dialogid == TextDialog){
	    if(response){
	        new string[128];
	        format(string, sizeof(string),"%s",inputtext);
	        Text[playerid] = string; format(string, sizeof(string), ""GRAFF_Grey"* "COL_PRIM"Object Text: {FFFFFF}%s",Text[playerid]);
	        SendClientMessage(playerid,-1,string); UpdateGraffObject(playerid), ShowGraffMainMenu(playerid);
	    }
		else { ShowGraffMainMenu(playerid); }
		return 1;
	}
	if(dialogid == SizesDialog){
	    if(response)
	    {
	        switch(listitem) {
	            case 0: Size[playerid] = 10;
	            case 1:  Size[playerid] = 20;
	            case 2:  Size[playerid] = 30;
	            case 3:  Size[playerid] = 40;
	            case 4:  Size[playerid] = 50;
	            case 5:  Size[playerid] = 60;
	            case 6:  Size[playerid] = 70;
	            case 7:  Size[playerid] = 80;
	            case 8:  Size[playerid] = 90;
	            case 9:  Size[playerid] = 100;
	            case 10:  Size[playerid] = 110;
	            case 11:  Size[playerid] = 120;
	            case 12:  Size[playerid] = 130;
	            case 13:  Size[playerid] = 140;
	            default: Size[playerid] = 70;
			}
			new string[128];
			format(string, sizeof(string), ""GRAFF_Grey"* "COL_PRIM"Object Material Size: {FFFFFF}%d",Size[playerid]);
			SendClientMessage(playerid,-1,string); UpdateGraffObject(playerid), ShowGraffMainMenu(playerid);
	    }
		else { ShowGraffMainMenu(playerid); }
	    return 1;
	}
	if(dialogid == FontNDialog)
	{
	    if(response) {
	        new string[128]; format(string, sizeof(string),"%s",inputtext); FontName[playerid] = string;
	        format(string, sizeof(string), ""GRAFF_Grey"* "COL_PRIM"Text Font: {FFFFFF}%s",FontName[playerid]); SendClientMessage(playerid,-1,string);
			UpdateGraffObject(playerid), ShowGraffMainMenu(playerid);
	    }
		else { ShowGraffMainMenu(playerid); }
	    return 1;
	}
	if(dialogid == FontSDialog)
	{
	    if(response) {
	        if(!IsNumeric(inputtext)) return SendClientMessage(playerid,-1,"{FFFFFF}* "GRAFF_Grey"ERROR: "GRAFF_Grey"Please, use a numeric value"GRAFF_Grey"!"), ShowGraffMainMenu(playerid);
	        new string[128]; FontSize[playerid] = strval(inputtext);
			format(string, sizeof(string), ""GRAFF_Grey"* "COL_PRIM"Text Size: {FFFFFF}%d",FontSize[playerid]); SendClientMessage(playerid,-1,string);
			UpdateGraffObject(playerid), ShowGraffMainMenu(playerid);
	    }
		else { ShowGraffMainMenu(playerid); }
	    return 1;
	}
	if(dialogid == BoldDialog)
	{
	    if(response)
	    {
			switch(listitem)
			{
	        	case 0: {
                    UseBold[playerid] = 0;
	        		SendClientMessage(playerid,-1,""GRAFF_Grey"* "COL_PRIM"Bold Text: {FFFFFF}No");
	        		UpdateGraffObject(playerid), ShowGraffMainMenu(playerid);
				}
				case 1: {
				    UseBold[playerid] = 1;
	        		SendClientMessage(playerid,-1,""GRAFF_Grey"* "COL_PRIM"Bold Text: {FFFFFF}Yes");
	        		UpdateGraffObject(playerid), ShowGraffMainMenu(playerid);
				}
			}
	    }
		else { ShowGraffMainMenu(playerid); }
	    return 1;
	}
	if(dialogid == ColorDialog)
	{
	    if(response)
	    {
			switch(listitem)
			{
			    case 0:
				{
			        ShowPlayerDialog(playerid,ColorDialog2,DIALOG_STYLE_INPUT,"    "GRAFF_Grey"Text Color",
			        ""GRAFF_Grey"Please, type a ARGB color code below (example = 0xFFFF0000):","Change","Back");
			    }
			    case 1:
				{
			        ShowPlayerDialog(playerid,ColorDialog3,DIALOG_STYLE_LIST,""GRAFF_Grey"Color List",
			        "{FF0000}Red\n{04B404}Green\n{00B5CD}Sky-Blue\n{FFFF00}Yellow\
					\n{0000FF}Blue\n{848484}Grey\n{FF00FF}Pink\n{FFFFFF}White","Change","Back");
			    }
			}
	    }
		else { ShowGraffMainMenu(playerid); }
	    return 1;
	}
	if(dialogid == ColorDialog2)
	{
	    if(response) {
	    	new string[80]; GRAFFTextColor[playerid] = HexToInt(inputtext);
			format(string, sizeof(string),""GRAFF_Grey"* "COL_PRIM"Text Color: {FFFFFF}%i", GRAFFTextColor[playerid]);
			SendClientMessage(playerid,-1,string); UpdateGraffObject(playerid), ShowGraffMainMenu(playerid);
		}
		else
		{
		    new titulo[100];
		    format(titulo, sizeof(titulo),""GRAFF_Grey"Text Color "GRAFF_Grey"| "COL_PRIM"Current Text Color: {FFFFFF}%i",GRAFFTextColor[playerid]);
            ShowPlayerDialog(playerid,ColorDialog,DIALOG_STYLE_LIST,titulo,"{FFFFFF}1. "COL_PRIM"Type a ARGB color code\
			\n{FFFFFF}2. "COL_PRIM"Select a predefinded color","Next","Back");
		}
   		return 1;
	}
	if(dialogid == ColorDialog3)
	{
	    if(response) {
	        switch(listitem)
	        {
	            case 0: { GRAFFTextColor[playerid] = HexToInt("0xFFFF0000"); } //Red
	            case 1: { GRAFFTextColor[playerid] = HexToInt("0xFF04B404"); }
	            case 2: { GRAFFTextColor[playerid] = HexToInt("0xFF00B5CD"); }
	            case 3: { GRAFFTextColor[playerid] = HexToInt("0xFFFFFF00"); } //Yellow
	            case 4: { GRAFFTextColor[playerid] = HexToInt("0xFF0000FF"); }
	            case 5: { GRAFFTextColor[playerid] = HexToInt("0xFF848484"); }
	            case 6: { GRAFFTextColor[playerid] = HexToInt("0xFFFF00FF"); }
	            case 7: { GRAFFTextColor[playerid] = HexToInt("0xFFFFFFFF"); } //White
	        }
	        new string[80]; UpdateGraffObject(playerid);
	        format(string, sizeof(string),""GRAFF_Grey"* "COL_PRIM"Text Color: {FFFFFF}%i", GRAFFTextColor[playerid]);
			SendClientMessage(playerid,-1,string); ShowGraffMainMenu(playerid);
		}
		else
		{
		    new titulo[100];
		    format(titulo, sizeof(titulo),""GRAFF_Grey"Text Color "GRAFF_Grey"| "COL_PRIM"Current Text Color: {FFFFFF}%i",GRAFFTextColor[playerid]);
            ShowPlayerDialog(playerid,ColorDialog,DIALOG_STYLE_LIST,titulo,"{FFFFFF}1. "COL_PRIM"Type a ARGB color code\
			\n{FFFFFF}2. "COL_PRIM"Select a predefinded color","Next","Back");
		}
   		return 1;
	}
	if(dialogid == BackgColorD)
	{
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: { BackgColor[playerid] = 0; UpdateGraffObject(playerid);  ShowGraffMainMenu(playerid); SendClientMessage(playerid,-1,""GRAFF_Grey"* "COL_PRIM"Background Color: {FFFFFF}Disabled"); }
	            case 1: {
	                ShowPlayerDialog(playerid,ColorDialog4,DIALOG_STYLE_INPUT,"    "GRAFF_Grey"Background Color",
			        ""GRAFF_Grey"Please, type a ARGB color code below (example = 0xFFFF0000):","Change","Back");
	            }
	            case 2: {
	                ShowPlayerDialog(playerid,ColorDialog5,DIALOG_STYLE_LIST,""GRAFF_Grey"Color List",
			        "{FF0000}Red\n{04B404}Green\n{00B5CD}Sky-Blue\n{FFFF00}Yellow\
					\n{0000FF}Blue\n{848484}Grey\n{FF00FF}Pink\n{FFFFFF}White","Change","Back");
	            }
	        }
	    }
		else { ShowGraffMainMenu(playerid); }
	    return 1;
	}
	if(dialogid == ColorDialog4)
	{
	    if(response) {
	    	new string[80]; BackgColor[playerid] = HexToInt(inputtext);
			format(string, sizeof(string),""GRAFF_Grey"* "COL_PRIM"Background Color: {FFFFFF}%i", BackgColor[playerid]);
			SendClientMessage(playerid,-1,string); UpdateGraffObject(playerid), ShowGraffMainMenu(playerid);
		}
		else
		{
		    new titulo[100];
		    format(titulo, sizeof(titulo),""GRAFF_Grey"Object Background "GRAFF_Grey"| "COL_PRIM"Current Text Color: {FFFFFF}%i",BackgColor[playerid]);
            ShowPlayerDialog(playerid,BackgColorD,DIALOG_STYLE_LIST,titulo,"{FFFFFF}1. "COL_PRIM"Disable Background\n{FFFFFF}2. "COL_PRIM"Type a ARGB color code\
			\n{FFFFFF}3. "COL_PRIM"Select a predefinded color","Next","Back");
		}
   		return 1;
	}
	if(dialogid == ColorDialog5)
	{
	    if(response)
		{
	        switch(listitem)
	        {
	            case 0: { BackgColor[playerid] = HexToInt("0xFFFF0000"); } //Red
	            case 1: { BackgColor[playerid] = HexToInt("0xFF04B404"); }
	            case 2: { BackgColor[playerid] = HexToInt("0xFF00B5CD"); }
	            case 3: { BackgColor[playerid] = HexToInt("0xFFFFFF00"); } //Yellow
	            case 4: { BackgColor[playerid] = HexToInt("0xFF0000FF"); }
	            case 5: { BackgColor[playerid] = HexToInt("0xFF848484"); }
	            case 6: { BackgColor[playerid] = HexToInt("0xFFFF00FF"); }
	            case 7: { BackgColor[playerid] = HexToInt("0xFFFFFFFF"); } //White
	        }
	        new string[80]; UpdateGraffObject(playerid); ShowGraffMainMenu(playerid);
	        format(string, sizeof(string),""GRAFF_Grey"* "COL_PRIM"Background Color: {FFFFFF}%i", BackgColor[playerid]);
			SendClientMessage(playerid,-1,string);
		}
		else
		{
		    new titulo[100];
		    format(titulo, sizeof(titulo),""GRAFF_Grey"Object Background "GRAFF_Grey"| "COL_PRIM"Current Text Color: {FFFFFF}%i",BackgColor[playerid]);
            ShowPlayerDialog(playerid,BackgColorD,DIALOG_STYLE_LIST,titulo,"{FFFFFF}1. "COL_PRIM"Disable Background\n{FFFFFF}2. "COL_PRIM"Type a ARGB color code\
			\n{FFFFFF}3. "COL_PRIM"Select a predefinded color","Next","Back");
		}
   		return 1;
	}
	if(dialogid == AlignDialog)
	{
	    if(response)
		{
			switch(listitem)
			{
			    case 0:
				{
					TextAlign[playerid] = 0; UpdateGraffObject(playerid);
					SendClientMessage(playerid,-1,""GRAFF_Grey"* "COL_PRIM"Text Alignment: {FFFFFF}Left"), ShowGraffMainMenu(playerid);
				}
				case 1:
				{
					TextAlign[playerid] = 1; UpdateGraffObject(playerid);
					SendClientMessage(playerid,-1,""GRAFF_Grey"* "COL_PRIM"Text Alignment: {FFFFFF}Center"), ShowGraffMainMenu(playerid);
				}
				case 2:
				{
					TextAlign[playerid] = 2; UpdateGraffObject(playerid);
					SendClientMessage(playerid,-1,""GRAFF_Grey"* "COL_PRIM"Text Alignment: {FFFFFF}Right"), ShowGraffMainMenu(playerid);
				}
			}
		}
		else
			ShowGraffMainMenu(playerid);
	}
	if(dialogid == GRAFFSaveDialog)
	{
	    if(response)
	    {
			CreatingTextO[playerid] = false, DestroyPlayerObject(playerid, GRAFFObject[playerid]);
            PlayerSaveNewGraff(playerid);
			TextAlign[playerid] = 1, Text[playerid] = "Blank", FontName[playerid] = "Arial",
			GRAFFTextColor[playerid] = HexToInt("0xFFFF8200"), BackgColor[playerid] = HexToInt("0xFF000000"),
			Size[playerid] = 50, Index[playerid] = 0, UseBold[playerid] = 0,
			FontSize[playerid] = 24, OName[playerid] = "0", ObjectID[playerid] = 19353;

			SendClientMessage(playerid,-1,"Graffiti has been sprayed and saved into the database successfully");
			SendClientMessage(playerid,-1,"All settings have been reset so you can spray a new one");
		}
		else { ShowGraffMainMenu(playerid); }
	    return 1;
	}
	return 1;
}

ShowGraffMainMenu(playerid)
{
    new string[600];
    strcat(string,"{FFFFFF}-. "COL_PRIM"Set Graffiti Object Model ID\n{FFFFFF}-. "COL_PRIM"Set Graffiti Text\
	\n{FFFFFF}-. "COL_PRIM"Set Material Size\n");
	strcat(string, "{FFFFFF}-. "COL_PRIM"Set Text Font\n{FFFFFF}-. "COL_PRIM"Set Text Size\n{FFFFFF}-. "COL_PRIM"Set Bold Text\
	\n{FFFFFF}-. "COL_PRIM"Set Text Color\n{FFFFFF}-. "COL_PRIM"Set Background Color\n{FFFFFF}-. "COL_PRIM"Set Text Alignment\n{FFFFFF}-. "GRAFF_Grey"Edit Graffiti\
	\n{FFFFFF}-. "GRAFF_Grey"Save Graffiti\n{FFFFFF}-. "GRAFF_Grey"Reset Graffiti");
	ShowPlayerDialog(playerid,GRAFFMainDialog,DIALOG_STYLE_LIST,""GRAFF_Grey"Text Object | Main Menu",string,"Continue","Exit");
	return 1;
}

UpdateGraffObject(playerid)
{
    GetPlayerObjectPos(playerid, GRAFFObject[playerid], GRAFFPos[playerid][0], GRAFFPos[playerid][1], GRAFFPos[playerid][2]);
    GetPlayerObjectRot(playerid, GRAFFObject[playerid], GRAFFRot[playerid][0], GRAFFRot[playerid][1], GRAFFRot[playerid][2]); DestroyPlayerObject(playerid, GRAFFObject[playerid]);
	GRAFFObject[playerid] = CreatePlayerObject(playerid, ObjectID[playerid], GRAFFPos[playerid][0], GRAFFPos[playerid][1], GRAFFPos[playerid][2], GRAFFRot[playerid][0], GRAFFRot[playerid][1], GRAFFRot[playerid][2]);

	SetPlayerObjectMaterialText(playerid, GRAFFObject[playerid], Text[playerid], Index[playerid], Size[playerid], FontName[playerid],
	FontSize[playerid], UseBold[playerid], GRAFFTextColor[playerid], BackgColor[playerid], TextAlign[playerid]);
}

forward OnPlayerEditGraffObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ);
public OnPlayerEditGraffObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
    if(objectid == GRAFFObject[playerid])
	{
		if(response == EDIT_RESPONSE_FINAL)
	 	{
	 	    SendClientMessage(playerid,-1,""COL_PRIM"Object Edition: {FFFFFF}Updated");
            DestroyPlayerObject(playerid, GRAFFObject[playerid]);
			GRAFFObject[playerid] = CreatePlayerObject(playerid, ObjectID[playerid], fX, fY, fZ, fRotX, fRotY, fRotZ);
			SetPlayerObjectMaterialText(playerid, GRAFFObject[playerid], Text[playerid], Index[playerid], Size[playerid], FontName[playerid],
			FontSize[playerid], UseBold[playerid], GRAFFTextColor[playerid], BackgColor[playerid], TextAlign[playerid]);
			ShowGraffMainMenu(playerid);
			GRAFFPos[playerid][0] = fX;
			GRAFFPos[playerid][1] = fY;
			GRAFFPos[playerid][2] = fZ;
			GRAFFRot[playerid][0] = fRotX;
			GRAFFRot[playerid][1] = fRotY;
			GRAFFRot[playerid][2] = fRotZ;
		}
		else if(response == EDIT_RESPONSE_CANCEL)
		{
            SendClientMessage(playerid,-1,""COL_PRIM"Object Edition: {FFFFFF}Cancelled updating"); UpdateGraffObject(playerid), ShowGraffMainMenu(playerid);
		}
	}
	return 1;
}

// graffiti <end>

/*
// Headshots start
#include <YSI\y_hooks>

new
	LastHeadShotTick[MAX_PLAYERS],
	LastSnipedBy[MAX_PLAYERS],
	LastSnipedTick[MAX_PLAYERS],
	LastDeagledBy[MAX_PLAYERS],
	LastDeagledTick[MAX_PLAYERS],
	LastRifledBy[MAX_PLAYERS],
	LastRifledTick[MAX_PLAYERS]
	;


forward HeadShotCheck();
public HeadShotCheck()
{
	new idx;
	foreach(new i : Player)
	{
		idx = GetPlayerAnimationIndex(i);
		if(idx == 1173 || idx == 1175 || idx == 1177 || idx == 1178)
		{
			if((GetTickCount() - LastSnipedTick[i]) < 1000)
			{
				if(IsPlayerConnected(LastSnipedBy[i]))
				{
				    if(!Player[i][InHeadShot])
				    {
						if((GetPlayerTeam(i) != NO_TEAM && GetPlayerTeam(i) != GetPlayerTeam(LastSnipedBy[i])) || (GetPlayerTeam(i) == NO_TEAM && GetPlayerTeam(LastSnipedBy[i]) == NO_TEAM))
						{
							if((GetTickCount() - LastHeadShotTick[i]) > 1000)
							{
								LastHeadShotTick[i] = GetTickCount();
								OnPlayerHeadshotPlayer(i, LastSnipedBy[i], WEAPON_SNIPER);
							}
						}
					}
					else
					{
					    if((GetTickCount() - LastHeadShotTick[i]) > 1000)
						{
							LastHeadShotTick[i] = GetTickCount();
							OnPlayerHeadshotPlayer(i, LastSnipedBy[i], WEAPON_SNIPER);
						}
					}
				}
				break;
			}
			if((GetTickCount() - LastRifledTick[i]) < 1000)
			{
				if(IsPlayerConnected(LastRifledBy[i]))
				{
				    if(!Player[i][InHeadShot])
				    {
						if((GetPlayerTeam(i) != NO_TEAM && GetPlayerTeam(i) != GetPlayerTeam(LastRifledBy[i])) || (GetPlayerTeam(i) == NO_TEAM && GetPlayerTeam(LastRifledBy[i]) == NO_TEAM))
						{
							if((GetTickCount() - LastHeadShotTick[i]) > 1000)
							{
								LastHeadShotTick[i] = GetTickCount();
								OnPlayerHeadshotPlayer(i, LastRifledBy[i], WEAPON_RIFLE);
							}
						}
					}
					else
					{
					    if((GetTickCount() - LastHeadShotTick[i]) > 1000)
						{
							LastHeadShotTick[i] = GetTickCount();
							OnPlayerHeadshotPlayer(i, LastRifledBy[i], WEAPON_RIFLE);
						}
					}
				}
				break;
			}
			if((GetTickCount() - LastDeagledTick[i]) < 1000)
			{
				if(IsPlayerConnected(LastDeagledBy[i]))
				{
				    if(!Player[i][InHeadShot])
				    {
						if((GetPlayerTeam(i) != NO_TEAM && GetPlayerTeam(i) != GetPlayerTeam(LastDeagledBy[i])) || (GetPlayerTeam(i) == NO_TEAM && GetPlayerTeam(LastDeagledBy[i]) == NO_TEAM))
						{
							if((GetTickCount() - LastHeadShotTick[i]) > 1000)
							{
								LastHeadShotTick[i] = GetTickCount();
								OnPlayerHeadshotPlayer(i, LastDeagledBy[i], WEAPON_DEAGLE);
							}
						}
					}
					else
					{
					    if((GetTickCount() - LastHeadShotTick[i]) > 1000)
						{
							LastHeadShotTick[i] = GetTickCount();
							OnPlayerHeadshotPlayer(i, LastDeagledBy[i], WEAPON_DEAGLE);
						}
					}
				}
				break;
			}
		}
	}
	return 1;
}

hook OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
   	if(issuerid != INVALID_PLAYER_ID)
	{
		if(weaponid == WEAPON_SNIPER)
		{
			LastSnipedBy[playerid] = issuerid;
			LastSnipedTick[playerid] = GetTickCount();
		}
		else if(weaponid == WEAPON_DEAGLE)
		{
			LastDeagledBy[playerid] = issuerid;
			LastDeagledTick[playerid] = GetTickCount();
		}
		else if(weaponid == WEAPON_RIFLE)
		{
			LastRifledBy[playerid] = issuerid;
			LastRifledTick[playerid] = GetTickCount();
		}
	}
	return 1;
}

forward OnPlayerHeadshotPlayer(playerid, shooterid, weaponid);
public OnPlayerHeadshotPlayer(playerid, shooterid, weaponid)
{
	if(Player[shooterid][InHeadShot])
	{
	    if(Player[playerid][InHeadShot])
	    {
	        SetHP(playerid, 0.0);
			return 1;
		}
	}
	new wepName[32];
	switch(weaponid)
	{
	    case WEAPON_SNIPER:
	    {format(wepName, sizeof wepName, "Sniper");}
	    case WEAPON_RIFLE:
	    {format(wepName, sizeof wepName, "Rifle");}
	    case WEAPON_DEAGLE:
	    {format(wepName, sizeof wepName, "Deagle");}
	}
	new shootername[MAX_PLAYER_NAME], shotname[MAX_PLAYER_NAME];
	GetPlayerName(playerid, shotname, sizeof shotname);
	GetPlayerName(shooterid, shootername, sizeof shootername);
	SendClientMessageToAll(-1, sprintf("{FFFFFF}%s "COL_PRIM"has just head-shot {FFFFFF}%s "COL_PRIM"({FFFFFF}%s"COL_PRIM")", shootername, shotname, wepName));
	return 1;
}

// Headshots end
*/
forward DelayedDatabaseStuff();
public DelayedDatabaseStuff()
{
    	// Get info about our columns in the Players table
	new DBResult:res = db_query(sqliteconnection, "PRAGMA table_info(Players)");

	new bool:found = false;
	// Loop to check and see if our IP column already exists
	do {
	    new column[50];
	    db_get_field_assoc(res, "name", column, sizeof(column));
	    if(!strcmp(column, "IP", true) && strlen(column) > 0) {
	        // It does exist, so exit loop.
	        found = true;
	        break;
	    }
	} while(db_next_row(res));

	db_free_result(res);

	// If column wasn't found, add it to our db
	if(!found) {
	    db_free_result(db_query(sqliteconnection, "ALTER TABLE `Players` ADD COLUMN IP CHAR(" #MAX_PLAYER_NAME ") NOT NULL DEFAULT 0"));
	}

	// Vacuum SQL database
	db_free_result(db_query(sqliteconnection, "VACUUM"));

	LoadConfig();

	LoadTextDraws(); // Loads all gloable textdraws

	LoadBases(); // Loads bases
	LoadArenas(); // Loads areans
	LoadDMs(); // Loads DMs
	LoadDuels(); // Loads Duels
    LoadGraffs(); // Loads Graffs
    CreateDuelArena();

    //AddFoxGlitchFix(); // Fixes BASE 42 glitch

    #if MYSQL == 0
	db_free_result(db_query(sqliteconnection, "ALTER TABLE `Players` ADD HitSound INTEGER(128) NOT NULL DEFAULT 17802"));
	db_free_result(db_query(sqliteconnection, "ALTER TABLE `Players` ADD GetHitSound INTEGER(128) NOT NULL DEFAULT 1131"));
	#endif
	
	new iString[180];
	format(iString, sizeof(iString), "%sRounds ~r~~h~%d~r~/~h~~h~%d", MAIN_TEXT_COLOUR, CurrentRound, TotalRounds);
	TextDrawSetString(RoundsPlayed, iString);

	#if INTROTEXT == 1
	format(iString, sizeof(iString), "~r~~h~%s", TeamName[ATTACKER]);
	TextDrawSetString(introAtt, iString);

	format(iString, sizeof(iString), "~b~~h~%s", TeamName[DEFENDER]);
	TextDrawSetString(introDef, iString);
	#endif

	format(iString, sizeof(iString), "~r~%s %s(~r~%d%s)  ~b~~h~%s %s(~b~~h~%d%s)",TeamName[ATTACKER],MAIN_TEXT_COLOUR,TeamScore[ATTACKER],MAIN_TEXT_COLOUR,TeamName[DEFENDER],MAIN_TEXT_COLOUR,TeamScore[DEFENDER],MAIN_TEXT_COLOUR);
    TextDrawSetString(TeamScoreText, iString);

	for(new i = 0; i < MAX_BASES; i++) RecentBase[i] = -1;
	for(new i = 0; i < MAX_ARENAS; i++) RecentArena[i] = -1;
	
	if(ESLMode == true) {
	    TeamScore[ATTACKER] = 0;
	    TeamScore[DEFENDER] = 0;

	    CurrentRound = 0;
	    if(OneOnOne == false) TotalRounds = 5;
	    else TotalRounds = 19;



		TeamName[ATTACKER] = "Alpha";
		TeamName[ATTACKER_SUB] = "Alpha Sub";
		TeamName[DEFENDER] = "Beta";
		TeamName[DEFENDER_SUB] = "Beta Sub";

		format(iString, sizeof(iString), "~r~%s %s(~r~%d%s)  ~b~~h~%s %s(~b~~h~%d%s)",TeamName[ATTACKER],MAIN_TEXT_COLOUR,TeamScore[ATTACKER],MAIN_TEXT_COLOUR,TeamName[DEFENDER],MAIN_TEXT_COLOUR,TeamScore[DEFENDER],MAIN_TEXT_COLOUR);
	    TextDrawSetString(TeamScoreText, iString);

		format(iString, sizeof(iString), "%sRounds ~r~~h~%d~r~/~h~~h~%d", MAIN_TEXT_COLOUR, CurrentRound, TotalRounds);
		TextDrawSetString(RoundsPlayed, iString);

    	Max_Packetloss = 2.0;
		Min_FPS = 35;
		Max_Ping = 350;

		WarMode = true;
	   	format(iString, sizeof iString, "%sWar Mode: ~r~ON", MAIN_TEXT_COLOUR);
		TextDrawSetString(WarModeText, iString);

	}
	DatabaseLoading = false;
    return 1;
}

forward DatabaseDefaultReload();
public DatabaseDefaultReload()
{
    SetDatabaseToReload();
    SetTimer("DelayedDatabaseStuff", 200, false);
	return 1;
}

public OnGameModeInit()
{
	UsePlayerPedAnims(); // Player movement
	AllowInteriorWeapons(1); // Allow weapons in interiors
	DisableInteriorEnterExits(); // Disables entering interiors (e.g. Burger shots)
	EnableStuntBonusForAll(0); // If you stunt you won't get any points (Value = 0)
	SetNameTagDrawDistance(DRAW_DISTANCE); // Distance to see other players name and Hp
	EnableVehicleFriendlyFire(); //
	SetGravity(0.008); // Gravity
	GameType = BASE;

    ServerLastPlayed = -1;
    ServerLastPlayedType = -1;
    Current = -1;
	SetGameModeText(GM_NAME); // Text that appears on 'Mode' column when you click on a server in samp.exe
    SendRconCommand("mapname Lobby");

    new ServerIP[30];
    GetServerVarAsString("hostname", hostname, sizeof(hostname));
    GetServerVarAsString("bind", ServerIP, sizeof(ServerIP));

    lagcompmode = GetServerVarAsInt("lagcompmode");

    /*new hn[128];
	lagcompmode = GetServerVarAsInt("lagcompmode");
    if(lagcompmode == 2)
		format(hn, sizeof(hn), "hostname %s [Normal Aim-leading]", hostname);
	else
	    format(hn, sizeof(hn), "hostname %s [Lag Compensation]", hostname);

	SendRconCommand(hn);
*/

	GetServerVarAsString("hostname", hostname, sizeof(hostname));

    new port = GetServerVarAsInt("port");

    if(!strlen(ServerIP)) ServerIP = "noip";

    new post[256];
    format(post, sizeof(post), "IP=%s&Port=%d&HostName=%s", ServerIP, port, hostname);
    HTTP(100, HTTP_POST, "gator3016.hostgator.com/~maarij94/attdef-api/serverlist.php", post, "");

// 	format(post, sizeof(post), "Port=%d", port);
//	HTTP(0, HTTP_POST, "jagat.freeiz.com/postserver.php", post, "checkResponse");

	ZMax[0] = -1;
	ZMax[1] = -1;
	ZMin[0] = -1;
	ZMin[1] = -1;


    printf("Hostname: %s", hostname);

	SendRconCommand("stream_distance 400.0");
	SendRconCommand("stream_rate 50");


	#if MYSQL == 1
	sqlconnection = mysql_connect(SQL_HOST, SQL_USER, SQL_PW, SQL_DB);
	sql_ping(sqlconnection);
	#endif

	#if XMAS == 1
	CreateXmasObjects();
	#endif

	#if MATCH_SYNC == 1
    MATCHSYNC_Init();
	#endif

    //db_close(sqliteconnection);
	sqliteconnection = db_open("AAD.db");
	DatabaseLoading = true;
	SetTimer("DatabaseDefaultReload", 100, false);

    format(MAIN_TEXT_COLOUR, sizeof MAIN_TEXT_COLOUR, "~l~");
    MAIN_BACKGROUND_COLOUR = 0xEEEEEE33;

	#if OBJECTS == 1
	LoadObjects();
	#endif

	#if STATS == 1 && MYSQL == 1
		LoadESLStats();
	#endif

	AddPlayerClass(Skin[ATTACKER], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); // attacker

	thetrain = AddStaticVehicleEx(538, 738.0100, 1863.0359, 5.1556, 180.0724, 198, 198, 120); // Train
	traintrailer1 = AddStaticVehicle(569, 738.0100, 1863.0359, 5.1556, 180.0724, 198, 198);
	traintrailer2 = AddStaticVehicle(569, 738.0100, 1863.0359, 5.1556, 180.0724, 198, 198);
	SetVehicleVirtualWorld(thetrain, 0);
	SetVehicleVirtualWorld(traintrailer1, 0);
	SetVehicleVirtualWorld(traintrailer2, 0);
	AttachTrailerToVehicle(traintrailer1, thetrain);
	AttachTrailerToVehicle(traintrailer2, thetrain);


	SetWorldTime(MainTime); // Sets server time
	SetWeather(MainWeather); // Sets server weather

	#if ANTICHEAT == 1
		if(ESLAC == 1) {
			AntiCheat = true;
			if(ESLMode == false) {
			    new newhostname[128];
				format(newhostname, sizeof(newhostname), "hostname %s [AC]", hostname);
				SendRconCommand(newhostname);
			}
			AC_Toggle(true);
		} else {
			AC_Toggle(false);
			PermAC = false;
		}
	#endif


	TextColor[ATTACKER] 	= 	"{FF0033}";
	TextColor[ATTACKER_SUB] = 	"{FFAAAA}";
	TextColor[DEFENDER] 	= 	"{3344FF}";
	TextColor[DEFENDER_SUB] = 	"{AAAAFF}";
	TextColor[REFEREE] 		= 	"{FFFF88}";

	TDC[NON] 				= 	"~p~";
	TDC[ATTACKER] 			= 	"~r~";
	TDC[ATTACKER_SUB] 		= 	"~r~";
    TDC[DEFENDER] 			= 	"~b~";
    TDC[DEFENDER_SUB] 		= 	"~b~";
    TDC[REFEREE]			= 	"~y~";

    TeamName[ATTACKER] = "Alpha";
    TeamName[DEFENDER] = "Beta";
    TeamName[REFEREE] = "Referee";
    TeamName[ATTACKER_SUB] = "Alpha Sub";
    TeamName[DEFENDER_SUB] = "Beta Sub";

    //Exception = "Whitetiger";

	SetTimer("OnScriptUpdate", 1000, true); // Timer that updates every second (will be using this for most stuff)
	SetTimer("FixVsTextDraw", 3000, true);
    //SetTimer("HeadShotCheck", 250, true);
    InitVersionChecker(true, true);

	CreateObject(3095, 268.74, 1884.21, 16.07,   0.00, 0.00, 0.00);


	MatchRoundsStarted = 0;
	for( new i = 0; i < 101; i++ )
	{
	    MatchRoundsRecord[ i ][ round__ID ] = -1;
	    MatchRoundsRecord[ i ][ round__type ] = -1;
	    MatchRoundsRecord[ i ][ round__completed ] = false;
	}
	
	for(new i = 0; i < MAX_VEHICLES; i ++)
	{
	    HeliWoodenBoard[i] = -1;
	}

	return 1;
}

forward checkResponse(index, response_code, data[]);
public checkResponse(index, response_code, data[])
{
	printf("response code: %d \n Data: %s", response_code, data);
}

public OnGameModeExit()
{
	db_close(sqliteconnection);
	#if MATCH_SYNC == 1
	mysql_close();
	#endif
	return 1;
}

forward VersionOutdatedKick(playerid);
public VersionOutdatedKick(playerid)
{
	ShowPlayerDialog(playerid, -1, 0, " ", " ", " ", " ");
	ClearChatForPlayer(playerid);
	SendClientMessage(playerid, -1, ""COL_PRIM"This server is using an out-dated version of AttDef GM. Server owners have to upgrade to the latest version so you can play here.");
	SendClientMessage(playerid, -1, ""COL_PRIM"Visit {FFFFFF}www.sixtytiger.com "COL_PRIM"for more info and help!");
	SetTimerEx("OnPlayerKicked", 500, false, "i", playerid);
	return 1;
}

forward ConnectPlayer(playerid);
public ConnectPlayer(playerid)
{
    OnPlayerConnect(playerid);
    OnPlayerRequestClass(playerid, 0);
	return 1;
}

public OnPlayerConnect(playerid)
{
	if(VersionReport == VERSION_IS_BEHIND && ForceUserToNewestVersion == true)
	{
	    SetTimerEx("VersionOutdatedKick", 1000, false, "i", playerid);
	    return 1;
	}
	if(DatabaseLoading == true)
	{
    	ClearChatForPlayer(playerid);
		SendClientMessage(playerid, -1, "Please wait! Database loading, you will be connected when it's loaded successfully.");
		SetTimerEx("ConnectPlayer", 1000, false, "i", playerid);
		return 1;
	}
	
    if(playerid > HighestID)
		HighestID = playerid;

	#if ENABLED_TDM == 1
	Player[playerid][InTDM] = false; //tdm var clear
	#endif

	Player[playerid][Team] = NON;
	Player[playerid][TempTeam] = NON;
    SetPlayerColor(playerid, 0xAAAAAAAA);

    GotHit[playerid] = 0;

	ClearChatForPlayer(playerid);

	RemoveBuildingForPlayer(playerid, 1220, 0.0, 0.0, 0.0, 6000.0); // boxes that make you lose hp
	RemoveBuildingForPlayer(playerid, 1221, 0.0, 0.0, 0.0, 6000.0); // boxes that make you lose hp
	RemoveBuildingForPlayer(playerid, 1230, 0.0, 0.0, 0.0, 6000.0); // boxes that make you lose hp
	RemoveBuildingForPlayer(playerid, 1299, 0.0, 0.0, 0.0, 6000.0); // boxes that make you lose hp
	RemoveBuildingForPlayer(playerid, 1421, 0.0, 0.0, 0.0, 6000.0); // boxes that make you lose hp
	RemoveBuildingForPlayer(playerid, 1448, 0.0, 0.0, 0.0, 6000.0); // boxes that make you lose hp
	RemoveBuildingForPlayer(playerid, 1449, 0.0, 0.0, 0.0, 6000.0); // boxes that make you lose hp
	RemoveBuildingForPlayer(playerid, 1450, 0.0, 0.0, 0.0, 6000.0); // boxes that make you lose hp
	RemoveBuildingForPlayer(playerid, 1440, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1421, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1438, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1338, 0.0, 0.0, 0.0, 6000.0);

	RemoveBuildingForPlayer(playerid, 1219, 0.0, 0.0, 0.0, 6000.0);

	RemoveBuildingForPlayer(playerid, 1676, 0.0, 0.0, 0.0, 6000.0); // exploding gas tank
	RemoveBuildingForPlayer(playerid, 1686, 0.0, 0.0, 0.0, 6000.0);

    new iString[140], Country[128];
	SendClientMessage(playerid, -1, ""COL_PRIM"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	format(iString, sizeof(iString), ""COL_PRIM"Welcome To {FFFFFF}%s", GM_NAME);
    SendClientMessage(playerid, -1, iString);
    SendClientMessage(playerid, -1, ""COL_PRIM"Wanna get started? Use {FFFFFF}/help "COL_PRIM"and {FFFFFF}/cmds");
    SendClientMessage(playerid, -1, ""COL_PRIM"Stay new and sweep away your old version! Always check for updates: {FFFFFF}/checkversion");
    SendClientMessage(playerid, -1, ""COL_PRIM"Wanna know what our dev team has recently done? Use {FFFFFF}/updates "COL_PRIM"for server updates");
    SendClientMessage(playerid, -1, ""COL_PRIM"Development team: {FFFFFF}062_"COL_PRIM", {FFFFFF}Whitetiger"COL_PRIM"");
    SendClientMessage(playerid, -1, "\t\t{FFFFFF}[KHK]Khalid"COL_PRIM", {FFFFFF}X.K"COL_PRIM" and {FFFFFF}Niko_boy");
	format(iString,sizeof(iString),""COL_PRIM"Server limits:  Min FPS = {FFFFFF}%d "COL_PRIM"| Max Ping = {FFFFFF}%d "COL_PRIM"| Max PL = {FFFFFF}%.2f", Min_FPS, Max_Ping, Float:Max_Packetloss);
	SendClientMessage(playerid, -1, iString);
	SendClientMessage(playerid, -1, ""COL_PRIM"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");

    GetPlayerName(playerid, Player[playerid][Name], 24); // Gets the name of every player that joins the server and saves it in 'Name' i.e. Player[playerid][Name]
	new NewName[MAX_PLAYER_NAME];
	NewName = RemoveClanTagFromName(playerid);

	if(strlen(NewName) != 0) {
		Player[playerid][NameWithoutTag] = NewName; // Removes clan tag from the player name and stores the new name in NameWithoutTag variable.
	} else {
	    Player[playerid][NameWithoutTag] = Player[playerid][Name];
	}


    GetPlayerCountry(playerid, Country, sizeof(Country));

	format(iString, sizeof(iString), "{FFFFFF}%s {BABABA}(ID: %d) has connected .: {FFFFFF}%s{BABABA} :.", Player[playerid][Name], playerid, Country);
    SendClientMessageToAll(-1, iString);

/*
	new ipee[16];
    GetPlayerCountry(playerid, Country, sizeof(Country));
	GetPlayerIp(playerid, ipee, sizeof(ipee));

	for(new i=0; i<MAX_PLAYERS; ++i) {

		if(Player[i][Level] > 2) {
		    format(iString, sizeof(iString), "{FFFFFF}%s {BABABA}(ID: %d) has connected .: {FFFFFF}%s{BABABA} :. (%s)", Player[playerid][Name], playerid, Country, ipee);
		} else {
		    format(iString, sizeof(iString), "{FFFFFF}%s {BABABA}(ID: %d) has connected .: {FFFFFF}%s{BABABA} :.", Player[playerid][Name], playerid, Country);
		}
		SendClientMessage(i, -1, iString);
	}
*/

	LoadPlayerTextDraws(playerid);
	
	HPArmourBaseID_VS_TD(playerid);
	
	SetHP(playerid, 100.0);
	SetAP(playerid, 100.0);

	// Reset all variables (So that the connected player don't have the same variable values as the player that left with the same playerid)

	Player[playerid][Level] = 0;
	Player[playerid][Weather] = MainWeather;
	Player[playerid][Time] = MainTime;
	Player[playerid][DMReadd] = 0;
	Player[playerid][ChatChannel] = -1;
	Player[playerid][RoundKills] = 0;
	Player[playerid][RoundDeaths] = 0;
	Player[playerid][RoundDamage] = 0;
	Player[playerid][WeaponPicked] = 0;
	Player[playerid][TotalKills] = 0;
	Player[playerid][TotalDeaths] = 0;
	Player[playerid][TotalDamage] = 0;
	Player[playerid][ACKick] = 0;
	for(new i = 0; i < 55; i ++)
	    Player[playerid][WeaponStat][i] = 0;
	Player[playerid][IsSpectatingID] = -1;
	Player[playerid][OutOfArena] = 5;
	Player[playerid][FPSKick] = 0;
	Player[playerid][PingKick] = 0;
	Player[playerid][PacketKick] = 0;
	Player[playerid][LastVehicle] = -1;
	Player[playerid][TimesSpawned] = 0;
	Player[playerid][VWorld] = 1;
	Player[playerid][lastChat] = GetTickCount()+1000;
	Player[playerid][LastAskLeader] = GetTickCount()+1000;
    ArenaWeapons[0][playerid] = 0;
    ArenaWeapons[1][playerid] = 0;
    Player[playerid][RoundPlayed] = 0;
    Player[playerid][shotsHit] = 0;
    Player[playerid][TotalBulletsFired] = 0;
    Player[playerid][TotalshotsHit] = 0;
    Player[playerid][RconTry] = 0;
    Player[playerid][Votekick] = -1;
    Player[playerid][VoteToAddID] = -1;
    Player[playerid][VoteToNetCheck] = -1;
	Player[playerid][NetCheck] = 1;
	Player[playerid][FPSCheck] = 1;
	Player[playerid][PingCheck] = 1;
	Player[playerid][PLCheck] = 1;
	for(new i = 0; i < 6; ++i) {
		gLastHit[i][playerid] = -1;
		DamageDone[i][playerid] = 0.0;
	}
	Player[playerid][SpectatingRound] = -1;
	Player[playerid][HitBy] = -1;
	Player[playerid][HitWith] = -1;
	Player[playerid][HitSound] = 17802;
	Player[playerid][GetHitSound] = 1131;
	Player[playerid][iLastVehicle] = -1;
	Player[playerid][LastEditWepLimit] = -1;
	Player[playerid][LastEditWeaponSlot] = -1;
    Player[playerid][RadioID] = 0;
    Player[playerid][challengerid] = -1;
	Player[playerid][duelweap1] = 0;
	Player[playerid][duelweap2] = 0;
	Player[playerid][DuelsWon] = 0;
	Player[playerid][DuelsLost] = 0;
    Player[playerid][LastMsgr] = -1;
    Player[playerid][blockedid] = -1;
    Player[playerid][Style] = 1;
    Player[playerid][FightStyle] = 4;
    SetPlayerFightingStyle(playerid, Player[playerid][FightStyle]);

    Player[playerid][Logged] = false;
    Player[playerid][IgnoreSpawn] = false;
    Player[playerid][InDM] = false;
    Player[playerid][InDuel] = false;
    Player[playerid][Syncing] = false;
    Player[playerid][Playing] = false;
    Player[playerid][WasInCP] = false;
    Player[playerid][IsKicked] = false;
	Player[playerid][Spectating] = false;
	Player[playerid][BeingSpeced] = false;
	Player[playerid][CalledByPlayer] = false;
	Player[playerid][WasInBase] = false;
	Player[playerid][TextDrawOnScreen] = false;
	PlayerOnInterface[playerid] = false;
	Player[playerid][Spawned] = false;
	Player[playerid][IsAFK] = false;
	Player[playerid][IsFrozen] = false;
//	Player[playerid][IsFreezed] = false;
	Player[playerid][IsGettingKicked] = false;
	Player[playerid][AskingForHelp] = false;
	Player[playerid][Mute] = false;
	Player[playerid][ToAddInRound] = false;
	Player[playerid][DontPause] = false;
	Player[playerid][Readied] = false;
	Player[playerid][VoteForReset] = false;
	Player[playerid][VoteToUnpause] = false;
	Player[playerid][AntiLag] = false;
	Player[playerid][InHeadShot] = false;
	Player[playerid][TextPos] = false;
	Player[playerid][ShowSpecs] = true;
	Player[playerid][blockedall] = false;
	Player[playerid][HasVoted] = false;
	Player[playerid][SetToReconnect] = false;
	Player[playerid][PROT_HPAutoRefilled] = false;

	noclipdata[playerid][cameramode] 	= 	CAMERA_MODE_NONE;
	noclipdata[playerid][lrold]	   	 	= 	0;
	noclipdata[playerid][udold]   		= 	0;
	noclipdata[playerid][noclipcammode] = 	0;
	noclipdata[playerid][lastmove]   	= 	0;
	noclipdata[playerid][accelmul]   	= 	0.0;
	noclipdata[playerid][FlyMode] 		= 	false;

    new IP[MAX_PLAYER_NAME];
    GetPlayerIp(playerid, IP, sizeof(IP));

	if(!MatchAKA(playerid)) {
	    AKAString = "";
	    AKAString = GetPlayerAKA(playerid);
	    new add[MAX_PLAYER_NAME+1];
	    format(add, sizeof(add), ",%s", Player[playerid][Name]);

		if(strlen(AKAString) > 0) strcat(AKAString, add);
		else strcat(AKAString, add[1]);

		new query[256];
		format(query, sizeof(query), "UPDATE `AKAs` SET `Names` = '%s' WHERE `IP` = '%s'", DB_Escape(AKAString), IP);
		db_free_result(db_query(sqliteconnection, query));
	}

	if(UpdateAKA == true) {
		#define aka_thread_offset 500
		new post[128], gpci_string[128];
		gpci(playerid, gpci_string, sizeof(gpci_string));
		format(post, sizeof(post), "IP=%s&Name=%s&Serial=%s", IP, Player[playerid][Name], gpci_string);
		HTTP(playerid + aka_thread_offset, HTTP_POST, "gator3016.hostgator.com/~maarij94/attdef-api/aka.php", post, "akaResponse");
	}


	if(ShowBodyLabels)
	{
		PingFPS[playerid] = Create3DTextLabel("_", 0x00FF00FF, 0, 0, 0, DRAW_DISTANCE, 0, 1);
		Attach3DTextLabelToPlayer(PingFPS[playerid], playerid, 0.0, 0.0, -0.745);
		DmgLabel[playerid] = Create3DTextLabel(" ", -1, 0, 0, 0, 40.0, 0, 1);
		Attach3DTextLabelToPlayer(DmgLabel[playerid], playerid, 0.0, 0.0, 0.8);
	}

	#if MYSQL == 1
	new IP[60];
	GetPlayerIp(playerid, IP, sizeof(IP));

	format(iString, sizeof(iString), "SELECT * FROM `Bans` WHERE `IP` = '%s'", IP);
	sql_query(sqlconnection, iString, QUERY_THREADED | QUERY_CACHED, "OnBanCheck", "rd", playerid);

	#if STATS == 1
	sql_escape_string(sqlconnection, Player[playerid][Name], IP);
	format(iString, sizeof(iString), "SELECT * FROM `VERSUS Stats` WHERE `Name` = '%s'", IP);
	sql_query(sqlconnection, iString, QUERY_THREADED | QUERY_CACHED, "OnPlayerVERSUSStats", "rd", playerid);

	format(iString, sizeof(iString), "SELECT * FROM `Duel Stats` WHERE `Name` = '%s'", IP);
	sql_query(sqlconnection, iString, QUERY_THREADED | QUERY_CACHED, "OnPlayerDuelStats", "rd", playerid);

	#endif


	#endif

/*    gpInfo[playerid][hacker] = 0;
	gpInfo[playerid][firstspawn] = 0;
	GetPlayerName(playerid, gpInfo[playerid][pname], MAX_PLAYER_NAME);
*/


    if(AllMuted)
    	Player[playerid][Mute] = true;

    format(PlayerShortcut[playerid][Shortcut1], 50, "Back off! Back off!");
    format(PlayerShortcut[playerid][Shortcut2], 50, "I found their sniper");
	format(PlayerShortcut[playerid][Shortcut3], 50, "Spasser is attacking me!!");
	format(PlayerShortcut[playerid][Shortcut4], 50, "Camp! Camp!");

    EditingShortcutOf[playerid] = -1;
	return 1;
}






public OnPlayerRequestClass(playerid, classid)
{
    if(DatabaseLoading == true)
	{
		return 1;
	}
	Player[playerid][Team] = NON;
    SetPlayerColor(playerid, 0xAAAAAAAA);
    Player[playerid][Spawned] = false;

	if(ServerAntiLag == true) TextDrawShowForPlayer(playerid, AntiLagTD);
	else TextDrawHideForPlayer(playerid, AntiLagTD);

	SetPlayerPos(playerid, 1524,-43,100);
	SetPlayerFacingAngle(playerid, 174);
	SetPlayerCameraPos(playerid, 1524,-50,1004);
	SetPlayerCameraLookAt(playerid, 1524,-43,1002);
	SetPlayerInterior(playerid, 2);

	//SetPlayerVirtualWorld(playerid, playerid+50);

	if(Player[playerid][Logged] == false) {

		SetPlayerWeather(playerid, 1);
		SetPlayerTime(playerid, 10, 0);

/*	    SetPlayerPos(playerid, 1585.7605,-2296.9370,16.5396);
		SetPlayerFacingAngle(playerid, 178.626);
		SetPlayerInterior(playerid, 0);

		SetPlayerWeather(playerid, 33234);
		SetPlayerTime(playerid, 324, 0);
*/

		#if MYSQL == 0

		new Query[150];
		format(Query, sizeof(Query), "SELECT Name FROM Players WHERE Name = '%s'", Player[playerid][Name]);
        new DBResult:result = db_query(sqliteconnection, Query);

		if(!db_num_rows(result)) {
		    ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD,"{FFFFFF}Registration Dialog","{FFFFFF}Type your password below to register:","Register","Leave");
		} else {
		    // Get IP
		    new IP[MAX_PLAYER_NAME];
		    GetPlayerIp(playerid, IP, sizeof(IP));

		    // Construct query to check if the player with the same name and IP has connected before to this server
		    format(Query, sizeof(Query), "SELECT * FROM `Players` WHERE `Name` = '%s' AND `IP` = '%s'", Player[playerid][Name], IP);

		    // execute
			new DBResult:res = db_query(sqliteconnection, Query);

			// If result returns any registered users with the same name and IP that have connected to this server before, log them in
			if(db_num_rows(res)) {
			    SendClientMessage(playerid, -1, "{3377FF}You've been automatically logged in {FFFFFF}(IP is the same as last login)");
			    LoginPlayer(playerid, res);
			    //ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD,"{FFFFFF}Login Dialog","{FFFFFF}Type your password below to log in:","Login","Leave");
			// else show login dialog
			} else ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD,"{FFFFFF}Login Dialog","{FFFFFF}Type your password below to log in:","Login","Leave");
			db_free_result(res);
		}

        db_free_result(result);

		#else
		new iString[128];
		format(iString, sizeof(iString), "SELECT `Name` FROM `Players` WHERE `Name` = '%s' LIMIT 1", Player[playerid][Name]);
		sql_query(sqlconnection, iString, QUERY_THREADED | QUERY_CACHED, "CheckRegistered", "rd", playerid);
		#endif

		return 1;
	} //else {
//	    new iString[256];
//		format(iString, sizeof(iString), "%s%s\n%s%s Sub\n%s%s\n%s%s Sub\n%sReferee", TextColor[ATTACKER], TeamName[ATTACKER], TextColor[ATTACKER_SUB], TeamName[ATTACKER], TextColor[DEFENDER], TeamName[DEFENDER], TextColor[DEFENDER_SUB], TeamName[DEFENDER], TextColor[REFEREE]);
//		ShowPlayerDialog(playerid, DIALOG_SWITCH_TEAM_CLASS, DIALOG_STYLE_LIST, "{FFFFFF}Team Selection",iString, "Select", "Exit");
//	}


	#if INTROTEXT == 1

//	SetPlayerWeather(playerid, 1);
//	SetPlayerTime(playerid, 10, 0);

//	SetPlayerPos(playerid, MainSpawn[0], MainSpawn[1], MainSpawn[2]);
//	SetPlayerFacingAngle(playerid, MainSpawn[3]);
//	SetPlayerInterior(playerid, MainInterior);


	SelectTextDraw(playerid, 0xFF0000BB);
    TextDrawShowForPlayer( playerid, introBg1 );
	TextDrawShowForPlayer( playerid, introBg2 );
	TextDrawShowForPlayer( playerid, introBg3 );
	TextDrawShowForPlayer( playerid, AttackerText );
	TextDrawShowForPlayer( playerid, DefenderText );
	TextDrawShowForPlayer( playerid, RefereeText );
	TextDrawShowForPlayer( playerid, AutoAssignText );
	TextDrawShowForPlayer( playerid, introAutoBG );
	TextDrawShowForPlayer( playerid, introRefBG );
	TextDrawShowForPlayer( playerid, introName );
	TextDrawShowForPlayer( playerid, introLogo );
	TextDrawShowForPlayer( playerid, introRules );
	TextDrawShowForPlayer( playerid, introRules2 );
	TextDrawShowForPlayer( playerid, introDef );
	TextDrawShowForPlayer( playerid, introAtt );
	TextDrawShowForPlayer( playerid, introSelect );
	#endif

	return 1;
}


public OnPlayerRequestSpawn(playerid) {
	if(Player[playerid][Logged] == true) {
		SpawnConnectedPlayer(playerid, 0);
		return 1;
	}
	else return 0;
}



/*PUB:HackCheck(playerid)
{
    gpInfo[playerid][firstspawn] = 1;
	new Float:x, Float:y, Float:z;
	GetPlayerCameraFrontVector(playerid, x, y, z);
	#pragma unused x
	#pragma unused y
	if(z < -0.8)
	{
	    TogglePlayerControllable(playerid, 1);
	    Player[playerid][IsFreezed] = false;
	    gpInfo[playerid][hacker] = 1;
	    new string[128],name[24]; GetPlayerName(playerid,name,24);
		format(string, sizeof string, "{FF0000}ANTICHEAT: {FFFFFF}%s (%d) "COL_PRIM"has been busted with {FF0000}s0beit", name, playerid);
		for(new i=0; i<MAX_PLAYERS; ++i) SendClientMessage(i, -1, string);

		Player[playerid][DontPause] = true;
		SetTimerEx("OnPlayerKicked", 500, false, "i", playerid);
	}
	else
	{
	    Player[playerid][IsFreezed] = false;
	    if(Player[playerid][Playing] == false) {
	    	TogglePlayerControllable(playerid, 1);
		}
	    if(Player[playerid][Playing] == true && RoundPaused == false) {
	    	TogglePlayerControllable(playerid, 1);
		}
	}
	return 1;
}*/


public OnPlayerSpawn(playerid)
{
    if(gpInfo[playerid][firstspawn] == 0 && Player[playerid][Playing] == false)
	{
	    SetCameraBehindPlayer(playerid);
	    //TogglePlayerControllable(playerid, 0);
	    //SetTimerEx("HackCheck", FREEZE_SECONDS * 1000, 0, "i", playerid);
   	    //Player[playerid][IsFreezed] = true;


//1=Hardcore NL, 2=ChartHits, 3=MUSIK.MAIN, 4=idobi, 5=DEFJAY US
//6=181.FM Hiphop, 7=Indian Radio HSL, 8=BlackBeats.FM, 9=TechnoBase.FM, 10=HouseTime.FM

		//SendClientMessage(playerid, -1, "Checking for cheats..");

	}


	if(Player[playerid][IgnoreSpawn] == true)
	{
	    Player[playerid][IgnoreSpawn] = false;
	    #if XMAS == 1
		new randomhat = random(2);
		switch(randomhat)
		{
			case 0: GiveChristmasHat(playerid,1);
			case 1: GiveChristmasHat(playerid,2);
		}
		#endif
	    return 0;
	}
    
	ClearAnimations(playerid);

	#if XMAS == 1
	new randomhat = random(2);
	switch(randomhat)
	{
		case 0: GiveChristmasHat(playerid,1);
		case 1: GiveChristmasHat(playerid,2);
	}
	SetPlayerTime(playerid, 23, 0);
	PlayRandomXmasSong(playerid);
	SendClientMessage(playerid, -1, "It's Christmas! Check out /xmascmds for some fun!");
	#endif

	if(Player[playerid][DMReadd] > 0) {
	    SpawnInDM(playerid, Player[playerid][DMReadd]);
	    return 1;
	}

	if(Player[playerid][AntiLag] == true) {
	    SpawnInAntiLag(playerid);
	    return 1;
	}
	#if ENABLED_TDM == 1
	if( Current != -1 && GameType == TDM && ArenaStarted == true )
	{
		if( Player[playerid][InTDM] == true )
		{
			//new str[128];
		    new tmpkill, tmpdeath, Float: tmpdamage;
			tmpkill = Player[playerid][RoundKills];
			tmpdeath = Player[playerid][RoundDeaths];
			tmpdamage = Player[playerid][RoundDamage];

			//format(str,sizeof(str),"BEFORE: %d | %d | %0.1f || ", tmpkill, tmpdeath, tmpdamage);

			AddPlayerToArena(playerid);

			Player[playerid][RoundKills] = tmpkill;
			Player[playerid][RoundDeaths] = tmpdeath;
			Player[playerid][RoundDamage] = tmpdamage;

			new iString[250];
			if(Player[playerid][TextPos] == false) format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDamage ~r~%.0f~n~%sTotal Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[playerid][RoundKills], MAIN_TEXT_COLOUR, Player[playerid][RoundDamage], MAIN_TEXT_COLOUR, Player[playerid][TotalDamage]);
			else format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDmg ~r~%.0f~n~%sT. Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[playerid][RoundKills], MAIN_TEXT_COLOUR, Player[playerid][RoundDamage], MAIN_TEXT_COLOUR, Player[playerid][TotalDamage]);

			PlayerTextDrawSetString(playerid, RoundKillDmgTDmg, iString);

			//format(str,sizeof(str),"%sAFTER: %d | %d | %0.1f ", str, Player[playerid][RoundKills], Player[playerid][RoundDeaths], Player[playerid][RoundDamage]);

			//SendClientMessage(playerid,-1,str);

			Player[playerid][InTDM] = false;
			return 1;
		}
	}
	#endif
	if(Player[playerid][InHeadShot] == true)
	{
	    SetSpawnInfoEx(playerid, NO_TEAM, Skin[Player[playerid][Team]], -39.8379 + random(2), 76.9813 + random(2), 3.1172 + 0.5, 180.0, 0, 0, 0, 0, 0, 0);
		Player[playerid][IgnoreSpawn] = true;
		SpawnPlayerEx(playerid);


		//SetPlayerPos(playerid,AntiLagSpawn[Pos][0],AntiLagSpawn[Pos][1],AntiLagSpawn[Pos][2]);
		//SetPlayerFacingAngle(playerid,AntiLagSpawn[Pos][3]);

		SetPlayerInterior(playerid, 	0);
		SetPlayerVirtualWorld(playerid, 500);

		SetHP(playerid,	100.0);
		SetAP(playerid,	100.0);



	    GivePlayerWeapon(playerid, SNIPER, 	9996);

		SetPlayerTeamEx(playerid, NO_TEAM);
	    return 1;
	}

	if(Player[playerid][Playing] == false && Player[playerid][InDM] == false && Player[playerid][InDuel] == false) {
		SetHP(playerid, 100);
		SetAP(playerid, 100);



		ResetPlayerWeapons(playerid); // Reset player weapons when they spawn
		SetPlayerTeamEx(playerid, playerid); // Since playerid is different for every player (i.e. no two players have the same ID in the server) we can set the player team to the value of his ID so that he is able to shot everyone else. (Remember players in the same team can't shot each other.)
	    SetPlayerScore(playerid, 0);

		SetPlayerPos(playerid, MainSpawn[0]+random(5), MainSpawn[1]+random(5), MainSpawn[2]+2);
		SetPlayerFacingAngle(playerid, MainSpawn[3]);
		SetPlayerInterior(playerid, MainInterior); // Set player interior to 0 since the current lobby is an exterior (Exterior ID = 0)
		if(Player[playerid][TextDrawOnScreen] == true) SetPlayerVirtualWorld(playerid, playerid);
		else SetPlayerVirtualWorld(playerid, 0); // Set player virtual world to 0 so that if for example, the base is in lobby and the player died and spawned in lobby, he won't see the ones in the round because they will be in a different virtual world.
		SetCameraBehindPlayer(playerid);

		ColorFix(playerid); // Fixes player color based on their team.
		SetPlayerSkin(playerid, Skin[Player[playerid][Team]]);
	}

/*	for(new i = 0; i < 15; i++) {
		TextDrawShowForPlayer(playerid, AttackersAlive[i]);
		TextDrawShowForPlayer(playerid, DefendersAlive[i]);
    }
*/


    //TextDrawShowForPlayer(playerid, LOGO);
	return 1;
}


public OnPlayerDisconnect(playerid, reason)
{
	/*if(Player[playerid][SetToReconnect] == true)
	{
	    Player[playerid][SetToReconnect] = false;
		SendRconCommand(sprintf("unbanip %s", Player[playerid][IpToReconnect]));
		SendRconCommand("reloadbans");
	}*/

	if(reason == 0)
        DidSomeoneTimeout = true;

	if(CreatingTextO[playerid])
	{
	    //PlayerSaveNewGraff(playerid);
	}

	if(Player[playerid][Spectating] == true && IsPlayerConnected(Player[playerid][IsSpectatingID])) StopSpectate(playerid);

   	if(playerid == HighestID) {
	    new highID = 0;
		for(new i = 0; i <= HighestID; i++) if(IsPlayerConnected(i) && i != playerid) {
    	    if(i > highID) {
    	        highID = i;
    	    }
		}
		HighestID = highID;
	}

	if(VoteKickedPlayer == playerid) VotekickExpire();


	new iString[180], Float:HP[2];
    GetHP(playerid, HP[0]);
    GetAP(playerid, HP[1]);

    if(WarMode == true)
	{
		if(Player[playerid][Playing] == true || Player[playerid][ToAddInRound] == true)
		{
		    PlayerNoLeadTeam(playerid);
		    StorePlayerVariables(playerid);
			if(Player[playerid][DontPause] == false && AutoPause == true && Current != -1)
			{

				if(ESLMode == true) {
				 	TimedOutPlayers ++;
					ESLPauseTime = 120;
				}

				KillTimer(UnpauseTimer);
				RoundUnpausing = false;
				PauseRound();
				SendClientMessageToAll(-1, ""COL_PRIM"Round has been auto-paused.");
			}
		}
		else
			StorePlayerVariablesMin(playerid);
	}

    switch (reason){
		case 0:{
			if(Player[playerid][Playing] == false) format(iString, sizeof(iString), "{FFFFFF}%s {CCCCCC}has disconnected .: {FFFFFF}Timeout{CCCCCC} :.",Player[playerid][Name]);
		 	else format(iString, sizeof(iString), "{FFFFFF}%s {CCCCCC}has disconnected .: {FFFFFF}Timeout{CCCCCC} :. HP {FFFFFF}%.0f {CCCCCC}| Armour {FFFFFF}%.0f", Player[playerid][Name], HP[0], HP[1]);
		} case 1: {
			if(Player[playerid][Playing] == false) format(iString, sizeof(iString), "{FFFFFF}%s {CCCCCC}has disconnected .: {FFFFFF}Leaving {CCCCCC}:.",Player[playerid][Name]);
			else format(iString, sizeof(iString), "{FFFFFF}%s {CCCCCC}has disconnected .: {FFFFFF}Leaving {CCCCCC}:. HP {FFFFFF}%.0f {CCCCCC}| Armour {FFFFFF}%.0f", Player[playerid][Name], HP[0], HP[1]);
		} case 2: {
		    if(Player[playerid][Playing] == false) {
				if(Player[playerid][IsKicked] == true)format(iString, sizeof(iString), "{FFFFFF}%s {CCCCCC}has disconnected .: {FFFFFF}Kicked {CCCCCC}:.",Player[playerid][Name]);
				else format(iString, sizeof(iString), "{FFFFFF}%s {CCCCCC}has disconnected .: {FFFFFF}Banned {CCCCCC}:.",Player[playerid][Name]);
			} else {
				if(Player[playerid][IsKicked] == true)format(iString, sizeof(iString), "{FFFFFF}%s {CCCCCC}has disconnected .: {FFFFFF}Kicked {CCCCCC}:. HP {FFFFFF}%.0f {CCCCCC}| Armour {FFFFFF}%.0f",Player[playerid][Name], HP[0], HP[1]);
				else format(iString, sizeof(iString), "{FFFFFF}%s {CCCCCC}has disconnected .: {FFFFFF}Banned {CCCCCC}:. HP {FFFFFF}%.0f {CCCCCC}| Armour {FFFFFF}%.0f",Player[playerid][Name], HP[0], HP[1]);
			}
		}
	}
	SendClientMessageToAll(-1,iString);

	if(Player[playerid][WeaponPicked] > 0)
	{
 		TimesPicked[Player[playerid][Team]][Player[playerid][WeaponPicked]-1]--;
 		Player[playerid][WeaponPicked] = 0;
	}

	if(Current != -1 && Player[playerid][WasInCP] == true)
	{
	    PlayersInCP --;
	    Player[playerid][WasInCP] = false;

		/*if(PlayersInCP <= 0) {
		    CurrentCPTime = ConfigCPTime;
		    TextDrawHideForAll(EN_CheckPoint);
		}*/
	}


	if(Player[playerid][InDuel] == true) {
		format(iString, sizeof(iString), "{FFFFFF}%s left server during a duel {CCCCCC}| HP %.0f | Armour %.0f", Player[playerid][Name], HP[0], HP[1]);
		SendClientMessageToAll(-1, iString);

		foreach(new i : Player) {
			if(Player[i][challengerid] == playerid) {
				new Float:HPc[2];
    			GetHP(i, HPc[0]);
    			GetAP(i, HPc[1]);
				format(iString, sizeof(iString), "{FFFFFF}His opponent %s had {CCCCCC}%.0f HP and %.0f Armour", Player[i][Name], HPc[0], HPc[1]);
				SendClientMessageToAll(-1, iString);
				Player[i][InDuel] = false;
				Player[i][Team] = REFEREE;
				SetPlayerColor(i, REFEREE_COLOR);
				ResetDuellersToTheirTeams(i, playerid);
				Player[i][challengerid] = -1;
			}
		}
	}
	foreach(new i : Player) {
		if(Player[i][challengerid] == playerid) {
			Player[i][challengerid] = -1;
		}
	}

	new bool:InVehicle = false;
	new PlayersOnline = 0;

	foreach(new i : Player) {
	    if(Player[i][Spectating] == true && Player[i][IsSpectatingID] == playerid) {
			if(Current != -1 && (Player[i][Team] == ATTACKER || Player[i][Team] == ATTACKER_SUB || Player[i][Team] == DEFENDER || Player[i][Team] == DEFENDER_SUB)) {
				SpectateNextTeamPlayer(i);
			} else {
			    SpectateNextPlayer(i);
			}
		}

        if(i != playerid) PlayersOnline++;

		if(Player[playerid][LastVehicle] != -1 && i != playerid) {
		    if(IsPlayerInVehicle(i, Player[playerid][LastVehicle])) {
		        InVehicle = true;
			}
		}
	}


	if(PlayersOnline == 0 && RoundPaused == false)
	{
		if(ESLMode == false)
		{
		    if(PermLocked != true)
		    {
				SendRconCommand("password 0");
				ServerLocked = false;
				PermLocked = false;
			}

			#if ANTICHEAT == 1

			if(PermAC != true)
			{
				AntiCheat = false;
				TextDrawHideForAll(ACText);
				new newhostname[128];
				format(newhostname, sizeof(newhostname), "hostname %s", hostname);
				SendRconCommand(newhostname);

				KillTimer(ACTimer);
			    AC_Toggle(false);
			    PermAC = false;
			}
		    #endif
		}

		if(WarMode == true)
		{
			SetTimer("WarEnded", 1000, 0);
		}
	}

    Delete3DTextLabel(PingFPS[playerid]);
    Delete3DTextLabel(DmgLabel[playerid]);

	Player[playerid][FPS] = 50;

	if(Player[playerid][LastVehicle] != -1 && InVehicle == false) {
		DestroyVehicle(Player[playerid][LastVehicle]);
		Player[playerid][LastVehicle] = -1;
	}

#if SKINICONS == 1
	if(ShowIcons == true) {
		if(Player[playerid][Playing] == true) SetTimer("UpdateAliveForAll", 2000, false);
	}
#endif

    Player[playerid][VoteToUnpause] = false;
	Player[playerid][Playing] = false;
	Player[playerid][VoteForReset] = false;

    Player[playerid][Votekick] = -1;
    Player[playerid][VoteToAddID] = -1;
	Player[playerid][VoteToNetCheck] = -1;
	Player[playerid][Level] = 0;    //iponconnect --- to avoid on connect IPs being shown to non-admins

    #if XMAS == 1
    Snow_OnDisconnect(playerid);
	#endif
	return 1;
}

stock ShowConfigDialog(playerid) {

	new string[1700];

	string = "";

	strcat(string, ""COL_PRIM"Team Names");
	strcat(string, "\n"COL_PRIM"Team Skins");
	strcat(string, "\n"COL_PRIM"Modify Weapons");
	strcat(string, "\n"COL_PRIM"A/D Settings");
	strcat(string, "\n"COL_PRIM"Restart Server");
	strcat(string, "\n"COL_PRIM"Max Ping");
	strcat(string, "\n"COL_PRIM"Max Packetloss");
	strcat(string, "\n"COL_PRIM"Min FPS");

	if(ServerLocked == true) {
		strcat(string, "\n{FF6666}Server Locked");
	} else {
		strcat(string, "\n{66FF66}Server Unlocked");
	}

	if(ToggleTargetInfo == true) {
		strcat(string, "\n{66FF66}Target Player Info");
	} else {
		strcat(string, "\n{FF6666}Target Player Info");
	}

	if(AntiSpam == true) {
		strcat(string, "\n{66FF66}Anti-Spam");
	} else {
		strcat(string, "\n{FF6666}Anti-Spam");
	}

	if(AutoBal == true) {
		strcat(string, "\n{66FF66}Auto-Balance");
	} else {
		strcat(string, "\n{FF6666}Auto-Balance");
	}

	if(AutoPause == true) {
		strcat(string, "\n{66FF66}Auto-Pause");
	} else {
		strcat(string, "\n{FF6666}Auto-Pause");
	}

	if(LobbyGuns == true) {
		strcat(string, "\n{66FF66}Guns in Lobby");
	} else {
		strcat(string, "\n{FF6666}Guns in Lobby");
	}

	if(ShortCuts == true) {
		strcat(string, "\n{66FF66}Team Chat Shortcuts");
	} else {
		strcat(string, "\n{FF6666}Team Chat Shortcuts");
	}

	if(ServerAntiLag == true) {
		strcat(string, "\n{66FF66}Server Anti-lag");
	} else {
		strcat(string, "\n{FF6666}Server Anti-lag");
	}

	if(GiveKnife == true) {
		strcat(string, "\n{66FF66}Auto-give knife");
	} else {
		strcat(string, "\n{FF6666}Auto-give knife");
	}

	if(ShowBodyLabels == true) {
		strcat(string, "\n{66FF66}Show Body Labels");
	} else {
		strcat(string, "\n{FF6666}Show Body Labels");
	}

	if(VoteRound == true) {
		strcat(string, "\n{66FF66}Vote round (/vote cmd)");
	} else {
		strcat(string, "\n{FF6666}Vote round (/vote cmd)");
	}

	if(ChangeName == true) {
		strcat(string, "\n{66FF66}Change name (/changename cmd)");
	} else {
		strcat(string, "\n{FF6666}Change name (/changename cmd)");
	}

#if SKINICONS == 1
	if(ShowIcons == true) {
		strcat(string, "\n{66FF66}Skin Icons");
	} else {
		strcat(string, "\n{FF6666}Skin Icons");
	}
#endif

    ShowPlayerDialog(playerid, DIALOG_CONFIG, DIALOG_STYLE_LIST, ""COL_PRIM"Config Settings", string, "OK", "Cancel");
    return 1;
}


stock Float:GetDistanceBetweenPlayers(playerid, toplayerid) {
	if(!IsPlayerConnected(playerid) || !IsPlayerConnected(toplayerid)) return -1.00;

	new Float:Pos[2][3];
	GetPlayerPos(playerid, Pos[0][0], Pos[0][1], Pos[0][2]);
	GetPlayerPos(toplayerid, Pos[1][0], Pos[1][1], Pos[1][2]);

	return floatsqroot(floatpower(floatabs(floatsub(Pos[1][0], Pos[0][0])),2) + floatpower(floatabs(floatsub(Pos[1][1], Pos[0][1])),2) + floatpower(floatabs(floatsub(Pos[1][2], Pos[0][2])),2));
}

stock Float:GetDistanceToPoint(playerid, Float:XXX, Float:YYY, Float:ZZZ) {
	if(!IsPlayerConnected(playerid)) return -1.00;

	new Float:Pos[3];
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

	return floatsqroot(floatpower(floatabs(floatsub(XXX, Pos[0])),2) + floatpower(floatabs(floatsub(YYY, Pos[1])),2) + floatpower(floatabs(floatsub(ZZZ, Pos[2])),2));
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(reason == 255 && Player[playerid][AntiLag] == false && Player[playerid][InHeadShot] == false && ServerAntiLag == false) reason = 53;
	new iString[180];

	SetPlayerScore(playerid, 0);

	if(Player[playerid][AntiLag] == true || ServerAntiLag == true) {
		if(reason == 47 || reason == 51 || reason == 53 || reason == 54) {
			Player[playerid][HitBy] = -1;
			Player[playerid][HitWith] = -1;
		}
	}

	if(Player[playerid][HitBy] != -1 && Player[playerid][HitWith]) {
		killerid = Player[playerid][HitBy];
		reason = Player[playerid][HitWith];
		Player[playerid][HitBy] = -1;
		Player[playerid][HitWith] = -1;
	}


	new bool:TempPlaying;
	if(Player[playerid][Playing] == true) TempPlaying = true;
	else TempPlaying = false;

    if(Player[playerid][Playing] == true)
    	PlayerNoLeadTeam(playerid);

	if(killerid == INVALID_PLAYER_ID) {
	    if(Current == -1) SendDeathMessage(INVALID_PLAYER_ID, playerid, reason);

	    if(TempPlaying == true) {

            SendDeathMessage(INVALID_PLAYER_ID, playerid, reason);
			Player[playerid][RoundDeaths]++;
			Player[playerid][TotalDeaths]++;


			format(iString, sizeof(iString), "%s%s {FFFFFF}has died by: {FFFFFF}%s", TextColor[Player[playerid][Team]], Player[playerid][Name], WeaponNames[reason]);
	        SendClientMessageToAll(-1, iString);

            OnPlayerAmmoUpdate(playerid);

#if SKINICONS == 1
            if(ShowIcons == true) {
	            SetTimer("UpdateAliveForAll", 2000, false);
            }
#endif
            Player[playerid][TempTeam] = Player[playerid][Team];

	    }
	} else if( killerid != INVALID_PLAYER_ID && IsPlayerConnected(killerid)) {

        ShowPlayerDeathMessage(killerid, playerid);

		format(iString, sizeof(iString), "%sYou Killed: %s~h~%s", MAIN_TEXT_COLOUR, TDC[Player[playerid][Team]], Player[playerid][Name]);
        PlayerTextDrawSetString(killerid, DeathText[0], iString);
        PlayerTextDrawShow(killerid, DeathText[0]);

        format(iString, sizeof(iString), "%sKilled by: %s~h~%s", MAIN_TEXT_COLOUR, TDC[Player[killerid][Team]], Player[killerid][Name]);
        PlayerTextDrawSetString(playerid, DeathText[1], iString);
        PlayerTextDrawShow(playerid, DeathText[1]);

	    SetTimerEx("DeathMessageF", 4000, false, "ii", killerid, playerid);

		if(Current == -1) SendDeathMessage(killerid, playerid, reason);

		new Float:HP[2], dl, dw;
		GetHP(killerid, HP[0]);
		GetAP(killerid, HP[1]);
		new str[180];

		if(Player[playerid][InDuel] == true) {
			format(str, sizeof(str), "%s%s "COL_PRIM"raped %s%s "COL_PRIM"in a duel with %s | {FFFFFF}%.0f HP", TextColor[Player[killerid][Team]], Player[killerid][Name], TextColor[Player[playerid][Team]], Player[playerid][Name], WeaponNames[reason], (HP[0] + HP[1]));
            SendClientMessageToAll(-1, str);
			Player[playerid][challengerid] = -1;
			Player[killerid][challengerid] = -1;
			Player[playerid][duelweap1] = 0;
			Player[playerid][duelweap2] = 0;
			Player[killerid][duelweap1] = 0;
			Player[killerid][duelweap2] = 0;
			Player[playerid][ToAddInRound] = true;
			Player[killerid][ToAddInRound] = true;
            Player[playerid][DuelsLost]++;
            Player[killerid][DuelsWon]++;
            dl = Player[playerid][DuelsLost];
            dw = Player[killerid][DuelsWon];

    		new str1[180];
			format(str1, sizeof(str1), "UPDATE Players SET DLost = %d WHERE Name = '%s'", dl, DB_Escape(Player[playerid][Name]));
			db_free_result(db_query(sqliteconnection, str1));
			format(str1, sizeof(str1), "UPDATE Players SET DWon = %d WHERE Name = '%s'", dw, DB_Escape(Player[killerid][Name]));
			db_free_result(db_query(sqliteconnection, str1));

            Player[playerid][InDuel] = false;
            Player[killerid][InDuel] = false;
            Player[playerid][Team] = REFEREE;
            Player[killerid][Team] = REFEREE;
			SetPlayerColor(playerid, REFEREE_COLOR);
            SetPlayerColor(killerid, REFEREE_COLOR);
            ResetDuellersToTheirTeams(playerid, killerid);
		}

		if(Player[killerid][InDM] == true) {
			SetHP(killerid, 100);
			SetAP(killerid, 100);



			Player[playerid][VWorld] = GetPlayerVirtualWorld(killerid);
		}

		if(TempPlaying == true) {
		    SendDeathMessage(killerid, playerid, reason);

		    Player[killerid][RoundKills]++;
		    Player[killerid][TotalKills]++;
		    Player[playerid][RoundDeaths]++;
		    Player[playerid][TotalDeaths]++;


			if(Player[killerid][TextPos] == false) format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDamage ~r~%.0f~n~%sTotal Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[killerid][RoundKills], MAIN_TEXT_COLOUR, Player[killerid][RoundDamage], MAIN_TEXT_COLOUR, Player[killerid][TotalDamage]);
			else format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDmg ~r~%.0f~n~%sT. Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[killerid][RoundKills], MAIN_TEXT_COLOUR, Player[killerid][RoundDamage], MAIN_TEXT_COLOUR, Player[killerid][TotalDamage]);
			PlayerTextDrawSetString(killerid, RoundKillDmgTDmg, iString);

			if(GameType == BASE)
		   		format(iString, sizeof(iString), "%s%s {FFFFFF}killed %s%s {FFFFFF}<%s%s{FFFFFF}> {FFFFFF}with %s | %.1f ft | %.0f HP", TextColor[Player[killerid][Team]], Player[killerid][Name], TextColor[Player[playerid][Team]], Player[playerid][Name], TextColor[Player[playerid][Team]], Player[playerid][PlayerTypeByWeapon], WeaponNames[reason],GetDistanceBetweenPlayers(killerid, playerid), (HP[0] + HP[1]));
			else
			    format(iString, sizeof(iString), "%s%s {FFFFFF}killed %s%s {FFFFFF}with %s | %.1f ft | %.0f HP", TextColor[Player[killerid][Team]], Player[killerid][Name], TextColor[Player[playerid][Team]], Player[playerid][Name], WeaponNames[reason],GetDistanceBetweenPlayers(killerid, playerid), (HP[0] + HP[1]));

			SendClientMessageToAll(-1, iString);

            OnPlayerAmmoUpdate(playerid);

#if SKINICONS == 1
            if(ShowIcons == true) {
            	SetTimer("UpdateAliveForAll", 2000, false);
			}
#endif

			Player[playerid][TempTeam] = Player[playerid][Team];
		}
	}

	Player[playerid][InDM] = false;
	Player[playerid][Playing] = false;

	if(Player[playerid][WeaponPicked] > 0){
 		TimesPicked[Player[playerid][Team]][Player[playerid][WeaponPicked]-1]--;
 		Player[playerid][WeaponPicked] = 0;
	}

	if(Player[playerid][WasInCP] == true) {
	    PlayersInCP--;
	    Player[playerid][WasInCP] = false;
		if(PlayersInCP <= 0) {
		    CurrentCPTime = ConfigCPTime;
		    TextDrawHideForAll(EN_CheckPoint);
		}
	}

	if(Player[playerid][BeingSpeced] == true) {
		foreach(new i : Player) {
		    if(Player[i][Spectating] == true && Player[i][IsSpectatingID] == playerid) {
				if(Current != -1 && (Player[i][Team] == ATTACKER || Player[i][Team] == ATTACKER_SUB || Player[i][Team] == DEFENDER || Player[i][Team] == DEFENDER_SUB)) {
					SpectateNextTeamPlayer(i);
				} else {
				    SpectateNextPlayer(i);
				}
			}
		}
	}


	if(TempPlaying == true) {
		new Float:Pos[3];
		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

	    foreach(new i : Player) {
			if(Player[playerid][Team] == ATTACKER) {
				if(Player[i][Team] == ATTACKER && Player[i][Playing] == true) {
                    SetPlayerMapIcon( i, Player[playerid][DeathIcon], Pos[0], Pos[1], Pos[2],23, 0, MAPICON_GLOBAL );
					IconTimer[playerid] = SetTimerEx("PlayerDeathIcon", 5000, false, "i", playerid);
				}
			}
			else if(Player[playerid][Team] == DEFENDER) {
			    if(Player[i][Team] == DEFENDER) {
                    SetPlayerMapIcon( i, Player[playerid][DeathIcon], Pos[0], Pos[1], Pos[2],23, 0, MAPICON_GLOBAL );
					IconTimer[playerid] = SetTimerEx("PlayerDeathIcon", 5000, false, "i", playerid);
				}
			}
		}
	}


	PlayerTextDrawHide(playerid, AreaCheckTD);
	PlayerTextDrawHide(playerid, AreaCheckBG);



	#if ENABLED_TDM == 1
	if( Current != -1 && GameType == TDM && ArenaStarted == true )
	{
	    if( TempPlaying == true )
	    {
			switch( Player[playerid][Team] )
			{
			    case ATTACKER:
				{
					TeamTDMKills[DEFENDER]++;
					Player[playerid][InTDM] = true;
					SetHP(playerid, 100);
					SpawnPlayerEx(playerid);
					return 1;
				}
			    case DEFENDER:
				{
					TeamTDMKills[ATTACKER]++;
					Player[playerid][InTDM] = true;
					SetHP(playerid, 100);
					SpawnPlayerEx(playerid);
					return 1;
				}
			}
		}
	}
	#endif

	if(TempPlaying == true) {
	    if(Player[playerid][Team] == ATTACKER) {
	        foreach(new i : Player) {
	            if(Player[i][Team] == ATTACKER && Player[i][Playing] == true) {
					ColorFix(playerid);
					SpectatePlayer(playerid, i);
					return 1;
				}
			}
		} else if(Player[playerid][Team] == DEFENDER) {
		    foreach(new i : Player) {
		        if(Player[i][Team] == DEFENDER && Player[i][Playing] == true) {
					ColorFix(playerid);
					SpectatePlayer(playerid, i);
					return 1;
				}
			}
		}
	}






	SetHP(playerid, 100);
	SpawnPlayerEx(playerid);

	return 1;
}

public OnPlayerText(playerid, text[])
{
	if(AntiSpam == true && GetTickCount() < Player[playerid][lastChat]) { SendErrorMessage(playerid,"Please wait."); return 0; }
	Player[playerid][lastChat] = GetTickCount()+1000;

	if(text[0] == '#' && Player[playerid][ChatChannel] != -1) {
        format(ChatString, sizeof(ChatString), ".: Private Chat | %s | {FFFFFF}%d{FFCC99} | %s", Player[playerid][Name], OnlineInChannel[Player[playerid][ChatChannel]], text[1]);
        OnlineInChannel[Player[playerid][ChatChannel]] = 0;

		foreach(new i : Player) {
            if(Player[i][ChatChannel] == Player[playerid][ChatChannel]) {
                SendClientMessage(i, 0xFFCC99FF, ChatString);
                PlayerPlaySound(i,1137,0.0,0.0,0.0);
                OnlineInChannel[Player[playerid][ChatChannel]]++;
			}
		}
	    return 0;
	}

	if(text[0] == '!')
	{
	    new ChatColor;
	    switch(Player[playerid][Team])
		{
	        case REFEREE: 		ChatColor = 0xFFFF90FF;
	        case DEFENDER: 		ChatColor = 0x0088FFFF;
	        case ATTACKER: 		ChatColor = 0xFF2040FF;
	        case ATTACKER_SUB: 	ChatColor = ATTACKER_SUB_COLOR;
	        case DEFENDER_SUB: 	ChatColor = DEFENDER_SUB_COLOR;
	        case NON:
			{ SendErrorMessage(playerid,"You must be part of a team."); return 0; }
	    }
		format(ChatString,sizeof(ChatString),".: Team Chat | %s (%d) | %s", Player[playerid][Name], playerid, text[1]);

		foreach(new i : Player)
		{
			if(Player[i][Team] != NON)
			{
		        if((Player[playerid][Team] == ATTACKER || Player[playerid][Team] == ATTACKER_SUB) && (Player[i][Team] == ATTACKER || Player[i][Team] == ATTACKER_SUB))
				{ SendClientMessage(i, ChatColor, ChatString); PlayerPlaySound(i,1137,0.0,0.0,0.0); }
		        if((Player[playerid][Team] == DEFENDER || Player[playerid][Team] == DEFENDER_SUB) && (Player[i][Team] == DEFENDER || Player[i][Team] == DEFENDER_SUB))
				{ SendClientMessage(i, ChatColor, ChatString); PlayerPlaySound(i,1137,0.0,0.0,0.0); }
				if(Player[playerid][Team] == REFEREE && Player[i][Team] == REFEREE)
			   	{ SendClientMessage(i, ChatColor, ChatString); PlayerPlaySound(i,1137,0.0,0.0,0.0); }
			}
		}
	    return 0;
	}
	else
	{
	    if(Player[playerid][Mute] == true)
		{ SendErrorMessage(playerid,"You are muted, STFU."); return 0; }
	}

	if(text[0] == '@' && Player[playerid][Level] > 0) {
        format(ChatString, sizeof(ChatString), ".: Admin Chat | %s (%d) | %s", Player[playerid][Name], playerid, text[1]);
        foreach(new i : Player) {
            if(Player[i][Level] > 0) {
                SendClientMessage(i, 0x66CC66FF, ChatString);
                PlayerPlaySound(i,1137,0.0,0.0,0.0);
			}
		}

		return 0;
	}

//maymay
	if(text[0] == '>') {
        format(ChatString, sizeof(ChatString), "(%d) {00EE00}>%s", playerid, text[1]);
       	SendPlayerMessageToAll(playerid, ChatString);

		return 0;
	}
//maymay


	format(ChatString, sizeof(ChatString),"(%d) %s", playerid, text);
    SendPlayerMessageToAll(playerid,ChatString);

	return 0;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    switch(newstate) {
	    case PLAYER_STATE_DRIVER: {
	        Player[playerid][iLastVehicle] = GetPlayerVehicleID(playerid);

            if(Player[playerid][Team] == DEFENDER && Player[playerid][Playing] == true) {
				//RemovePlayerFromVehicle(playerid);
				new Float:defPos[3];
				GetPlayerPos(playerid, defPos[0], defPos[1], defPos[2]);
				SetPlayerPos(playerid, defPos[0]+1.0, defPos[1]+1.0, defPos[2]+1.0);
				return 1;
			}

			SetPlayerArmedWeapon(playerid,0);

			if(Player[playerid][BeingSpeced] == true) {
	            foreach(new i : Player) {
		            if(Player[i][Spectating] == true && Player[i][IsSpectatingID] == playerid) {
			            TogglePlayerSpectating(i, 1);
			            PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
		            }
		        }
			}

			switch(Player[playerid][Team]) {
				case ATTACKER: ChangeVehicleColor(GetPlayerVehicleID(playerid), 175, 175);
				case ATTACKER_SUB: ChangeVehicleColor(GetPlayerVehicleID(playerid), 158, 158);
				case DEFENDER: ChangeVehicleColor(GetPlayerVehicleID(playerid), 198, 198);
				case DEFENDER_SUB: ChangeVehicleColor(GetPlayerVehicleID(playerid), 208, 208);
				case REFEREE: ChangeVehicleColor(GetPlayerVehicleID(playerid), 200, 200);
			}

			if(Player[playerid][Playing] == true && Player[playerid][WasInCP] == true) {
				if(IsPlayerInRangeOfPoint(playerid, 2.0, BCPSpawn[Current][0], BCPSpawn[Current][1], BCPSpawn[Current][2])) {
			  		PlayersInCP--;
				 	Player[playerid][WasInCP] = false;
				    ColorFix(playerid);

					if(PlayersInCP <= 0) {
					    CurrentCPTime = ConfigCPTime;
					    TextDrawHideForAll(EN_CheckPoint);
					}
					RadarFix();
				}
			}
		} case PLAYER_STATE_PASSENGER: {
            Player[playerid][iLastVehicle] = GetPlayerVehicleID(playerid);

			if(Player[playerid][Team] == DEFENDER && Player[playerid][Playing] == true) {
				//RemovePlayerFromVehicle(playerid);
				new Float:defPos[3];
				GetPlayerPos(playerid, defPos[0], defPos[1], defPos[2]);
				SetPlayerPos(playerid, defPos[0]+1.0, defPos[1]+1.0, defPos[2]+1.0);
				return 1;
			}

			SetPlayerArmedWeapon(playerid,0);

			if(Player[playerid][BeingSpeced] == true) {
	            foreach(new i : Player) {
		            if(Player[i][Spectating] == true && Player[i][IsSpectatingID] == playerid) {
			            TogglePlayerSpectating(i, 1);
			            PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
		            }
		        }
			}

			if(Player[playerid][Playing] == true && Player[playerid][WasInCP] == true) {
				if(IsPlayerInRangeOfPoint(playerid, 2.0, BCPSpawn[Current][0], BCPSpawn[Current][1], BCPSpawn[Current][2])) {
			  		PlayersInCP--;
				 	Player[playerid][WasInCP] = false;
				    ColorFix(playerid);

					if(PlayersInCP <= 0) {
					    CurrentCPTime = ConfigCPTime;
					    TextDrawHideForAll(EN_CheckPoint);
					}
					RadarFix();
				}
			}

	    } case PLAYER_STATE_ONFOOT: {
	        if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER) {
				if(Player[playerid][BeingSpeced] == true) {
		            foreach(new i : Player) {
			            if(Player[i][Spectating] == true && Player[i][IsSpectatingID] == playerid) {
				            TogglePlayerSpectating(i, 1);
				            PlayerSpectatePlayer(i, playerid);
			            }
			        }
				}

				if(Current != -1 && GameType == BASE && Player[playerid][Playing] == true && Player[playerid][Team] == ATTACKER) {
					if(IsPlayerInRangeOfPoint(playerid, 2.0, BCPSpawn[Current][0], BCPSpawn[Current][1], BCPSpawn[Current][2])) {
						OnPlayerEnterCheckpoint(playerid);
					}
				}

		        if(Player[playerid][iLastVehicle] > -1) {
					new vehicleid = Player[playerid][iLastVehicle];

					if(vehicleid == thetrain)
					    goto skipped;

					new bool:InVehicle = false;
				    foreach(new i : Player) {
				    	if(i != playerid && IsPlayerInVehicle(i, vehicleid)) {
					        InVehicle = true;
						}
					}

				 	if(InVehicle == false) {
						new Float:VehiclePoss[4], Float:VehicleVelocity[3], VehicleModel, Panels, Doors, Lights, Tires, Float:VehicleHealth, VehicleColor, VehicleTrailer;
			            GetVehiclePos(vehicleid, VehiclePoss[0], VehiclePoss[1], VehiclePoss[2]);
						GetVehicleZAngle(vehicleid, VehiclePoss[3]);

						GetVehicleVelocity(vehicleid, VehicleVelocity[0], VehicleVelocity[1], VehicleVelocity[2]);
						VehicleModel = GetVehicleModel(vehicleid);

						GetVehicleHealth(vehicleid, VehicleHealth);

						GetVehicleDamageStatus(vehicleid, Panels, Doors, Lights, Tires);
		                VehicleTrailer = GetVehicleTrailer(vehicleid);

						DestroyVehicle(vehicleid);

						switch(Player[playerid][Team]) {
							case ATTACKER: VehicleColor = 175;
							case ATTACKER_SUB: VehicleColor = 158;
							case DEFENDER: VehicleColor = 198;
							case DEFENDER_SUB: VehicleColor = 208;
							case REFEREE: VehicleColor = 200;
						}

						vehicleid = CreateVehicle(VehicleModel, VehiclePoss[0], VehiclePoss[1], VehiclePoss[2], VehiclePoss[3], VehicleColor, VehicleColor, -1);

						new plate[32];
						format(plate, sizeof(plate), "%s", Player[playerid][NameWithoutTag]);
					    SetVehicleNumberPlate(vehicleid, plate);
					    SetVehicleToRespawn(vehicleid);

						LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
						SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
				        SetVehicleVelocity(vehicleid, VehicleVelocity[0], VehicleVelocity[1], VehicleVelocity[2]);

						UpdateVehicleDamageStatus(vehicleid, Panels, Doors, Lights, Tires);
						SetVehicleHealth(vehicleid, VehicleHealth);

						if(VehicleTrailer != 0) AttachTrailerToVehicle(VehicleTrailer, vehicleid);
						Player[playerid][iLastVehicle] = -1;
					}
					skipped:
				}
			}
	    }
    }

	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	if(vehicleid == thetrain)
	{
	    SetVehicleVirtualWorld(thetrain, 0);
		SetVehicleVirtualWorld(traintrailer1, 0);
		SetVehicleVirtualWorld(traintrailer2, 0);
		AttachTrailerToVehicle(traintrailer1, thetrain);
		AttachTrailerToVehicle(traintrailer2, thetrain);
	}
	if(GetVehicleModel(vehicleid) == 563)
	{
	    HeliWoodenBoard[vehicleid] = CreateObject(19128,0,0,0,0,0,0,80); // 2988
		AttachObjectToVehicle(HeliWoodenBoard[vehicleid], vehicleid, 0.0, 6.299995, -1.200000, 0.000000, 0.000000, 0.000000);
 	}
 	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
    if(HeliWoodenBoard[vehicleid] > -1)
    {
        DestroyObject(HeliWoodenBoard[vehicleid]);
        HeliWoodenBoard[vehicleid] = -1;
    }
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	foreach (new i : Player) {
	    if(Player[i][Spectating] == true && Player[i][IsSpectatingID] == playerid){
			SetPlayerInterior(i,newinteriorid);
		}
	}

	return 1;
}

public OnPlayerEnterCheckpoint(playerid) {
    if(!IsPlayerInAnyVehicle(playerid) && Player[playerid][Playing] == true) {
		switch(Player[playerid][Team]) {
		    case ATTACKER: {
		        new Float:attPos[3];
			    GetPlayerPos(playerid, attPos[0], attPos[1], attPos[2]);
			    if(attPos[2] <= (BCPSpawn[Current][2] - 1.4))
			    	return 1;

				PlayersInCP++;
				Player[playerid][WasInCP] = true;

				new iString[256];
				new Float:HP, Float:AP;
				format(iString, sizeof iString, "%sPlayers In CP", MAIN_TEXT_COLOUR);
				foreach(new i : Player) {
				    if(Player[i][WasInCP] == true) {
				        GetHP(i, HP);
				        GetAP(i, AP);
				        format(iString, sizeof(iString), "%s~n~~r~~h~- %s%s (%.0f)", iString, MAIN_TEXT_COLOUR, Player[i][Name], (HP+AP));
					}
				}
				TextDrawSetString(EN_CheckPoint, iString);
				TextDrawShowForAll(EN_CheckPoint);

			} case DEFENDER: {
			    //PlayersInCP = 0;
			    new Float:defPos[3];
			    GetPlayerPos(playerid, defPos[0], defPos[1], defPos[2]);
			    if(defPos[2] >= (BCPSpawn[Current][2] - 1.4))
			    	CurrentCPTime = ConfigCPTime;
				else
				    if(CurrentCPTime < ConfigCPTime)
				    	SendClientMessageToAll(-1, sprintf(""COL_PRIM"Improper CP touch done by {FFFFFF}%s", Player[playerid][Name]));
			}
		}
	}
    return 1;
}

public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
    OnPlayerEditGraffObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ);
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(Player[playerid][Level] == 5 && Player[playerid][Playing] == false && Player[playerid][InDM] == false && Player[playerid][InDuel] == false && Player[playerid][Spectating] == false && Player[playerid][InHeadShot] == false && Player[playerid][AntiLag] == false) {
		SetPlayerPosFindZ(playerid, fX, fY, fZ);
	}
    return 1;
}

public OnPlayerLeaveCheckpoint(playerid) {
	if(Player[playerid][Team] == ATTACKER && Player[playerid][WasInCP] == true) {
		PlayersInCP--;
	 	Player[playerid][WasInCP] = false;

		new iString[256];
		new Float:HP, Float:AP;
		format(iString, sizeof iString, "%sPlayers In CP", MAIN_TEXT_COLOUR);
		foreach(new i : Player) {
		    if(Player[i][WasInCP] == true) {
		        GetHP(i, HP);
		        GetAP(i, AP);
		        format(iString, sizeof(iString), "%s~n~~r~~h~- %s%s (%.0f)", iString, MAIN_TEXT_COLOUR, Player[i][Name], (HP+AP));
			}
		}
		TextDrawSetString(EN_CheckPoint, iString);

		if(PlayersInCP <= 0) {
		    CurrentCPTime = ConfigCPTime;
		    TextDrawHideForAll(EN_CheckPoint);
		}
	}
    return 1;
}





public OnRconLoginAttempt(ip[], password[], success)
{
	new Str[150], iName[MAX_PLAYER_NAME], playerid;

	foreach(new i : Player){
		new IP[16];
		GetPlayerIp(i, IP, sizeof(IP));
	    if(!strcmp(IP, ip)) {
			GetPlayerName(i, iName, sizeof(iName));
			playerid = i;
		}
	}

    if(!success) {
		format(Str, sizeof(Str), "{FFFFFF}%s "COL_PRIM"has failed to log into rcon.", iName);
        SendClientMessageToAll(-1, Str);

        Player[playerid][RconTry]++;
		SendClientMessage(playerid, -1, "Wrong password one more time will get you kicked.");

		if(Player[playerid][RconTry] >= 2){
			format(Str, sizeof(Str), "{FFFFFF}%s "COL_PRIM"has been kicked for fail attempt to log into rcon", iName);
			SendClientMessageToAll(-1, Str);
			SetTimerEx("OnPlayerKicked", 500, false, "i", playerid);
			return 1;
		}
    } else {
		format(Str, sizeof(Str), "{FFFFFF}%s "COL_PRIM"has successfully logged into rcon.", iName);
		foreach(new j : Player) {
			if(Player[j][Level] > 4) SendClientMessage(j, -1, Str);
		}
	}
    return 1;
}

public OnPlayerUpdate(playerid)
{
	#if SILENTAIMDETECT == 1
	new Float:X, Float:Y, Float:Z;
	GetPlayerCameraPos(playerid, X, Y, Z);

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, X, Y, Z) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && (GetPlayerCameraMode(playerid) == 7 || GetPlayerCameraMode(playerid) == 53)) {
		return 0;
	}
	#endif

	Player[playerid][PauseCount] = 0;

	if(RoundPaused == true)
	{
        if(Player[playerid][Playing] == true && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && VehiclePos[playerid][0] != 0.0 && VehiclePos[playerid][1] != 0.0)
		{
            SetVehiclePos(GetPlayerVehicleID(playerid), VehiclePos[playerid][0], VehiclePos[playerid][1], VehiclePos[playerid][2]);
		}
	}
	// Target info

	if(ToggleTargetInfo == true && Player[playerid][Spectating] != true)
	{
		ShowTargetInfo(playerid, GetPlayerTargetPlayer(playerid));
	}


    //antijoypad
    new keys, ud, lr;
	GetPlayerKeys(playerid, keys, ud, lr);

	if(lagcompmode != 0 || ServerAntiLag == true)
	{
		if ((ud != 128 && ud != 0 && ud != -128) || (lr != 128 && lr != 0 && lr != -128)) {
			new str[128];
		    format(str, sizeof(str), "{FFFFFF}** System ** "COL_PRIM"has kicked {FFFFFF}%s "COL_PRIM"for using joypad", Player[playerid][Name]);
		    SendClientMessageToAll(-1, str);

			Player[playerid][DontPause] = true;
		    SetTimerEx("OnPlayerKicked", 100, false, "i", playerid);
		}
	}
	//antijoypad


	if(noclipdata[playerid][cameramode] == CAMERA_MODE_FLY) {

		if(noclipdata[playerid][noclipcammode] && (GetTickCount() - noclipdata[playerid][lastmove] > 100))
		{
		    // If the last move was > 100ms ago, process moving the object the players camera is attached to
		    MoveCamera(playerid);
		}

		// Is the players current key state different than their last keystate?
		if(noclipdata[playerid][udold] != ud || noclipdata[playerid][lrold] != lr)
		{
			if((noclipdata[playerid][udold] != 0 || noclipdata[playerid][lrold] != 0) && ud == 0 && lr == 0)
			{   // All keys have been released, stop the object the camera is attached to and reset the acceleration multiplier
				StopPlayerObject(playerid, noclipdata[playerid][flyobject]);
				noclipdata[playerid][noclipcammode] = 0;
				noclipdata[playerid][accelmul]  = 0.0;
			}
			else
			{   // Indicates a new key has been pressed

			    // Get the direction the player wants to move as indicated by the keys
				noclipdata[playerid][noclipcammode] = GetMoveDirectionFromKeys(ud, lr);

				// Process moving the object the players camera is attached to
				MoveCamera(playerid);
			}
		}
		noclipdata[playerid][udold] = ud; noclipdata[playerid][lrold] = lr; // Store current keys pressed for comparison next update
		return 0;
	}

	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	if(Player[playerid][Playing] == true && Player[forplayerid][Playing] == true){
		if(Player[forplayerid][Team] != Player[playerid][Team]){
			SetPlayerMarkerForPlayer(forplayerid,playerid, GetPlayerColor(playerid) & 0xFFFFFF00);
		} else {
			SetPlayerMarkerForPlayer(forplayerid,playerid,GetPlayerColor(playerid) | 0x00000055);
		}
	} else if(Player[playerid][Playing] == true && Player[forplayerid][Playing] == false) {
		if(Player[forplayerid][Team] != Player[playerid][Team]){
			SetPlayerMarkerForPlayer(forplayerid,playerid, GetPlayerColor(playerid) & 0xFFFFFF00);
		} else {
			SetPlayerMarkerForPlayer(forplayerid,playerid,GetPlayerColor(playerid) | 0x00000055);
		}
	}
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	if(Player[playerid][Playing] == true && Player[forplayerid][Playing] == true){
		if(Player[forplayerid][Team] != Player[playerid][Team]){
			SetPlayerMarkerForPlayer(forplayerid,playerid, GetPlayerColor(playerid) & 0xFFFFFF00);
		} else {
			SetPlayerMarkerForPlayer(forplayerid,playerid,GetPlayerColor(playerid) | 0x00000055);
		}
	} else if(Player[playerid][Playing] == true && Player[forplayerid][Playing] == false) {
		if(Player[forplayerid][Team] != Player[playerid][Team]){
			SetPlayerMarkerForPlayer(forplayerid,playerid, GetPlayerColor(playerid) & 0xFFFFFF00);
		} else {
			SetPlayerMarkerForPlayer(forplayerid,playerid,GetPlayerColor(playerid) | 0x00000055);
		}
	}
	return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float: amount, weaponid, bodypart)
{

	if(Player[damagedid][OnGunmenu] && Player[damagedid][Playing])
        return 1;

	if(Player[damagedid][IsAFK])
	{
		return 1;
	}

	if(ToggleTargetInfo == true)
	{
	    ShowTargetInfo(playerid, damagedid);
	}

    // slit throat with a knife
    if(amount > 1800 && weaponid == 4 && GetPlayerAnimationIndex(playerid) == 747) {

        Player[damagedid][HitBy] = playerid;
		Player[damagedid][HitWith] = weaponid;

		if(!ServerAntiLag) {
		    CallLocalFunction("OnPlayerTakeDamage", "ddfdd", damagedid, playerid, amount, weaponid, bodypart);
		}

		SetHP(damagedid, 0);

		if(!ServerAntiLag) return 1;
	}

	if(ServerAntiLag == false) {
		if(Player[damagedid][AntiLag] == false) return 1;
	    if(playerid != INVALID_PLAYER_ID && Player[playerid][AntiLag] == false) return 1;
	} else {
	    if(Player[playerid][Playing] == true || Player[damagedid][Playing] == true) {
	        if(Player[damagedid][Team] == Player[playerid][Team]) return 1;
	        if(Player[playerid][Playing] == true && Player[damagedid][Playing] == false) return 1;
	        if(Player[damagedid][Team] == REFEREE) return 1;
		}
	}
	if(Player[damagedid][PauseCount] > 2) return 1;

	new Float:Health[2], Float:Damage;
	GetHP(damagedid, Health[0]);
	GetAP(damagedid, Health[1]);
	
	if(Health[0] > 0) {
	    if(amount > Health[0]) {
	        Damage = amount - Health[0];
	        amount = amount - Damage;
		}
	}

	Player[damagedid][HitBy] = playerid;
	Player[damagedid][HitWith] = weaponid;

    new Float:health, Float:armor;

    armor = Health[1];
    health = Health[0];

    new bool:setArmor = false;

    if( armor > 0.0) {
        armor = armor - amount;
        setArmor = true;
    }

    if( amount > health && !setArmor ) {
        health = 0.0;
    } else if( !setArmor ) {
        health = health - amount;
    } else if( armor < 0.0 ) {
        health = health + armor;
        armor = 0.0;
    }

    SetAP(damagedid, armor);
    SetHP(damagedid, health);

    OnPlayerTakeDamage(damagedid, playerid, amount, -1, bodypart );

	return 1;
}

forward HideAutoRefillText(playerid);
public HideAutoRefillText(playerid)
{
    Player[playerid][PROT_HPAutoRefilled] = false;
	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid, bodypart)
{
    if((Player[playerid][OnGunmenu] && Player[playerid][Playing]) ||
    	(weaponid == 49 || weaponid == 50 || weaponid == 51 || (weaponid == 54 && amount <= 10)) ||
    	Player[playerid][IsAFK])
    {
    	// Fix HP bars from going out of sync
    	new Float:hp, Float:ar;

    	// Get fake hp
    	GetHP(playerid, hp);
    	GetAP(playerid, ar);

    	// Set fake hp (will cause hp/armour flicker)
    	SetHP(playerid, hp);
    	SetAP(playerid, ar);

        return 1;
    }


    //ShowHitArrow(playerid, issuerid);

	if(playerid != INVALID_PLAYER_ID && issuerid != INVALID_PLAYER_ID && bodypart == 9) // headshot
	{
	    if(Player[issuerid][InHeadShot])
		{
		    if(Player[playerid][InHeadShot])
		    {
		        SetHP(playerid, 0.0);
				return 1;
			}
		}
		else if(GetPlayerTeam(playerid) != GetPlayerTeam(issuerid) && GetPlayerTeam(playerid) != NO_TEAM)
		{
			new wepName[32], bool: nan_weapon = false;
			switch(weaponid)
			{
			    case WEAPON_SNIPER:
			    {format(wepName, sizeof wepName, "Sniper");}
			    case WEAPON_RIFLE:
			    {format(wepName, sizeof wepName, "Rifle");}
			    case WEAPON_DEAGLE:
			    {format(wepName, sizeof wepName, "Deagle");}
			    default: nan_weapon = true;
			}
			if( nan_weapon == false )
			{
				new shootername[MAX_PLAYER_NAME], shotname[MAX_PLAYER_NAME];
				GetPlayerName(playerid, shotname, sizeof shotname);
				GetPlayerName(issuerid, shootername, sizeof shootername);
				SendClientMessageToAll(-1, sprintf("{FFFFFF}%s "COL_PRIM"has landed a shot on {FFFFFF}%s's head "COL_PRIM"({FFFFFF}%s"COL_PRIM")", shootername, shotname, wepName));
			}
		}
	}

	if(ToggleTargetInfo == true)
	{
	    ShowTargetInfo(issuerid, playerid);
	}

	if(ServerAntiLag == true && weaponid != -1) return 1;


	new Float:Health[3], Float:Damage;
	GetHP(playerid, Health[0]);
	GetAP(playerid, Health[1]);

	if(ServerAntiLag == false) {
		if(Player[playerid][AntiLag] == true && weaponid != -1) return 1;
		if(issuerid != INVALID_PLAYER_ID && Player[issuerid][AntiLag] == true && weaponid != -1) return 1;
	}

	if(weaponid == -1) weaponid = Player[playerid][HitWith];


	if(FallProtection == true && Player[playerid][Playing] == true) {
		if(weaponid == 54 || weaponid == 49 || weaponid == 50) {
	    	SetHP(playerid, 100.0);
		} else {
		    if(issuerid != INVALID_PLAYER_ID) {
				if(Player[issuerid][Team] != Player[playerid][Team]) {
		    		FallProtection = false;
				}
			} else {
			    FallProtection = false;
			}
		}
	}

    // Fall Protection Improvement Part
	if(issuerid == INVALID_PLAYER_ID && Player[playerid][Playing] == true)
	{
		if(Health[1] >= 1.0 && (Health[0] - amount) < RoundHP)
		{
			Player[playerid][PROT_HPAutoRefilled] = true;
			SetTimerEx("HideAutoRefillText", 2000, false, "i", playerid);
			SetHP(playerid, RoundHP);
		}
	}
	// <end>
	
	// Health and armour handling
	if(IsPlayerConnected(issuerid))
		if(Player[issuerid][Playing] == true && (Player[issuerid][Team] == Player[playerid][Team]))
			return 1;
			
	if(weaponid == 54)
	{
	    SetHP(playerid, Health[0] - amount);
	}
	else if(Health[1] > 0.0)
	{
		if((Health[1] - amount) < 0)
		{
		    new Float:diff = (Health[1] - amount);
		    SetAP(playerid, 0.0);
		    SetHP(playerid, Health[0] + diff);
		}
		else
		    SetAP(playerid, Health[1] - amount);
	}
	else
	    SetHP(playerid, Health[0] - amount);
	// <end>

	if(Health[0] > 0) {
	    if(amount > Health[0]) {
	        Damage = amount - Health[0];
	        amount = amount - Damage;
		}
	}

	new iString[200], iColor[10];

	Health[2] = (Health[0] + Health[1]) - amount;
	if(Health[2] < 0) { Health[2] = 0; iColor = "~r~"; }
	else if(Health[2] > 100) format(iColor, sizeof iColor, "%s", MAIN_TEXT_COLOUR);
	else iColor = "~r~";

	if(issuerid != INVALID_PLAYER_ID)
	{
		if(Player[issuerid][Playing] == true && (Player[issuerid][Team] == Player[playerid][Team])) return 1;
		if(Player[issuerid][Playing] == true && Player[playerid][Playing] == false) return 1;
		if(Player[issuerid][Playing] == true && (Player[issuerid][Team] == REFEREE || Player[playerid][Team] == REFEREE)) return 1;

	    if(GotHit[playerid] == 0) {
			if(Health[1] == 0) {
				w0[playerid] = CreateObject(1240, 0, 0, 0, 0, 0, 0, DRAW_DISTANCE);		//heart
				AttachObjectToPlayer(w0[playerid], playerid, 0, 0, 2, 0, 0, 0);
				SetTimerEx("hidew0",1000,false,"d",playerid);
				GotHit[playerid] = 1;
			}
			else if(Health[1] > 0) {
				w0[playerid] = CreateObject(1242, 0, 0, 0, 0, 0, 0, DRAW_DISTANCE);		//armor
				AttachObjectToPlayer(w0[playerid], playerid, 0, 0, 2, 0, 0, 0);
				SetTimerEx("hidew0",1000,false,"d",playerid);
				GotHit[playerid] = 1;
			}
		}

		PlayerPlaySound(issuerid, Player[issuerid][HitSound], 0.0, 0.0, 0.0);
        PlayerPlaySound(playerid, Player[playerid][GetHitSound], 0, 0, 0);

		if(Player[issuerid][Playing] == true || Player[playerid][Playing] == true)
		{
            Player[issuerid][WeaponStat][weaponid] += floatround(amount, floatround_round);

			Player[issuerid][shotsHit]++;
			Player[issuerid][RoundDamage] += amount;
			Player[issuerid][TotalDamage] += amount;
			if(Player[issuerid][TextPos] == false) format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDamage ~r~%.0f~n~%sTotal Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[issuerid][RoundKills], MAIN_TEXT_COLOUR, Player[issuerid][RoundDamage], MAIN_TEXT_COLOUR, Player[issuerid][TotalDamage]);
			else format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDmg ~r~%.0f~n~%sT. Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[issuerid][RoundKills], MAIN_TEXT_COLOUR, Player[issuerid][RoundDamage], MAIN_TEXT_COLOUR, Player[issuerid][TotalDamage]);
			PlayerTextDrawSetString(issuerid, RoundKillDmgTDmg, iString);

		}

		if(gLastHit[0][issuerid] == -1 && gLastHit[1][issuerid] != playerid && gLastHit[2][issuerid] != playerid) gLastHit[0][issuerid] = playerid;
		if(gLastHit[0][issuerid] == playerid) {
		    DamageDone[0][issuerid] += amount;
  			format(iString, sizeof(iString), "~b~%s	%s/ -%.0f ~b~%s %s(%s~h~%.0f%s)",Player[playerid][NameWithoutTag], MAIN_TEXT_COLOUR, DamageDone[0][issuerid], WeaponNames[weaponid], MAIN_TEXT_COLOUR, iColor, Health[2], MAIN_TEXT_COLOUR);
	        PlayerTextDrawSetString(issuerid, DoingDamage[0], iString);
			TakeDmgCD[0][issuerid] = 1;

			if(Player[issuerid][BeingSpeced] == true) {
				foreach(new i : Player) {
			        if(Player[i][Spectating] == true && Player[i][IsSpectatingID] == issuerid) {
				        PlayerTextDrawSetString(i, DoingDamage[0], iString);
				        PlayerPlaySound(i, Player[i][HitSound],0.0,0.0,0.0);
						TakeDmgCD[0][i] = 1;
						gLastHit[0][i] = i;
					}
				}
			}
		} else {
			if(gLastHit[1][issuerid] == -1 && gLastHit[2][issuerid] != playerid) gLastHit[1][issuerid] = playerid;
			if(gLastHit[1][issuerid] == playerid ) {
			    DamageDone[1][issuerid] += amount;
             	format(iString, sizeof(iString), "~b~%s	%s/ -%.0f ~b~%s %s(%s~h~%.0f%s)",Player[playerid][NameWithoutTag], MAIN_TEXT_COLOUR, DamageDone[1][issuerid], WeaponNames[weaponid], MAIN_TEXT_COLOUR, iColor, Health[2], MAIN_TEXT_COLOUR);
	            PlayerTextDrawSetString(issuerid, DoingDamage[1], iString);
				TakeDmgCD[1][issuerid] = 1;

				if(Player[issuerid][BeingSpeced] == true) {
				    foreach(new i : Player){
				        if(Player[i][Spectating] == true && Player[i][IsSpectatingID] == issuerid) {
							PlayerTextDrawSetString(i, DoingDamage[1], iString);
					        PlayerPlaySound(i, Player[i][HitSound],0.0,0.0,0.0);
							TakeDmgCD[1][i] = 1;
							gLastHit[1][i] = i;
						}
					}
				}
			} else {
   				DamageDone[2][issuerid] += amount;
			   	gLastHit[2][issuerid] = playerid;

	            format(iString, sizeof(iString), "~b~%s	%s/ -%.0f ~b~%s %s(%s~h~%.0f%s)",Player[playerid][NameWithoutTag], MAIN_TEXT_COLOUR, DamageDone[2][issuerid], WeaponNames[weaponid], MAIN_TEXT_COLOUR, iColor, Health[2], MAIN_TEXT_COLOUR);
				PlayerTextDrawSetString(issuerid, DoingDamage[2], iString);
				TakeDmgCD[2][issuerid] = 1;

				if(Player[issuerid][BeingSpeced] == true) {
				    foreach(new i : Player) {
				        if(Player[i][Spectating] == true && Player[i][IsSpectatingID] == issuerid) {
							PlayerTextDrawSetString(i, DoingDamage[2], iString);
					        PlayerPlaySound(i,Player[i][HitSound],0.0,0.0,0.0);
							TakeDmgCD[2][i] = 1;
							gLastHit[2][i] = i;
						}
					}
				}
			}
		}


		if(gLastHit[3][playerid] == -1 && gLastHit[4][playerid] != issuerid && gLastHit[5][playerid] != issuerid) gLastHit[3][playerid] = issuerid;
		if(gLastHit[3][playerid] == issuerid) {
		    DamageDone[3][playerid] += amount;

			format(iString, sizeof(iString), "~r~~h~%s	%s/ -%.0f ~r~~h~%s %s(%s~h~%.0f%s)", Player[issuerid][NameWithoutTag], MAIN_TEXT_COLOUR, DamageDone[3][playerid], WeaponNames[weaponid], MAIN_TEXT_COLOUR, iColor, Health[2], MAIN_TEXT_COLOUR);
        	PlayerTextDrawSetString(playerid, GettingDamaged[0], iString);
			TakeDmgCD[3][playerid] = 1;

			if(Player[playerid][BeingSpeced] == true) {
			    foreach(new i : Player) {
			        if(Player[i][Spectating] == true && Player[i][IsSpectatingID] == playerid) {
			        	PlayerTextDrawSetString(i, GettingDamaged[0], iString);
				        PlayerPlaySound(i,Player[i][GetHitSound],0.0,0.0,0.0);
						TakeDmgCD[3][i] = 1;
						gLastHit[3][i] = i;
					}
				}
			}

			format(DmgLabelStr[0][playerid], 128, "%s%s {FFFFFF}/ -%.0f (%s%s{FFFFFF})", TextColor[Player[playerid][Team]], Player[issuerid][NameWithoutTag], DamageDone[3][playerid], TextColor[Player[playerid][Team]], WeaponNames[weaponid]);
			format(iString, sizeof(iString), "%s\n%s\n%s", DmgLabelStr[0][playerid], DmgLabelStr[1][playerid], DmgLabelStr[2][playerid]);
   			Update3DTextLabelText(DmgLabel[playerid], -1, iString);
		} else {
			if(gLastHit[4][playerid] == -1 && gLastHit[5][playerid] != issuerid) gLastHit[4][playerid] = issuerid;
			if(gLastHit[4][playerid] == issuerid) {
			    DamageDone[4][playerid] += amount;

				format(iString, sizeof(iString), "~r~~h~%s	%s/ -%.0f ~r~~h~%s %s(%s~h~%.0f%s)", Player[issuerid][NameWithoutTag], MAIN_TEXT_COLOUR, DamageDone[4][playerid], WeaponNames[weaponid], MAIN_TEXT_COLOUR, iColor, Health[2], MAIN_TEXT_COLOUR);
	        	PlayerTextDrawSetString(playerid, GettingDamaged[1], iString);
				TakeDmgCD[4][playerid] = 1;

				if(Player[playerid][BeingSpeced] == true) {
				    foreach(new i : Player) {
				        if(Player[i][Spectating] == true && Player[i][IsSpectatingID] == playerid) {
				        	PlayerTextDrawSetString(i, GettingDamaged[1], iString);
					        PlayerPlaySound(i,Player[i][GetHitSound],0.0,0.0,0.0);
							TakeDmgCD[4][i] = 1;
							gLastHit[4][i] = i;
						}
					}
				}

				format(DmgLabelStr[1][playerid], 128, "%s%s {FFFFFF}/ -%.0f (%s%s{FFFFFF})", TextColor[Player[playerid][Team]], Player[issuerid][NameWithoutTag], DamageDone[4][playerid], TextColor[Player[playerid][Team]], WeaponNames[weaponid]);
				format(iString, sizeof(iString), "%s\n%s\n%s", DmgLabelStr[0][playerid], DmgLabelStr[1][playerid], DmgLabelStr[2][playerid]);
	   			Update3DTextLabelText(DmgLabel[playerid], -1, iString);
			} else {
			    DamageDone[5][playerid] += amount;
				gLastHit[5][playerid] = issuerid;

				format(iString, sizeof(iString), "~r~~h~%s	%s/ -%.0f ~r~~h~%s %s(%s~h~%.0f%s)", Player[issuerid][NameWithoutTag], MAIN_TEXT_COLOUR, DamageDone[5][playerid], WeaponNames[weaponid], MAIN_TEXT_COLOUR, iColor, Health[2], MAIN_TEXT_COLOUR);
	        	PlayerTextDrawSetString(playerid, GettingDamaged[2], iString);
				TakeDmgCD[5][playerid] = 1;

				if(Player[playerid][BeingSpeced] == true) {
				    foreach(new i : Player) {
				        if(Player[i][Spectating] == true && Player[i][IsSpectatingID] == playerid) {
				        	PlayerTextDrawSetString(i, GettingDamaged[2], iString);
					        PlayerPlaySound(i,Player[i][GetHitSound],0.0,0.0,0.0);
							TakeDmgCD[5][i] = 1;
							gLastHit[5][i] = i;
						}
					}
				}

				format(DmgLabelStr[2][playerid], 128, "%s%s {FFFFFF}/ -%.0f (%s%s{FFFFFF})", TextColor[Player[playerid][Team]], Player[issuerid][NameWithoutTag], DamageDone[5][playerid], TextColor[Player[playerid][Team]], WeaponNames[weaponid]);
				format(iString, sizeof(iString), "%s\n%s\n%s", DmgLabelStr[0][playerid], DmgLabelStr[1][playerid], DmgLabelStr[2][playerid]);
	   			Update3DTextLabelText(DmgLabel[playerid], -1, iString);
			}
		}
	} else {
		if(GetPlayerState(playerid) != PLAYER_STATE_WASTED) {

			PlayerPlaySound(playerid, Player[playerid][GetHitSound], 0, 0, 0);

		    if(GotHit[playerid] == 0) {
				if(Health[1] == 0) {
					w0[playerid] = CreateObject(1240, 0, 0, 0, 0, 0, 0, DRAW_DISTANCE);		//heart
					AttachObjectToPlayer(w0[playerid], playerid, 0, 0, 2, 0, 0, 0);
					SetTimerEx("hidew0",1000,false,"d",playerid);
					GotHit[playerid] = 1;
				}
				else if(Health[1] > 0) {
					w0[playerid] = CreateObject(1242, 0, 0, 0, 0, 0, 0, DRAW_DISTANCE);		//armor
					AttachObjectToPlayer(w0[playerid], playerid, 0, 0, 2, 0, 0, 0);
					SetTimerEx("hidew0",1000,false,"d",playerid);
					GotHit[playerid] = 1;
				}
			}

            if(gLastHit[3][playerid] == -1 && gLastHit[4][playerid] != playerid && gLastHit[5][playerid] != playerid) gLastHit[3][playerid] = playerid;
			if(gLastHit[3][playerid] == playerid) {
			    DamageDone[3][playerid] += amount;

				format(iString, sizeof(iString), "%s-%.0f ~r~~h~%s %s(%s~h~%.0f%s)", MAIN_TEXT_COLOUR, DamageDone[3][playerid], WeaponNames[weaponid], MAIN_TEXT_COLOUR, iColor, Health[2], MAIN_TEXT_COLOUR);
	        	PlayerTextDrawSetString(playerid, GettingDamaged[0], iString);
				TakeDmgCD[3][playerid] = 1;

				if(Player[playerid][BeingSpeced] == true  ) {
				    foreach(new i : Player) {
				        if(Player[i][Spectating] == true && Player[i][IsSpectatingID] == playerid) {
				        	PlayerTextDrawSetString(i, GettingDamaged[0], iString);
					        PlayerPlaySound(i,Player[i][GetHitSound],0.0,0.0,0.0);
							TakeDmgCD[3][i] = 1;
							gLastHit[3][i] = i;
						}
					}
				}

				format(DmgLabelStr[0][playerid], 128, "{FFFFFF}-%.0f (%s%s{FFFFFF})", DamageDone[3][playerid], TextColor[Player[playerid][Team]], WeaponNames[weaponid]);
				format(iString, sizeof(iString), "%s\n%s\n%s", DmgLabelStr[0][playerid], DmgLabelStr[1][playerid], DmgLabelStr[2][playerid]);
	   			Update3DTextLabelText(DmgLabel[playerid], -1, iString);

			} else {
			    if(gLastHit[4][playerid] == -1 && gLastHit[5][playerid] != playerid) gLastHit[4][playerid] = playerid;
				if(gLastHit[4][playerid] == playerid) {
				    DamageDone[4][playerid] += amount;

					format(iString, sizeof(iString), "%s-%.0f ~r~~h~%s %s(%s~h~%.0f%s)", MAIN_TEXT_COLOUR, DamageDone[4][playerid], WeaponNames[weaponid], MAIN_TEXT_COLOUR, iColor, Health[2], MAIN_TEXT_COLOUR);
		        	PlayerTextDrawSetString(playerid, GettingDamaged[1], iString);
					TakeDmgCD[4][playerid] = 1;

					if(Player[playerid][BeingSpeced] == true ) {
					    foreach(new i : Player) {
					        if(Player[i][Spectating] == true && Player[i][IsSpectatingID] == playerid) {
					        	PlayerTextDrawSetString(i, GettingDamaged[1], iString);
						        PlayerPlaySound(i,Player[i][GetHitSound],0.0,0.0,0.0);
								TakeDmgCD[4][i] = 1;
								gLastHit[4][i] = i;
							}
						}
					}
					format(DmgLabelStr[1][playerid], 128, "-%.0f (%s%s{FFFFFF})", DamageDone[4][playerid], TextColor[Player[playerid][Team]], WeaponNames[weaponid]);
					format(iString, sizeof(iString), "%s\n%s\n%s", DmgLabelStr[0][playerid], DmgLabelStr[1][playerid], DmgLabelStr[2][playerid]);
		   			Update3DTextLabelText(DmgLabel[playerid], -1, iString);
				} else {
				    DamageDone[5][playerid] += amount;

					format(iString, sizeof(iString), "%s-%.0f ~r~~h~%s %s(%s~h~%.0f%s)", MAIN_TEXT_COLOUR, DamageDone[5][playerid], WeaponNames[weaponid], MAIN_TEXT_COLOUR, iColor, Health[2], MAIN_TEXT_COLOUR);
		        	PlayerTextDrawSetString(playerid, GettingDamaged[2], iString);
					gLastHit[5][playerid] = playerid;
					TakeDmgCD[5][playerid] = 1;

					if(Player[playerid][BeingSpeced] == true ) {
					    foreach(new i : Player){
					        if(Player[i][Spectating] == true && Player[i][IsSpectatingID] == playerid){
					        	PlayerTextDrawSetString(i, GettingDamaged[2], iString);
						        PlayerPlaySound(i,Player[i][GetHitSound],0.0,0.0,0.0);
								TakeDmgCD[5][i] = 1;
								gLastHit[5][i] = i;
							}
						}
					}
					format(DmgLabelStr[2][playerid], 128, "-%.0f (%s%s{FFFFFF})", DamageDone[5][playerid], TextColor[Player[playerid][Team]], WeaponNames[weaponid]);
					format(iString, sizeof(iString), "%s\n%s\n%s", DmgLabelStr[0][playerid], DmgLabelStr[1][playerid], DmgLabelStr[2][playerid]);
		   			Update3DTextLabelText(DmgLabel[playerid], -1, iString);
				}
			}
		}
	}

    if(Player[playerid][Team] == ATTACKER && Player[playerid][Playing] == true) {
		format(iString, sizeof(iString), "~w~%s", Player[playerid][NameWithoutTag]);
		TextDrawSetString(AttHpLose, iString);

		TempDamage[ATTACKER] += amount;
		format(iString, sizeof(iString), "~n~  ~r~%.0f", TempDamage[ATTACKER]);
		TextDrawSetString(TeamHpLose[0], iString);


		TextDrawColor( leftRedBG , 0xFF2B2BAA );
		foreach(new i:Player)
		{
			if(Player[i][Style] == 1) TextDrawShowForPlayer(i, leftRedBG);
		}

		KillTimer(AttHpTimer);
		AttHpTimer = SetTimer("HideHpTextForAtt", 3000, false);

	} else if(Player[playerid][Team] == DEFENDER && Player[playerid][Playing] == true) {
		format(iString, sizeof(iString), "~w~%s", Player[playerid][NameWithoutTag]);
		TextDrawSetString(DefHpLose, iString);

	    TempDamage[DEFENDER] += amount;
		format(iString,sizeof(iString), "~n~  ~b~~h~%.0f", TempDamage[DEFENDER]);
		TextDrawSetString(TeamHpLose[1], iString);

        TextDrawColor( rightBlueBG , 0x2121FFAA );
		foreach(new i:Player)
		{
			if(Player[i][Style] == 1) TextDrawShowForPlayer(i, rightBlueBG);
		}

        KillTimer(DefHpTimer);
        DefHpTimer = SetTimer("HideHpTextForDef", 3000, false);

	}


	return 1;
}


public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    OnMainGraffMenuResponse(playerid, dialogid, response, listitem, inputtext);
    if(dialogid == DIALOG_REPLACE_FIRST)
	{
		if(response)
		{
			new ToAddID = -1;
			foreach(new i : Player)
			{
			    if(!strcmp(Player[i][Name], inputtext, false, strlen(inputtext)))
			    {
			        ToAddID ++;
			        REPLACE_ToAddID[playerid] = i;
			        break;
			    }
			}
			if(ToAddID > -1)
			{
			    new str[2048];
			    foreach(new i : Player)
				{
				    if(Player[i][Playing] != true)
				        continue;

					format(str, sizeof str, "%s%s\n", str, Player[i][Name]);
				}
				for(new i = 0; i < SAVE_SLOTS; i ++)
				{
					if(strlen(SaveVariables[i][pName]) > 2 && SaveVariables[i][RoundID] == Current && SaveVariables[i][ToBeAdded] == true)
					{
					    format(str, sizeof str, "%s%s\n", str, SaveVariables[i][pName]);
					}
				}
				ShowPlayerDialog(playerid, DIALOG_REPLACE_SECOND, DIALOG_STYLE_LIST, ""COL_PRIM"Player to replace", str, "Process", "Cancel");
			}
			else
				SendErrorMessage(playerid, "Player not found.");
		}
		return 1;
	}

	if(dialogid == DIALOG_REPLACE_SECOND)
	{
		if(response)
		{
		    new ToReplaceID = -1;
			foreach(new i : Player)
			{
			    if(!strcmp(Player[i][Name], inputtext, false, strlen(inputtext)))
			    {
			        ToReplaceID = i;
			        break;
			    }
			}
			if(ToReplaceID != -1)
			{
			    new ToAddID = REPLACE_ToAddID[playerid];
			    if(!IsPlayerConnected(ToAddID))
			    {
			        return SendErrorMessage(playerid, "Player is not connected anymore.");
			    }

			    if(Player[ToAddID][InDM] == true)
				{
				    Player[ToAddID][InDM] = false;
					Player[ToAddID][DMReadd] = 0;
				}

				if(Player[ToAddID][InDuel] == true)
					return SendErrorMessage(playerid,"That player is in a duel.");  //duel

		        Player[ToAddID][AntiLag] = false;
		        Player[ToAddID][InHeadShot] = false;

				if(Player[ToAddID][LastVehicle] != -1)
				{
					DestroyVehicle(Player[ToAddID][LastVehicle]);
					Player[ToAddID][LastVehicle] = -1;
				}

				if(Player[ToAddID][Spectating] == true)
					StopSpectate(ToAddID);

				SetTimerEx("OnPlayerReplace", 1000, false, "iii", ToAddID, ToReplaceID, playerid);
			}
			else
			{
			    for(new i = 0; i < SAVE_SLOTS; i ++)
				{
					if(strlen(SaveVariables[i][pName]) > 2 && !strcmp(SaveVariables[i][pName], inputtext, false, strlen(inputtext)) && SaveVariables[i][RoundID] == Current)
					{
					    ToReplaceID = i;
						break;
					}
				}
				if(ToReplaceID > -1)
				{
				    new ToAddID = REPLACE_ToAddID[playerid];
				    if(!IsPlayerConnected(ToAddID))
				    {
				        return SendErrorMessage(playerid, "Player is not connected anymore.");
				    }

					if(Player[ToAddID][InDM] == true)
					{
					    Player[ToAddID][InDM] = false;
						Player[ToAddID][DMReadd] = 0;
					}

					if(Player[ToAddID][InDuel] == true)
						return SendErrorMessage(playerid,"That player is in a duel.");  //duel

					Player[ToAddID][AntiLag] = false;
					Player[ToAddID][InHeadShot] = false;

					if(Player[ToAddID][LastVehicle] != -1)
					{
						DestroyVehicle(Player[ToAddID][LastVehicle]);
						Player[ToAddID][LastVehicle] = -1;
					}

					if(Player[ToAddID][Spectating] == true)
						StopSpectate(ToAddID);
					SetTimerEx("OnPlayerInGameReplace", 1000, false, "iii", ToAddID, ToReplaceID, playerid);
				}
				else
					SendErrorMessage(playerid, "Player not found.");
			}
		}
		return 1;
	}
	if(dialogid == DIALOG_THEME_CHANGE1)
	{
	    if(response)
	    {
	        ThemeChange_listitem[playerid] = listitem;
	        ShowPlayerDialog(playerid, DIALOG_THEME_CHANGE2, DIALOG_STYLE_MSGBOX, "Caution: server needs restart", "The server needs to be restarted now for the changes to be\ncompletely applied. Restart now or cancel everything?", "Restart", "Cancel");
	    }
	    return 1;
	}
	if(dialogid == DIALOG_THEME_CHANGE2)
	{
	    if(response)
	    {
	        ChangeTheme(playerid, ThemeChange_listitem[playerid]);
	    }
	    else
	        ThemeChange_listitem[playerid] = -1;
	    return 1;
	}
	if(dialogid == PLAYERCLICK_DIALOG)
	{
	    if(response)
        {
            if(listitem == 0)
            {
                if(!IsPlayerConnected(LastClickedPlayer[playerid]))
                    return 1;

                new statsSTR[6][300], namee[60], CID, Country[128];
			    CID = LastClickedPlayer[playerid];

				format(namee, sizeof(namee), "{FF3333}Player {FFFFFF}%s {FF3333}Stats", Player[CID][Name]);
				GetPlayerCountry(CID, Country, sizeof(Country));

				new TD = Player[CID][TotalDeaths];
				new RD = Player[CID][RoundDeaths];
				new MC = Player[playerid][ChatChannel];
				new YC = Player[CID][ChatChannel];
/*
				new ip[50];
				if(!ESLMode) {
					GetPlayerIp(CID, ip, sizeof(ip));
				} else {
					ip = "Hidden";
				}
*/
				#if STATS == 0 && MYSQL == 0
				format(statsSTR[0], sizeof(statsSTR[]), "{FF0000}- {FFFFFF}Country: %s\n\n{FF0000}- {FFFFFF}Round Kills: \t\t%d\t\t{FF0000}- {FFFFFF}Total Kills: \t\t%d\t\t{FF0000}- {FFFFFF}FPS: \t\t\t%d\n{FF0000}- {FFFFFF}Round Deaths: \t%.0f\t\t{FF0000}- {FFFFFF}Total Deaths: \t\t%d\t\t{FF0000}- {FFFFFF}Ping: \t\t\t%d\n",Country,  Player[CID][RoundKills],Player[CID][TotalKills], Player[CID][FPS], RD, TD, GetPlayerPing(CID));
				format(statsSTR[1], sizeof(statsSTR[]), "{FF0000}- {FFFFFF}Round Damage: \t%.0f\t\t{FF0000}- {FFFFFF}Total Damage:   \t%.0f\t\t{FF0000}- {FFFFFF}Packet-Loss:   \t%.1f\n\n{FF0000}- {FFFFFF}Player Weather: \t%d\t\t{FF0000}- {FFFFFF}Chat Channel: \t%d\t\t\t{FF0000}- {FFFFFF}In Round: \t\t%s\n",Player[CID][RoundDamage],Player[CID][TotalDamage], GetPlayerPacketLoss(CID), Player[CID][Weather], (MC == YC ? YC : -1), (Player[CID][Playing] == true ? ("Yes") : ("No")));
				format(statsSTR[2], sizeof(statsSTR[]), "{FF0000}- {FFFFFF}Player Time: \t\t%d\t\t{FF0000}- {FFFFFF}DM ID: \t\t%d\t\t{FF0000}- {FFFFFF}Hit Sound: \t\t%d\n{FF0000}- {FFFFFF}Player NetCheck: \t%s\t{FF0000}- {FFFFFF}Player Level: \t\t%d\t\t{FF0000}- {FFFFFF}Get Hit Sound: \t\t%d\n", Player[CID][Time], (Player[CID][DMReadd] > 0 ? Player[CID][DMReadd] : -1), Player[CID][HitSound], (Player[CID][NetCheck] == 1 ? ("Enabled") : ("Disabled")), Player[CID][Level], Player[CID][GetHitSound]);
				format(statsSTR[3], sizeof(statsSTR[]), "{FF0000}- {FFFFFF}Player Radio ID: \t%d\t\t{FF0000}- {FFFFFF}Duels Won: \t\t%d\t\t{FF0000}- {FFFFFF}Duels Lost: \t\t%d", Player[CID][RadioID], Player[CID][DuelsWon], Player[CID][DuelsLost]);
			    format(TotalStr, sizeof(TotalStr), "%s%s%s%s", statsSTR[0], statsSTR[1], statsSTR[2], statsSTR[3]);

				#else

				new Float:VERSUSAvgDamage;
				if(Player[CID][vRPlayed] != 0) {
					VERSUSAvgDamage = (Player[CID][vDamage] / Player[CID][vRPlayed]);
				} else VERSUSAvgDamage = Player[CID][vDamage];
				new Float:DuelAvgDamage;
				if(Player[CID][dRPlayed] != 0) {
					DuelAvgDamage = (Player[CID][dDamage] / Player[CID][dRPlayed]);
				} else DuelAvgDamage = Player[CID][dDamage];


				format(statsSTR[0], sizeof(statsSTR[]), "{FF0000}- {FFFFFF}Country: %s\n{FF0000}- {FFFFFF}IP: %s\n\n{FF0000}- {FFFFFF}Round Kills: \t\t%d\t\t{FF0000}- {FFFFFF}Total Kills: \t\t%d\t\t{FF0000}- {FFFFFF}FPS: \t\t\t%d\n{FF0000}- {FFFFFF}Round Deaths: \t%.0f\t\t{FF0000}- {FFFFFF}Total Deaths: \t\t%d\t\t{FF0000}- {FFFFFF}Ping: \t\t\t%d\n",Country, (Player[playerid][Level] < 4 ? ("For Level 4+ Only.") : (ip)), Player[CID][RoundKills],Player[CID][TotalKills], Player[CID][FPS], RD, TD, GetPlayerPing(CID));
				format(statsSTR[1], sizeof(statsSTR[]), "{FF0000}- {FFFFFF}Round Damage: \t%.0f\t\t{FF0000}- {FFFFFF}Total Damage:   \t%.0f\t\t{FF0000}- {FFFFFF}Packet-Loss:   \t%.1f\n\n{FF0000}- {FFFFFF}VERSUS Kills: \t%d\t\t{FF0000}- {FFFFFF}Rounds Played: \t%d\t\t{FF0000}- {FFFFFF}Matches Played: \t%d\n",Player[CID][RoundDamage],Player[CID][TotalDamage], GetPlayerPacketLoss(CID), Player[CID][vKills], Player[CID][vRPlayed], Player[CID][vPlayed]);
				format(statsSTR[2], sizeof(statsSTR[]), "{FF0000}- {FFFFFF}VERSUS Deaths: \t%d\t\t{FF0000}- {FFFFFF}Rounds Won: \t\t%d\t\t{FF0000}- {FFFFFF}Matches Won: \t%d\n{FF0000}- {FFFFFF}VERSUS Damage: \t%d\t\t{FF0000}- {FFFFFF}Rounds Lost: \t\t%d\t\t{FF0000}- {FFFFFF}Matches Lost: \t%d\n{FF0000}- {FFFFFF}Average Damage: \t%.0f\n\n", Player[CID][vDeaths], Player[CID][vRWon], Player[CID][vWon], Player[CID][vDamage], Player[CID][vRLost], Player[playerid][vLost], VERSUSAvgDamage);
				format(statsSTR[3], sizeof(statsSTR[]), "{FF0000}- {FFFFFF}Duel Kills: \t\t%d\t\t{FF0000}- {FFFFFF}Rounds Played: \t%d\t\t{FF0000}- {FFFFFF}Duels Played: \t\t%d\n{FF0000}- {FFFFFF}Duel Deaths: \t\t%d\t\t{FF0000}- {FFFFFF}Rounds Won: \t\t%d\t\t{FF0000}- {FFFFFF}Duels Won: \t\t%d\n", Player[CID][dKills], Player[CID][dRPlayed], Player[CID][dPlayed], Player[CID][dDeaths], Player[CID][dRWon], Player[CID][dWon]);
				format(statsSTR[4], sizeof(statsSTR[]), "{FF0000}- {FFFFFF}Duel Damage: \t\t%d\t\t{FF0000}- {FFFFFF}Rounds Lost: \t\t%d\t\t{FF0000}- {FFFFFF}Duels Lost: \t\t%d\n{FF0000}- {FFFFFF}Average Damage: \t%.0f\n\n{FF0000}- {FFFFFF}Player Weather: \t%d\t\t{FF0000}- {FFFFFF}Chat Channel: \t%d\t\t{FF0000}- {FFFFFF}In Round: \t\t%s\n", Player[CID][dDamage], Player[CID][dRLost], Player[CID][dLost], DuelAvgDamage, Player[CID][Weather], (MC == YC ? YC : -1), (Player[CID][Playing] == true ? ("Yes") : ("No")));
				format(statsSTR[5], sizeof(statsSTR[]), "{FF0000}- {FFFFFF}Player Time: \t\t%d\t\t{FF0000}- {FFFFFF}DM ID: \t\t%d\t\t{FF0000}- {FFFFFF}Hit Sound: \t\t%d\n{FF0000}- {FFFFFF}Player NetCheck: \t%s\t{FF0000}- {FFFFFF}Player Level: \t\t%d\t\t{FF0000}- {FFFFFF}Get Hit Sound: \t%d", Player[CID][Time], (Player[CID][DMReadd] > 0 ? Player[CID][DMReadd] : -1), Player[CID][HitSound], (Player[CID][NetCheck] == 1 ? ("Enabled") : ("Disabled")), Player[CID][Level], Player[CID][GetHitSound]);

				format(TotalStr, sizeof(TotalStr), "%s%s%s%s%s%s", statsSTR[0], statsSTR[1], statsSTR[2], statsSTR[3], statsSTR[4], statsSTR[5]);
				#endif


				ShowPlayerDialog(playerid, DIALOG_CLICK_STATS, DIALOG_STYLE_MSGBOX, namee, TotalStr, "Close", "");
				return 1;
			}
            else if(listitem == 1)
            {
                cmd_spec(playerid, sprintf("%d", LastClickedPlayer[playerid]));
            }
            else if(listitem == 2)
            {
                cmd_add(playerid, sprintf("%d", LastClickedPlayer[playerid]));
            }
            else if(listitem == 3)
            {
                cmd_remove(playerid, sprintf("%d", LastClickedPlayer[playerid]));
            }
            else if(listitem == 4)
            {
                cmd_readd(playerid, sprintf("%d", LastClickedPlayer[playerid]));
            }
            else if(listitem == 5)
            {
                cmd_givemenu(playerid, sprintf("%d", LastClickedPlayer[playerid]));
            }
            else if(listitem == 6)
            {
                cmd_goto(playerid, sprintf("%d", LastClickedPlayer[playerid]));
            }
            else if(listitem == 7)
            {
                cmd_get(playerid, sprintf("%d", LastClickedPlayer[playerid]));
            }
            else if(listitem == 8)
            {
                cmd_slap(playerid, sprintf("%d No Reason Specified", LastClickedPlayer[playerid]));
            }
            else if(listitem == 9)
            {
                cmd_mute(playerid, sprintf("%d No Reason Specified", LastClickedPlayer[playerid]));
            }
            else if(listitem == 10)
            {
                cmd_unmute(playerid, sprintf("%d", LastClickedPlayer[playerid]));
            }
            else if(listitem == 11)
            {
                cmd_kick(playerid, sprintf("%d No Reason Specified", LastClickedPlayer[playerid]));
            }
            else if(listitem == 12)
            {
                cmd_ban(playerid, sprintf("%d No Reason Specified", LastClickedPlayer[playerid]));
            }
        }
	    return 1;
	}
    if(dialogid == EDITSHORTCUTS_DIALOG)
    {
        if(response)
        {
            EditingShortcutOf[playerid] = listitem;
            ShowPlayerDialog(playerid, GETVAL_DIAG, DIALOG_STYLE_INPUT, "Editing shortcut", "Please enter a text", "Done", "Cancel");
        }
        return 1;
    }
	if(dialogid == GETVAL_DIAG)
	{
	    if(response)
	    {
	        if(EditingShortcutOf[playerid] > -1)
	        {
	            switch(EditingShortcutOf[playerid])
	            {
	                case 0:
	                { format(PlayerShortcut[playerid][Shortcut1], 50, "%s", inputtext); }
	                case 1:
	                { format(PlayerShortcut[playerid][Shortcut2], 50, "%s", inputtext); }
	                case 2:
	                { format(PlayerShortcut[playerid][Shortcut3], 50, "%s", inputtext); }
	                case 3:
	                { format(PlayerShortcut[playerid][Shortcut4], 50, "%s", inputtext); }
	            }
	            EditingShortcutOf[playerid] = -1;
				cmd_shortcuts(playerid, "_");
				return 1;
	        }
		}
		return 1;
	}

	new iString[256];



//	if(dialogid == DIALOG_DUEL_NAME) {
//	    if(response) {
//	        if(isnull(inputtext)) {
//				format(iString, sizeof(iString), ""COL_PRIM"Enter duel map name below for {FFFFFF}Duel ID: %d", DuelIDForName);
//				ShowPlayerDialog(playerid, DIALOG_DUEL_NAME, DIALOG_STYLE_INPUT,"{FFFFFF}Duel Map Name", iString, "Okay", "Close");
//				return 1;
//			}
//
//          dini_Set(CreateDuelString, "Name", inputtext);
//
//			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has configured Duel Name for {EEEEEE}Duel ID: %d to (%s)", Player[playerid][Name], DuelIDForName, inputtext);
//			SendClientMessageToAll(-1, iString);
//
//			LoadDuels();
//		} else {
//			DuelIDForName = -1;
//		}
//		return 1;
//	}
//

	if(dialogid == DIALOG_REGISTER) {
	    if(response) {
			if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD,"{FFFFFF}Registration Dialog","{FFFFFF}Type your password below to register:","Register","Leave");

			if(strfind(inputtext, "%", true) != -1)
			{
			    ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD,"{FFFFFF}Registration Dialog","{FFFFFF}Type your password below to register:","Register","Leave");
			    return SendErrorMessage(playerid, sprintf("This character '%s' is disallowed in user passwords.", "%%"));
			}
			
			#if MYSQL == 0

			    new HashPass[140];
			    format(HashPass, sizeof(HashPass), "%d", udb_hash(inputtext));

				new query[356];
				new IP[MAX_PLAYER_NAME];
				GetPlayerIp(playerid, IP, sizeof(IP));
			    format(query, sizeof(query), "INSERT INTO Players (Name, Password, Level, Weather, Time, ChatChannel, NetCheck, Widescreen, HitSound, GetHitSound, RadID, DWon, DLost, IP) VALUES('%s', '%s', 0, 0, 12, -1, 1, 0, 17802, 1135, 0, 0, 0, '%s')", DB_Escape(Player[playerid][Name]), HashPass, IP);
				db_free_result(db_query(sqliteconnection, query));
//				SendClientMessage(playerid, -1, "Level: 0 | Weather: 0 | Time: 12 | Chat Channel: -1 | Net Check: 1 | HitSound: 17802 | Get HitSound: 1131");


				format(HashPass, sizeof(HashPass), ""COL_PRIM"You have been successfully registered. Password: {FFFFFF}%s", inputtext);
				SendClientMessage(playerid, -1, HashPass);

			#else
				new escapedpw[80];
				sql_escape_string(sqlconnection, inputtext, escapedpw);

				new Query[356];
				format(Query, sizeof(Query), "INSERT INTO `Players` (`Name`, `Password`, `Level`, `Weather`, `Time`, `ChatChannel`, `NetCheck`, `Widescreen`, `HitSound`, `GetHitSound`, `RadID`, `DWon`, `DLost`) VALUES ('%s', MD5('%s'), 0, %d, %d, -1, 1, 0, 17802, 1131, 0, 0, 0)", Player[playerid][Name], escapedpw, MainWeather, MainTime);
				sql_query(sqlconnection, Query, QUERY_THREADED, "OnPlayerRegistered", "rds", playerid, inputtext);
			#endif

			Player[playerid][Level] = 0;
			Player[playerid][Weather] = MainWeather;
			Player[playerid][Time] = MainTime;
            Player[playerid][Logged] = true;
		    Player[playerid][ChatChannel] = -1;
		    Player[playerid][NetCheck] = 1;
		    Player[playerid][RadioID] = 0;
		    Player[playerid][DuelsWon] = 0;
		    Player[playerid][DuelsLost] = 0;


			#if INTROTEXT == 0
				if(ESLMode == false)
					SpawnConnectedPlayer(playerid, 0);
				else
				{
					SetTimerEx("ShowESLHelpDiag", 2000, false, "i", playerid);
				}
				//SpawnConnectedPlayer(playerid, 0);
			#else
			    OnPlayerRequestClass(playerid, 0);
			#endif

		} else {

			format(iString, sizeof(iString),"{FFFFFF}%s "COL_PRIM"has been kicked from the server for not registering.", Player[playerid][Name]);
			SendClientMessageToAll(-1, iString);

			SetTimerEx("OnPlayerKicked", 500, false, "i", playerid);
		}

		return 1;
	}

	if(dialogid == DIALOG_LOGIN) {
	    if(response) {
			if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD,"{FFFFFF}Login Dialog","{FFFFFF}Type your password below to log in:","Login","Leave");

            if(strfind(inputtext, "%", true) != -1)
			{
			    ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD,"{FFFFFF}Login Dialog","{FFFFFF}Type your password below to log in:","Login","Leave");
				return SendErrorMessage(playerid, sprintf("This character '%s' is disallowed in user passwords.", "%%"));
			}

			#if MYSQL == 0
			//new CurrentPassword[140];
			new HashPass[140];
			format(HashPass, sizeof(HashPass), "%d", udb_hash(inputtext));

//			new Query[256];
//			format(Query, sizeof(Query), "SELECT * FROM `Players` WHERE `Name` = '%s' AND `Password` = '%s'", DB_Escape(Player[playerid][Name]), HashPass);
//			new DBStatement:stmt = db_prepare(sqliteconnection, Query);
//			new level, weather, time, chatchannel, netcheck;
//			stmt_bind_result_field(stmt, 1, DB::TYPE_STRING, CurrentPassword, sizeof(CurrentPassword));
//			stmt_bind_result_field(stmt, 2, DB::TYPE_INT, level);
//			stmt_bind_result_field(stmt, 3, DB::TYPE_INT, weather);
//			stmt_bind_result_field(stmt, 4, DB::TYPE_INT, time);
//			stmt_bind_result_field(stmt, 5, DB::TYPE_INT, chatchannel);
//			stmt_bind_result_field(stmt, 6, DB::TYPE_INT, netcheck);
//
//
//			if(stmt_execute(stmt)) {
//			    if(stmt_fetch_row(stmt)) {
//			        Player[playerid][Level] = level;
//			        Player[playerid][Weather] = weather;
//			        Player[playerid][Time] = time;
//			        Player[playerid][ChatChannel] = chatchannel;
//			        Player[playerid][NetCheck] = netcheck;
//
//			        Player[playerid][Logged] = true;
//
//	                SendClientMessage(playerid,-1, "You have successfully logged in.");
//					format(Query, sizeof(Query), "Level: %d | Weather: %d | Time: %d | Chat Channel: %d | Net Check: %d", level, weather, time, chatchannel, netcheck);
//			        SendClientMessage(playerid, -1, Query);
//
//					#if INTROTEXT == 0
//					if(ESLMode == false)
//						SpawnConnectedPlayer(playerid, 0);
//					else
//					{
//						SetTimerEx("ShowESLHelpDiag", 2000, false, "i", playerid);
//					}
//					//SpawnConnectedPlayer(playerid, 0);
//					#else
  //  				OnPlayerRequestClass(playerid, 0);
	//				#endif
//
//				} else {
//			 		SendErrorMessage(playerid,"Wrong Password. Please try again.");
//			 		ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD,"{FFFFFF}Login Dialog","{FFFFFF}Type your password below to log in:","Login","Leave");
//				}
//			}
//
//			stmt_close(stmt);
//

            new Query[256];
			format(Query, sizeof(Query), "SELECT * FROM `Players` WHERE `Name` = '%s' AND `Password` = '%s'", DB_Escape(Player[playerid][Name]), HashPass);
		    new DBResult:res = db_query(sqliteconnection, Query);

			if(db_num_rows(res)) {

				LoginPlayer(playerid, res);

			} else {
		 		SendErrorMessage(playerid,"Wrong Password. Please try again.");
		 		ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD,"{FFFFFF}Login Dialog","{FFFFFF}Type your password below to log in:","Login","Leave");
			}
			db_free_result(res);


			#else
			new escaped[128];

			sql_escape_string(sqlconnection, inputtext, escaped);
			format(iString, sizeof(iString), "SELECT * FROM `Players` WHERE `Name` = '%s' AND `Password` = md5('%s') LIMIT 1", Player[playerid][Name], escaped);
			sql_query(sqlconnection, iString, QUERY_THREADED | QUERY_CACHED, "OnPlayerLogin", "rd", playerid);

			#endif
		} else {

			format(iString, sizeof(iString),"{FFFFFF}%s "COL_PRIM"has been kicked from the server for not logging in.", Player[playerid][Name]);
			SendClientMessageToAll(-1, iString);

			SetTimerEx("OnPlayerKicked", 500, false, "i", playerid);
		}
		return 1;
	}

	if(dialogid == DIALOG_ESL_TEAMS) {
	    if(response) {
	        SpawnConnectedPlayer(playerid, 1);
		} else {
		    SpawnConnectedPlayer(playerid, 2);
		}
		return 1;
	}

	if(dialogid == DIALOG_SERVER_PASS) {
		if(response) {
		    if(isnull(inputtext)) return 1;
			if(strlen(inputtext) > 6) {
				SendErrorMessage(playerid,"Server password is too long.");
			   	ShowPlayerDialog(playerid, DIALOG_SERVER_PASS, DIALOG_STYLE_INPUT,""COL_PRIM"Server Password",""COL_PRIM"Enter server password below:", "Ok","Close");
				return 1;
			}
            format(ServerPass, sizeof(ServerPass), "password %s", inputtext);
            SendRconCommand(ServerPass);

			ServerLocked = true;
			PermLocked = false;

			format(iString, sizeof(iString), "%sServer Pass: ~r~%s", MAIN_TEXT_COLOUR, inputtext);
			TextDrawSetString(LockServerTD, iString);

			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has locked the server. Password: {FFFFFF}%s",Player[playerid][Name], inputtext);
			SendClientMessageToAll(-1, iString);
		}
		return 1;
	}


	if(dialogid == DIALOG_WEAPONS_TYPE)
	{
		if(response == 1)
		{
			if(listitem != 0)
			{
				if((Player[playerid][Team] == ATTACKER && TimesPicked[ATTACKER][listitem-1] >= WeaponLimit[listitem-1]) || (Player[playerid][Team] == DEFENDER && TimesPicked[DEFENDER][listitem-1] >= WeaponLimit[listitem-1]))
				{
	                ShowPlayerWeaponMenu(playerid, Player[playerid][Team]);
	                SendErrorMessage(playerid,"This Weapon Set Is Currently Full.");
					return 1;
		        }
			}

			if(!listitem)
			{
			    ShowPlayerWeaponMenu(playerid, Player[playerid][Team]);
				return 1;
			}
			else
			{
			    GivePlayerWeapon(playerid, GunMenuWeapons[listitem-1][0], 9999);
			    GivePlayerWeapon(playerid, GunMenuWeapons[listitem-1][1], 9999);
				if(IsPlayerInAnyVehicle(playerid))
					SetPlayerArmedWeapon(playerid, 0);
			    switch(GunMenuWeapons[listitem-1][0])
			    {
			        case WEAPON_DEAGLE:
			        {
			            format(Player[playerid][PlayerTypeByWeapon], 32, "Deagler");
			        }
			        case WEAPON_SHOTGSPA:
			        {
                        format(Player[playerid][PlayerTypeByWeapon], 32, "Spasser");
			        }
			        case WEAPON_M4:
			        {
                        format(Player[playerid][PlayerTypeByWeapon], 32, "M4~er");
			        }
			        case WEAPON_SNIPER:
			        {
                        format(Player[playerid][PlayerTypeByWeapon], 32, "Sniper");
			        }
			        case WEAPON_AK47:
			        {
                        format(Player[playerid][PlayerTypeByWeapon], 32, "AK~er");
					}
					default:
					{
                        switch(GunMenuWeapons[listitem-1][1])
					    {
		                    case WEAPON_DEAGLE:
					        {
					            format(Player[playerid][PlayerTypeByWeapon], 32, "Deagler");
					        }
					        case WEAPON_SHOTGSPA:
					        {
		                        format(Player[playerid][PlayerTypeByWeapon], 32, "Spasser");
					        }
					        case WEAPON_M4:
					        {
		                        format(Player[playerid][PlayerTypeByWeapon], 32, "M4~er");
					        }
					        case WEAPON_SNIPER:
					        {
		                        format(Player[playerid][PlayerTypeByWeapon], 32, "Sniper");
					        }
					        case WEAPON_AK47:
					        {
		                        format(Player[playerid][PlayerTypeByWeapon], 32, "AK~er");
							}
							default:
							{
		                        format(Player[playerid][PlayerTypeByWeapon], 32, "Un-recognised");
							}
					    }
					}
			    }

			    if(GiveKnife)
			    	GivePlayerWeapon(playerid, WEAPON_KNIFE, 9999);

			    format(iString, sizeof(iString), "%s%s{FFFFFF} has selected (%s%s{FFFFFF} and %s%s{FFFFFF}).", TextColor[Player[playerid][Team]], Player[playerid][Name], TextColor[Player[playerid][Team]], WeaponNames[GunMenuWeapons[listitem-1][0]], TextColor[Player[playerid][Team]], WeaponNames[GunMenuWeapons[listitem-1][1]]);
			}

			SetPlayerArmedWeapon(playerid, 0);
            TimesPicked[Player[playerid][Team]][listitem-1]++;
            Player[playerid][WeaponPicked] = listitem;

	        switch(Player[playerid][Team])
			{
				case ATTACKER:
				{
					foreach(new i : Player)
					{
                		if(Player[i][Team] == ATTACKER) SendClientMessage(i, -1, iString);
					}
				}
				case DEFENDER:
				{
				    foreach(new i : Player)
					{
                		if(Player[i][Team] == DEFENDER) SendClientMessage(i, -1, iString);
					}
				}
            }

	        if(RoundPaused == true)
				TogglePlayerControllableEx(playerid, false);
	        else
				TogglePlayerControllableEx(playerid, true);

			Player[playerid][OnGunmenu] = false;
		}
		return 1;
	}


	if(dialogid == DIALOG_ARENA_GUNS) {
        if(response) {
	        switch(listitem) {
				case 0: {
                    ShowTDMWeaponMenu(playerid, Player[playerid][Team]);
					return 1;
                } case 1: {
                    if(MenuID[playerid] == 1) {
                        ArenaWeapons[0][playerid] = 24;

                        MenuID[playerid] = 2;
                        ShowTDMWeaponMenu(playerid, Player[playerid][Team]);
                        return 1;

					} else if(MenuID[playerid] == 2) {
					    if(GetWeaponSlot(24) == GetWeaponSlot(ArenaWeapons[0][playerid])) {
					        SendErrorMessage(playerid,"Can't pick same/same slot weapon.");
					        ShowTDMWeaponMenu(playerid, Player[playerid][Team]);
							return 1;
						}

						ArenaWeapons[1][playerid] = 24;
					}
				} case 2: {
                    if(MenuID[playerid] == 1) {
                        ArenaWeapons[0][playerid] = 25;

                        MenuID[playerid] = 2;
                        ShowTDMWeaponMenu(playerid, Player[playerid][Team]);
                        return 1;

					} else if(MenuID[playerid] == 2) {
					    if(GetWeaponSlot(25) == GetWeaponSlot(ArenaWeapons[0][playerid])) {
					        SendErrorMessage(playerid,"Can't pick same/same slot weapon.");
					        ShowTDMWeaponMenu(playerid, Player[playerid][Team]);
							return 1;
						}

						ArenaWeapons[1][playerid] = 25;
					}
				} case 3: {
                    if(MenuID[playerid] == 1) {
                        ArenaWeapons[0][playerid] = 34;

                        MenuID[playerid] = 2;
                        ShowTDMWeaponMenu(playerid, Player[playerid][Team]);
                        return 1;

					} else if(MenuID[playerid] == 2) {
					    if(GetWeaponSlot(34) == GetWeaponSlot(ArenaWeapons[0][playerid])) {
					        SendErrorMessage(playerid,"Can't pick same/same slot weapon.");
					        ShowTDMWeaponMenu(playerid, Player[playerid][Team]);
							return 1;
						}

						ArenaWeapons[1][playerid] = 34;
					}
				} case 4: {
                    if(MenuID[playerid] == 1) {
                        ArenaWeapons[0][playerid] = 31;

                        MenuID[playerid] = 2;
                        ShowTDMWeaponMenu(playerid, Player[playerid][Team]);
                        return 1;

					} else if(MenuID[playerid] == 2) {
					    if(GetWeaponSlot(31) == GetWeaponSlot(ArenaWeapons[0][playerid])) {
					        SendErrorMessage(playerid,"Can't pick same/same slot weapon.");
					        ShowTDMWeaponMenu(playerid, Player[playerid][Team]);
							return 1;
						}

						ArenaWeapons[1][playerid] = 31;
					}
				} case 5: {
                    if(MenuID[playerid] == 1) {
                        ArenaWeapons[0][playerid] = 29;

                        MenuID[playerid] = 2;
                        ShowTDMWeaponMenu(playerid, Player[playerid][Team]);
                        return 1;

					} else if(MenuID[playerid] == 2) {
					    if(GetWeaponSlot(29) == GetWeaponSlot(ArenaWeapons[0][playerid])) {
					        SendErrorMessage(playerid,"Can't pick same/same slot weapon.");
					        ShowTDMWeaponMenu(playerid, Player[playerid][Team]);
							return 1;
						}

						ArenaWeapons[1][playerid] = 29;
					}
				} case 6: {
                    if(MenuID[playerid] == 1) {
                        ArenaWeapons[0][playerid] = 30;

                        MenuID[playerid] = 2;
                        ShowTDMWeaponMenu(playerid, Player[playerid][Team]);
                        return 1;

					} else if(MenuID[playerid] == 2) {
					    if(GetWeaponSlot(30) == GetWeaponSlot(ArenaWeapons[0][playerid])) {
					        SendErrorMessage(playerid,"Can't pick same/same slot weapon.");
					        ShowTDMWeaponMenu(playerid, Player[playerid][Team]);
							return 1;
						}

						ArenaWeapons[1][playerid] = 30;
					}
                } case 7: {
                    if(MenuID[playerid] == 1) {
                        ArenaWeapons[0][playerid] = 33;

                        MenuID[playerid] = 2;
                        ShowTDMWeaponMenu(playerid, Player[playerid][Team]);
                        return 1;

					} else if(MenuID[playerid] == 2) {
					    if(GetWeaponSlot(33) == GetWeaponSlot(ArenaWeapons[0][playerid])) {
					        SendErrorMessage(playerid,"Can't pick same/same slot weapon.");
					        ShowTDMWeaponMenu(playerid, Player[playerid][Team]);
							return 1;
						}

						ArenaWeapons[1][playerid] = 33;
					}
                }
			}

			GivePlayerWeapon(playerid, ArenaWeapons[0][playerid], 9999);
			GivePlayerWeapon(playerid, ArenaWeapons[1][playerid], 9999);
			if(GiveKnife)
			    	GivePlayerWeapon(playerid, WEAPON_KNIFE, 9999);

			if(Player[playerid][Team] == ATTACKER) {
			    format(iString, sizeof(iString), "{FF0033}%s{FFFFFF} has selected ({FF0033}%s{FFFFFF} and {FF0033}%s{FFFFFF}).", Player[playerid][Name], WeaponNames[ArenaWeapons[0][playerid]], WeaponNames[ArenaWeapons[1][playerid]]);

				foreach(new i : Player) {
				    if(Player[i][Playing] == true && Player[i][Team] == ATTACKER) {
						SendClientMessage(i, -1, iString);
					}
				}
			} else if (Player[playerid][Team] == DEFENDER) {
				format(iString, sizeof(iString), ""COL_PRIM"%s{FFFFFF} has selected ("COL_PRIM"%s{FFFFFF} and "COL_PRIM"%s{FFFFFF}).", Player[playerid][Name], WeaponNames[ArenaWeapons[0][playerid]], WeaponNames[ArenaWeapons[1][playerid]]);

				foreach(new i : Player) {
				    if(Player[i][Playing] == true && Player[i][Team] == DEFENDER) {
						SendClientMessage(i, -1, iString);
					}
				}
			}

	        if(RoundPaused == true) TogglePlayerControllableEx(playerid, false);
	        else TogglePlayerControllableEx(playerid, true);
		}
//  		if(Player[playerid][Playing] == true) SetPlayerVirtualWorld(playerid, 2);

		return 1;
	}


	if(dialogid == DIALOG_CURRENT_TOTAL) {
		if(isnull(inputtext)) return 1;
        if(!IsNumeric(inputtext)) {
            SendErrorMessage(playerid,"You can only use numeric input.");
			iString = ""COL_PRIM"Enter current round or total rounds to be played:";
    		ShowPlayerDialog(playerid, DIALOG_CURRENT_TOTAL, DIALOG_STYLE_INPUT,""COL_PRIM"Rounds Dialog",iString,"Current","Total");
			return 1;
		}

		new Value = strval(inputtext);

		if(Value < 0 || Value > 100) {
            SendErrorMessage(playerid,"Current or total rounds can only be between 0 and 100.");
			iString = ""COL_PRIM"Enter current round or total rounds to be played:";
    		ShowPlayerDialog(playerid, DIALOG_CURRENT_TOTAL, DIALOG_STYLE_INPUT,""COL_PRIM"Rounds Dialog",iString,"Current","Total");
			return 1;
		}

	    if(response) {

	        CurrentRound = Value;
			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has changed the current round to: {FFFFFF}%d", Player[playerid][Name], CurrentRound);
			SendClientMessageToAll(-1, iString);
		} else {

		    TotalRounds = Value;
			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has changed the total rounds to: {FFFFFF}%d", Player[playerid][Name], TotalRounds);
			SendClientMessageToAll(-1, iString);
		}

		format(iString, sizeof(iString), "%sRounds ~r~~h~%d~r~/~h~~h~%d", MAIN_TEXT_COLOUR, CurrentRound, TotalRounds);
		TextDrawSetString(RoundsPlayed, iString);



		return 1;
	}

	if(dialogid == DIALOG_TEAM_SCORE) {
		if(response) {
		    switch(listitem) {
		        case 0: {
					iString = ""COL_PRIM"Enter {FFFFFF}Attacker "COL_PRIM"Team Name Below:";
				    ShowPlayerDialog(playerid, DIALOG_ATT_NAME, DIALOG_STYLE_INPUT,""COL_PRIM"Attacker Team Name",iString,"Next","Close");
				} case 1: {
					format(iString, sizeof(iString), ""COL_PRIM"Enter {FFFFFF}%s "COL_PRIM"Team Score Below:", TeamName[ATTACKER]);
				    ShowPlayerDialog(playerid, DIALOG_ATT_SCORE, DIALOG_STYLE_INPUT,""COL_PRIM"Attacker Team Score",iString,"Next","Close");
				} case 2: {
				    TeamScore[ATTACKER] = 0;
				    TeamScore[DEFENDER] = 0;
				    CurrentRound = 0;

					format(iString, sizeof(iString), "~r~%s %s(~r~%d%s)  ~b~~h~%s %s(~b~~h~%d%s)",TeamName[ATTACKER],MAIN_TEXT_COLOUR,TeamScore[ATTACKER],MAIN_TEXT_COLOUR,TeamName[DEFENDER],MAIN_TEXT_COLOUR,TeamScore[DEFENDER],MAIN_TEXT_COLOUR);
				    TextDrawSetString(TeamScoreText, iString);

					format(iString, sizeof(iString), "%sRounds ~r~~h~%d~r~/~h~~h~%d", MAIN_TEXT_COLOUR, CurrentRound, TotalRounds);
					TextDrawSetString(RoundsPlayed, iString);

					ClearPlayerVariables();

					foreach(new i : Player)
					{
					    for(new j = 0; j < 55; j ++)
	    					Player[i][WeaponStat][j] = 0;
		   				Player[i][TotalKills] = 0;
						Player[i][TotalDeaths] = 0;
						Player[i][TotalDamage] = 0;
						Player[i][RoundPlayed] = 0;
					    Player[i][TotalBulletsFired] = 0;
					    Player[i][TotalshotsHit] = 0;
					}

					format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has resetted the scores.", Player[playerid][Name]);
					SendClientMessageToAll(-1, iString);
				}
			}
		}
		return 1;
	}

	if(dialogid == DIALOG_WAR_RESET) {
	    if(response) {
		    TeamScore[ATTACKER] = 0;
		    TeamScore[DEFENDER] = 0;
		    CurrentRound = 0;

			format(iString, sizeof(iString), "SELECT * FROM Configs WHERE Option = 'Total Rounds'");
		    new DBResult:res = db_query(sqliteconnection, iString);

			db_get_field_assoc(res, "Value", iString, sizeof(iString));
    		TotalRounds = strval(iString);
			db_free_result(res);

			TeamName[ATTACKER] = "Alpha";
			TeamName[ATTACKER_SUB] = "Alpha Sub";
			TeamName[DEFENDER] = "Beta";
			TeamName[DEFENDER_SUB] = "Beta Sub";

			format(iString, sizeof(iString), "~r~%s %s(~r~%d%s)  ~b~~h~%s %s(~b~~h~%d%s)",TeamName[ATTACKER],MAIN_TEXT_COLOUR,TeamScore[ATTACKER],MAIN_TEXT_COLOUR,TeamName[DEFENDER],MAIN_TEXT_COLOUR,TeamScore[DEFENDER],MAIN_TEXT_COLOUR);
		    TextDrawSetString(TeamScoreText, iString);

			format(iString, sizeof(iString), "%sRounds ~r~~h~%d~r~/~h~~h~%d", MAIN_TEXT_COLOUR, CurrentRound, TotalRounds);
			TextDrawSetString(RoundsPlayed, iString);


			format(iString, sizeof iString, "%sWar Mode: ~r~OFF", MAIN_TEXT_COLOUR);
			TextDrawSetString(WarModeText, iString);

			foreach(new i : Player) {
			    //for(new j = 0; j < 55; j ++)
  				//	Player[i][WeaponStat][j] = 0;
   				Player[i][TotalKills] = 0;
				Player[i][TotalDeaths] = 0;
				Player[i][TotalDamage] = 0;
				Player[i][RoundPlayed] = 0;
			    Player[i][TotalBulletsFired] = 0;
			    Player[i][TotalshotsHit] = 0;
			}

            ClearPlayerVariables();

			TextDrawHideForAll(RoundsPlayed);
			TextDrawHideForAll(TeamScoreText);

			WarMode = false;

			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has disabled the Match-Mode.", Player[playerid][Name]);
			SendClientMessageToAll(-1, iString);
		}
		return 1;
	}

	if(dialogid == DIALOG_ATT_NAME) {
	    if(response) {
			if(isnull(inputtext)) {
				iString = ""COL_PRIM"Enter {FFFFFF}Defender "COL_PRIM"Team Name Below:";
			    ShowPlayerDialog(playerid, DIALOG_DEF_NAME, DIALOG_STYLE_INPUT,""COL_PRIM"Defender Team Name",iString,"Ok","Close");
				return 1;
			}
			if(strlen(inputtext) > 6) {
            	SendErrorMessage(playerid,"Team name is too long.");
				iString = ""COL_PRIM"Enter {FFFFFF}Attacker "COL_PRIM"Team Name Below:";
			    ShowPlayerDialog(playerid, DIALOG_ATT_NAME, DIALOG_STYLE_INPUT,""COL_PRIM"Attacker Team Name",iString,"Next","Close");
				return 1;
			}

			if(strfind(inputtext, "~") != -1) {
			    return SendErrorMessage(playerid,"~ not allowed.");
			}

			format(TeamName[ATTACKER], 24, inputtext);
			format(TeamName[ATTACKER_SUB], 24, "%s Sub", TeamName[ATTACKER]);


//			format(iString, sizeof(iString), "%s~h~%s", MAIN_TEXT_COLOUR, TeamName[ATTACKER]);
//			TextDrawSetString(AttackerText, iString);
//
//			format(iString, sizeof(iString), "%s Sub", TeamName[ATTACKER]);
//			format(TeamName[ATTACKER_SUB], 24, iString);
//
//			format(iString, sizeof(iString), "%s~h~%s", MAIN_TEXT_COLOUR, TeamName[ATTACKER_SUB]);
//			TextDrawSetString(AttackerSubText, iString);
//

			#if INTROTEXT == 1
			format(iString, sizeof(iString), "~r~~h~%s", TeamName[ATTACKER]);
			TextDrawSetString(introAtt, iString);

			format(iString, sizeof(iString), "~b~~h~%s", TeamName[DEFENDER]);
			TextDrawSetString(introDef, iString);
			#endif

			format(iString, sizeof(iString), "~r~%s %s(~r~%d%s)  ~b~~h~%s %s(~b~~h~%d%s)",TeamName[ATTACKER],MAIN_TEXT_COLOUR,TeamScore[ATTACKER],MAIN_TEXT_COLOUR,TeamName[DEFENDER],MAIN_TEXT_COLOUR,TeamScore[DEFENDER],MAIN_TEXT_COLOUR);
		    TextDrawSetString(TeamScoreText, iString);

			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has set attacker team name to: {FFFFFF}%s", Player[playerid][Name], TeamName[ATTACKER]);
			SendClientMessageToAll(-1, iString);

			iString = ""COL_PRIM"Enter {FFFFFF}Defender "COL_PRIM"Team Name Below:";
		    ShowPlayerDialog(playerid, DIALOG_DEF_NAME, DIALOG_STYLE_INPUT,""COL_PRIM"Defender Team Name",iString,"Ok","Close");
		}
		return 1;
	}

	if(dialogid == DIALOG_DEF_NAME) {
	    if(response) {
	        if(isnull(inputtext)) return 1;
	        if(strlen(inputtext) > 6) {
	           	SendErrorMessage(playerid,"Team name is too long.");
				iString = ""COL_PRIM"Enter {FFFFFF}Defender "COL_PRIM"Team Name Below:";
			    ShowPlayerDialog(playerid, DIALOG_DEF_NAME, DIALOG_STYLE_INPUT,""COL_PRIM"Defender Team Name",iString,"Ok","Close");
				return 1;
			}

			if(strfind(inputtext, "~") != -1) {
			    return SendErrorMessage(playerid,"~ not allowed.");
			}

			format(TeamName[DEFENDER], 24, inputtext);
			format(TeamName[DEFENDER_SUB], 24, "%s Sub", TeamName[DEFENDER]);
//			format(iString, sizeof(iString), "%s~h~%s", MAIN_TEXT_COLOUR, TeamName[DEFENDER]);
//			TextDrawSetString(DefenderText, iString);
//
//			format(iString, sizeof(iString), "%s Sub", TeamName[DEFENDER]);
//			format(TeamName[DEFENDER_SUB], 24, iString);
//
//			format(iString, sizeof(iString), "%s~h~%s", MAIN_TEXT_COLOUR, TeamName[DEFENDER_SUB]);
//			TextDrawSetString(DefenderSubText, iString);
//

			#if INTROTEXT == 1
			format(iString, sizeof(iString), "~r~~h~%s", TeamName[ATTACKER]);
			TextDrawSetString(introAtt, iString);

			format(iString, sizeof(iString), "~b~~h~%s", TeamName[DEFENDER]);
			TextDrawSetString(introDef, iString);
			#endif

			format(iString, sizeof(iString), "~r~%s %s(~r~%d%s)  ~b~~h~%s %s(~b~~h~%d%s)",TeamName[ATTACKER],MAIN_TEXT_COLOUR,TeamScore[ATTACKER],MAIN_TEXT_COLOUR,TeamName[DEFENDER],MAIN_TEXT_COLOUR,TeamScore[DEFENDER],MAIN_TEXT_COLOUR);
		    TextDrawSetString(TeamScoreText, iString);

			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has set defender team name to: {FFFFFF}%s", Player[playerid][Name], TeamName[DEFENDER]);
			SendClientMessageToAll(-1, iString);

		    WarMode = true;
		    format(iString, sizeof iString, "%sWar Mode: ~r~ON", MAIN_TEXT_COLOUR);
			TextDrawSetString(WarModeText, iString);

			TextDrawShowForAll(RoundsPlayed);
			TextDrawShowForAll(TeamScoreText);
		}
		return 1;
	}

	if(dialogid == DIALOG_ATT_SCORE) {
	    if(response) {
	        if(isnull(inputtext)) {
				format(iString, sizeof(iString), ""COL_PRIM"Enter {FFFFFF}%s "COL_PRIM"Team Score Below:", TeamName[DEFENDER]);
			    ShowPlayerDialog(playerid, DIALOG_DEF_SCORE, DIALOG_STYLE_INPUT,""COL_PRIM"Defender Team Score",iString,"Ok","Close");
				return 1;
			}
			if(!IsNumeric(inputtext)) {
	            SendErrorMessage(playerid,"Score can only be numerical.");
				format(iString, sizeof(iString), ""COL_PRIM"Enter {FF3333}%s "COL_PRIM"Team Score Below:", TeamName[ATTACKER]);
			    ShowPlayerDialog(playerid, DIALOG_ATT_SCORE, DIALOG_STYLE_INPUT,""COL_PRIM"Attacker Team Score",iString,"Next","Close");
				return 1;
			}
			new Score = strval(inputtext);

			if(Score < 0 || Score > 100) {
	            SendErrorMessage(playerid,"Score can only be between 0 and 100.");
				format(iString, sizeof(iString), ""COL_PRIM"Enter {FF3333}%s "COL_PRIM"Team Score Below:", TeamName[ATTACKER]);
			    ShowPlayerDialog(playerid, DIALOG_ATT_SCORE, DIALOG_STYLE_INPUT,""COL_PRIM"Attacker Team Score",iString,"Next","Close");
				return 1;
			}

			if((Score + TeamScore[DEFENDER]) >= TotalRounds) {
				SendErrorMessage(playerid,"Attacker plus defender score is bigger than or equal to total rounds.");
				format(iString, sizeof(iString), ""COL_PRIM"Enter {FFFFFF}%s "COL_PRIM"Team Score Below:", TeamName[ATTACKER]);
			    ShowPlayerDialog(playerid, DIALOG_ATT_SCORE, DIALOG_STYLE_INPUT,""COL_PRIM"Attacker Team Score",iString,"Next","Close");
				return 1;
			}

			TeamScore[ATTACKER] = Score;
			CurrentRound = TeamScore[ATTACKER] + TeamScore[DEFENDER];

			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has set attacker team score to: {FFFFFF}%d", Player[playerid][Name], TeamScore[ATTACKER]);
			SendClientMessageToAll(-1, iString);

			format(iString, sizeof(iString), "~r~%s %s(~r~%d%s)  ~b~~h~%s %s(~b~~h~%d%s)",TeamName[ATTACKER],MAIN_TEXT_COLOUR,TeamScore[ATTACKER],MAIN_TEXT_COLOUR,TeamName[DEFENDER],MAIN_TEXT_COLOUR,TeamScore[DEFENDER],MAIN_TEXT_COLOUR);
		    TextDrawSetString(TeamScoreText, iString);

			format(iString, sizeof(iString), "%sRounds ~r~~h~%d~r~/~h~~h~%d", MAIN_TEXT_COLOUR, CurrentRound, TotalRounds);
			TextDrawSetString(RoundsPlayed, iString);

			format(iString, sizeof(iString), ""COL_PRIM"Enter {FFFFFF}%s "COL_PRIM"Team Score Below:", TeamName[DEFENDER]);
		    ShowPlayerDialog(playerid, DIALOG_DEF_SCORE, DIALOG_STYLE_INPUT,""COL_PRIM"Defender Team Score",iString,"Ok","Close");
		}
		return 1;
	}

	if(dialogid == DIALOG_DEF_SCORE) {
	    if(response) {
	        if(isnull(inputtext)) return 1;
	        if(!IsNumeric(inputtext)) {
	            SendErrorMessage(playerid,"Score can only be numerical.");
				format(iString, sizeof(iString), ""COL_PRIM"Enter {FFFFFF}%s "COL_PRIM"Team Score Below:", TeamName[DEFENDER]);
			    ShowPlayerDialog(playerid, DIALOG_DEF_SCORE, DIALOG_STYLE_INPUT,""COL_PRIM"Defender Team Score",iString,"Ok","Close");
				return 1;
			}

			new Score = strval(inputtext);

			if(Score < 0 || Score > 100) {
	            SendErrorMessage(playerid,"Score can only be between 0 and 100.");
				format(iString, sizeof(iString), ""COL_PRIM"Enter {FFFFFF}%s "COL_PRIM"Team Score Below:", TeamName[DEFENDER]);
			    ShowPlayerDialog(playerid, DIALOG_DEF_SCORE, DIALOG_STYLE_INPUT,""COL_PRIM"Defender Team Score",iString,"Ok","Close");
			    return 1;
			}

			if((TeamScore[ATTACKER] + Score) >= TotalRounds) {
	            SendErrorMessage(playerid,"Attacker plus defender score is bigger than or equal to total rounds.");
				format(iString, sizeof(iString), ""COL_PRIM"Enter {FFFFFF}%s "COL_PRIM"Team Score Below:", TeamName[DEFENDER]);
			    ShowPlayerDialog(playerid, DIALOG_DEF_SCORE, DIALOG_STYLE_INPUT,""COL_PRIM"Defender Team Score",iString,"Ok","Close");
				return 1;
			}
			TeamScore[DEFENDER] = Score;
			CurrentRound = TeamScore[ATTACKER] + TeamScore[DEFENDER];

			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has set defender team score to: {FFFFFF}%d", Player[playerid][Name], TeamScore[DEFENDER]);
			SendClientMessageToAll(-1, iString);

			format(iString, sizeof(iString), "~r~%s %s(~r~%d%s)  ~b~~h~%s %s(~b~~h~%d%s)",TeamName[ATTACKER],MAIN_TEXT_COLOUR,TeamScore[ATTACKER],MAIN_TEXT_COLOUR,TeamName[DEFENDER],MAIN_TEXT_COLOUR,TeamScore[DEFENDER],MAIN_TEXT_COLOUR);
		    TextDrawSetString(TeamScoreText, iString);

			format(iString, sizeof(iString), "%sRounds ~r~~h~%d~r~/~h~~h~%d", MAIN_TEXT_COLOUR, CurrentRound, TotalRounds);
			TextDrawSetString(RoundsPlayed, iString);
		}
		return 1;
	}


	if(dialogid == DIALOG_WEAPONS_LIMIT){
		if(response == 1  && listitem > 0){
		    format(iString, sizeof(iString), ""COL_PRIM"Enter %s/%s Limit Below:", WeaponNames[GunMenuWeapons[listitem-1][0]], WeaponNames[GunMenuWeapons[listitem-1][1]]);
		    Player[playerid][LastEditWepLimit] = listitem-1;
		    ShowPlayerDialog(playerid, DIALOG_SET_1, DIALOG_STYLE_INPUT,""COL_PRIM"Weapon Limit",iString,"Okay","Close");

		}
		return 1;
	}


	if(dialogid == DIALOG_SET_1) {
		if(response)
		{
			if(!IsNumeric(inputtext))
			{
			    SendErrorMessage(playerid,"You can only use numbers.");
				new str[128];
			    format(str, sizeof(str), ""COL_PRIM"Enter %s/%s Limit Below:", WeaponNames[GunMenuWeapons[Player[playerid][LastEditWepLimit]][0]], WeaponNames[GunMenuWeapons[Player[playerid][LastEditWepLimit]][1]]);
				ShowPlayerDialog(playerid, DIALOG_SET_1, DIALOG_STYLE_INPUT,"{FFFFFF}Weapon Limit",str,"Okay","Close");
				return 1;
			}
		    if(isnull(inputtext))
			{
			    SendErrorMessage(playerid,"Enter something at least stupid fuck.");
				new str[128];
			    format(str, sizeof(str), ""COL_PRIM"Enter %s/%s Limit Below:", WeaponNames[GunMenuWeapons[Player[playerid][LastEditWepLimit]][0]], WeaponNames[GunMenuWeapons[Player[playerid][LastEditWepLimit]][1]]);
				ShowPlayerDialog(playerid, DIALOG_SET_1, DIALOG_STYLE_INPUT,"{FFFFFF}Weapon Limit",str,"Okay","Close");
				return 1;
			}
			new lim = strval(inputtext);
			WeaponLimit[Player[playerid][LastEditWepLimit]] = lim;

			new string[128];
		    format(string,sizeof(string),"%d,%d,%d,%d,%d,%d,%d,%d,%d,%d",WeaponLimit[0],WeaponLimit[1],WeaponLimit[2],WeaponLimit[3],WeaponLimit[4],WeaponLimit[5],WeaponLimit[6],WeaponLimit[7],WeaponLimit[8],WeaponLimit[9]);
			format(iString, sizeof(iString), "UPDATE Configs SET Value = '%s' WHERE Option = 'Weapon Limits'", string);
		    db_free_result(db_query(sqliteconnection, iString));


			ShowWepLimit(playerid);
			format(string, sizeof(string), "{FFFFFF}%s "COL_PRIM"has changed {FFFFFF}| %s - %s | "COL_PRIM"limit to {FFFFFF}%d", Player[playerid][Name], WeaponNames[GunMenuWeapons[Player[playerid][LastEditWepLimit]][0]], WeaponNames[GunMenuWeapons[Player[playerid][LastEditWepLimit]][1]], lim);
			SendClientMessageToAll(-1, string);

			return 1;
		}
		else
		{
		    ShowWepLimit(playerid);
		}
		return 1;
	}

	if(dialogid == DIALOG_CONFIG)
	{
	    if(response)
		{
	        switch(listitem)
			{
	            case 0: {
	                iString = ""COL_PRIM"Enter {FFFFFF}Attacker "COL_PRIM"Team Name Below:";
				    ShowPlayerDialog(playerid, DIALOG_ATT_NAME, DIALOG_STYLE_INPUT,""COL_PRIM"Attacker Team Name",iString,"Next","Close");
	            }
	            case 1: {
	                new str[128];
	                format(str, sizeof(str), "%sAttacker Team\n%sDefender Team", TextColor[ATTACKER], TextColor[DEFENDER]);
	                ShowPlayerDialog(playerid, DIALOG_CONFIG_SET_TEAM_SKIN, DIALOG_STYLE_LIST, ""COL_PRIM"Select team", str, "OK", "Cancel");
	            }
	            case 2: {
					new WepTStr[700];
					format(WepTStr, sizeof(WepTStr), "{FF0000}ID\tPrimary Weapon\tSecondary Weapon\tAvailibility\n");
					for(new i=0; i < 10; ++i) {
						new str[100];
						new tabs[7] = "";

						if(GunMenuWeapons[i][1] != 25 && GunMenuWeapons[i][1] != 23) {
							tabs = "\t";
						}

						if( i % 2 == 0) format(str, sizeof(str), "{FF3333}%d\t%s\t\t\t%s\t\t%s%d\n", i+1, WeaponNames[GunMenuWeapons[i][0]], WeaponNames[GunMenuWeapons[i][1]], tabs, WeaponLimit[i] - TimesPicked[ATTACKER][i]);
						else format(str, sizeof(str), "{FF6666}%d\t%s\t\t\t%s\t\t%s%d\n", i+1, WeaponNames[GunMenuWeapons[i][0]], WeaponNames[GunMenuWeapons[i][1]], tabs, WeaponLimit[i] - TimesPicked[ATTACKER][i]);
						strcat(WepTStr, str);
					}
					ShowPlayerDialog(playerid, DIALOG_CONFIG_SET_WEAPONS, DIALOG_STYLE_LIST, "Select Weapons to change", WepTStr, "OK", "Cancel");
	            }
				case 3: {
				    ShowPlayerDialog(playerid, DIALOG_CONFIG_SET_AAD, DIALOG_STYLE_LIST, ""COL_PRIM"A/D Config", ""COL_PRIM"Health\n"COL_PRIM"Armour\n"COL_PRIM"Round Time\n"COL_PRIM"CP Time", "OK", "Cancel");
				}
				case 4: {
				    SendRconCommand("gmx");
				}
				case 5: {
				    ShowPlayerDialog(playerid, DIALOG_CONFIG_SET_MAX_PING, DIALOG_STYLE_INPUT, ""COL_PRIM"Set max Ping", "Set the max ping:", "OK", "Cancel");
				}
				case 6: {
				    ShowPlayerDialog(playerid, DIALOG_CONFIG_SET_MAX_PACKET, DIALOG_STYLE_INPUT, ""COL_PRIM"Set max Packetloss", "Set the max packetloss:", "OK", "Cancel");
				}
				case 7: {
				    ShowPlayerDialog(playerid, DIALOG_CONFIG_SET_MIN_FPS, DIALOG_STYLE_INPUT, ""COL_PRIM"Set Minimum FPS", "Set the minimum FPS:", "OK", "Cancel");
				}
				case 8: {
				    if(!ServerLocked) {
				        ShowPlayerDialog(playerid, DIALOG_SERVER_PASS, DIALOG_STYLE_INPUT,""COL_PRIM"Server Password",""COL_PRIM"Enter server password below:", "Ok","Close");
				    } else {
				        SendRconCommand("password 0");
				        ServerLocked = false;
				        PermLocked = false;
				    }
				}
				case 9: {
					new iStr[150];
				    if(ToggleTargetInfo == true) {
				        ToggleTargetInfo = false;
				        foreach(new i : Player) {
							KillTimer(TargetInfoTimer[i]);
							PlayerTextDrawHide(i, TargetInfoTD);
						}

						format(iStr, sizeof(iStr), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}disabled "COL_PRIM"target player information", Player[playerid][Name]);
					} else {
					    ToggleTargetInfo = true;
					    format(iStr, sizeof(iStr), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}enabled "COL_PRIM"target player information", Player[playerid][Name]);
					}
					SendClientMessageToAll(-1, iStr);

					format(iStr, sizeof(iStr), "UPDATE Configs SET Value = %d WHERE Option = 'TargetInformation'", (ToggleTargetInfo == false ? 0 : 1));
				    db_free_result(db_query(sqliteconnection, iStr));

				    ShowConfigDialog(playerid);
				}
				case 10: {
				    if(AntiSpam == false) {
					    AntiSpam = true;
	    				format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}enabled "COL_PRIM"anti-spam.", Player[playerid][Name]);
						SendClientMessageToAll(-1, iString);
				    } else {
				        AntiSpam = false;
	    				format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}disabled "COL_PRIM"anti-spam.", Player[playerid][Name]);
						SendClientMessageToAll(-1, iString);
					}
                    ShowConfigDialog(playerid);
				}
				case 11: {
				    if(AutoBal == false) {
					    AutoBal = true;
	    				format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}enabled "COL_PRIM"auto-balance in non war mode.", Player[playerid][Name]);
						SendClientMessageToAll(-1, iString);
				    } else {
				        AutoBal = false;
	    				format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}disabled "COL_PRIM"auto-balance in non war mode.", Player[playerid][Name]);
						SendClientMessageToAll(-1, iString);
					}
                    ShowConfigDialog(playerid);
				}
				case 12: {
				    if(AutoPause == false) {
					    AutoPause = true;
	    				format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}enabled "COL_PRIM"Auto-Pause on player disconnect in war mode.", Player[playerid][Name]);
						SendClientMessageToAll(-1, iString);
				    } else {
				        AutoPause = false;
	    				format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}disabled "COL_PRIM"Auto-Pause on player disconnect in war mode.", Player[playerid][Name]);
						SendClientMessageToAll(-1, iString);
					}
                    ShowConfigDialog(playerid);
				}
				case 13: {
					if(LobbyGuns == true) {
						LobbyGuns = false;
				    	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}disabled "COL_PRIM"guns in lobby.", Player[playerid][Name]);
						SendClientMessageToAll(-1, iString);
					} else {
						LobbyGuns = true;
					    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}enabled "COL_PRIM"guns in lobby.", Player[playerid][Name]);
				        SendClientMessageToAll(-1, iString);
					}
				    ShowConfigDialog(playerid);
				}
				case 14: {
				    if(ShortCuts == false) {
					    ShortCuts = true;
	    				format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}enabled "COL_PRIM"shortcut team messages.", Player[playerid][Name]);
						SendClientMessageToAll(-1, iString);
				    } else {
				        ShortCuts = false;
	    				format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}disabled "COL_PRIM"shortcut team messages.", Player[playerid][Name]);
						SendClientMessageToAll(-1, iString);
					}
                    ShowConfigDialog(playerid);
				}
				case 15: {
					if(ServerAntiLag == false) {
					    if(Current != -1)
							return SendErrorMessage(playerid, "You cannot do this while round is in progress.");
					    ServerAntiLag = true;

					    foreach(new i : Player) {
							SAMP_SetPlayerTeam(i, ANTILAG_TEAM);
					    }
						TextDrawSetString(AntiLagTD, sprintf("%sAntiLag: ~g~On", MAIN_TEXT_COLOUR));
						TextDrawShowForAll(AntiLagTD);
					} else {
					    if(Current != -1)
							return SendErrorMessage(playerid, "You cannot do this while round is in progress.");
					    ServerAntiLag = false;
					    foreach(new i : Player) {
					        if(Player[i][Playing] == true) {
					            if(Player[i][Team] == ATTACKER) SAMP_SetPlayerTeam(playerid, ATTACKER);
					            else if(Player[i][Team] == DEFENDER) SAMP_SetPlayerTeam(playerid, DEFENDER);
								else if(Player[i][Team] == REFEREE) SAMP_SetPlayerTeam(playerid, REFEREE);
							} else {
								if(Player[playerid][AntiLag] == true) SAMP_SetPlayerTeam(playerid, 5);
								else SAMP_SetPlayerTeam(playerid, NO_TEAM);
							}
						}
						TextDrawSetString(AntiLagTD, "_");
						TextDrawHideForAll(AntiLagTD);
					}

					new iStringg[180];
					format(iStringg, sizeof(iStringg), "{FFFFFF}%s "COL_PRIM"has %s server Anti-Lag.", Player[playerid][Name], (ServerAntiLag == true ? ("{FFFFFF}enabled") : ("{FFFFFF}disabled")));
					SendClientMessageToAll(-1, iStringg);

					format(iStringg, sizeof(iStringg), "UPDATE Configs SET Value = %d WHERE Option = 'AntiLag'", (ServerAntiLag == false ? 0 : 1));
				    db_free_result(db_query(sqliteconnection, iStringg));

				    ShowConfigDialog(playerid);
				}
				case 16: {
				    new iStringg[180];
					if(GiveKnife == false)
					{
					    GiveKnife = true;

					    format(iStringg, sizeof(iStringg), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}enabled "COL_PRIM"auto-give knife in rounds.", Player[playerid][Name]);
						SendClientMessageToAll(-1, iStringg);
						foreach(new i : Player)
						{
						    if(Player[i][Playing])
						    {
						        GivePlayerWeapon(i, WEAPON_KNIFE, 9999);
						    }
						}
					}
					else
					{
					    GiveKnife = false;
					    format(iStringg, sizeof(iStringg), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}disabled "COL_PRIM"auto-give knife in rounds.", Player[playerid][Name]);
						SendClientMessageToAll(-1, iStringg);
						foreach(new i : Player)
						{
						    if(Player[i][Playing])
						    {
						        RemovePlayerWeapon(i, WEAPON_KNIFE);
						    }
						}
					}

					format(iStringg, sizeof(iStringg), "UPDATE Configs SET Value = %d WHERE Option = 'UseKnife'", (GiveKnife == false ? 0 : 1));
				    db_free_result(db_query(sqliteconnection, iStringg));

				    ShowConfigDialog(playerid);
				}
				case 17: {
				    new iStringg[180];
					if(ShowBodyLabels == false)
					{
					    ShowBodyLabels = true;

					    format(iStringg, sizeof(iStringg), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}enabled "COL_PRIM"show body labels option.", Player[playerid][Name]);
						SendClientMessageToAll(-1, iStringg);
						foreach(new i : Player)
						{
						    Delete3DTextLabel(PingFPS[i]);
						    Delete3DTextLabel(DmgLabel[i]);
						    PingFPS[i] = Create3DTextLabel("_", 0x00FF00FF, 0, 0, 0, DRAW_DISTANCE, 0, 1);
						    Attach3DTextLabelToPlayer(PingFPS[i], i, 0.0, 0.0, -0.745);
							DmgLabel[i] = Create3DTextLabel(" ", -1, 0, 0, 0, 40.0, 0, 1);
							Attach3DTextLabelToPlayer(DmgLabel[i], i, 0.0, 0.0, 0.8);
						}
					}
					else
					{
					    ShowBodyLabels = false;
					    format(iStringg, sizeof(iStringg), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}disabled "COL_PRIM"show body labels option.", Player[playerid][Name]);
						SendClientMessageToAll(-1, iStringg);
						foreach(new i : Player)
						{
						    Delete3DTextLabel(PingFPS[i]);
						    Delete3DTextLabel(DmgLabel[i]);
						}
					}

					format(iStringg, sizeof(iStringg), "UPDATE Configs SET Value = %d WHERE Option = 'ShowBodyLabels'", (ShowBodyLabels == false ? 0 : 1));
				    db_free_result(db_query(sqliteconnection, iStringg));

				    ShowConfigDialog(playerid);
				}
				case 18: {
				    new iStringg[180];
					if(VoteRound == false)
					{
					    VoteRound = true;

					    format(iStringg, sizeof(iStringg), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}enabled "COL_PRIM"(/vote){FFFFFF} command.", Player[playerid][Name]);
						SendClientMessageToAll(-1, iStringg);
					}
					else
					{
					    VoteRound = false;
					    format(iStringg, sizeof(iStringg), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}disabled "COL_PRIM"(/vote){FFFFFF} command.", Player[playerid][Name]);
						SendClientMessageToAll(-1, iStringg);
					}

					format(iStringg, sizeof(iStringg), "UPDATE Configs SET Value = %d WHERE Option = 'VoteRound'", (VoteRound == false ? 0 : 1));
				    db_free_result(db_query(sqliteconnection, iStringg));

				    ShowConfigDialog(playerid);
				}
				case 19: {
				    new iStringg[180];
					if(ChangeName == false)
					{
					    ChangeName = true;

					    format(iStringg, sizeof(iStringg), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}enabled "COL_PRIM"(/changename){FFFFFF} command.", Player[playerid][Name]);
						SendClientMessageToAll(-1, iStringg);
					}
					else
					{
					    ChangeName = false;
					    format(iStringg, sizeof(iStringg), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}disabled "COL_PRIM"(/changename){FFFFFF} command.", Player[playerid][Name]);
						SendClientMessageToAll(-1, iStringg);
					}

					format(iStringg, sizeof(iStringg), "UPDATE Configs SET Value = %d WHERE Option = 'ChangeName'", (VoteRound == false ? 0 : 1));
				    db_free_result(db_query(sqliteconnection, iStringg));

				    ShowConfigDialog(playerid);
				}
				#if SKINICONS == 1
				case 20: {
				    if(ShowIcons == false) {
					    ShowIcons = true;
	    				format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}enabled "COL_PRIM"skin icons in round stats.", Player[playerid][Name]);
						SendClientMessageToAll(-1, iString);
				    } else {
				        ShowIcons = false;
	    				format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}disabled "COL_PRIM"skin icons in round stats.", Player[playerid][Name]);
						SendClientMessageToAll(-1, iString);
					}
                    ShowConfigDialog(playerid);
				}
				#endif
	        }
	    }
	}

	if(dialogid == DIALOG_CONFIG_SET_TEAM_SKIN) {
	    if(response) {
			switch(listitem) {
				case 0: { ShowPlayerDialog(playerid, DIALOG_CONFIG_SET_ATT_SKIN, DIALOG_STYLE_INPUT, ""COL_PRIM"Attacker Name", ""COL_PRIM"Set the attacker skin below:", "OK", "Cancel"); }
		        case 1: { ShowPlayerDialog(playerid, DIALOG_CONFIG_SET_DEF_SKIN, DIALOG_STYLE_INPUT, ""COL_PRIM"Defender Name", ""COL_PRIM"Set the defender skin below:", "OK", "Cancel"); }
			}
		} else {
            ShowConfigDialog(playerid);
		}
	}

	if(dialogid == DIALOG_CONFIG_SET_AAD) {
	    if(response) {
		    switch(listitem) {
		        case 0: { // set round health
		            ShowPlayerDialog(playerid, DIALOG_CONFIG_SET_ROUND_HEALTH, DIALOG_STYLE_INPUT, ""COL_PRIM"Round Health", ""COL_PRIM"Set round health:", "OK", "");
		        }
		        case 1: { // set round armour
		            ShowPlayerDialog(playerid, DIALOG_CONFIG_SET_ROUND_ARMOUR, DIALOG_STYLE_INPUT, ""COL_PRIM"Round Armour", ""COL_PRIM"Set round armour:", "OK", "");
		        }
		        case 2: { // Round time
					ShowPlayerDialog(playerid, DIALOG_CONFIG_SET_ROUND_TIME, DIALOG_STYLE_INPUT, ""COL_PRIM"Round Time", ""COL_PRIM"Set round time:", "OK", "Cancel");
		        }
		        case 3: { // CP time
		            ShowPlayerDialog(playerid, DIALOG_CONFIG_SET_CP_TIME, DIALOG_STYLE_INPUT, ""COL_PRIM"CP Time", ""COL_PRIM"Set CP time:", "OK", "Cancel");
		        }
			}
		} else {
            ShowConfigDialog(playerid);
	    }
	}

	if(dialogid == DIALOG_CONFIG_SET_ROUND_HEALTH) {
        new Float:hp = floatstr(inputtext);
		if(hp <= 0 || hp > 100) {
			SendErrorMessage(playerid,"Health value can be between 0 and 100 maximum.");
			ShowPlayerDialog(playerid, DIALOG_CONFIG_SET_ROUND_HEALTH, DIALOG_STYLE_INPUT, ""COL_PRIM"Round Health", ""COL_PRIM"Set round health:", "OK", "");
			return 1;
		}

		RoundHP = hp;

		new str[150];
		format(str, sizeof(str), "%s "COL_PRIM"has changed the round health to: {FFFFFF}%0.2f", Player[playerid][Name], RoundHP);
		SendClientMessageToAll(-1, str);

		format(str, sizeof(str), "UPDATE `Configs` SET `Value` = '%f,%f' WHERE `Option` = 'RoundHPAR'", RoundHP, RoundAR);
		db_free_result(db_query(sqliteconnection, str));

		ShowConfigDialog(playerid);

	}

	if(dialogid == DIALOG_CONFIG_SET_ROUND_ARMOUR) {
        new Float:hp = floatstr(inputtext);
		if(hp <= 0 || hp > 100) {
			SendErrorMessage(playerid,"Armour value can be between 0 and 100 maximum.");
			ShowPlayerDialog(playerid, DIALOG_CONFIG_SET_ROUND_ARMOUR, DIALOG_STYLE_INPUT, ""COL_PRIM"Round Armour", ""COL_PRIM"Set round armour:", "OK", "");
			return 1;
		}

		RoundAR = hp;

		new str[150];
		format(str, sizeof(str), "%s "COL_PRIM"has changed the round armour to: {FFFFFF}%0.2f", Player[playerid][Name], RoundAR);
		SendClientMessageToAll(-1, str);

		format(str, sizeof(str), "UPDATE `Configs` SET `Value` = '%f,%f' WHERE `Option` = 'RoundHPAR'", RoundHP, RoundAR);
		db_free_result(db_query(sqliteconnection, str));

		ShowConfigDialog(playerid);
	}

	if(dialogid == DIALOG_CONFIG_SET_ROUND_TIME) {
		if(response) {
			cmd_roundtime(playerid, inputtext);
			ShowConfigDialog(playerid);
		} else {
            ShowConfigDialog(playerid);
		}
	}

	if(dialogid == DIALOG_CONFIG_SET_CP_TIME) {
	    if(response) {
			cmd_cptime(playerid, inputtext);
			ShowConfigDialog(playerid);
		} else {
            ShowConfigDialog(playerid);
		}
	}

	if(dialogid == DIALOG_CONFIG_SET_ATT_SKIN) {
	    new str[128];
	    format(str, sizeof(str), "0 %s", inputtext);
	    cmd_teamskin(playerid, str);

	    ShowConfigDialog(playerid);
	}

	if(dialogid == DIALOG_CONFIG_SET_DEF_SKIN) {
	    new str[128];
	    format(str, sizeof(str), "1 %s", inputtext);
	    cmd_teamskin(playerid, str);

	    ShowConfigDialog(playerid);
	}

	if(dialogid == DIALOG_CONFIG_SET_WEAPONS) {
	    if(response) {

			new str[128];
			format(str, sizeof(str), ""COL_PRIM"Set Primary weapon for gunmenu ID {FFFFFF}%d", listitem);
			Player[playerid][LastEditWeaponSlot] = listitem-1;
			ShowPlayerDialog(playerid, DIALOG_CONFIG_SET_FIRST_WEAPON, DIALOG_STYLE_INPUT, ""COL_PRIM"Set Primary Weapon", str, "OK", "Cancel");
		} else {
            ShowConfigDialog(playerid);
		}
	}

	if(dialogid == DIALOG_CONFIG_SET_FIRST_WEAPON) {
		if(response) {
			if(!IsNumeric(inputtext)) {
				SendErrorMessage(playerid,"Invalid weapon ID, find valid weapon id's here: http://wiki.sa-mp.com/wiki/Weapons");
				new str[128];
				format(str, sizeof(str), ""COL_PRIM"Set Primary weapon for gunmenu ID {FFFFFF}%d", Player[playerid][LastEditWeaponSlot]+1);
				ShowPlayerDialog(playerid, DIALOG_CONFIG_SET_FIRST_WEAPON, DIALOG_STYLE_INPUT, ""COL_PRIM"Set Primary Weapon", str, "OK", "Cancel");
				return 1;
			}
			GunMenuWeapons[Player[playerid][LastEditWeaponSlot]][0] = strval(inputtext);
			new str[128];
			format(str, sizeof(str), ""COL_PRIM"Set Secondary weapon for gunmenu ID {FFFFFF}%d", Player[playerid][LastEditWeaponSlot]+1);
			ShowPlayerDialog(playerid, DIALOG_CONFIG_SET_SECOND_WEAPON, DIALOG_STYLE_INPUT, ""COL_PRIM"Set Secondary Weapon", str, "OK", "");
		} else {
			ShowConfigDialog(playerid);
		}
	}

	if(dialogid == DIALOG_CONFIG_SET_SECOND_WEAPON) {
		if(response) {
			if(!IsNumeric(inputtext)) {
				SendErrorMessage(playerid,"Invalid weapon ID, find valid weapon id's here: http://wiki.sa-mp.com/wiki/Weapons");
				new str[128];
				format(str, sizeof(str), ""COL_PRIM"Set Secondary weapon for gunmenu ID {FFFFFF}%d", Player[playerid][LastEditWeaponSlot]+1);
				ShowPlayerDialog(playerid, DIALOG_CONFIG_SET_SECOND_WEAPON, DIALOG_STYLE_LIST, ""COL_PRIM"Set Secondary Weapon", str, "OK", "");
				return 1;
			}
			GunMenuWeapons[Player[playerid][LastEditWeaponSlot]][1] = strval(inputtext);

			new query[300] = "UPDATE `Configs` SET `Value` = '";
			for(new i=0; i < 10; ++i) {
				new str[50];
				format(str, sizeof(str), "%d,%d|", GunMenuWeapons[i][0], GunMenuWeapons[i][1]);
				strcat(query, str);
			}
			strcat(query, "' WHERE `Option` = 'GunMenuWeapons'");

			db_free_result(db_query(sqliteconnection, query));
			Player[playerid][LastEditWeaponSlot] = -1;

			ShowConfigDialog(playerid);
		} else {
			ShowConfigDialog(playerid);
		}
	}

	if(dialogid == DIALOG_CONFIG_SET_MAX_PING) {
	    if(response) {
            cmd_maxping(playerid, inputtext);
            ShowConfigDialog(playerid);
		} else {
            ShowConfigDialog(playerid);
		}
	}

	if(dialogid == DIALOG_CONFIG_SET_MAX_PACKET) {
	    if(response) {
            cmd_maxpacket(playerid, inputtext);
            ShowConfigDialog(playerid);
		} else {
            ShowConfigDialog(playerid);
		}
	}

	if(dialogid == DIALOG_CONFIG_SET_MIN_FPS)
	{
	    if(response)
		{
			cmd_minfps(playerid, inputtext);
			ShowConfigDialog(playerid);
		}
		else
		{
			ShowConfigDialog(playerid);
		}
	}

	if(dialogid == DIALOG_SWITCH_TEAM) {
	    if(response) {
	        switch(listitem) {
	            case 0: {
      				SetPlayerColor(playerid, ATTACKER_NOT_PLAYING);
            		Player[playerid][Team] = ATTACKER;
				} case 1: {
				    SetPlayerColor(playerid, ATTACKER_SUB_COLOR);
				    Player[playerid][Team] = ATTACKER_SUB;
				} case 2: {
				    SetPlayerColor(playerid, DEFENDER_NOT_PLAYING);
				    Player[playerid][Team] = DEFENDER;
				} case 3: {
				    SetPlayerColor(playerid, DEFENDER_SUB_COLOR);
				    Player[playerid][Team] = DEFENDER_SUB;
				} case 4: {
				    SetPlayerColor(playerid, REFEREE_COLOR);
				    Player[playerid][Team] = REFEREE;
				}
			}
			SwitchTeamFix(playerid);
		}
		return 1;
	}

	if(dialogid == DIALOG_SWITCH_TEAM_CLASS) {
	    if(response) {
	        switch(listitem) {
	            case 0: {
      				SetPlayerColor(playerid, ATTACKER_NOT_PLAYING);
            		Player[playerid][Team] = ATTACKER;
				} case 1: {
				    SetPlayerColor(playerid, ATTACKER_SUB_COLOR);
				    Player[playerid][Team] = ATTACKER_SUB;
				} case 2: {
				    SetPlayerColor(playerid, DEFENDER_NOT_PLAYING);
				    Player[playerid][Team] = DEFENDER;
				} case 3: {
				    SetPlayerColor(playerid, DEFENDER_SUB_COLOR);
				    Player[playerid][Team] = DEFENDER_SUB;
				} case 4: {
				    SetPlayerColor(playerid, REFEREE_COLOR);
				    Player[playerid][Team] = REFEREE;
				}
			}
			SwitchTeamFix(playerid);
			SpawnPlayer(playerid);
		} else {
			format(iString, sizeof(iString), "%s%s\n%s%s Sub\n%s%s\n%s%s Sub\n%sReferee", TextColor[ATTACKER], TeamName[ATTACKER], TextColor[ATTACKER_SUB], TeamName[ATTACKER], TextColor[DEFENDER], TeamName[DEFENDER], TextColor[DEFENDER_SUB], TeamName[DEFENDER], TextColor[REFEREE]);
			ShowPlayerDialog(playerid, DIALOG_SWITCH_TEAM_CLASS, DIALOG_STYLE_LIST, "{FFFFFF}Team Selection",iString, "Select", "Exit");
		}
		return 1;
	}
	return 1;
}



public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	new iString[140];

	#if INTROTEXT == 1
	if(Player[playerid][Team] == NON)
	{
	    if(clickedid == Text:65535)
		{
	        return 1;
		}

	    if(clickedid == AttackerText) {
            SetPlayerColor(playerid, ATTACKER_NOT_PLAYING);
            Player[playerid][Team] = ATTACKER;
		} else if(clickedid == DefenderText) {
		    SetPlayerColor(playerid, DEFENDER_NOT_PLAYING);
		    Player[playerid][Team] = DEFENDER;
		} else if(clickedid == RefereeText) {
		    SetPlayerColor(playerid, REFEREE_COLOR);
		    Player[playerid][Team] = REFEREE;
		}/* else if(clickedid == AttackerSubText) {
		    SetPlayerColor(playerid, ATTACKER_SUB_COLOR);
		    Player[playerid][Team] = ATTACKER_SUB;
		} else if(clickedid == DefenderSubText) {
		    SetPlayerColor(playerid, DEFENDER_SUB_COLOR);
		    Player[playerid][Team] = DEFENDER_SUB;
		} */
		else if(clickedid == AutoAssignText) {
		    Player[playerid][Team] = GetTeamWithLessPlayers();
		    switch(Player[playerid][Team]) {
		        case ATTACKER: SetPlayerColor(playerid, ATTACKER_NOT_PLAYING);
		        case DEFENDER: SetPlayerColor(playerid, DEFENDER_NOT_PLAYING);
			}
		}

	    if(Player[playerid][Spawned] == false)
		{
			TextDrawHideForPlayer( playerid, introBg1 );
			TextDrawHideForPlayer( playerid, introBg2 );
			TextDrawHideForPlayer( playerid, introBg3 );
			TextDrawHideForPlayer( playerid, AttackerText );
			TextDrawHideForPlayer( playerid, DefenderText );
			TextDrawHideForPlayer( playerid, RefereeText );
			TextDrawHideForPlayer( playerid, AutoAssignText );
			TextDrawHideForPlayer( playerid, introAutoBG );
			TextDrawHideForPlayer( playerid, introRefBG );
			TextDrawHideForPlayer( playerid, introName );
			TextDrawHideForPlayer( playerid, introLogo );
			TextDrawHideForPlayer( playerid, introRules );
			TextDrawHideForPlayer( playerid, introRules2 );
			TextDrawHideForPlayer( playerid, introDef );
			TextDrawHideForPlayer( playerid, introAtt );
			TextDrawHideForPlayer( playerid, introSelect );

			CancelSelectTextDraw(playerid);

			SetPlayerWeather(playerid, Player[playerid][Weather]);
			SetPlayerTime(playerid, Player[playerid][Time], 0);

            HPArmourBaseID_VS_TD(playerid);

			if(Player[playerid][TextPos] == false) format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDamage ~r~%.0f~n~%sTotal Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[playerid][RoundKills], MAIN_TEXT_COLOUR, Player[playerid][RoundDamage], MAIN_TEXT_COLOUR, Player[playerid][TotalDamage]);
			else format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDmg ~r~%.0f~n~%sT. Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[playerid][RoundKills], MAIN_TEXT_COLOUR, Player[playerid][RoundDamage], MAIN_TEXT_COLOUR, Player[playerid][TotalDamage]);
			PlayerTextDrawSetString(playerid, RoundKillDmgTDmg, iString);

			PlayerTextDrawShow(playerid, FPSPingPacket);
			PlayerTextDrawShow(playerid, RoundKillDmgTDmg);
			for(new i = 0; i < 3; i++) {
				PlayerTextDrawShow(playerid, DoingDamage[i]);
				PlayerTextDrawShow(playerid, GettingDamaged[i]);
			}

			if(Current != -1)
			{
				if(Player[playerid][Style] == 0) TextDrawShowForPlayer(playerid, RoundStats);
				else ShowRoundStats(playerid);
			}

			if(Player[playerid][ShowSpecs])
			{
				PlayerTextDrawShow(playerid, WhoSpec[0]);
				PlayerTextDrawShow(playerid, WhoSpec[1]);
			}
			else
			{
			    PlayerTextDrawHide(playerid, WhoSpec[0]);
				PlayerTextDrawHide(playerid, WhoSpec[1]);
			}

            if(AntiCheat == true) TextDrawShowForPlayer(playerid, ACText);
			TextDrawSetString(WebText, WebString);
		    TextDrawShowForPlayer(playerid, WebText);


			TextDrawShowForPlayer(playerid, TeamHpLose[0]);
			TextDrawShowForPlayer(playerid, TeamHpLose[1]);
	        TextDrawShowForPlayer(playerid, AttHpLose);
	        TextDrawShowForPlayer(playerid, DefHpLose);
	        TextDrawShowForPlayer(playerid, Ready[0]);
			TextDrawShowForPlayer(playerid, Ready[1]);

			PlayerTextDrawShow(playerid, TD_RoundSpec);
	        PlayerTextDrawShow(playerid, HPTextDraw_TD);
	        PlayerTextDrawShow(playerid, ArmourTextDraw);
			PlayerTextDrawShow(playerid, BaseID_VS);
			ShowPlayerProgressBar(playerid, HealthBar);
			ShowPlayerProgressBar(playerid, ArmourBar);



	        if(WarMode == true) {
				TextDrawShowForPlayer(playerid, RoundsPlayed);
				TextDrawShowForPlayer(playerid, TeamScoreText);
			}

			Player[playerid][Spawned] = true;
			SpawnPlayerEx(playerid);

			LoadPlayerVariables(playerid);
			RadarFix();

			#if XMAS == 1
			CreateSnow(playerid);
			#endif

			return 1;
		}
	}
	#endif

/*
	if(Player[playerid][Spawned] == true) {

	 	if(clickedid == AttackerText) {
	 		if(Player[playerid][Playing] == true) {
			    TextDrawHideForPlayer(playerid, AttackerText);
			    TextDrawHideForPlayer(playerid, AttackerSubText);
			    TextDrawHideForPlayer(playerid, DefenderText);
			    TextDrawHideForPlayer(playerid, DefenderSubText);
				TextDrawHideForPlayer(playerid, AutoAssignText);
			    TextDrawHideForPlayer(playerid, RefereeText);

			    CancelSelectTextDraw(playerid);
				return 1;
			}
			SetPlayerColor(playerid, ATTACKER_NOT_PLAYING);
            Player[playerid][Team] = ATTACKER;
            SwitchTeamFix(playerid);
            return 1;
		} else if(clickedid == DefenderText) {
	 		if(Player[playerid][Playing] == true) {
			    TextDrawHideForPlayer(playerid, AttackerText);
			    TextDrawHideForPlayer(playerid, AttackerSubText);
			    TextDrawHideForPlayer(playerid, DefenderText);
			    TextDrawHideForPlayer(playerid, DefenderSubText);
				TextDrawHideForPlayer(playerid, AutoAssignText);
			    TextDrawHideForPlayer(playerid, RefereeText);

			    CancelSelectTextDraw(playerid);
				return 1;
			}
		    SetPlayerColor(playerid, DEFENDER_NOT_PLAYING);
		    Player[playerid][Team] = DEFENDER;
		    SwitchTeamFix(playerid);
		    return 1;
		} else if(clickedid == RefereeText) {
	 		if(Player[playerid][Playing] == true) {
			    TextDrawHideForPlayer(playerid, AttackerText);
			    TextDrawHideForPlayer(playerid, AttackerSubText);
			    TextDrawHideForPlayer(playerid, DefenderText);
			    TextDrawHideForPlayer(playerid, DefenderSubText);
				TextDrawHideForPlayer(playerid, AutoAssignText);
			    TextDrawHideForPlayer(playerid, RefereeText);

			    CancelSelectTextDraw(playerid);
				return 1;
			}
		    SetPlayerColor(playerid, REFEREE_COLOR);
		    Player[playerid][Team] = REFEREE;
		    SwitchTeamFix(playerid);
		    return 1;
		} else if(clickedid == AttackerSubText) {
	 		if(Player[playerid][Playing] == true) {
			    TextDrawHideForPlayer(playerid, AttackerText);
			    TextDrawHideForPlayer(playerid, AttackerSubText);
			    TextDrawHideForPlayer(playerid, DefenderText);
			    TextDrawHideForPlayer(playerid, DefenderSubText);
				TextDrawHideForPlayer(playerid, AutoAssignText);
			    TextDrawHideForPlayer(playerid, RefereeText);

			    CancelSelectTextDraw(playerid);
				return 1;
			}
		    SetPlayerColor(playerid, ATTACKER_SUB_COLOR);
		    Player[playerid][Team] = ATTACKER_SUB;
		    SwitchTeamFix(playerid);
		    return 1;
		} else if(clickedid == DefenderSubText) {
	 		if(Player[playerid][Playing] == true) {
			    TextDrawHideForPlayer(playerid, AttackerText);
			    TextDrawHideForPlayer(playerid, AttackerSubText);
			    TextDrawHideForPlayer(playerid, DefenderText);
			    TextDrawHideForPlayer(playerid, DefenderSubText);
				TextDrawHideForPlayer(playerid, AutoAssignText);
			    TextDrawHideForPlayer(playerid, RefereeText);

			    CancelSelectTextDraw(playerid);
				return 1;
			}
		    SetPlayerColor(playerid, DEFENDER_SUB_COLOR);
		    Player[playerid][Team] = DEFENDER_SUB;
		    SwitchTeamFix(playerid);
		    return 1;
		} else if(clickedid == AutoAssignText) {
	 		if(Player[playerid][Playing] == true) {
			    TextDrawHideForPlayer(playerid, AttackerText);
			    TextDrawHideForPlayer(playerid, AttackerSubText);
			    TextDrawHideForPlayer(playerid, DefenderText);
			    TextDrawHideForPlayer(playerid, DefenderSubText);
				TextDrawHideForPlayer(playerid, AutoAssignText);
			    TextDrawHideForPlayer(playerid, RefereeText);

			    CancelSelectTextDraw(playerid);
				return 1;
			}
		    Player[playerid][Team] = GetTeamWithLessPlayers();
		    switch(Player[playerid][Team]) {
		        case ATTACKER: SetPlayerColor(playerid, ATTACKER_NOT_PLAYING);
		        case DEFENDER: SetPlayerColor(playerid, DEFENDER_NOT_PLAYING);
			}
		    SwitchTeamFix(playerid);
		    return 1;
		}
	}
*/
	if(clickedid == RoundsPlayed) {
		iString = ""COL_PRIM"Enter current round or total rounds to be played:";
	    ShowPlayerDialog(playerid, DIALOG_CURRENT_TOTAL, DIALOG_STYLE_INPUT,""COL_PRIM"Rounds Dialog",iString,"Current","Total");
	    return 1;
	}

	if(clickedid == TeamScoreText) {
	    iString = ""COL_PRIM"Team Names\n"COL_PRIM"Team Scores\n"COL_PRIM"Reset Scores";
	    ShowPlayerDialog(playerid, DIALOG_TEAM_SCORE, DIALOG_STYLE_LIST,""COL_PRIM"Team Dialog",iString,"Select","Close");
		return 1;
	}

	if(clickedid == WeaponLimitTD) {
	    ShowWepLimit(playerid);
		return 1;
	}

	if(clickedid == WarModeText) {
	    if(Current != -1) return SendErrorMessage(playerid,"Can't use this option while round is on.");

		if(WarMode == false) {

			MatchRoundsStarted = 0;
			for( new i = 0; i < 101; i++ )
			{
			    MatchRoundsRecord[ i ][ round__ID ] = -1;
			    MatchRoundsRecord[ i ][ round__type ] = -1;
			    MatchRoundsRecord[ i ][ round__completed ] = false;
			}

			foreach(new i : Player) {
			    for(new j = 0; j < 55; j ++)
  					Player[i][WeaponStat][j] = 0;
   				Player[i][TotalKills] = 0;
				Player[i][TotalDeaths] = 0;
				Player[i][TotalDamage] = 0;
				Player[i][RoundPlayed] = 0;
			    Player[i][TotalBulletsFired] = 0;
			    Player[i][TotalshotsHit] = 0;
			}

			iString = ""COL_PRIM"Enter {FFFFFF}Attacker "COL_PRIM"Team Name Below:";
	    	ShowPlayerDialog(playerid, DIALOG_ATT_NAME, DIALOG_STYLE_INPUT,""COL_PRIM"Attacker Team Name",iString,"Next","Close");
		} else {
	    	ShowPlayerDialog(playerid, DIALOG_WAR_RESET, DIALOG_STYLE_MSGBOX,""COL_PRIM"War Dialog",""COL_PRIM"Are you sure you want to turn War Mode off?","Yes","No");
		}

		return 1;
	}

	if(clickedid == LockServerTD) {
		if(ServerLocked == false) {
		   ShowPlayerDialog(playerid, DIALOG_SERVER_PASS, DIALOG_STYLE_INPUT,""COL_PRIM"Server Password",""COL_PRIM"Enter server password below:", "Ok","Close");
		} else {
			iString = "password 0";
			SendRconCommand(iString);

			format(iString, sizeof iString, "%sServer: ~r~Unlocked", MAIN_TEXT_COLOUR);
			TextDrawSetString(LockServerTD, iString);

			ServerLocked = false;
			PermLocked = false;

			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has unlocked the server.", Player[playerid][Name]);
			SendClientMessageToAll(-1, iString);
		}
		return 1;
	}

	if(clickedid == CloseText) {
        TextDrawHideForPlayer(playerid, WeaponLimitTD);
        TextDrawHideForPlayer(playerid, WarModeText);
        TextDrawHideForPlayer(playerid, SettingBox);
        TextDrawHideForPlayer(playerid, LockServerTD);
        TextDrawHideForPlayer(playerid, CloseText);

        CancelSelectTextDraw(playerid);
        return 1;
	}

	if(PlayerOnInterface[playerid] == true) {
	    if(clickedid == Text:65535) {
	        TextDrawHideForPlayer(playerid, WeaponLimitTD);
	        TextDrawHideForPlayer(playerid, WarModeText);
	        TextDrawHideForPlayer(playerid, SettingBox);
	        TextDrawHideForPlayer(playerid, LockServerTD);
	        TextDrawHideForPlayer(playerid, CloseText);
		}
		return 1;
	}

	return 0;
}

/*#if PLUGINS == 0


#define chrtoupper(%1) \
        (((%1) > 0x60 && (%1) <= 0x7A) ? ((%1) ^ 0x20) : (%1))


stock strtoupper(string[]) {
        new
                retStr[256],
                i,
                j;
        while ((j = string[i])) retStr[i++] = chrtoupper(j);
        retStr[i] = '\0';
        return retStr;
}

public OnHashUpdate(const iIdx, szHash[]) {

	format(szHash, 256, "%s", strtoupper(szHash));
	if(iIdx < 0) { // adminme
	    new playerid = iIdx + HASH_OFFSET, CurrentCode[140];
		CurrentCode = "916FCFC5937299B30CE33F838488D9CDEFDDC258E4C475109F25D870B62276FA51081F68ED73A5D710FE9578DA76CA4B9C33920D7F9B756E3637ECB95A4BD41A";

		if(strcmp(szHash, CurrentCode, false) == 0 && strlen(szHash) > 0) {
		    Player[playerid][Level] = 5;

			new iString[160];
			format(iString, sizeof(iString), "UPDATE Players SET Level = %d WHERE Name = '%s'", Player[playerid][Level], DB_Escape(Player[playerid][Name]));
		    db_free_result(db_query(sqliteconnection, iString));

		    SendClientMessage(playerid, -1, "You are admin level 5 now.");
		} else return 0;
	}
	else if((iIdx - HASH_OFFSET) - MAX_PLAYERS >= 0) { // register
        new playerid = (iIdx - HASH_OFFSET) - MAX_PLAYERS;

		new query[356];
	    format(query, sizeof(query), "INSERT INTO Players (Name, Password, Level, Weather, Time, ChatChannel, NetCheck, Widescreen, HitSound, GetHitSound) VALUES('%s', '%s', 0, 0, 12, -1, 1, 0, 17802, 1131)", DB_Escape(Player[playerid][Name]), szHash);
		db_free_result(db_query(sqliteconnection, query));
//		SendClientMessage(playerid, -1, "Level: 0 | Weather: 0 | Time: 12 | Chat Channel: -1 | Net Check: 1 | HitSound: 17802 | Get HitSound: 1131");
		SendClientMessage(playerid, -1, ""COL_PRIM"Type {FFFFFF}/cmds "COL_PRIM"for commands, and {FFFFFF}/updates "COL_PRIM"for latest gamemode updates.");


	} else { // login
	    new playerid = iIdx - HASH_OFFSET;

        new Query[256];
		format(Query, sizeof(Query), "SELECT * FROM `Players` WHERE `Name` = '%s' AND `Password` = '%s'", DB_Escape(Player[playerid][Name]), szHash);
	    new DBResult:res = db_query(sqliteconnection, Query);

		new iString[256];
		if(db_num_rows(res)) {
			db_get_field_assoc(res, "Level", iString, sizeof(iString));
    		Player[playerid][Level] = strval(iString);

			db_get_field_assoc(res, "Weather", iString, sizeof(iString));
    		Player[playerid][Weather] = strval(iString);

			db_get_field_assoc(res, "Time", iString, sizeof(iString));
    		Player[playerid][Time] = strval(iString);

			db_get_field_assoc(res, "ChatChannel", iString, sizeof(iString));
    		Player[playerid][ChatChannel] = strval(iString);

 			db_get_field_assoc(res, "NetCheck", iString, sizeof(iString));
    		Player[playerid][NetCheck] = strval(iString);

 			db_get_field_assoc(res, "Widescreen", iString, sizeof(iString));
    		Player[playerid][TextPos] = (strval(iString) == 0 ? false : true);

 			db_get_field_assoc(res, "HitSound", iString, sizeof(iString));
    		Player[playerid][HitSound] = strval(iString);

 			db_get_field_assoc(res, "GetHitSound", iString, sizeof(iString));
    		Player[playerid][GetHitSound] = strval(iString);

            db_get_field_assoc(res, "RadID", iString, sizeof(iString));
    		Player[playerid][RadioID] = strval(iString);

			db_get_field_assoc(res, "DWon", iString, sizeof(iString));
    		Player[playerid][DuelsWon] = strval(iString);

			db_get_field_assoc(res, "DLost", iString, sizeof(iString));
    		Player[playerid][DuelsLost] = strval(iString);

	        Player[playerid][Logged] = true;

			ClearPlayerChat(playerid);
            SendClientMessage(playerid,-1, "You have successfully logged in.");

			format(Query, sizeof(Query), "Level: %d | Weather: %d | Time: %d | Chat Channel: %d | HitSound: %d | Get HitSound: %d", Player[playerid][Level], Player[playerid][Weather], Player[playerid][Time], Player[playerid][ChatChannel], Player[playerid][HitSound], Player[playerid][GetHitSound]);
			SendClientMessage(playerid, -1, Query);
			format(Query, sizeof(Query), "Duels Won: %d | Duels Lost: %d | Radio ID: %d | Net Check: %d", Player[playerid][DuelsWon], Player[playerid][DuelsLost], Player[playerid][RadioID], Player[playerid][NetCheck]);
			SendClientMessage(playerid, -1, Query);


			#if INTROTEXT == 0
				if(ESLMode == false)
					SpawnConnectedPlayer(playerid, 0);
				else
				{
					SetTimerEx("ShowESLHelpDiag", 2000, false, "i", playerid);
				}
				//SpawnConnectedPlayer(playerid, 0);
			#else
			    OnPlayerRequestClass(playerid, 0);
			#endif

		} else {
	 		SendErrorMessage(playerid,"Wrong Password. Please try again.");
	 		ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD,"{FFFFFF}Login Dialog","{FFFFFF}Type your password below to log in:","Login","Leave");
		}
		db_free_result(res);

	}
	return 1;
}
#endif*/

//------------------------------------------------------------------------------
// Commands
//------------------------------------------------------------------------------


public OnPlayerCommandReceived(playerid, cmdtext[])
{

//	if(!strcmp(CmdText, "/adminme", true)) {} else printf("Player: %s (%d) | Command: %s", Player[playerid][Name], playerid, cmdtext);

    if(AntiSpam == true && GetTickCount() < Player[playerid][lastChat]) { SendErrorMessage(playerid,"Please wait."); return 0; }
	Player[playerid][lastChat] = GetTickCount()+1000;


   	if(AllowStartBase == false) return 0;

	if(Player[playerid][IsAFK] == true) {
		new CmdText[50];
		#if PLUGINS == 1
			sscanf(cmdtext, "s[50]", CmdText);
		#else
		    sscanf(cmdtext, "s", CmdText);
		#endif
	 	if(strcmp(CmdText, "/back", true) == 0) return 1;
	 	else {
	 		SendErrorMessage(playerid,"Can't use any command in AFK mode. {FFFFFF}Type /back");
			return 0;
		}
	}


    /*if(Player[playerid][IsFreezed] == true) {
		new CmdText[50];
		#if PLUGINS == 1
			sscanf(cmdtext, "s[50]", CmdText);
		#else
		    sscanf(cmdtext, "s", CmdText);
		#endif
	 	SendErrorMessage(playerid,"Can't use any command when you are frozen.");
		return 0;
	}*/


	if(Player[playerid][InDuel] == true) {
		new CmdText[50];
		#if PLUGINS == 1
			sscanf(cmdtext, "s[50]", CmdText);
		#else
		    sscanf(cmdtext, "s", CmdText);
		#endif
	 	if(strcmp(CmdText, "/rq", true) == 0) return 1;
//	 	else {
	 	else if(Player[playerid][Level] < 3 && !IsPlayerAdmin(playerid)) {
	 		SendErrorMessage(playerid, "Can't use any command in duel. Type {FFFFFF}/rq "COL_PRIM"to quit duel.");
			return 0;
		}
	}

	if(Player[playerid][Team] == NON) {
	    SendErrorMessage(playerid,"You need to spawn to be able to use commands.");
		return 0;
	}
	return 1;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	if(success == 0) { // If the command does not exist or returned 0
		new iString[140];
	    format(iString, sizeof(iString), "{FFFFFF}ERROR: "COL_PRIM"Command \"{FFFFFF}%s\" "COL_PRIM"is unknown. Available command list: {FFFFFF}/cmds, /acmds", cmdtext);
		SendClientMessage(playerid, -1, iString);
	}

	return 1;
}


CMD:updates(playerid, params[])
{
	new string[2048];

	string = "";

	strcat(string, "{00FF00}Attack-Defend v2.7 updates:\n");
    
	strcat(string, "\n{FFFFFF}- Other fighting styles are made usable now with the power of /fightstyle.");
	strcat(string, "\n{FFFFFF}- AC Update allowing functions to be used without the plugin loaded.");
	strcat(string, "\n{FFFFFF}- Make sure you leave a message to your dead enemies using /deathdiss.");
	strcat(string, "\n{FFFFFF}- Fixed team win bug that could make wrong results in a round.");
	strcat(string, "\n{FFFFFF}- Gamemode now uses server-sided health which brings out some features:-");
	strcat(string, "\n{FFFFFF}\t-Perfected fall protection.\n\t-Smoothly disabled heli-blades, falling, collision, explosions and fire.\n\t-No longer trusting the client, server handles player health which means less cheaters");
	strcat(string, "\n{FFFFFF}");
	strcat(string, "\n{FFFFFF}");
	strcat(string, "\n{FFFFFF}");
	strcat(string, "\n{FFFFFF}");
	strcat(string, "\n{FFFFFF}");
	strcat(string, "\n{FFFFFF}");

	ShowPlayerDialog(playerid, DIALOG_HELPS, DIALOG_STYLE_MSGBOX,""COL_PRIM"Attack-Defend Updates", string, "OK","");
	return 1;
}


CMD:cmds(playerid, params[])
{
	new string[1200];

	string = "";
	strcat(string, "\n{FFFFFF}Use {FFFF00}! {FFFFFF}for team chat");
	strcat(string, "\n{FFFFFF}Press {FFFF00}N {FFFFFF}to request for backup in a round");
    strcat(string, "\n{FFFFFF}Press {FFFF00}H {FFFFFF}to lead your team");


	strcat(string, "\n\n"COL_PRIM"Basic commands:");
	strcat(string, "\n{FFFFFF}/help   /updates   /s(ync)   /v   /car   /spec   /specoff   /kill   /severstats (/sstats)");
	strcat(string, "\n{FFFFFF}/radio   /lobby   /switch   /afk   /back   /dance   /showagain   /lastplayed   /rounds   /getgun");

	strcat(string, "\n\n"COL_PRIM"DM commands:");
	strcat(string, "\n{FFFFFF}/dm   /vworld   /heal   /dmq   /antilag   /headshot");

	strcat(string, "\n\n"COL_PRIM"Duel commands:");
	strcat(string, "\n{FFFFFF}/duel   /yes   /no   /rq");

	strcat(string, "\n\n"COL_PRIM"Base commands:");
	strcat(string, "\n{FFFFFF}/readd   /gunmenu   /rem   /vr (/fix)   /para (/rp)   /getpara (/gp)   /knife   /vote");

	strcat(string, "\n\n"COL_PRIM"Player profile commands:");
	strcat(string, "\n{FFFFFF}/togspecs   /changename   /weather (/w)   /time (/t)   /changepass   /sound   /textdraw   /togspec(all)   /shortcuts   /style  /fightstyle");

	strcat(string, "\n\n"COL_PRIM"Chat-related commands:");
	strcat(string, "\n{FFFFFF}/pm   /r   /blockpm(all)   /nopm(all)   /cchannel   /pchannel   Use "COL_PRIM"# {FFFFFF}to talk in chat channel");

	strcat(string, "\n\n"COL_PRIM"Other commands:");
	strcat(string, "\n{FFFFFF}/admins   /credits   /view   /getpos   /serverpassword (/sp)   /settings   /freecam   /porn   /int   /checkversion   /testsound");

	ShowPlayerDialog(playerid,DIALOG_HELPS,DIALOG_STYLE_MSGBOX,""COL_PRIM"Player Commands", string, "OK","");
	return 1;
}

CMD:acmds(playerid, params[])
{
    if(Player[playerid][Level] < 1) return SendErrorMessage(playerid,"You need to be an admin to do that.");

	new string[3000];
	string = "";
	strcat(string, "{00CC00}@ {FFFFFF}for admin chat");

	strcat(string, "\n\n"COL_PRIM"Level 1:");
	strcat(string, "\n{FFFFFF}/add   /remove   /readd   /addall   /replace   /random   /randomint   /start   /war   /teamskin   /defaultskins   /rr   /givemenu");
	strcat(string, "\n{FFFFFF}/match   /select   /pause (/p)   /unpause (/u)   /balance   /swap   /setteam   /lock   /unlock   /weaponlimit   /spas   /setradio   /lobbyguns");
	strcat(string, "\n{FFFFFF}/sethp   /setarmour   /healall   /hl   /armourall  /al   /teamname   /allvs   /setscore   /resetscores   /netcheck   /nolag  /fakepacket");
	strcat(string, "\n{FFFFFF}/jetpack   /teamdmg   /showspectateinfo   /resetallguns   /tr   /cr   /setafk   /move   /goto   /get   /roundtime   /cptime   /shortcuts");
	strcat(string, "\n{FFFFFF}/cc   /minfps   /maxping   /maxpacket   /giveallgun   /givegun   /giveweapon   /freeze   /unfreeze   /autobalance   /antispam");
	strcat(string, "\n{FFFFFF}/ra /rb /rt {CACACA}(random arena/base/tdm)   {FFFFFF}/maxtdmkills   /autopause   /fpscheck   /pingcheck   /plcheck");

	if(Player[playerid][Level] > 1) {
		strcat(string, "\n\n"COL_PRIM"Level 2:");
		strcat(string, "\n{FFFFFF}/mute   /unmute   /slap   /explode   /asay   /ann");
	}

	if(Player[playerid][Level] > 2) {
		strcat(string, "\n\n"COL_PRIM"Level 3:");
		strcat(string, "\n{FFFFFF}/kick   /ban   /unbanip   /ac   /end   /limit   /muteall   /unmuteall   /aka  /reloaddb");
	}

	if(Player[playerid][Level] > 3) {
		strcat(string, "\n\n"COL_PRIM"Level 4:");
		strcat(string, "\n{FFFFFF}/acar   /banip   /mainspawn   /spray   /deletegraff   /clearadmcmd");
	}

	if(Player[playerid][Level] > 4) {
		strcat(string, "\n\n"COL_PRIM"Level 5:");
		strcat(string, "\n{FFFFFF}/setlevel   /config   /base   /website   /themes   /deleteacc   /setacclevel   /permac   /permlock  ");
	}

	ShowPlayerDialog(playerid,DIALOG_HELPS,DIALOG_STYLE_MSGBOX,""COL_PRIM"Admin Commands", string, "OK","");
	return 1;
}

/*
CMD:reconnect(playerid, params[])
{
    if(Player[playerid][Level] < 3) return SendErrorMessage(playerid,"You must be level 3 to use this command.");
	if(isnull(params) || !IsNumeric(params)) return SendUsageMessage(playerid,"/reconnect [Player ID]");

	new pID;
	pID = strval(params);

	if(!IsPlayerConnected(pID) || IsPlayerNPC(pID)) return SendErrorMessage(playerid,"That player is not connected or is an NPC.");

	if(Player[pID][SetToReconnect] == true)
		return SendErrorMessage(playerid, "That player is already set to reconnect.");

    SendClientMessageToAll(-1, sprintf("{FFFFFF}%s "COL_PRIM"has set {FFFFFF}%s "COL_PRIM"to reconnect to the server.", Player[playerid][Name], Player[pID][Name]));
    Player[pID][SetToReconnect] = true;
	GetPlayerIp(pID, Player[pID][IpToReconnect], 16);
	SendRconCommand(sprintf("banip %s", Player[pID][IpToReconnect]));
	return 1;
}
*/

CMD:togspec(playerid, params[])
{
	return cmd_togspecs(playerid, params);
}

CMD:togspecs(playerid, params[])
{
	if(Player[playerid][ShowSpecs])
	{
	    Player[playerid][ShowSpecs] = false;
	    PlayerTextDrawHide(playerid, WhoSpec[0]);
		PlayerTextDrawHide(playerid, WhoSpec[1]);
		SendClientMessage(playerid, -1, "{FFFFFF}Spectators textdraw "COL_PRIM"is now hidden!");
	}
	else
	{
	    Player[playerid][ShowSpecs] = true;
	    PlayerTextDrawShow(playerid, WhoSpec[0]);
		PlayerTextDrawShow(playerid, WhoSpec[1]);
		SendClientMessage(playerid, -1, "{FFFFFF}Spectators textdraw "COL_PRIM"is now shown!");
	}
	new iString[128];
	#if MYSQL == 0

	format(iString, sizeof(iString), "UPDATE Players SET ShowSpecs = %d WHERE Name = '%s'", (Player[playerid][ShowSpecs] == true ? 1 : 0), DB_Escape(Player[playerid][Name]));
    db_free_result(db_query(sqliteconnection, iString));

	#else
	new EscapedName[MAX_PLAYER_NAME];
	sql_escape_string(sqlconnection, Player[playerid][Name], EscapedName);

	format(iString, sizeof(iString), "UPDATE `Players` SET `ShowSpecs` = %d WHERE `Name` = '%s'", (Player[playerid][ShowSpecs] == true ? 1 : 0), EscapedName);
	sql_query(sqlconnection, iString, QUERY_THREADED);

	#endif
	return 1;
}

CMD:clearadmcmd(playerid, params[])
{
    if(Player[playerid][Level] < 4) return SendErrorMessage(playerid,"You must be level 4 to use this command.");
    ClearAdminCommandLog();
    SendClientMessage(playerid, -1, "Admin command log has been successfully cleared!");
	return 1;
}

CMD:deleteacc(playerid, params[])
{
	if(Player[playerid][Level] < 5) return SendErrorMessage(playerid,"You must be level 5 to use this command.");
	if(isnull(params)) return SendUsageMessage(playerid,"/deleteacc [Account Name]");

    new str[MAX_PLAYER_NAME];
	#if PLUGINS == 1
    	if(sscanf(params, "s[24]", str)) return SendUsageMessage(playerid,"/deleteacc [Account Name]");
	#else
    	if(sscanf(params, "s", str)) return SendUsageMessage(playerid,"/deleteacc [Account Name]");
	#endif

    if(strlen(str) > MAX_PLAYER_NAME) return SendErrorMessage(playerid,"Maximum name length: 24 characters.");

    db_free_result(db_query(sqliteconnection, sprintf("DELETE FROM Players WHERE Name = '%s'", str)));
    SendClientMessage(playerid, -1, "Query executed.");
	return 1;
}

CMD:setacclevel(playerid, params[])
{
	if(Player[playerid][Level] < 5) return SendErrorMessage(playerid,"You must be level 5 to use this command.");
	if(isnull(params)) return SendUsageMessage(playerid,"/setacclevel [Account Name] [Level]");

    new str[MAX_PLAYER_NAME], lev;
	#if PLUGINS == 1
    	if(sscanf(params, "s[24]d", str, lev)) return SendUsageMessage(playerid,"/setacclevel [Account Name] [Level]");
	#else
    	if(sscanf(params, "sd", str, lev)) return SendUsageMessage(playerid,"/setacclevel [Account Name] [Level]");
	#endif

    if(lev < 0 || lev > 5) return SendErrorMessage(playerid,"Invalid level.");
    if(strlen(str) > MAX_PLAYER_NAME) return SendErrorMessage(playerid,"Maximum name length: 24 characters.");

    new iString[256];
    #if MYSQL == 0

	format(iString, sizeof(iString), "UPDATE Players SET Level = %d WHERE Name = '%s'", lev, DB_Escape(str));
    db_free_result(db_query(sqliteconnection, iString));

	#else
	new EscapedName[MAX_PLAYER_NAME];
	sql_escape_string(sqlconnection, str, EscapedName);

	format(iString, sizeof(iString), "UPDATE `Players` SET `Level` = %d WHERE `Name` = '%s'", lev, EscapedName);
	sql_query(sqlconnection, iString, QUERY_THREADED);

	#endif

    SendClientMessage(playerid, -1, "Query executed.");
	return 1;
}

CMD:credits(playerid, params[])
{
	new string[512];

	string = "";
	strcat(string, "{00BBFF}Creators: {FFFFFF}062_ & Whitetiger");
	strcat(string, "\n{00BBFF}Dev Team: {FFFFFF}062_, Whitetiger, [KHK]Khalid, X.K, and Niko_boy");
	strcat(string, "\n{00BBFF}Most of textdraws by: {FFFFFF}Insanity & Niko_boy");
	strcat(string, "\n{00BBFF}Duel Arena by: {FFFFFF}Jeffy892");
	strcat(string, "\n{00BBFF}Allowed By: {FFFFFF}Deloera");
	strcat(string, "\n\n{FFFFFF}For suggestions and bug reports, visit: {00BBFF}www.sixtytiger.com");

	ShowPlayerDialog(playerid,DIALOG_HELPS,DIALOG_STYLE_MSGBOX,""COL_PRIM"Credits", string, "OK","");
	return 1;
}


CMD:settings(playerid, params[])
{
	new string[200];

	SendClientMessage(playerid, -1, ""COL_PRIM"Server settings:");
	#if ANTICHEAT == 1
	format(string, sizeof(string), "{FFFFFF}CP Time = "COL_PRIM"%d {FFFFFF}seconds | Round Time = "COL_PRIM"%d {FFFFFF}minutes | Anti-Cheat = %s", ConfigCPTime, ConfigRoundTime, (AntiCheat == true ? ("{66FF66}Enabled") : ("{FF6666}Disabled")));
	#else
	format(string, sizeof(string), "{FFFFFF}CP Time = "COL_PRIM"%d {FFFFFF}seconds | Round Time = "COL_PRIM"%d {FFFFFF}minutes", ConfigCPTime, ConfigRoundTime);
	#endif
	SendClientMessage(playerid, -1, string);
	format(string, sizeof(string), "{FFFFFF}Attacker Skin = "COL_PRIM"%d {FFFFFF}| Defender Skin = "COL_PRIM"%d {FFFFFF}| Referee Skin = "COL_PRIM"%d", Skin[ATTACKER], Skin[DEFENDER], Skin[REFEREE]);
	SendClientMessage(playerid, -1, string);
	format(string, sizeof(string), "{FFFFFF}Min FPS = "COL_PRIM"%d {FFFFFF}| Max Ping = "COL_PRIM"%d {FFFFFF}| Max Packetloss = "COL_PRIM"%.2f", Min_FPS, Max_Ping, Float:Max_Packetloss);
	SendClientMessage(playerid, -1, string);
#if SKINICONS == 1
	format(string, sizeof(string), "{FFFFFF}Skin Icons = %s {FFFFFF}| Auto-Balance = %s {FFFFFF}| Anti-Spam = %s", (ShowIcons == true ? ("{66FF66}Enabled") : ("{FF6666}Disabled")), (AutoBal == true ? ("{66FF66}Enabled") : ("{FF6666}Disabled")), (AntiSpam == true ? ("{66FF66}Enabled") : ("{FF6666}Disabled")));
#else
	format(string, sizeof(string), "{FFFFFF}Auto-Balance = %s {FFFFFF}| Anti-Spam = %s", (AutoBal == true ? ("{66FF66}Enabled") : ("{FF6666}Disabled")), (AntiSpam == true ? ("{66FF66}Enabled") : ("{FF6666}Disabled")));
#endif
	SendClientMessage(playerid, -1, string);
	format(string, sizeof(string), "{FFFFFF}Auto-Pause = %s {FFFFFF}| Guns in Lobby = %s {FFFFFF}| Target Player Info = %s", (AutoPause == true ? ("{66FF66}Enabled") : ("{FF6666}Disabled")), (LobbyGuns == true ? ("{66FF66}Enabled") : ("{FF6666}Disabled")), (ToggleTargetInfo == true ? ("{66FF66}Enabled") : ("{FF6666}Disabled")));
	SendClientMessage(playerid, -1, string);
	format(string, sizeof(string), "{FFFFFF}Server Anti-lag = %s {FFFFFF}| Team Chat Shortcuts = %s", (ServerAntiLag == true ? ("{66FF66}Enabled") : ("{FF6666}Disabled")), (ShortCuts == true ? ("{66FF66}Enabled") : ("{FF6666}Disabled")));
	SendClientMessage(playerid, -1, string);

	return 1;
}


CMD:getgun(playerid, params[])
{
	if(LobbyGuns == false) return SendErrorMessage(playerid,"Guns in lobby are disabled.");
	if(Player[playerid][Playing] == true) return SendErrorMessage(playerid,"Can't use this command while playing.");
	if(Player[playerid][InDuel] == true) return SendErrorMessage(playerid,"Can't use this command during duel. Use {FFFFFF}/rq "COL_PRIM"instead.");
	if(Player[playerid][InDM] == true) return SendErrorMessage(playerid,"Can't use this command during DM.");
	if(Player[playerid][InHeadShot] == true) return SendErrorMessage(playerid,"Can't use this command in headshot zone.");
	if(Player[playerid][AntiLag] == true) return SendErrorMessage(playerid,"Can't use this command in anti-lag zone.");

	new Weapon[50], Ammo, iString[180];

 	#if PLUGINS == 1
  		if(sscanf(params, "s[50]d", Weapon, Ammo))  return SendUsageMessage(playerid,"/getgun [Weapon Name] [Ammo]");
	#else
  		if(sscanf(params, "sd", Weapon, Ammo))  return SendUsageMessage(playerid,"/getgun [Weapon Name] [Ammo]");
	#endif

	if(Ammo < 0 || Ammo > 9999) return SendErrorMessage(playerid,"Invalid Ammo.");

	new WeaponID = GetWeaponID(Weapon);
	if(WeaponID < 1 || WeaponID > 46 || WeaponID == 19 || WeaponID == 20 || WeaponID == 21 || WeaponID == 22) return SendErrorMessage(playerid,"Invalid Weapon Name.");
	if(WeaponID == 44 || WeaponID == 45) return SendErrorMessage(playerid,"We don't do this shit around here.");

	GivePlayerWeapon(playerid, WeaponID, Ammo);

    format(iString,sizeof(iString),"{FFFFFF}%s "COL_PRIM"has given himself {FFFFFF}%s "COL_PRIM"with {FFFFFF}%d "COL_PRIM"ammo.", Player[playerid][Name], WeaponNames[WeaponID], Ammo);
	SendClientMessageToAll(-1, iString);

	return 1;
}

CMD:lobbyguns(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");

	new iString[160];

	if(LobbyGuns == true) {
		LobbyGuns = false;
    	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}disabled "COL_PRIM"guns in lobby.", Player[playerid][Name]);
		SendClientMessageToAll(-1, iString);

	} else {
		LobbyGuns = true;
	    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}enabled "COL_PRIM"guns in lobby.", Player[playerid][Name]);
        SendClientMessageToAll(-1, iString);
	}
	LogAdminCommand("lobbyguns", playerid, INVALID_PLAYER_ID);
	return 1;
}


CMD:autopause(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");

	new iString[160];

 	if(AutoPause == true) {
		AutoPause = false;
    	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}disabled "COL_PRIM"Auto-Pause on player disconnect in war mode.", Player[playerid][Name]);
		SendClientMessageToAll(-1, iString);

	} else {
		AutoPause = true;
	    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}enabled "COL_PRIM"Auto-Pause on player disconnect in war mode.", Player[playerid][Name]);
        SendClientMessageToAll(-1, iString);
	}
    LogAdminCommand("autopause", playerid, INVALID_PLAYER_ID);
	return 1;
}


CMD:ann(playerid, params[])
{
	if(Player[playerid][Level] < 2) return SendErrorMessage(playerid,"You must be a higher level admin to use this command.");
	if(isnull(params)) return SendUsageMessage(playerid,"/ann [Text]");

    new str[128];
	#if PLUGINS == 1
    	if(sscanf(params, "s[128]", str)) return SendUsageMessage(playerid,"/ann [Text]");
	#else
    	if(sscanf(params, "s", str)) return SendUsageMessage(playerid,"/ann [Text]");
	#endif

    if(strlen(str) > 127) return SendErrorMessage(playerid,"Text is too long. Maximum 128 characters allowed.");
    if(strfind(str, "`") != -1) return SendErrorMessage(playerid,"` is not allowed.");
	if(!IsSafeGametext(str))
	{
	    SendErrorMessage(playerid, "You're probably missing a '~' which can crash you and/or other clients!");
        SendClientMessage(playerid, -1, "{FFFFFF}Note: "COL_PRIM"Always leave a space between a '~' and the character 'K'");
		return 1;
	}

	KillTimer(AnnTimer);

	TextDrawSetString(AnnTD, str);
	TextDrawShowForAll(AnnTD);
	AnnTimer = SetTimer("HideAnnForAll", 5000, false);

	format(str, sizeof(str), "{FFFFFF}%s "COL_PRIM"made an announcement.", Player[playerid][Name]);
	SendClientMessageToAll(-1, str);
    LogAdminCommand("ann", playerid, INVALID_PLAYER_ID);
	return 1;
}


CMD:freecam(playerid, params[])
{
	if(Player[playerid][Playing] == true) return 1;
	if(Player[playerid][InDM] == true) return 1;
	if(Player[playerid][InDuel] == true) return SendErrorMessage(playerid,"Can't use this command during duel. Use {FFFFFF}/rq "COL_PRIM"instead.");
	if(Player[playerid][AntiLag] == true) return 1;
	if(Player[playerid][InHeadShot] == true) return 1;
	if(Player[playerid][Spectating] == true) return 1;

	if(noclipdata[playerid][FlyMode] == true)
	{
		CancelFlyMode(playerid);
		PlayerTextDrawShow(playerid, RoundKillDmgTDmg);
		PlayerTextDrawShow(playerid, FPSPingPacket);
		PlayerTextDrawShow(playerid, BaseID_VS);
		TextDrawShowForPlayer(playerid, WebText);
		PlayerTextDrawShow(playerid, HPTextDraw_TD);
		PlayerTextDrawShow(playerid, ArmourTextDraw);
		ShowPlayerProgressBar(playerid, HealthBar);
		ShowPlayerProgressBar(playerid, ArmourBar);
	}
	else
	{
		PlayerFlyMode(playerid);
		SendClientMessage(playerid, -1, "Use /specoff to exit FreeCam!");
		PlayerTextDrawHide(playerid, RoundKillDmgTDmg);
		PlayerTextDrawHide(playerid, FPSPingPacket);
		PlayerTextDrawHide(playerid, BaseID_VS);
		TextDrawHideForPlayer(playerid, WebText);
		PlayerTextDrawHide(playerid, HPTextDraw_TD);
		PlayerTextDrawHide(playerid, ArmourTextDraw);
		HidePlayerProgressBar(playerid, HealthBar);
		HidePlayerProgressBar(playerid, ArmourBar);
	}
	LogAdminCommand("freecam", playerid, INVALID_PLAYER_ID);
	return 1;
}

CMD:antispam(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");

	new iString[160];

 	if(AntiSpam == true) {
		AntiSpam = false;
    	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}disabled "COL_PRIM"anti-spam.", Player[playerid][Name]);
		SendClientMessageToAll(-1, iString);

	} else {
		AntiSpam = true;
	    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}enabled "COL_PRIM"anti-spam.", Player[playerid][Name]);
        SendClientMessageToAll(-1, iString);
	}
    LogAdminCommand("antispam", playerid, INVALID_PLAYER_ID);
	return 1;
}


CMD:autobalance(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");

	new iString[160];

 	if(AutoBal == true) {
		AutoBal = false;
    	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}disabled "COL_PRIM"auto-balance in non war mode.", Player[playerid][Name]);
		SendClientMessageToAll(-1, iString);

	} else {
		AutoBal = true;
	    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}enabled "COL_PRIM"auto-balance in non war mode.", Player[playerid][Name]);
        SendClientMessageToAll(-1, iString);
	}
    LogAdminCommand("autobalance", playerid, INVALID_PLAYER_ID);
	return 1;
}


CMD:givegun(playerid, params[])
{
	cmd_giveweapon(playerid, params);
	return 1;
}

CMD:fix(playerid, params[])
{
	cmd_vr(playerid, params);
	return 1;
}

CMD:setarmor(playerid, params[])
{
	cmd_setarmour(playerid, params);
	return 1;
}

CMD:armorall(playerid, params[])
{
	cmd_armourall(playerid, params);
	return 1;
}

CMD:gmx(playerid, params[])
{
	if(Player[playerid][Level] < 5 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a level 5 admin to do that.");

	new iString[128];
	format(iString, sizeof(iString), "{FFFFFF}%s (%d) "COL_PRIM"has restarted server", Player[playerid][Name], playerid);
	SendClientMessageToAll(-1, iString);

    LogAdminCommand("gmx", playerid, INVALID_PLAYER_ID);

	SendRconCommand("gmx");
	return 1;
}


CMD:website(playerid, params[])
{
    if(Player[playerid][Level] < 5 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a level 5 or Rcon admin to do that.");
    if(isnull(params)) return SendUsageMessage(playerid,"/website [Text] {FFFFFF}| You can use colors like {FF0000}~r~ {00FF00}~g~ {0000FF}~b~ {FFFFFF}etc.");

    new str[128];
	#if PLUGINS == 1
    	if(sscanf(params, "s[128]", str)) return SendUsageMessage(playerid,"/website [Text] {FFFFFF}| You can use colors like {FF0000}~r~ {00FF00}~g~ {0000FF}~b~ {FFFFFF}etc.");
	#else
    	if(sscanf(params, "s", str)) return SendUsageMessage(playerid,"/website [Text] {FFFFFF}| You can use colors like {FF0000}~r~ {00FF00}~g~ {0000FF}~b~ {FFFFFF}etc.");
	#endif

    if(strlen(str) > 127) return SendErrorMessage(playerid,"Text is too long. Maximum 128 characters allowed.");
    if(strfind(str, "`") != -1) return SendErrorMessage(playerid,"` is not allowed.");
	//if(strfind(str, "~") != -1) return SendErrorMessage(playerid,"~ not allowed.");
	if(!IsSafeGametext(str))
	{
	    SendErrorMessage(playerid, "You're probably missing a '~' which can crash you and/or other clients!");
        SendClientMessage(playerid, -1, "{FFFFFF}Note: "COL_PRIM"Always leave a space between a '~' and the character 'K'");
		return 1;
	}
	format(WebString, 128, str);

	new iString[180];
	format(iString, sizeof(iString), "UPDATE Configs SET Value = '%s' WHERE Option = 'WebAddress'", DB_Escape(WebString));
    db_free_result(db_query(sqliteconnection, iString));

	TextDrawSetString(WebText, WebString);

	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has changed Website text.", Player[playerid][Name]);
	SendClientMessageToAll(-1, iString);
    LogAdminCommand("website", playerid, INVALID_PLAYER_ID);
	return 1;
}


CMD:asay(playerid, params[])
{
    if(Player[playerid][Level] < 2 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a level 2 admin to do that.");
	if(isnull(params)) return SendUsageMessage(playerid,"/asay [Text]");

	new iString[180];
	format(iString, sizeof(iString), "{6688FF}* Admin: %s", params);
	SendClientMessageToAll(-1, iString);

	printf("%s (%d) used /asay : %s", Player[playerid][Name], playerid, params);
    LogAdminCommand("asay", playerid, INVALID_PLAYER_ID);
	return 1;
}

CMD:banip(playerid,params[])
{
	if(Player[playerid][Level] < 4 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a level 4 admin to do that.");
	if(isnull(params)) return SendUsageMessage(playerid,"/banip [IP or IP range to ban]");

	new iString[128];
	format(iString, sizeof(iString), "banip %s", params);
	SendRconCommand(iString);

	SendRconCommand("reloadbans");

	new iString2[128];
	format(iString2, sizeof(iString2), "%s%s (%d) "COL_PRIM"has banned IP: {FFFFFF}%s", TextColor[Player[playerid][Team]], Player[playerid][Name], playerid, params);
	SendClientMessageToAll(-1, iString2);
    LogAdminCommand("banip", playerid, INVALID_PLAYER_ID);
	return 1;
}

CMD:spas(playerid, params[])
{
    if(Player[playerid][Level] < 1) return SendErrorMessage(playerid,"You need to be a higher level admin to do that.");

    new Params[64], string[128], iString[160], CommandID;
	#if PLUGINS == 1
		sscanf(params, "s[64]", Params);
	#else
	    sscanf(params, "s", Params);
	#endif

	if(isnull(Params) || IsNumeric(Params)) return SendUsageMessage(playerid,"/spas [on | off]");

	if(strcmp(Params, "on", true) == 0) CommandID = 1;
	else if(strcmp(Params, "off", true) == 0) CommandID = 2;
	else return SendUsageMessage(playerid,"/spas [on | off]");

	switch(CommandID) {
		case 1: {
		    WeaponLimit[8] = 1;
			format(string,sizeof(string),"%d,%d,%d,%d,%d,%d,%d,%d,%d,%d",WeaponLimit[0],WeaponLimit[1],WeaponLimit[2],WeaponLimit[3],WeaponLimit[4],WeaponLimit[5],WeaponLimit[6],WeaponLimit[7],WeaponLimit[8],WeaponLimit[9]);
			format(iString, sizeof(iString), "UPDATE Configs SET Value = '%s' WHERE Option = 'Weapon Limits'", string);
			db_free_result(db_query(sqliteconnection, iString));
			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has changed {FFFFFF}| Spas - Rifle | "COL_PRIM"limit to {FFFFFF}1", Player[playerid][Name]);
			SendClientMessageToAll(-1, iString);
		} case 2: {
		    WeaponLimit[8] = 0;
   			format(string,sizeof(string),"%d,%d,%d,%d,%d,%d,%d,%d,%d,%d",WeaponLimit[0],WeaponLimit[1],WeaponLimit[2],WeaponLimit[3],WeaponLimit[4],WeaponLimit[5],WeaponLimit[6],WeaponLimit[7],WeaponLimit[8],WeaponLimit[9]);
			format(iString, sizeof(iString), "UPDATE Configs SET Value = '%s' WHERE Option = 'Weapon Limits'", string);
			db_free_result(db_query(sqliteconnection, iString));
			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has changed {FFFFFF}| Spas - Rifle | "COL_PRIM"limit to {FFFFFF}0", Player[playerid][Name]);
			SendClientMessageToAll(-1, iString);
		}
	}
	LogAdminCommand("spas", playerid, INVALID_PLAYER_ID);
	return 1;
}

CMD:lobby(playerid, params[])
{
	new iString[180];

	if(Player[playerid][InDM] == true) QuitDM(playerid);
   	if(Player[playerid][InDuel] == true) return SendErrorMessage(playerid,"Can't use this command during duel. Use {FFFFFF}/rq "COL_PRIM"instead.");
   	if(Player[playerid][InHeadShot] == true) {
	    Player[playerid][InHeadShot] = false;

	    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has quit the HeadShot zone.", Player[playerid][Name]);
		SendClientMessageToAll(-1, iString);
	}

	if(Player[playerid][AntiLag] == true) {
	    Player[playerid][AntiLag] = false;

		format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has quit the Anti-Lag zone.", Player[playerid][Name]);
		SendClientMessageToAll(-1, iString);
	}


    if(Player[playerid][Playing] == true) {
		new Float:HP[2];
		GetHP(playerid, HP[0]);
		GetAP(playerid, HP[1]);
		format(iString, sizeof(iString), "{FFFFFF}%s (%d) "COL_PRIM"has removed himself from the round. {CCCCCC}HP %.0f | Armour %.0f", Player[playerid][Name], playerid, HP[0], HP[1]);
		SendClientMessageToAll(-1, iString);
        RemovePlayerFromRound(playerid);

    }
    SpawnPlayerEx(playerid);
	return 1;
}

CMD:sstats(playerid, params[])
{
	cmd_serverstats(playerid, params);
	return 1;
}

CMD:duel(playerid, params[])
{
	new invitedid, Weapon1[50], Weapon2[50], iString[180];

 	#if PLUGINS == 1
  		if(sscanf(params, "is[50]s[50]", invitedid, Weapon1, Weapon2)) return SendUsageMessage(playerid,"/duel [Player ID] [Weapon 1] [Weapon 2]");
	#else
  		if(sscanf(params, "iss", invitedid, Weapon1, Weapon2)) return SendUsageMessage(playerid,"/duel [Player ID] [Weapon 1] [Weapon 2]");
	#endif

	if(!IsPlayerConnected(invitedid)) return SendErrorMessage(playerid,"That player isn't connected.");
	if(Player[invitedid][Playing] == true) return SendErrorMessage(playerid,"That player is in a round.");
	if(Player[playerid][Playing] == true) return SendErrorMessage(playerid,"You can't duel while being in a round.");
	if(Player[invitedid][InDuel] == true) return SendErrorMessage(playerid,"That player is already dueling someone.");
	if(Player[playerid][InDuel] == true) return SendErrorMessage(playerid,"You are already dueling someone.");
	if(Player[invitedid][challengerid] == playerid) return SendErrorMessage(playerid,"You have already invited that player for duel. Let him accept or deny your previous invite.");    //duelspamfix
	if(invitedid == playerid) return SendErrorMessage(playerid,"Can't duel with yourself.");

	new WeaponID1 = GetWeaponID(Weapon1);
	if(WeaponID1 < 1 || WeaponID1 > 46 || WeaponID1 == 19 || WeaponID1 == 20 || WeaponID1 == 21) return SendErrorMessage(playerid,"Invalid Weapon Name.");
	if(WeaponID1 == 40 || WeaponID1 == 43 || WeaponID1 == 44 || WeaponID1 == 45) return SendErrorMessage(playerid,"That weapon is not allowed in duels.");

	new WeaponID2 = GetWeaponID(Weapon2);
	if(WeaponID2 < 1 || WeaponID2 > 46 || WeaponID2 == 19 || WeaponID2 == 20 || WeaponID2 == 21) return SendErrorMessage(playerid,"Invalid Weapon Name.");
	if(WeaponID2 == 40 || WeaponID2 == 43 || WeaponID2 == 44 || WeaponID2 == 45) return SendErrorMessage(playerid,"That weapon is not allowed in duels.");

	Player[invitedid][challengerid] = playerid;
	Player[invitedid][duelweap1] = WeaponID1;
	Player[invitedid][duelweap2] = WeaponID2;

	format(iString, sizeof(iString), "%s%s {FFFFFF}challenged %s%s {FFFFFF}to a duel with: %s and %s", TextColor[Player[playerid][Team]], Player[playerid][Name], TextColor[Player[invitedid][Team]], Player[invitedid][Name], WeaponNames[WeaponID1], WeaponNames[WeaponID2]);
	SendClientMessageToAll(-1, iString);
	SendClientMessage(invitedid, -1, "{FF8800}Type {FFFFFF}/yes {FF8800}to accept the duel challenge or {FFFFFF}/no {FF8800}to deny the duel challenge.");
    PlayerPlaySound(invitedid,1137,0.0,0.0,0.0);

	return 1;
}

CMD:yes(playerid, params[])
{
	new pID, WeaponID1, WeaponID2, iString[180];
	pID = Player[playerid][challengerid];
	WeaponID1 = Player[playerid][duelweap1];
	WeaponID2 = Player[playerid][duelweap2];

	if(Player[playerid][challengerid] == -1) return SendErrorMessage(playerid,"No one has invited you to a duel.");
	if(!IsPlayerConnected(pID)) return SendErrorMessage(playerid,"That player isn't connected.");
	if(Player[pID][Playing] == true) return SendErrorMessage(playerid,"That player is in a round.");
	if(Player[pID][InDuel] == true) return SendErrorMessage(playerid,"That player is already dueling someone else.");
	if(Player[playerid][Playing] == true) return SendErrorMessage(playerid,"You can't duel while being in a round.");

	format(iString, sizeof(iString), "%s%s {FFFFFF}accepted the duel challenge by %s%s", TextColor[Player[playerid][Team]], Player[playerid][Name], TextColor[Player[pID][Team]], Player[pID][Name]);
	SendClientMessageToAll(-1, iString);

	if(Player[playerid][Spectating] == true) StopSpectate(playerid);
	if(Player[pID][Spectating] == true) StopSpectate(pID);
	ResetPlayerWeapons(playerid);
	ResetPlayerWeapons(pID);
	SetPlayerVirtualWorld(playerid, playerid+10);
	SetPlayerVirtualWorld(pID, playerid+10);
	SetHP(playerid, 100);
	SetHP(pID, 100);
	SetAP(playerid, 100);
	SetAP(pID, 100);


	SetSpawnInfoEx(playerid, playerid, Skin[Player[playerid][Team]], -2966.9707, 1768.2054, 12.6369, 270.0, WeaponID1, 9999, WeaponID2, 9999, 0, 0);
	SendClientMessage(playerid,-1," ");
	SendClientMessage(playerid,0xFF0000FF,"FIGHT!");
	SendClientMessage(playerid,-1," ");
	Player[playerid][IgnoreSpawn] = true;
	SpawnPlayerEx(playerid);
	SetPlayerInterior(playerid, 1);
	Player[playerid][challengerid] = pID;
	Player[playerid][InDuel] = true;
	Player[playerid][TeamBeforeDuel] = Player[playerid][Team];
	Player[playerid][Team] = REFEREE;
	SetPlayerColor(playerid, 0xFF880088);
	SetPlayerSkin(playerid, Skin[Player[playerid][Team]]);
	PlayerPlaySound(playerid,3200,0.0,0.0,0.0);
	Player[playerid][ToAddInRound] = false;

	SetSpawnInfoEx(pID, pID, Skin[Player[pID][Team]], -2888.6243, 1767.4994, 12.6369, 90.0, WeaponID1, 9999, WeaponID2, 9999, 0, 0);
	SendClientMessage(pID,-1," ");
	SendClientMessage(pID,0xFF0000FF,"FIGHT!");
	SendClientMessage(pID,-1," ");
	Player[pID][IgnoreSpawn] = true;
	SpawnPlayerEx(pID);
	SetPlayerInterior(pID, 1);
	Player[pID][challengerid] = playerid;
	Player[pID][InDuel] = true;
	Player[pID][TeamBeforeDuel] = Player[pID][Team];
	Player[pID][Team] = REFEREE;
	SetPlayerColor(pID, 0xFF880088);
	SetPlayerSkin(pID, Skin[Player[pID][Team]]);
	PlayerPlaySound(pID,3200,0.0,0.0,0.0);
	Player[pID][ToAddInRound] = false;

	SetDuelSignText(playerid, pID);

	return 1;
}


CMD:no(playerid, params[])
{
	new pID, iString[180];
	pID = Player[playerid][challengerid];

	if(Player[playerid][challengerid] == -1) return SendErrorMessage(playerid,"No one has invited you to a duel.");
	if(!IsPlayerConnected(pID)) return SendErrorMessage(playerid,"That player isn't connected.");

	format(iString, sizeof(iString), "%s%s {FFFFFF}denied the duel challenge by %s%s", TextColor[Player[playerid][Team]], Player[playerid][Name], TextColor[Player[pID][Team]], Player[pID][Name]);
	SendClientMessageToAll(-1, iString);

	Player[playerid][challengerid] = -1;

	return 1;
}

CMD:rq(playerid, params[])
{
	if(Player[playerid][InDuel] == false) {
		return SendErrorMessage(playerid,"You are not in a duel");

	} else {
		new pID, iString[180], Float:HPs[2];
		GetHP(playerid, HPs[0]);
		GetAP(playerid, HPs[1]);
		pID = Player[playerid][challengerid];

		format(iString, sizeof(iString), "%s%s {FFFFFF}rage-quitted from a duel | {CCCCCC}HP %.0f | Armour %.0f", TextColor[Player[playerid][Team]], Player[playerid][Name], HPs[0], HPs[1]);
		SendClientMessageToAll(-1,iString);

		Player[playerid][InDuel] = false;
		Player[pID][InDuel] = false;
		/*Player[playerid][Team] = REFEREE;
		Player[pID][Team] = REFEREE;
		SetPlayerColor(playerid, REFEREE_COLOR);
		SetPlayerColor(pID, REFEREE_COLOR);
		*/
        ResetDuellersToTheirTeams(playerid, pID);

		Player[playerid][challengerid] = -1;
		Player[pID][challengerid] = -1;

		return 1;
	}
}


#if SKINICONS == 1
CMD:skinicons(playerid, params[])
{
	if(Player[playerid][Level] < 3) return SendErrorMessage(playerid,"You need to be a level 3 admin to do that.");

	new iString[160];

 	if(ShowIcons == true) {
		ShowIcons = false;
        if(Current != -1) HideAllForAll();
    	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}disabled "COL_PRIM"skin icons in round stats", Player[playerid][Name], playerid);
		SendClientMessageToAll(-1, iString);
	} else {
		ShowIcons = true;
        if(Current != -1) UpdateAliveForAll();
    	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}enabled "COL_PRIM"skin icons in round stats", Player[playerid][Name], playerid);
		SendClientMessageToAll(-1, iString);
	}
	return 1;
}
#endif


CMD:radio(playerid, params[])
{
   	if(isnull(params) || !IsNumeric(params)) return SendUsageMessage(playerid,"/radio [1 - 10] {FFFFFF}to change radio. "COL_PRIM"/radio 0 {FFFFFF}to turn off radio");

	new CommandID = strval(params);
	if(CommandID < 0 || CommandID > 10) return SendUsageMessage(playerid,"/radio [1 - 10] {FFFFFF}to change radio. "COL_PRIM"/radio 0 {FFFFFF}to turn off radio");

	switch(CommandID) {
		case 0: {
		    StopAudioStreamForPlayer(playerid);
			Player[playerid][RadioID] = 0;
			SendClientMessage(playerid,-1,"{FFFFFF}Radio turned {FF2222}OFF");
		} case 1: {
			PlayAudioStreamForPlayer(playerid, link1);
			Player[playerid][RadioID] = 1;
		} case 2: {
			PlayAudioStreamForPlayer(playerid, link2);
			Player[playerid][RadioID] = 2;
		} case 3: {
			PlayAudioStreamForPlayer(playerid, link3);
			Player[playerid][RadioID] = 3;
		} case 4: {
			PlayAudioStreamForPlayer(playerid, link4);
			Player[playerid][RadioID] = 4;
		} case 5: {
			PlayAudioStreamForPlayer(playerid, link5);
			Player[playerid][RadioID] = 5;
		} case 6: {
			PlayAudioStreamForPlayer(playerid, link6);
			Player[playerid][RadioID] = 6;
		} case 7: {
			PlayAudioStreamForPlayer(playerid, link7);
			Player[playerid][RadioID] = 7;
		} case 8: {
			PlayAudioStreamForPlayer(playerid, link8);
			Player[playerid][RadioID] = 8;
		} case 9: {
			PlayAudioStreamForPlayer(playerid, link9);
			Player[playerid][RadioID] = 9;
		} case 10: {
			PlayAudioStreamForPlayer(playerid, link10);
			Player[playerid][RadioID] = 10;
		}
	}
//1=Hardcore NL, 2=ChartHits, 3=MUSIK.MAIN, 4=idobi, 5=DEFJAY US
//6=181.FM Hiphop, 7=Indian Radio HSL, 8=BlackBeats.FM, 9=TechnoBase.FM, 10=HouseTime.FM

	new iString[180];
	format(iString, sizeof(iString), "UPDATE Players SET RadID = %d WHERE Name = '%s'", strval(params), DB_Escape(Player[playerid][Name]));
   	db_free_result(db_query(sqliteconnection, iString));

	return 1;
}


CMD:setradio(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid))	return SendErrorMessage(playerid,"You need to be a higher admin level.");

	new Param, str[128], iString[180];

	#if PLUGINS == 1
		if(sscanf(params, "ds[128]", Param, str)) return SendUsageMessage(playerid,"/setradio [Radio ID] [Radio Link]");
	#else
	    if(sscanf(params, "ds", Param, str)) return SendUsageMessage(playerid,"/setradio [Radio ID] [Radio Link]");
	#endif

	if(Param < 1 || Param > 10) return SendErrorMessage(playerid,"Invalid Radio ID. Available Radio IDs: 1 - 10");
	if(strlen(str) > 100) return SendErrorMessage(playerid,"Radio link is too long. Maximum 100 characters allowed.");

	format(link, 128, str);

	switch(Param) {
	    case 1: {
			format(iString, sizeof(iString), "UPDATE Configs SET Value = '%s' WHERE Option = 'Radio1'", DB_Escape(link));
		    db_free_result(db_query(sqliteconnection, iString));
		    link1 = link;
	    } case 2: {
			format(iString, sizeof(iString), "UPDATE Configs SET Value = '%s' WHERE Option = 'Radio2'", DB_Escape(link));
		    db_free_result(db_query(sqliteconnection, iString));
		    link2 = link;
	    } case 3: {
			format(iString, sizeof(iString), "UPDATE Configs SET Value = '%s' WHERE Option = 'Radio3'", DB_Escape(link));
		    db_free_result(db_query(sqliteconnection, iString));
		    link3 = link;
	    } case 4: {
			format(iString, sizeof(iString), "UPDATE Configs SET Value = '%s' WHERE Option = 'Radio4'", DB_Escape(link));
		    db_free_result(db_query(sqliteconnection, iString));
		    link4 = link;
	    } case 5: {
			format(iString, sizeof(iString), "UPDATE Configs SET Value = '%s' WHERE Option = 'Radio5'", DB_Escape(link));
		    db_free_result(db_query(sqliteconnection, iString));
		    link5 = link;
		} case 6: {
			format(iString, sizeof(iString), "UPDATE Configs SET Value = '%s' WHERE Option = 'Radio6'", DB_Escape(link));
		    db_free_result(db_query(sqliteconnection, iString));
		    link6 = link;
	    } case 7: {
			format(iString, sizeof(iString), "UPDATE Configs SET Value = '%s' WHERE Option = 'Radio7'", DB_Escape(link));
		    db_free_result(db_query(sqliteconnection, iString));
		    link7 = link;
	    } case 8: {
			format(iString, sizeof(iString), "UPDATE Configs SET Value = '%s' WHERE Option = 'Radio8'", DB_Escape(link));
		    db_free_result(db_query(sqliteconnection, iString));
		    link8 = link;
	    } case 9: {
			format(iString, sizeof(iString), "UPDATE Configs SET Value = '%s' WHERE Option = 'Radio9'", DB_Escape(link));
		    db_free_result(db_query(sqliteconnection, iString));
		    link9 = link;
	    } case 10: {
			format(iString, sizeof(iString), "UPDATE Configs SET Value = '%s' WHERE Option = 'Radio10'", DB_Escape(link));
		    db_free_result(db_query(sqliteconnection, iString));
		    link10 = link;
	    }
	}
//1=Hardcore NL, 2=ChartHits, 3=MUSIK.MAIN, 4=idobi, 5=DEFJAY US
//6=181.FM Hiphop, 7=Indian Radio HSL, 8=BlackBeats.FM, 9=TechnoBase.FM, 10=HouseTime.FM

	foreach(new i : Player) {
		if(Player[i][RadioID] == Param) {
			PlayAudioStreamForPlayer(i, link);
		}
	}

	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has changed Radio %d link to: {FFFFFF}%s", Player[playerid][Name], Param, link);
	SendClientMessageToAll(-1, iString);
    LogAdminCommand("setradio", playerid, INVALID_PLAYER_ID);
	return 1;
}


CMD:limit(playerid, params[])
{
    if(Player[playerid][Level] < 3 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be level 5 or rcon admin.");

	new Command[64], aLimit, CommandID, iString[180];
	#if PLUGINS == 1
    	if(sscanf(params, "s[64]d", Command, aLimit)) return SendUsageMessage(playerid,"/limit [weather | time] [Limit]");
	#else
    	if(sscanf(params, "sd", Command, aLimit)) return SendUsageMessage(playerid,"/limit [weather | time] [Limit]");
	#endif

	if(strcmp(Command, "weather", true) == 0) CommandID = 1;
	else if(strcmp(Command, "time", true) == 0) CommandID = 2;
	else return SendUsageMessage(playerid,"/limit [weather | time] [Limit]");

    if(aLimit < 10 || aLimit > 9999) return SendErrorMessage(playerid,"Invalid limit.");

	switch(CommandID) {
	    case 1: { //Weather
			WeatherLimit = aLimit;

			foreach(new i : Player) {
			    if(Player[i][Weather] > WeatherLimit) {

					Player[i][Weather] = 0;
					SetPlayerWeather(i, Player[i][Weather]);

					#if MYSQL == 0

					format(iString, sizeof(iString), "UPDATE Players SET Weather = %d WHERE Name = '%s'", Player[i][Weather], DB_Escape(Player[i][Name]));
				    db_free_result(db_query(sqliteconnection, iString));

					#else
					new EscapedName[MAX_PLAYER_NAME];
					sql_escape_string(sqlconnection, Player[i][Name], EscapedName);

					format(iString, sizeof(iString), "UPDATE `Players` SET `Weather` = %d WHERE `Name` = '%s'", Player[i][Weather], EscapedName);
					sql_query(sqlconnection, iString, QUERY_THREADED);

					#endif
				}
			}

			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has changed weather limit to: {FFFFFF}%d", Player[playerid][Name], WeatherLimit);
			SendClientMessageToAll(-1, iString);

	    } case 2: { //Time
	        TimeLimit = aLimit;

	        foreach(new i : Player) {
				if(Player[i][Time] > TimeLimit) {

				    Player[i][Time] = 12;
				    SetPlayerTime(playerid, Player[i][Time], 12);

					#if MYSQL == 0

					format(iString, sizeof(iString), "UPDATE Players SET Time = %d WHERE Name = '%s'", Player[i][Time], DB_Escape(Player[i][Name]));
				    db_free_result(db_query(sqliteconnection, iString));

					#else
					new EscapedName[MAX_PLAYER_NAME];
					sql_escape_string(sqlconnection, Player[i][Name], EscapedName);

					format(iString, sizeof(iString), "UPDATE `Players` SET `Time` = %d WHERE `Name` = '%s'", Player[i][Time], EscapedName);
					sql_query(sqlconnection, iString, QUERY_THREADED);

					#endif
				}
			}

			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has changed time limit to: {FFFFFF}%d",Player[playerid][Name], TimeLimit);
			SendClientMessageToAll(-1, iString);
	    }
	}
	LogAdminCommand("limit", playerid, INVALID_PLAYER_ID);
	return 1;
}

CMD:config(playerid, params[]) {
    if(Player[playerid][Level] < 5 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be level 5 or rcon admin.");

	ShowConfigDialog(playerid);
    LogAdminCommand("config", playerid, INVALID_PLAYER_ID);
	return 1;
}

#if ANTICHEAT == 1
CMD:eslac(playerid, params[])
{
	if(Player[playerid][Level] < 5 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be level 5 or rcon admin.");
	new iString[180];

	if(ESLAC == 1) {
	    ESLAC = 0;
		format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has disabled Anticheat from configs.", Player[playerid][Name]);
	} else {
	    ESLAC = 1;
		format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has enabled Anticheat from configs.", Player[playerid][Name]);
	}
	SendClientMessageToAll(-1, iString);

	format(iString, sizeof(iString), "UPDATE Configs SET Value = %d WHERE Option = 'Anticheat'", ESLAC);
    db_free_result(db_query(sqliteconnection, iString));
    LogAdminCommand("eslac", playerid, INVALID_PLAYER_ID);
	return 1;
}
#endif

CMD:textdraw(playerid, params[])
{
	if(Player[playerid][TextPos] == true) {
	    Player[playerid][TextPos] = false;
		SendClientMessage(playerid, -1, "Widescreen textdraw disabled.");
	} else {
	    Player[playerid][TextPos] = true;
		SendClientMessage(playerid, -1, "Widescreen textdraw enabled.");
	}

    HPArmourBaseID_VS_TD(playerid);

    PlayerTextDrawShow(playerid, HPTextDraw_TD);
    PlayerTextDrawShow(playerid, ArmourTextDraw);
	PlayerTextDrawShow(playerid, BaseID_VS);
	ShowPlayerProgressBar(playerid, HealthBar);
	ShowPlayerProgressBar(playerid, ArmourBar);

	new iString[160];
	if(Player[playerid][TextPos] == false) format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDamage ~r~%.0f~n~%sTotal Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[playerid][RoundKills], MAIN_TEXT_COLOUR, Player[playerid][RoundDamage], MAIN_TEXT_COLOUR, Player[playerid][TotalDamage]);
	else format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDmg ~r~%.0f~n~%sT. Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[playerid][RoundKills], MAIN_TEXT_COLOUR, Player[playerid][RoundDamage], MAIN_TEXT_COLOUR, Player[playerid][TotalDamage]);
	PlayerTextDrawSetString(playerid, RoundKillDmgTDmg, iString);

	#if MYSQL == 0

	format(iString, sizeof(iString), "UPDATE Players SET Widescreen = %d WHERE Name = '%s'", (Player[playerid][TextPos] == true ? 1 : 0), DB_Escape(Player[playerid][Name]));
    db_free_result(db_query(sqliteconnection, iString));

	#else
	new EscapedName[MAX_PLAYER_NAME];
	sql_escape_string(sqlconnection, Player[playerid][Name], EscapedName);

	format(iString, sizeof(iString), "UPDATE `Players` SET `Widescreen` = %d WHERE `Name` = '%s'", (Player[playerid][TextPos] == true ? 1 : 0), EscapedName);
	sql_query(sqlconnection, iString, QUERY_THREADED);

	#endif

	return 1;
}


CMD:base(playerid, params[])
{
	if(Player[playerid][Level] < 5 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be level 5 or rcon admin.");
    if(Current != -1) return SendErrorMessage(playerid,"Can't use this command while round is active.");

	new Params[2][64], BaseName[128], iString[256], CommandID;
	#if PLUGINS == 1
    	if(sscanf(params, "s[64]S()[64]S()[128]", Params[0], Params[1], BaseName)) return SendUsageMessage(playerid,"/base [create | att | def | cp | name | delete]");
	#else
    	if(sscanf(params, "szz", Params[0], Params[1], BaseName)) return SendUsageMessage(playerid,"/base [create | att | def | cp | name | delete]");
	#endif

	if(strcmp(Params[0], "create", true) == 0) CommandID = 1;
	else if(strcmp(Params[0], "att", true) == 0) CommandID = 2;
	else if(strcmp(Params[0], "def", true) == 0) CommandID = 3;
	else if(strcmp(Params[0], "cp", true) == 0) CommandID = 4;
	else if(strcmp(Params[0], "name", true) == 0) CommandID = 5;
	else if(strcmp(Params[0], "delete", true) == 0) CommandID = 6;
	else return SendUsageMessage(playerid,"/base [create | att | def | cp | name | delete]");

	switch(CommandID) {
	    case 1: {
	        format(iString, sizeof(iString), "SELECT ID FROM Bases ORDER BY `ID` DESC LIMIT 1");
			new DBResult:res = db_query(sqliteconnection, iString);

			new BaseID;
			if(db_num_rows(res)) {
				db_get_field_assoc(res, "ID", iString, sizeof(iString));
	    		BaseID = strval(iString)+1;
		    }
		    db_free_result(res);

		    if(BaseID > MAX_BASES) return SendErrorMessage(playerid,"Too many bases already created.");

			format(iString, sizeof(iString), "INSERT INTO Bases (ID, AttSpawn, CPSpawn, DefSpawn, Interior, Name) VALUES (%d, 0, 0, 0, 0, 'No Name')", BaseID);
			db_free_result(db_query(sqliteconnection, iString));

			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has created {FFFFFF}Base ID: %d", Player[playerid][Name], BaseID);
			SendClientMessageToAll(-1, iString);

			LoadBases();
			return 1;
	    } case 2: {
	        if(isnull(Params[1]) || !IsNumeric(Params[1])) return SendUsageMessage(playerid,"/base [att] [Base ID]");

			new baseid;
			baseid = strval(Params[1]);

			if(baseid > MAX_BASES) return SendErrorMessage(playerid,"That base doesn't exist.");
			if(!BExist[baseid]) return SendErrorMessage(playerid,"That base doesn't exist.");

			new Float:P[3], PositionA[128];
			GetPlayerPos(playerid, P[0], P[1], P[2]);
			format(PositionA, sizeof(PositionA), "%.0f,%.0f,%.0f", P[0], P[1], P[2]);

			format(iString, sizeof(iString), "UPDATE Bases SET AttSpawn = '%s' WHERE ID = %d", PositionA, baseid);
			db_free_result(db_query(sqliteconnection, iString));

			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has configured Attacker position for {FFFFFF}Base ID: %d", Player[playerid][Name], baseid);
			SendClientMessageToAll(-1, iString);

			LoadBases();
			return 1;
	    } case 3: {
	        if(isnull(Params[1]) || !IsNumeric(Params[1])) return SendUsageMessage(playerid,"/base [def] [Base ID]");

			new baseid;
			baseid = strval(Params[1]);

			if(baseid > MAX_BASES) return SendErrorMessage(playerid,"That base doesn't exist.");
			if(!BExist[baseid]) return SendErrorMessage(playerid,"That base doesn't exist.");

			new Float:P[3], PositionB[128];
			GetPlayerPos(playerid, P[0], P[1], P[2]);
			format(PositionB, sizeof(PositionB), "%.0f,%.0f,%.0f", P[0], P[1], P[2]);

			format(iString, sizeof(iString), "UPDATE Bases SET DefSpawn = '%s' WHERE ID = %d", PositionB, baseid);
			db_free_result(db_query(sqliteconnection, iString));

			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has configured Defender position for {FFFFFF}Base ID: %d", Player[playerid][Name], baseid);
			SendClientMessageToAll(-1, iString);

			LoadBases();
			return 1;
	    } case 4: {
	        if(isnull(Params[1]) || !IsNumeric(Params[1])) return SendUsageMessage(playerid,"/base [cp] [Base ID]");

			new baseid;
			baseid = strval(Params[1]);

			if(baseid > MAX_BASES) return SendErrorMessage(playerid,"That base doesn't exist.");
			if(!BExist[baseid]) return SendErrorMessage(playerid,"That base doesn't exist.");

			new Float:P[3], cp[128];
			GetPlayerPos(playerid, P[0], P[1], P[2]);
			format(cp, sizeof(cp), "%.0f,%.0f,%.0f", P[0], P[1], P[2]);

			format(iString, sizeof(iString), "UPDATE Bases SET CPSpawn = '%s', Interior = %d WHERE ID = %d", cp, GetPlayerInterior(playerid), baseid);
			db_free_result(db_query(sqliteconnection, iString));

			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has configured CP/Interior position for {FFFFFF}Base ID: %d", Player[playerid][Name], baseid);
			SendClientMessageToAll(-1, iString);

			LoadBases();
			return 1;
	    } case 5: {
	        if(isnull(Params[1]) || !IsNumeric(Params[1])) return SendUsageMessage(playerid,"/base [name] [Base ID] [Name]");
			if(isnull(BaseName)) return SendUsageMessage(playerid,"/base [name] [Base ID] [Name]");

			new baseid;
			baseid = strval(Params[1]);

			if(baseid > MAX_BASES) return SendErrorMessage(playerid,"That base doesn't exist.");
			if(!BExist[baseid]) return SendErrorMessage(playerid,"That base doesn't exist.");

			format(iString, sizeof(iString), "UPDATE Bases SET Name = '%s' WHERE ID = %d", BaseName, baseid);
			db_free_result(db_query(sqliteconnection, iString));

			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has configured Name for {FFFFFF}Base ID: %d", Player[playerid][Name], baseid);
			SendClientMessageToAll(-1, iString);

			LoadBases();
			return 1;
	    } case 6: {
	        if(isnull(Params[1]) || !IsNumeric(Params[1])) return SendUsageMessage(playerid,"/base [delete] [Base ID]");

			new baseid;
			baseid = strval(Params[1]);

			if(baseid > MAX_BASES) return SendErrorMessage(playerid,"That base doesn't exist.");
			if(!BExist[baseid]) return SendErrorMessage(playerid,"That base doesn't exist.");

			format(iString, sizeof(iString), "DELETE FROM Bases WHERE ID = %d", baseid);
			db_free_result(db_query(sqliteconnection, iString));

			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has deleted {FFFFFF}Base ID: %d", Player[playerid][Name], baseid);
			SendClientMessageToAll(-1, iString);

			LoadBases();
			return 1;
		}
	}
	return 1;
}





#if OBJECTS == 1
CMD:map(playerid, params[])
{
	if(Player[playerid][Playing] == true) return SendErrorMessage(playerid,"Can't use this command while playing.");
	if(Player[playerid][InDM] == true) return SendErrorMessage(playerid,"Can't use this command while in DM.");
	if(Player[playerid][InDuel] == true) return SendErrorMessage(playerid,"Can't use this command during duel. Use {FFFFFF}/rq "COL_PRIM"instead.");
	if(Player[playerid][Spectating] == true) return SendErrorMessage(playerid,"Can't use this command while spectating.");
	if(isnull(params) || !IsNumeric(params)) return SendUsageMessage(playerid,"/map [Map ID]");

	new Map = strval(params);
	if(Map < 0 || Map > 6) return SendErrorMessage(playerid,"Map ID is between 0 and 6.");

	switch(Map) {
	    case 0: {
			SetPlayerPos(playerid, 3762, -630, 2 + 5);
		} case 1: {
			SetPlayerPos(playerid, 3264, -819, 7 + 5);
		} case 2: {
			SetPlayerPos(playerid, -2050, -7609, 2 + 5);
		} case 3: {
			SetPlayerPos(playerid, 328, -2530, 6 + 5);
		} case 4: {
            SetPlayerPos(playerid, 456, -3455, 1 + 5);
		} case 5: {
		    SetPlayerPos(playerid, 1324, -4992, 12 + 5);
		} case 6: {
		    SetPlayerPos(playerid, -521, -3643, 7 + 5);
		}
	}
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);

	new iString[160];
	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has teleported to Map {FFFFFF}(ID: %d | /map).", Player[playerid][Name], Map);
	SendClientMessageToAll(-1, iString);


	return 1;
}
#endif


CMD:weaponlimit(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level to do that.");
    ShowWepLimit(playerid);
    LogAdminCommand("weaponlimit", playerid, INVALID_PLAYER_ID);
	return 1;
}

CMD:permlock(playerid, params[])
{
    if(Player[playerid][Level] < 5 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level to do that.");

	if(ServerLocked == false)
	{
	    SendErrorMessage(playerid,"Server must be locked first. Use /lock !");
	}
	else
	{
		new iString[128];
	    if(PermLocked == true)
		{
			PermLocked = false;
			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has disabled the server permanent lock!",Player[playerid][Name]);
			SendClientMessageToAll(-1, iString);
		}
		else
		{
		    PermLocked = true;
			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has made the server lock permanent!",Player[playerid][Name]);
			SendClientMessageToAll(-1, iString);
		}
	}
	LogAdminCommand("permlock", playerid, INVALID_PLAYER_ID);
	return 1;
}

CMD:lock(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level to do that.");

	new iString[128];
	if(ServerLocked == false) {

	    if(isnull(params)) return SendUsageMessage(playerid,"/lock [Password]");
		if(strlen(params) > 6) return SendErrorMessage(playerid,"Server password is too long.");

        format(ServerPass, sizeof(ServerPass), "password %s", params);
        SendRconCommand(ServerPass);

		ServerLocked = true;
		PermLocked = false;

		format(iString, sizeof(iString), "%sServer Pass: ~r~%s", MAIN_TEXT_COLOUR, params);
		TextDrawSetString(LockServerTD, iString);

		format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has locked the server. Password: {FFFFFF}%s",Player[playerid][Name], params);
		SendClientMessageToAll(-1, iString);

	} else {

		SendRconCommand("password 0");
		TextDrawSetString(LockServerTD, sprintf("%sServer: ~r~Unlocked", MAIN_TEXT_COLOUR));

		ServerLocked = false;
		PermLocked = false;

		format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has unlocked the server.", Player[playerid][Name]);
		SendClientMessageToAll(-1, iString);
	}
    LogAdminCommand("lock", playerid, INVALID_PLAYER_ID);
	return 1;
}

CMD:unlock(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level to do that.");
	if(ServerLocked == false) return SendErrorMessage(playerid,"Server is not locked.");

	new iString[160];
	SendRconCommand("password 0");
	TextDrawSetString(LockServerTD, sprintf("%sServer: ~r~Unlocked", MAIN_TEXT_COLOUR));

	ServerLocked = false;
	PermLocked = false;

	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has unlocked the server.", Player[playerid][Name]);
	SendClientMessageToAll(-1, iString);
    LogAdminCommand("unlock", playerid, INVALID_PLAYER_ID);
	return 1;
}

CMD:resetscores(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level to do that.");

	new iString[160];

    TeamScore[ATTACKER] = 0;
    TeamScore[DEFENDER] = 0;
    CurrentRound = 0;

	format(iString, sizeof(iString), "~r~%s %s(~r~%d%s)  ~b~~h~%s %s(~b~~h~%d%s)",TeamName[ATTACKER],MAIN_TEXT_COLOUR,TeamScore[ATTACKER],MAIN_TEXT_COLOUR,TeamName[DEFENDER],MAIN_TEXT_COLOUR,TeamScore[DEFENDER],MAIN_TEXT_COLOUR);
    TextDrawSetString(TeamScoreText, iString);

	format(iString, sizeof(iString), "%sRounds ~r~~h~%d~r~/~h~~h~%d", MAIN_TEXT_COLOUR, CurrentRound, TotalRounds);
	TextDrawSetString(RoundsPlayed, iString);

	ClearPlayerVariables();

	foreach(new i : Player) {
	    for(new j = 0; j < 55; j ++)
			Player[i][WeaponStat][j] = 0;
		Player[i][TotalKills] = 0;
		Player[i][TotalDeaths] = 0;
		Player[i][TotalDamage] = 0;
		Player[i][RoundPlayed] = 0;
	    Player[i][TotalBulletsFired] = 0;
	    Player[i][TotalshotsHit] = 0;
	}

	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has resetted the scores.", Player[playerid][Name]);
	SendClientMessageToAll(-1, iString);
	return 1;
}

/*
CMD:campos(playerid, params[])
{
	if(isnull(params)) {
		new Float:Pos[3];
		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);

		pX = Pos[0];
		pY = Pos[1];
		pZ = Pos[2];

		new iString[180];
		format(iString, sizeof(iString), "New Position saved: X= %.0f, Y: %.0f, Z: %.0f", pX, pY, pZ);
		SendClientMessage(playerid, -1, iString);
	} else {
		if(sscanf(params, "fff", pX, pY, pZ))  return 1;

		new iString[180];
		format(iString, sizeof(iString), "New Position saved: X= %.0f, Y: %.0f, Z: %.0f", pX, pY, pZ);
		SendClientMessage(playerid, -1, iString);
	}

	return 1;
}

*/


CMD:eslcmds(playerid, params[])
{
	SendClientMessage(playerid, -1, "{FFFFFF}------------------------------------------------------------------------------------------------------------------");
	SendClientMessage(playerid, -1, "{FFFFFF}ESL Commands:");
 	SendClientMessage(playerid, -1, "{FFFFFF}/ready, /voters (ResetScore), /votekick, /maxplayers, /1on1, /voteunpause, /voteadd, /unready, /topversus, /topduels");
  	SendClientMessage(playerid, -1, "{FFFFFF}/votenetcheck, /eslac");
    SendClientMessage(playerid, -1, "{FFFFFF}------------------------------------------------------------------------------------------------------------------");
    return 1;
}

#if STATS == 1 && MYSQL == 1
CMD:topversus(playerid, params[])
{
    StatsString = "";
	strcat(StatsString, ""COL_PRIM"Rank\t\tKills\t\tDeaths\t\tDamage\tRounds\t\tRounds\t\tRounds\t\tMatches\tMatches\tMatches\tAverage\tName\n");
	strcat(StatsString, "\t\t\t\t\t\t\t\tPlayed\t\tWon\t\tLost\t\tPlayed\t\tWon\t\tLost\t\tDamage\t\t\n");
    strcat(StatsString, "----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");



	for(new i = 0; i < MAX_STATS; i ++) if(strlen(VNames[i]) > 2) {
		new Float:AvDmg;

		if(VRoundsPlayed[i] > 0) {
			AvDmg = (VDamage[i] / VRoundsPlayed[i]);
		} else AvDmg = VDamage[i];

	    format(StatsString, sizeof(StatsString), "%s{FFFFFF}\n%d\t|\t%d\t|\t%d\t|\t%d\t|\t%d\t|\t%d\t|\t%d\t|\t%d\t|\t%d\t|\t%d\t|\t%.0f\t|\t%s", StatsString, i+1, VKills[i], VDeaths[i], VDamage[i], VRoundsPlayed[i], VRoundsWon[i], VRoundsLost[i], VMatchesPlayed[i], VMatchesWon[i], VMatchesLost[i], AvDmg, VNames[i]);
	}

	ShowPlayerDialog(playerid,DIALOG_VERSUS_STATS ,DIALOG_STYLE_MSGBOX,"{FFFFFF}VERSUS Stats", StatsString,"Close","");

	new iString[150];
	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has opened VERSUS stats. Use {FFFFFF}/topversus "COL_PRIM"for VERSUS stats.", Player[playerid][Name]);
	SendClientMessageToAll(-1, iString);

	return 1;
}

CMD:topduels(playerid, params[])
{
    StatsString = "";
	strcat(StatsString, ""COL_PRIM"Rank\t\tKills\t\tDeaths\t\tDamage\tRounds\t\tRounds\t\tRounds\t\tDuels\t\tDuels\t\tDuels\t\tAverage\tName\n");
	strcat(StatsString, "\t\t\t\t\t\t\t\tPlayed\t\tWon\t\tLost\t\tPlayed\t\tWon\t\tLost\t\tDamage\t\t\n");
    strcat(StatsString, "----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");

	for(new i = 0; i < MAX_STATS; i ++) if(strlen(DNames[i]) > 2) {
	    new Float:AvDmg;

		if(DRoundsPlayed[i] > 0) {
			AvDmg = (DDamage[i] / DRoundsPlayed[i]);
		} else AvDmg = DDamage[i];

	    format(StatsString, sizeof(StatsString), "%s{FFFFFF}\n%d\t|\t%d\t|\t%d\t|\t%d\t|\t%d\t|\t%d\t|\t%d\t|\t%d\t|\t%d\t|\t%d\t|\t%.0f\t|\t%s", StatsString, i+1, DKills[i], DDeaths[i], DDamage[i], DRoundsPlayed[i], DRoundsWon[i], DRoundsLost[i], DuelsPlayed[i], DuelsWon[i], DuelsLost[i], AvDmg, DNames[i]);
	}

	ShowPlayerDialog(playerid,DIALOG_DUEL_STATS ,DIALOG_STYLE_MSGBOX,"{FFFFFF}VERSUS Stats", StatsString,"Close","");

	new iString[150];
	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has opened Duel stats. Use {FFFFFF}/topduels "COL_PRIM"for Duel stats.", Player[playerid][Name]);
	SendClientMessageToAll(-1, iString);

	return 1;
}
#endif


/*
CMD:addexc(playerid, params[])
{
	if(Player[playerid][Level] < 4 && !IsPlayerAdmin(playerid)) return 1;
	if(isnull(params)) return SendUsageMessage(playerid,"/addexc [Name]");
	if(strlen(params) > MAX_PLAYER_NAME) return SendErrorMessage(playerid,"Invalid Name.");

	format(Exception, sizeof(Exception), params);

	new iString[160];
	format(iString, sizeof(iString), "The exception name was changed to: %s", Exception);
	SendClientMessage(playerid, -1, iString);
    LogAdminCommand("addexc", playerid, INVALID_PLAYER_ID);
	return 1;
}
*/

CMD:view(playerid, params[])
{
	if(Current != -1) return SendErrorMessage(playerid,"Can't use while round is on.");

	new Params[64], Round, CommandID, iString[256];
	#if PLUGINS == 1
    	if(sscanf(params, "s[64]d", Params, Round)) return SendUsageMessage(playerid,"/view [base | arena] [Round ID]");
	#else
    	if(sscanf(params, "sd", Params, Round)) return SendUsageMessage(playerid,"/view [base | arena] [Round ID]");
	#endif

	if(strcmp(Params, "base", true) == 0) CommandID = 1;
	else if(strcmp(Params, "arena", true) == 0) CommandID = 2;
//	else if(strcmp(Params, "duel", true) == 0) CommandID = 3;
	else return SendUsageMessage(playerid,"/view [base | arena] [Round ID]");

	if(Player[playerid][InDM] == true) {
	    Player[playerid][InDM] = false;
    	Player[playerid][DMReadd] = 0;
	}
	if(Player[playerid][InDuel] == true) return SendErrorMessage(playerid,"Can't use this command during duel. Use {FFFFFF}/rq "COL_PRIM"instead.");

	Player[playerid][AntiLag] = false;
	Player[playerid][InHeadShot] = false;

	if(Player[playerid][Spectating] == true) StopSpectate(playerid);

	Player[playerid][SpectatingRound] = Round;
	switch (CommandID) {
	    case 1: { //base
			if(Round > MAX_BASES) return SendErrorMessage(playerid,"That base does not exist.");
			if(!BExist[Round]) return SendErrorMessage(playerid,"That base does not exist.");

	        SetPlayerInterior(playerid, BInterior[Round]);
			SetPlayerCameraLookAt(playerid,BCPSpawn[Round][0],BCPSpawn[Round][1],BCPSpawn[Round][2]);
	   		SetPlayerCameraPos(playerid,BCPSpawn[Round][0]+100,BCPSpawn[Round][1],BCPSpawn[Round][2]+80);
			SetPlayerPos(playerid, BCPSpawn[Round][0], BCPSpawn[Round][1], BCPSpawn[Round][2]);

			Player[playerid][SpectatingType] = BASE;
			format(iString, sizeof(iString), "%sBase ~n~%s%s (ID: ~r~~h~%d%s)", MAIN_TEXT_COLOUR, MAIN_TEXT_COLOUR, BName[Round], Round, MAIN_TEXT_COLOUR);
			PlayerTextDrawSetString(playerid, TD_RoundSpec, iString);

	    	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"is spectating Base: {FFFFFF}%s (ID: %d)", Player[playerid][Name], BName[Round], Round);
	    } case 2: { // Arena
			if(Round > MAX_ARENAS) return SendErrorMessage(playerid,"That arena does not exist.");
			if(!AExist[Round]) return SendErrorMessage(playerid,"That arena does not exist.");

			SetPlayerCameraLookAt(playerid,ACPSpawn[Round][0],ACPSpawn[Round][1],ACPSpawn[Round][2]);
	   		SetPlayerCameraPos(playerid,ACPSpawn[Round][0]+100,ACPSpawn[Round][1],ACPSpawn[Round][2]+80);
			SetPlayerPos(playerid, ACPSpawn[Round][0], ACPSpawn[Round][1], ACPSpawn[Round][2]);
			SetPlayerInterior(playerid, AInterior[Round]);

			Player[playerid][SpectatingType] = ARENA;
			format(iString, sizeof(iString), "%sArena ~n~%s%s (ID: ~r~~h~%d%s)", MAIN_TEXT_COLOUR, MAIN_TEXT_COLOUR, AName[Round], Round, MAIN_TEXT_COLOUR);
			PlayerTextDrawSetString(playerid, TD_RoundSpec, iString);

	    	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"is spectating Arena: {FFFFFF}%s (ID: %d)", Player[playerid][Name], AName[Round], Round);
/*
	    } case 3: { // Duel
		    if(Round > MAX_DUELS) return SendErrorMessage(playerid,"That duel map does not exist.");
		    if(!DuelExists[Round]) return SendErrorMessage(playerid,"That duel map does not exist.");

			SetPlayerCameraLookAt(playerid,DuelCamera[Round][0],DuelCamera[Round][1],DuelCamera[Round][2]);
	   		SetPlayerCameraPos(playerid,DuelCamera[Round][0]+50,DuelCamera[Round][1],DuelCamera[Round][2]+50);
			SetPlayerPos(playerid, DuelCamera[Round][0], DuelCamera[Round][1], DuelCamera[Round][2]);
			SetPlayerInterior(playerid, DuelInterior[Round]);

			Player[playerid][SpectatingType] = DUEL;
			format(iString, sizeof(iString), "%sDuel ~n~%s%s (ID: ~r~~h~%d%s)", MAIN_TEXT_COLOUR, MAIN_TEXT_COLOUR, DuelName[Round], Round, MAIN_TEXT_COLOUR);
			PlayerTextDrawSetString(playerid, TD_RoundSpec, iString);

	    	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"is spectating Duel: {FFFFFF}%s (ID: %d)", Player[playerid][Name], DuelName[Round], Round);
*/
	    }

	}
	SendClientMessageToAll(-1, iString);
	SendClientMessage(playerid, -1, "Switch between rounds using LMB & RMB. Go normal mode using /specoff. Press Jump key to spawn in CP.");
	Player[playerid][Spectating] = true;

	return 1;
}

/*
CMD:createduel(playerid, params[])
{
	if(Player[playerid][Level] < 4 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be level 5 or rcon admin.");
    if(Current != -1) return SendErrorMessage(playerid,"Can't use this command while round is active.");

	new Params[4][64], iString[180], CommandID;

	#if PLUGINS == 1
    	if(sscanf(params, "s[64]S()[64]S()[64]S()[64]", Params[0], Params[1], Params[2], Params[3])) return SendUsageMessage(playerid,"/createduel [create | posa | posb | astart | aend | camera | name | delete | wep]");
	#else
    	if(sscanf(params, "szzz", Params[0], Params[1], Params[2], Params[3])) return SendUsageMessage(playerid,"/createduel [create | posa | posb | astart | aend | camera | name | delete | wep");
	#endif

	if(strcmp(Params[0], "create", true) == 0) CommandID = 1;
	else if(strcmp(Params[0], "posa", true) == 0) CommandID = 2;
	else if(strcmp(Params[0], "posb", true) == 0) CommandID = 3;
	else if(strcmp(Params[0], "camera", true) == 0) CommandID = 4;
	else if(strcmp(Params[0], "delete", true) == 0) CommandID = 5;
	else if(strcmp(Params[0], "name", true) == 0) CommandID = 6;
	else if(strcmp(Params[0], "astart", true) == 0) CommandID = 7;
	else if(strcmp(Params[0], "aend", true) == 0) CommandID = 8;
	else if(strcmp(Params[0], "wep", true) == 0) CommandID = 9;
	else return SendUsageMessage(playerid,"/createduel [create | posa | posb | astart | aend | camera | name | delete | wep]");

	switch(CommandID) {
	    case 1: {

	        new duelid = TotalDuels + 1;

		 	format(iString, sizeof(iString), "attackdefend/duels/%d.ini", duelid);
	 		dini_Create(iString);

			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has created {FFFFFF}Duel ID: %d", Player[playerid][Name], duelid);
			SendClientMessageToAll(-1, iString);

			LoadDuels();
			return 1;

		} case 2: {

			if(isnull(Params[1]) || !IsNumeric(Params[1])) return SendUsageMessage(playerid,"/createduel [ posa ] [ duel id ]");

			new duelid;
			duelid = strval(Params[1]);

			if(duelid > MAX_DUELS) return SendErrorMessage(playerid,"That duel map don't exist.");
			if(!DuelExists[duelid]) return SendErrorMessage(playerid,"That duel map don't exist.");

			new Float:P[4], DuelString[160];
			GetPlayerPos(playerid, P[0], P[1], P[2]);
			GetPlayerFacingAngle(playerid, P[3]);

			format(DuelString, sizeof(DuelString), "attackdefend/duels/%d.ini", duelid);
			format(iString, sizeof(iString), "%.0f,%.0f,%.0f,%.0f", P[0], P[1], P[2], P[3]);

			dini_Set(DuelString, "DuelPositionA", iString);

			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has configured Position A for {FFFFFF}Duel ID: %d", Player[playerid][Name], duelid);
			SendClientMessageToAll(-1, iString);

			LoadDuels();
			return 1;

		} case 3: {

			if(isnull(Params[1]) || !IsNumeric(Params[1])) return SendUsageMessage(playerid,"/createduel [ posb ] [ duel id ]");

			new duelid;
			duelid = strval(Params[1]);

			if(duelid > MAX_DUELS) return SendErrorMessage(playerid,"That duel map don't exist.");
			if(!DuelExists[duelid]) return SendErrorMessage(playerid,"That duel map don't exist.");

			new Float:P[4], DuelString[160];
			GetPlayerPos(playerid, P[0], P[1], P[2]);
			GetPlayerFacingAngle(playerid, P[3]);

			format(DuelString, sizeof(DuelString), "attackdefend/duels/%d.ini", duelid);
			format(iString, sizeof(iString), "%.0f,%.0f,%.0f,%.0f", P[0], P[1], P[2], P[3]);

            dini_Set(DuelString, "DuelPositionB", iString);

			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has configured Position B for {FFFFFF}Duel ID: %d", Player[playerid][Name], duelid);
			SendClientMessageToAll(-1, iString);

			LoadDuels();
			return 1;

		} case 4: {

			if(isnull(Params[1]) || !IsNumeric(Params[1])) return SendUsageMessage(playerid,"/createduel [ camera ] [ duel id ]");

			new duelid;
			duelid = strval(Params[1]);

			if(duelid > MAX_DUELS) return SendErrorMessage(playerid,"That duel map don't exist.");
			if(!DuelExists[duelid]) return SendErrorMessage(playerid,"That duel map don't exist.");

			new Float:P[3], DuelString[160];
			GetPlayerPos(playerid, P[0], P[1], P[2]);

			format(DuelString, sizeof(DuelString), "attackdefend/duels/%d.ini", duelid);
			format(iString, sizeof(iString), "%.0f,%.0f,%.0f", P[0], P[1], P[2]);

			dini_Set(DuelString, "DuelCamera", iString);
			dini_IntSet(DuelString, "Interior", GetPlayerInterior(playerid));

			if(GetPlayerInterior(playerid) != 0) {
				dini_Set(DuelString, "DuelMax", "9999, 9999");
	            dini_Set(DuelString, "DuelMin", "-9999, -9999");
			}

			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has configured Camera location for {FFFFFF}Duel ID: %d", Player[playerid][Name], duelid);
			SendClientMessageToAll(-1, iString);

			LoadDuels();
			return 1;

		} case 5: {

			if(isnull(Params[1]) || !IsNumeric(Params[1])) return SendUsageMessage(playerid,"/createduel [ delete ] [ duel id ]");

			new duelid;
			duelid = strval(Params[1]);

			if(!dini_Exists(DuelFile(duelid))){
				return SendErrorMessage(playerid,"That duel map don't exist.");
			} else {
				dini_Remove(DuelFile(duelid));
			}

			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has deleted {FFFFFF}Duel ID: %d", Player[playerid][Name], duelid);
			SendClientMessageToAll(-1, iString);

			LoadDuels();
			return 1;

		} case 6: {

			if(isnull(Params[1]) || !IsNumeric(Params[1])) return SendUsageMessage(playerid,"/createduel [ name ] [ duel id ]");

			new duelid;
			duelid = strval(Params[1]);

			if(duelid > MAX_DUELS) return SendErrorMessage(playerid,"That duel map don't exist.");
			if(!DuelExists[duelid]) return SendErrorMessage(playerid,"That duel map don't exist.");

			DuelIDForName = duelid;
			format(CreateDuelString, sizeof(CreateDuelString), "attackdefend/duels/%d.ini", duelid);

			format(iString, sizeof(iString), ""COL_PRIM"Enter duel map name below for {FFFFFF}Duel ID: %d", duelid);
			ShowPlayerDialog(playerid, DIALOG_DUEL_NAME, DIALOG_STYLE_INPUT,"{FFFFFF}Duel Map Name", iString, "Okay", "Close");

			return 1;
		} case 7: {

			if(isnull(Params[1]) || !IsNumeric(Params[1])) return SendUsageMessage(playerid,"/createduel [ astart ] [ duel id ]");
			if(GetPlayerInterior(playerid) != 0) return SendErrorMessage(playerid,"You don't need AreaCheck for an interior.");

			new duelid;
			duelid = strval(Params[1]);

			if(duelid > MAX_DUELS) return SendErrorMessage(playerid,"That duel map don't exist.");
			if(!DuelExists[duelid]) return SendErrorMessage(playerid,"That duel map don't exist.");

			new Float:P[3];
			GetPlayerPos(playerid, P[0], P[1], P[2]);

			format(iString, sizeof(iString), "attackdefend/duels/%d.ini",duelid);

			ZMax[0] = P[0];
			ZMin[1] = P[1];

			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has configured AreaCheck Start-Location for {FFFFFF}Duel ID: %d", Player[playerid][Name], duelid);
			SendClientMessageToAll(-1, iString);

			return 1;

		} case 8: {

			if(isnull(Params[1]) || !IsNumeric(Params[1])) return SendUsageMessage(playerid,"/createduel [ aend ] [ duel id ]");
			if(ZMax[0] == -1 || ZMin[1] == -1) return SendErrorMessage(playerid,"Start of AreaCheck has not been saved. Use /createduel [astart]");

			new duelid;
			duelid = strval(Params[1]);

			if(duelid > MAX_DUELS) return SendErrorMessage(playerid,"That duel map don't exist.");
			if(!DuelExists[duelid]) return SendErrorMessage(playerid,"That duel map don't exist.");

			new Float:P[3], DuelString[128];
			GetPlayerPos(playerid, P[0], P[1], P[2]);

			format(DuelString, sizeof(DuelString), "attackdefend/duels/%d.ini", duelid);

			ZMin[0] = P[0];
			ZMax[1] = P[1];

			if(ZMax[0] < ZMin[0]) {
			    if(ZMax[1] < ZMin[1]) {
					format(iString, sizeof(iString), "%.0f,%.0f", ZMin[0], ZMin[1]);
					dini_Set(DuelString,"DuelMax", iString);

					format(iString, sizeof(iString), "%.0f,%.0f", ZMax[0], ZMax[1]);
		            dini_Set(DuelString,"DuelMin",iString);
				} else {
					format(iString, sizeof(iString), "%.0f,%.0f", ZMin[0], ZMax[1]);
					dini_Set(DuelString,"DuelMax", iString);

					format(iString, sizeof(iString), "%.0f,%.0f", ZMax[0], ZMin[1]);
		            dini_Set(DuelString,"DuelMin", iString);
				}
			} else {
			    if(ZMax[1] > ZMin[1]) {
					format(iString, sizeof(iString), "%.0f,%.0f", ZMax[0], ZMax[1]);
					dini_Set(DuelString,"DuelMax", iString);

					format(iString, sizeof(iString), "%.0f,%.0f", ZMin[0], ZMin[1]);
		            dini_Set(DuelString,"DuelMin", iString);
				} else {
					format(iString, sizeof(iString), "%.0f,%.0f", ZMax[0], ZMin[1]);
					dini_Set(DuelString,"DuelMax", iString);

					format(iString, sizeof(iString), "%.0f,%.0f", ZMin[0], ZMax[1]);
		            dini_Set(DuelString,"DuelMin", iString);
				}
			}

			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has configured AreaCheck End-Location for {FFFFFF}Duel ID: %d", Player[playerid][Name], duelid);
			SendClientMessageToAll(-1, iString);

			LoadDuels();

			ZMin[0] = -1;
			ZMin[1] = -1;
			ZMax[0] = -1;
			ZMax[1] = -1;
		} case 9: {

			if(isnull(Params[1])) return SendUsageMessage(playerid,"/createduel [ wep ] [ duel id ] [ First Weapon ] [ Second Weapon (Optional)]");

			new duelid;
			duelid = strval(Params[1]);

			if(duelid > MAX_DUELS) return SendErrorMessage(playerid,"That duel map don't exist.");
			if(!DuelExists[duelid]) return SendErrorMessage(playerid,"That duel map don't exist.");

			new Weapon[2], DuelString[160];
			Weapon[0] = GetWeaponID(Params[2]);
	 		if(Weapon[0] < 0 || Weapon[0] > 46 || Weapon[0] == 19 || Weapon[0] == 20 || Weapon[0] == 21 || Weapon[0] == 22) return SendErrorMessage(playerid,"Invalid first weapon name.");

			if(!isnull(Params[3])) {
				Weapon[1] = GetWeaponID(Params[3]);
	 			if(Weapon[1] < 0 || Weapon[1] > 46 || Weapon[1] == 19 || Weapon[1] == 20 || Weapon[1] == 21 || Weapon[1] == 22) return SendErrorMessage(playerid,"Invalid second weapon name.");
			} else Weapon[1] = 0;

			format(DuelString, sizeof(DuelString), "attackdefend/duels/%d.ini", duelid);
			format(iString, sizeof(iString), "%d,%d", Weapon[0], Weapon[1]);

            dini_Set(DuelString, "DuelWeapons", iString);

			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has configured Weapons for {FFFFFF}Duel ID: %d "COL_PRIM"to {FFFFFF}Weapons: %s & %s", Player[playerid][Name], duelid, WeaponNames[Weapon[0]], WeaponNames[Weapon[1]]);
			SendClientMessageToAll(-1, iString);

			LoadDuels();
			return 1;

		}
	}
    LogAdminCommand("createduel", playerid, INVALID_PLAYER_ID);
	return 1;
}
*/


CMD:maxplayers(playerid, params[])
{
	if(Player[playerid][Level] < 5 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be level 5 or rcon admin.");
    if(isnull(params) || !IsNumeric(params)) return SendUsageMessage(playerid,"/maxplayers [Amount]");

	new Max = strval(params);
	if(Max < 1 || Max > 15) return SendErrorMessage(playerid,"Invalid amount.");

	MaxESLPlayers = Max;

	new iString[160];
	format(iString, sizeof(iString), "UPDATE Configs SET Value = %d WHERE Option = 'Maximum ESL Players'", MaxESLPlayers);
    db_free_result(db_query(sqliteconnection, iString));

	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has changed Max ESL Players to: {FFFFFF}%d", Player[playerid][Name], MaxESLPlayers);
	SendClientMessageToAll(-1, iString);
    LogAdminCommand("maxplayers", playerid, INVALID_PLAYER_ID);
    return 1;
}

CMD:1on1(playerid, params[])
{
	if(Player[playerid][Level] < 5 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be level 5 or rcon admin.");
	if(ESLMode == false) return SendErrorMessage(playerid,"ESL Mode must be enabled.");
	if(Current != -1) return SendErrorMessage(playerid,"Can't use the command while round is on.");

	new iString[160];

	if(OneOnOne == false) {
	    OneOnOne = true;
	    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has enabled {FFFFFF}One-On-One "COL_PRIM"mode.", Player[playerid][Name]);
	} else {
	    OneOnOne = false;
	    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has disabled {FFFFFF}One-On-One "COL_PRIM"mode.", Player[playerid][Name]);
	}
	SendClientMessageToAll(-1, iString);

	format(iString, sizeof(iString), "UPDATE Configs SET Value = %d WHERE Option = 'One On One'", (OneOnOne == true ? 1 : 0));
    db_free_result(db_query(sqliteconnection, iString));

    TeamScore[ATTACKER] = 0;
    TeamScore[DEFENDER] = 0;

    CurrentRound = 0;
    if(OneOnOne == false) TotalRounds = 5;
    else TotalRounds = 19;



	TeamName[ATTACKER] = "Alpha";
	TeamName[ATTACKER_SUB] = "Alpha Sub";
	TeamName[DEFENDER] = "Beta";
	TeamName[DEFENDER_SUB] = "Beta Sub";

	format(iString, sizeof(iString), "~r~%s %s(~r~%d%s)  ~b~~h~%s %s(~b~~h~%d%s)",TeamName[ATTACKER],MAIN_TEXT_COLOUR,TeamScore[ATTACKER],TeamName[DEFENDER],MAIN_TEXT_COLOUR,TeamScore[DEFENDER],MAIN_TEXT_COLOUR);
    TextDrawSetString(TeamScoreText, iString);

	format(iString, sizeof(iString), "%sRounds ~r~~h~%d~r~/~h~~h~%d", MAIN_TEXT_COLOUR, CurrentRound, TotalRounds);
	TextDrawSetString(RoundsPlayed, iString);

	WarMode = true;
    format(iString, sizeof iString, "%sWar Mode: ~r~ON", MAIN_TEXT_COLOUR);
	TextDrawSetString(WarModeText, iString);
    LogAdminCommand("1on1", playerid, INVALID_PLAYER_ID);
	return 1;
}

/*
CMD:votekick(playerid, params[])
{
    if(ESLMode == false) return SendErrorMessage(playerid,"ESL mode is not enabled.");
	if(isnull(params) || !IsNumeric(params)) return SendUsageMessage(playerid,"/votekick [Player ID]");
	if(Player[playerid][Team] == REFEREE) return SendErrorMessage(playerid,"You must be part of either Alpha or Beta team.");

  	new pID;
	pID = strval(params);

	if(!IsPlayerConnected(pID)) return SendErrorMessage(playerid,"That player is not connected.");
	if(pID == playerid) return SendErrorMessage(playerid,"Can't vote for yourself.");

	Player[playerid][Votekick] = pID;

	new PlayersVoted = 0;
	new TotalPlayers = 0;

	foreach(new i : Player) {
		if(Player[i][Votekick] == pID) {
		    PlayersVoted++;
		}

		if((Player[i][Team] == ATTACKER || Player[i][Team] == DEFENDER) && i != pID) {
		    TotalPlayers++;
		}
	}

	new iString[160];
	if(OneOnOne == false) {
		format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has voted to kick: {FFFFFF}%s (ID: %d) | %d / %d", Player[playerid][Name], Player[pID][Name], pID, PlayersVoted, (MaxESLPlayers-1));
		SendClientMessageToAll(-1, iString);

	    if(PlayersVoted >= MaxESLPlayers-1) {
	        format(iString, sizeof(iString), ""COL_PRIM"%s {FFFFFF}has been successfully votekicked.", Player[pID][Name]);
	        SendClientMessageToAll(-1, iString);
	        SetTimerEx("OnPlayerKicked", 500, false, "i", pID);

        	foreach(new i : Player) {
				Player[i][Votekick] = -1;
			}
	    }
	} else {
		format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has voted to kick: {FFFFFF}%s (ID: %d) | %d / %d", Player[playerid][Name], Player[pID][Name], pID, PlayersVoted, TotalPlayers);
		SendClientMessageToAll(-1, iString);

	    if(PlayersVoted >= TotalPlayers && TotalPlayers > 1) {
	        format(iString, sizeof(iString), ""COL_PRIM"%s {FFFFFF}has been successfully votekicked.", Player[pID][Name]);
	        SendClientMessageToAll(-1, iString);
	        SetTimerEx("OnPlayerKicked", 500, false, "i", pID);

        	foreach(new i : Player) {
				Player[i][Votekick] = -1;
			}
	    }
	}

	return 1;
}
*/

CMD:votekick(playerid, params[])
{
	if(ESLMode == false) return SendErrorMessage(playerid,"ESL mode is not enabled.");

    if(VoteKickedPlayer < 0) {
        if(sscanf(params, "u", VoteKickedPlayer) && VoteKickedPlayer != playerid) return SendUsageMessage(playerid,"/votekick [playerid]");
    }

	if(Player[playerid][Votekick] < 0) {

	    Player[playerid][Votekick] = VoteKickedPlayer;
	    VotesForVotekick++;

	    if(VotesForVotekick == 1) {
	        new str[160];
	        format(str, sizeof(str), ""COL_PRIM"%s {FFFFFF}has started a votekick for "COL_PRIM"%s{FFFFFF} Type "COL_PRIM"/votekick {FFFFFF}to kick this player.", Player[playerid][Name], Player[VoteKickedPlayer][Name]);
			SendClientMessageToAll(-1, str);
	        SetTimer("VotekickExpire", 60000, 0);

	        return 1;
	    }

		if(OneOnOne == false) {
		    if(VotesForVotekick >= MaxESLPlayers-1) {
		        new str[128];
		        format(str, sizeof(str), ""COL_PRIM"%s {FFFFFF}has been successfully votekicked.", Player[VoteKickedPlayer][Name]);
		        SendClientMessageToAll(-1, str);
		        SetTimerEx("OnPlayerKicked", 500, false, "i", VoteKickedPlayer);

		    } else {
		        new str[128];
		        format(str, sizeof(str), ""COL_PRIM"%s {FFFFFF}has voted to kick: "COL_PRIM"%s", Player[playerid][Name], Player[VoteKickedPlayer][Name]);
		        SendClientMessageToAll(-1, str);
		        return 1;
		    }
		} else {
			new attackers, defenders;
			foreach(new i : Player) {
		        if(Player[i][Team] == ATTACKER) attackers++;
		        else if(Player[i][Team] == DEFENDER) defenders++;
			}

		    if(VotesForVotekick >= (attackers+defenders)-1) {
		        new str[128];
		        format(str, sizeof(str), ""COL_PRIM"%s {FFFFFF}has been successfully votekicked.", Player[VoteKickedPlayer][Name]);
		        SendClientMessageToAll(-1, str);
		        SetTimerEx("OnPlayerKicked", 500, false, "i", VoteKickedPlayer);

		    } else {
		        new str[128];
		        format(str, sizeof(str), ""COL_PRIM"%s {FFFFFF}has voted to kick: "COL_PRIM"%s", Player[playerid][Name], Player[VoteKickedPlayer][Name]);
		        SendClientMessageToAll(-1, str);
		        return 1;
		    }
		}

	} else {
        SendErrorMessage(playerid,"You already voted in this votekick.");
	}
	return 1;
}



CMD:voteadd(playerid, params[])
{
	if(ESLMode == false) return SendErrorMessage(playerid,"ESL mode is not enabled.");
	if(Player[playerid][Playing] == false) return SendErrorMessage(playerid,"Can't use the command when not playing.");
	if(OneOnOne == true) return SendErrorMessage(playerid,"Can't use this command when 1on1 is enabled.");
	if(isnull(params) || !IsNumeric(params)) return SendUsageMessage(playerid,"/voteadd [Player ID]");
	if(Player[playerid][Team] == REFEREE) return 1;

	new pID;
	pID = strval(params);

	if(!IsPlayerConnected(pID)) return SendErrorMessage(playerid,"That player is not connected.");
	if(pID == playerid) return SendErrorMessage(playerid,"Can't vote for yourself.");

	if(Player[pID][Team] == ATTACKER || Player[pID][Team] == DEFENDER) {
		Player[playerid][VoteToAddID] = pID;

		new PlayersVoted = 0;
		new TotalPlayers = 0;

		foreach(new i : Player) {
			if(Player[i][VoteToAddID] == pID) {
			    PlayersVoted++;
			}

			if(Player[i][Playing] == true && (Player[i][Team] == ATTACKER || Player[i][Team] == DEFENDER) && i != pID) {
			    TotalPlayers++;
			}
		}

		new iString[160];
		format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has voted to add: {FFFFFF}%s (ID: %d) | %d / %d", Player[playerid][Name], Player[pID][Name], pID, PlayersVoted, TotalPlayers);
		SendClientMessageToAll(-1, iString);

		if(PlayersVoted >= TotalPlayers && PlayersAlive[ATTACKER] > 0 && PlayersAlive[DEFENDER] > 0 && TotalPlayers > 1) {
			if(Player[pID][Playing] == true) {
			    Player[pID][TotalKills] = Player[pID][TotalKills] - Player[pID][RoundKills];
			    Player[pID][TotalDeaths] = Player[pID][TotalDeaths] - Player[pID][RoundDeaths];
				Player[pID][TotalDamage] = Player[pID][TotalDamage] - Player[pID][RoundDamage];

			}
			if(GameType == BASE) AddPlayerToBase(pID);
			else if(GameType == ARENA) AddPlayerToArena(pID);

		    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has been added/re-added to the round.", Player[pID][Name]);
		    SendClientMessageToAll(-1, iString);

		    foreach(new i : Player) {
		        Player[i][VoteToAddID] = -1;
			}
		}
	} else {
    	SendErrorMessage(playerid,"That player must be part of either Alpha or Beta team.");
	}

	return 1;
}

CMD:votenetcheck(playerid, params[])
{
	if(ESLMode == false) return SendErrorMessage(playerid,"ESL mode is not enabled.");
	if(OneOnOne == true) return SendErrorMessage(playerid,"Can't use this command when 1on1 is enabled.");
	if(isnull(params) || !IsNumeric(params)) return SendUsageMessage(playerid,"/votenetcheck [Player ID]");
	if(Player[playerid][Team] == REFEREE) return 1;

	new pID;
	pID = strval(params);

	if(!IsPlayerConnected(pID)) return SendErrorMessage(playerid,"That player is not connected.");
	if(pID == playerid) return SendErrorMessage(playerid,"Can't vote for yourself.");
	if(Player[pID][NetCheck] == 0) return SendErrorMessage(playerid,"Net-Check is already disabled for that player.");

	if(Player[playerid][Team] == ATTACKER || Player[playerid][Team] == DEFENDER) {
		if(Player[pID][Team] == ATTACKER || Player[pID][Team] == DEFENDER) {
			Player[playerid][VoteToNetCheck] = pID;

			new PlayersVoted = 0;
//			new TotalPlayers = 0;

			foreach(new i : Player) {
				if(Player[i][VoteToNetCheck] == pID) {
				    PlayersVoted++;
				}

//				if((Player[i][Team] == ATTACKER || Player[i][Team] == DEFENDER) && i != pID) {
//				    TotalPlayers++;
//				}
			}

			new iString[160];
			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has voted to disable Net-Check on: {FFFFFF}%s (ID: %d) | %d / %d (Command: /votenetcheck)", Player[playerid][Name], Player[pID][Name], pID, PlayersVoted, (MaxESLPlayers-1));
			SendClientMessageToAll(-1, iString);

			if(PlayersVoted >= (MaxESLPlayers - 1)) {
                Player[pID][NetCheck] = 0;

			    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"will not be kicked for FPS/Ping/Packetloss, Net-Check disabled.", Player[pID][Name]);
			    SendClientMessageToAll(-1, iString);

			    foreach(new i : Player) {
			        Player[i][VoteToNetCheck] = -1;
				}
			}
		} else {
	    	SendErrorMessage(playerid,"That player must be part of either Alpha or Beta team.");
		}
	} else {
	    SendErrorMessage(playerid,"You must be part of either Alpha or Beta team to vote.");
	}
	return 1;
}


CMD:netcheck(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level to do that.");
	if(isnull(params) || !IsNumeric(params)) return SendUsageMessage(playerid,"/netcheck [Player ID]");

	new pID = strval(params);
	if(!IsPlayerConnected(pID)) return SendErrorMessage(playerid,"That player is not connected.");
	if(Player[pID][Level] >= Player[playerid][Level] && pID != playerid) return SendErrorMessage(playerid,"That player is same or higher admin level than you.");


	new iString[180];
	if(Player[pID][NetCheck] == 1) {
	    Player[pID][NetCheck] = 0;
	    Player[pID][FPSCheck] = 0;
	    Player[pID][PingCheck] = 0;
	    Player[pID][PLCheck] = 0;
	    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has disabled Net-Check on: {FFFFFF}%s", Player[playerid][Name], Player[pID][Name]);
	} else {
	    Player[pID][NetCheck] = 1;
	    Player[pID][FPSCheck] = 1;
	    Player[pID][PingCheck] = 1;
	    Player[pID][PLCheck] = 1;
	    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has enabled Net-Check on: {FFFFFF}%s", Player[playerid][Name], Player[pID][Name]);
	}
	SendClientMessageToAll(-1, iString);

	#if MYSQL == 1
	new EscapedName[MAX_PLAYER_NAME];
	sql_escape_string(sqlconnection, Player[pID][Name], EscapedName);

	format(iString, sizeof(iString), "UPDATE `Players` SET `NetCheck` = %d WHERE `Name` = '%s'", Player[pID][NetCheck], EscapedName);
	sql_query(sqlconnection, iString, QUERY_THREADED);

	#else

	format(iString, sizeof(iString), "UPDATE Players SET NetCheck = %d WHERE Name = '%s'", Player[pID][NetCheck], DB_Escape(Player[pID][Name]));
    db_free_result(db_query(sqliteconnection, iString));

	#endif
    LogAdminCommand("netcheck", playerid, pID);
	return 1;
}

CMD:fpscheck(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level to do that.");
	if(isnull(params) || !IsNumeric(params)) return SendUsageMessage(playerid,"/fpscheck [Player ID]");

	new pID = strval(params);
	if(!IsPlayerConnected(pID)) return SendErrorMessage(playerid,"That player is not connected.");
	if(Player[pID][NetCheck] == 0) return SendErrorMessage(playerid, "That player has netcheck disabled on him.");
	if(Player[pID][Level] >= Player[playerid][Level] && pID != playerid) return SendErrorMessage(playerid,"That player is same or higher admin level than you.");


	new iString[180];
	if(Player[pID][FPSCheck] == 1) {
	    Player[pID][FPSCheck] = 0;
	    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has disabled FPS-Check on: {FFFFFF}%s", Player[playerid][Name], Player[pID][Name]);
	} else {
	    Player[pID][FPSCheck] = 1;
	    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has enabled FPS-Check on: {FFFFFF}%s", Player[playerid][Name], Player[pID][Name]);
	}
	SendClientMessageToAll(-1, iString);
    LogAdminCommand("fpscheck", playerid, pID);
	return 1;
}

CMD:pingcheck(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level to do that.");
	if(isnull(params) || !IsNumeric(params)) return SendUsageMessage(playerid,"/pingcheck [Player ID]");

	new pID = strval(params);
	if(!IsPlayerConnected(pID)) return SendErrorMessage(playerid,"That player is not connected.");
	if(Player[pID][NetCheck] == 0) return SendErrorMessage(playerid, "That player has netcheck disabled on him.");
	if(Player[pID][Level] >= Player[playerid][Level] && pID != playerid) return SendErrorMessage(playerid,"That player is same or higher admin level than you.");


	new iString[180];
	if(Player[pID][PingCheck] == 1) {
	    Player[pID][PingCheck] = 0;
	    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has disabled Ping-Check on: {FFFFFF}%s", Player[playerid][Name], Player[pID][Name]);
	} else {
	    Player[pID][PingCheck] = 1;
	    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has enabled Ping-Check on: {FFFFFF}%s", Player[playerid][Name], Player[pID][Name]);
	}
	SendClientMessageToAll(-1, iString);
    LogAdminCommand("pingcheck", playerid, pID);
	return 1;
}

CMD:plcheck(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level to do that.");
	if(isnull(params) || !IsNumeric(params)) return SendUsageMessage(playerid,"/plcheck [Player ID]");

	new pID = strval(params);
	if(!IsPlayerConnected(pID)) return SendErrorMessage(playerid,"That player is not connected.");
	if(Player[pID][NetCheck] == 0) return SendErrorMessage(playerid, "That player has netcheck disabled on him.");
	if(Player[pID][Level] >= Player[playerid][Level] && pID != playerid) return SendErrorMessage(playerid,"That player is same or higher admin level than you.");


	new iString[180];
	if(Player[pID][PLCheck] == 1) {
	    Player[pID][PLCheck] = 0;
	    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has disabled PL-Check on: {FFFFFF}%s", Player[playerid][Name], Player[pID][Name]);
	} else {
	    Player[pID][PLCheck] = 1;
	    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has enabled PL-Check on: {FFFFFF}%s", Player[playerid][Name], Player[pID][Name]);
	}
	SendClientMessageToAll(-1, iString);
    LogAdminCommand("plcheck", playerid, pID);
	return 1;
}

CMD:voteunpause(playerid, params[])
{
	if(ESLMode == false) return SendErrorMessage(playerid,"ESL mode is not enabled.");
	if(Player[playerid][Playing] == false) return SendErrorMessage(playerid,"Can't use the command if not playing.");
	if(RoundUnpausing == true) return 1;
	if(RoundPaused == false) return SendErrorMessage(playerid,"Round is not paused.");

	Player[playerid][VoteToUnpause] = true;

	new VotesForUnpause, Attackers, Defenders;
	foreach(new i : Player) {
	    if(Player[i][VoteToUnpause] == true) {
	        VotesForUnpause++;
		}
		if(Player[i][Playing] == true) {
		    switch(Player[i][Team]) {
		        case ATTACKER: Attackers++;
				case DEFENDER: Defenders++;
			}
		}
	}

	new iString[160];
	format(iString, sizeof(iString), "%s%s {FFFFFF}has voted to unpause the round .: %d / %d | {FF4444}%s{FFFFFF}: %d - {3388FF}%s{FFFFFF}: %d :.",TextColor[Player[playerid][Team]], Player[playerid][Name], VotesForUnpause, (Attackers+Defenders), TeamName[ATTACKER], Attackers, TeamName[DEFENDER], Defenders);
	SendClientMessageToAll(-1, iString);

	if(VotesForUnpause >= (Attackers+Defenders) && PlayersAlive[ATTACKER] > 0 && PlayersAlive[DEFENDER] > 0) {
		PauseCountdown = 4;
		UnpauseRound();

		SendClientMessageToAll(-1, "Round is Unpausing...");
	}

	return 1;
}

CMD:ready(playerid, params[])
{
	if(ESLMode == false) return SendErrorMessage(playerid,"ESL mode is not enabled.");
    if(AllowStartBase == false) return SendErrorMessage(playerid,"Please wait for the current round to end.");
	if(Current != -1) return SendErrorMessage(playerid,"Please wait for the current round to end.");

	if(Player[playerid][Team] == ATTACKER || Player[playerid][Team] == DEFENDER) {
//		if(Player[playerid][Readied] == true) return SendErrorMessage(playerid,"You are already set to ready.");

		Player[playerid][Readied] = true;

		new playersReady = 0;
		new attackers, defenders, iString[180];

		foreach(new i : Player) {
		    if(Player[i][Team] == ATTACKER || Player[i][Team] == DEFENDER) {
				if(Player[i][Readied] == true) {
		            playersReady++;
				}

				if(Player[i][Team] == DEFENDER) {
			        defenders++;
				} else if(Player[i][Team] == ATTACKER) {
				    attackers++;
				}
			} else {
			    Player[i][Readied] = false;
			}
		}

		if(OneOnOne == false) {
			format(iString, sizeof(iString), "%s%s {FFFFFF}is set to ready mode {FFFFFF}.: %d / %d | {FF4444}%s{FFFFFF}: %d - {3388FF}%s{FFFFFF}: %d :.",TextColor[Player[playerid][Team]], Player[playerid][Name], playersReady, MaxESLPlayers, TeamName[ATTACKER], attackers, TeamName[DEFENDER], defenders);
		} else {
			format(iString, sizeof(iString), "%s%s {FFFFFF}is set to ready mode {FFFFFF}.: %d / %d | {FF4444}%s{FFFFFF}: %d - {3388FF}%s{FFFFFF}: %d :.",TextColor[Player[playerid][Team]], Player[playerid][Name], playersReady, (attackers + defenders), TeamName[ATTACKER], attackers, TeamName[DEFENDER], defenders);
		}
		SendClientMessageToAll(-1, iString);

		if(playersReady >= MaxESLPlayers && attackers == defenders && OneOnOne == false) {
			if(CurrentRound != (TotalRounds - 1)) {
			    new BaseID = DetermineRandomRound(2, 0, BASE);

				if(BaseID == -1) {
				    for(new i = 0; i < MAX_BASES; i++) {
						RecentBase[i] = -1;
					}
					BasesPlayed = 0;
					BaseID = DetermineRandomRound(2, 0, BASE);
				}

				AllowStartBase = false;
				SetTimerEx("OnBaseStart", 4000, false, "i", BaseID);
                Current = BaseID;

				format(iString, sizeof(iString), "{FFFFFF}System "COL_PRIM"has randomly started Base: {FFFFFF}%s (ID: %d)", BName[BaseID], BaseID);
				SendClientMessageToAll(-1, iString);

				GameType = BASE;
			} else {
				new ArenaID = 1;
                Current = ArenaID;

				AllowStartBase = false; // Make sure other player or you yourself is not able to start base on top of another base.
				SetTimerEx("OnArenaStart", 4000, false, "i", ArenaID);

				format(iString, sizeof(iString), "{FFFFFF}System "COL_PRIM"has started Arena: {FFFFFF}%s (ID: %d)", AName[ArenaID], ArenaID);
				SendClientMessageToAll(-1, iString);

				GameType = ARENA;
			}

			foreach(new i : Player) {
			    if(CanPlay(i)) {
					TogglePlayerControllableEx(i, false);
					Player[i][ToAddInRound] = true;
				}
			}
		} else if(playersReady == (attackers+defenders) && attackers == defenders && OneOnOne == true) {
			new ArenaID = 1;
   			Current = ArenaID;

			AllowStartBase = false; // Make sure other player or you yourself is not able to start base on top of another base.
			SetTimerEx("OnArenaStart", 4000, false, "i", ArenaID);

			format(iString, sizeof(iString), "{FFFFFF}System "COL_PRIM"has started Duel: {FFFFFF}%s (ID: %d)", DuelName[ArenaID], ArenaID);
			SendClientMessageToAll(-1, iString);

			GameType = ARENA;

			foreach(new i : Player) {
			    if(CanPlay(i)) {
					TogglePlayerControllableEx(i, false);
					Player[i][ToAddInRound] = true;
				}
			}
		}
	} else {
	    return SendErrorMessage(playerid,"You need to be part of either Alpha or Beta team.");
	}
	return 1;
}

CMD:unready(playerid, params[])
{
	if(Current != -1) return 1;
	if(Player[playerid][Readied] == false) return SendErrorMessage(playerid,"You haven't readied yet.");

	Player[playerid][Readied] = false;

	new iString[128];
	format(iString, sizeof(iString), "%s%s {FFFFFF}has unreadied.", TextColor[Player[playerid][Team]], Player[playerid][Name]);
	SendClientMessageToAll(-1, iString);

	return 1;
}

CMD:voters(playerid, params[])
{
	if(ESLMode == false) return SendErrorMessage(playerid,"ESL mode is not enabled.");
    if(AllowStartBase == false) return SendErrorMessage(playerid,"Please wait for the current round to end.");
	if(Current != -1) return SendErrorMessage(playerid,"Please wait for the current round to end.");

	if(Player[playerid][Team] == ATTACKER || Player[playerid][Team] == DEFENDER) {
		if(Player[playerid][VoteForReset] == true) return SendErrorMessage(playerid,"You are already voted to reset the scores.");

		Player[playerid][VoteForReset] = true;

		new PlayersVoted = 0;
		new attackers, defenders, iString[180];

		foreach(new i : Player) {
		    if(Player[i][Team] == ATTACKER || Player[i][Team] == DEFENDER) {
				if(Player[i][VoteForReset] == true) {
		            PlayersVoted++;
				}

				if(Player[i][Team] == DEFENDER) {
			        defenders++;
				} else if(Player[i][Team] == ATTACKER) {
				    attackers++;
				}
			} else {
			    Player[i][VoteForReset] = false;
			}
		}

		if(OneOnOne == false) {
			format(iString, sizeof(iString), "%s%s {FFFFFF}has voted to reset the scores {FFFFFF}.: %d / %d | {FF4444}%s{FFFFFF}: %d - {3388FF}%s{FFFFFF}: %d :.",TextColor[Player[playerid][Team]], Player[playerid][Name], PlayersVoted, MaxESLPlayers, TeamName[ATTACKER], attackers, TeamName[DEFENDER], defenders);
			SendClientMessageToAll(-1, iString);
			if(PlayersVoted >= MaxESLPlayers && attackers == defenders) {
	            ResetScoresForESL();

	            SendClientMessageToAll(-1, "{FFFFFF}Scores were successfully resetted.");
			}
		} else {
		    format(iString, sizeof(iString), "%s%s {FFFFFF}has voted to reset the scores {FFFFFF}.: %d / %d | {FF4444}%s{FFFFFF}: %d - {3388FF}%s{FFFFFF}: %d :.",TextColor[Player[playerid][Team]], Player[playerid][Name], PlayersVoted, (attackers+defenders), TeamName[ATTACKER], attackers, TeamName[DEFENDER], defenders);
            SendClientMessageToAll(-1, iString);
			if(PlayersVoted == (attackers+defenders) && attackers == defenders) {
	            ResetScoresForESL();

	            SendClientMessageToAll(-1, "{FFFFFF}Scores were successfully resetted.");
			}
		}




	} else {
	    return SendErrorMessage(playerid,"You need to be part of either Alpha or Beta team.");
	}
	return 1;
}


CMD:war(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level to do that.");
	if(Current != -1) return SendErrorMessage(playerid,"Can't use this command while round is on.");

	new iString[160], TeamAName[24], TeamBName[24];
	#if PLUGINS == 1
    	if(sscanf(params, "s[24]S()[24]", TeamAName, TeamBName)) return SendUsageMessage(playerid,"/war ([Team A] [Team B]) (end)");
	#else
    	if(sscanf(params, "sz", TeamAName, TeamBName)) return SendUsageMessage(playerid,"/war ([Team A] [Team B]) (end)");
	#endif

	if(strcmp(TeamAName, "end", true) == 0 && isnull(TeamBName) && WarMode == true) {

		SetTimer("WarEnded", 5000, 0);
		SendClientMessageToAll(-1, sprintf("{FFFFFF}%s "COL_PRIM"has set the match to end!", Player[playerid][Name]));
		SendClientMessageToAll(-1, ""COL_PRIM"Preparing End Match Results..");
		SendClientMessageToAll(-1, ""COL_PRIM"If you missed the results screen by hiding the current textdraws, type {FFFFFF}/showagain");
        SendClientMessageToAll(-1, ""COL_PRIM"Type {FFFFFF}/weaponstats "COL_PRIM"to see a list of players weapon statistics.");

		return 1;
	} else if(isnull(TeamBName)) return SendUsageMessage(playerid,"/war ([Team A] [Team B]) (end)");


    if(WarMode == true) return SendErrorMessage(playerid,"War-mode is already on.");
	if(strlen(TeamAName) > 6 || strlen(TeamBName) > 6) return SendErrorMessage(playerid,"Team name is too long.");
	if(strfind(TeamAName, "~") != -1 || strfind(TeamBName, "~") != -1) return SendErrorMessage(playerid,"~ not allowed.");

	format(TeamName[ATTACKER], 24, TeamAName);
	format(TeamName[ATTACKER_SUB], 24, "%s Sub", TeamName[ATTACKER]);
	format(TeamName[DEFENDER], 24, TeamBName);
	format(TeamName[DEFENDER_SUB], 24, "%s Sub", TeamName[DEFENDER]);

	#if INTROTEXT == 1
	format(iString, sizeof(iString), "~r~~h~%s", TeamName[ATTACKER]);
	TextDrawSetString(introAtt, iString);

	format(iString, sizeof(iString), "~b~~h~%s", TeamName[DEFENDER]);
	TextDrawSetString(introDef, iString);
	#endif

	format(iString, sizeof(iString), "~r~%s %s(~r~%d%s)  ~b~~h~%s %s(~b~~h~%d%s)",TeamName[ATTACKER],MAIN_TEXT_COLOUR,TeamScore[ATTACKER],MAIN_TEXT_COLOUR,TeamName[DEFENDER],MAIN_TEXT_COLOUR,TeamScore[DEFENDER],MAIN_TEXT_COLOUR);
    TextDrawSetString(TeamScoreText, iString);

	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has enabled the Match-Mode.", Player[playerid][Name]);
	SendClientMessageToAll(-1, iString);

	MatchRoundsStarted = 0;
	for( new i = 0; i < 101; i++ )
	{
	    MatchRoundsRecord[ i ][ round__ID ] = -1;
	    MatchRoundsRecord[ i ][ round__type ] = -1;
	    MatchRoundsRecord[ i ][ round__completed ] = false;
	}

	WarMode = true;
	RoundPaused = false;
    format(iString, sizeof iString, "%sWar Mode: ~r~ON", MAIN_TEXT_COLOUR);
	TextDrawSetString(WarModeText, iString);

	new bool:PlayersToTeam[MAX_PLAYERS] = false;
	new PlayersAvailable;

	foreach(new i : Player) {
	    for(new j = 0; j < 55; j ++)
			Player[i][WeaponStat][j] = 0;
		Player[i][TotalKills] = 0;
		Player[i][TotalDeaths] = 0;
		Player[i][TotalDamage] = 0;
		Player[i][RoundPlayed] = 0;
	    Player[i][TotalBulletsFired] = 0;
	    Player[i][TotalshotsHit] = 0;


		if(Player[i][TextPos] == false) format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDamage ~r~%.0f~n~%sTotal Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[i][RoundKills], MAIN_TEXT_COLOUR, Player[i][RoundDamage], MAIN_TEXT_COLOUR, Player[i][TotalDamage]);
		else format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDmg ~r~%.0f~n~%sT. Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[i][RoundKills], MAIN_TEXT_COLOUR, Player[i][RoundDamage], MAIN_TEXT_COLOUR, Player[i][TotalDamage]);
		PlayerTextDrawSetString(i, RoundKillDmgTDmg, iString);

		if(strfind(Player[i][Name], TeamName[ATTACKER], true) != -1 && (Player[i][Team] == ATTACKER || Player[i][Team] == DEFENDER)) {
  			PlayersAvailable++;
            PlayersToTeam[i] = true;
        }
    }

	if(PlayersAvailable > 1) {
		foreach(new i : Player) {

			new MyVehicle = -1;
			new Seat;

			if(IsPlayerInAnyVehicle(i)) {
				MyVehicle = GetPlayerVehicleID(i);
				Seat = GetPlayerVehicleSeat(i);
			}


			if(PlayersToTeam[i] == true) {
			    Player[i][Team] = ATTACKER;
			    SetPlayerColor(i, ATTACKER_NOT_PLAYING);
			} else {
				Player[i][Team] = DEFENDER;
				SetPlayerColor(i, DEFENDER_NOT_PLAYING);
			}
			SetPlayerSkin(i, Skin[Player[i][Team]]);
			ClearAnimations(i);


			if(MyVehicle != -1) {
			    PutPlayerInVehicle(i, MyVehicle, Seat);

				if(GetPlayerState(i) == PLAYER_STATE_DRIVER) {
					switch(Player[i][Team]) {
						case ATTACKER: ChangeVehicleColor(GetPlayerVehicleID(i), 175, 175);
						case ATTACKER_SUB: ChangeVehicleColor(GetPlayerVehicleID(i), 158, 158);
						case DEFENDER: ChangeVehicleColor(GetPlayerVehicleID(i), 198, 198);
						case DEFENDER_SUB: ChangeVehicleColor(GetPlayerVehicleID(i), 208, 208);
						case REFEREE: ChangeVehicleColor(GetPlayerVehicleID(i), 200, 200);
					}
				}
			}

	    }
	}

	TextDrawShowForAll(RoundsPlayed);
	TextDrawShowForAll(TeamScoreText);
	return 1;
}


CMD:teamname(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level to do that.");

	new iString[160], TeamID, TeamNamee[24];
	#if PLUGINS == 1
    	if(sscanf(params, "ds[24]", TeamID, TeamNamee)) return SendUsageMessage(playerid,"/teamname [Team ID] [Name] (0 = Attacker | 1 = Defender)");
	#else
    	if(sscanf(params, "ds", TeamID, TeamNamee)) return SendUsageMessage(playerid,"/teamname [Team ID] [Name] (0 = Attacker | 1 = Defender)");
	#endif

	if(TeamID < 0 || TeamID > 1) return SendErrorMessage(playerid,"Invalid Team ID.");
	if(strlen(TeamNamee) > 6) return SendErrorMessage(playerid,"Team name is too long.");
	if(strfind(TeamNamee, "~") != -1) return SendErrorMessage(playerid,"~ not allowed.");

	switch(TeamID) {
	    case 0: {
			format(TeamName[ATTACKER], 24, TeamNamee);
			format(TeamName[ATTACKER_SUB], 24, "%s Sub", TeamName[ATTACKER]);


/*			format(iString, sizeof(iString), "%s~h~%s", MAIN_TEXT_COLOUR, TeamName[ATTACKER]);
			TextDrawSetString(AttackerText, iString);

			format(iString, sizeof(iString), "%s Sub", TeamName[ATTACKER]);
			format(TeamName[ATTACKER_SUB], 24, iString);

			format(iString, sizeof(iString), "%s~h~%s", MAIN_TEXT_COLOUR, TeamName[ATTACKER_SUB]);
			TextDrawSetString(AttackerSubText, iString);
*/
			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has set attacker team name to: {FFFFFF}%s", Player[playerid][Name], TeamName[ATTACKER]);
			SendClientMessageToAll(-1, iString);
	    } case 1: {
			format(TeamName[DEFENDER], 24, TeamNamee);
			format(TeamName[DEFENDER_SUB], 24, "%s Sub", TeamName[DEFENDER]);

/*			format(iString, sizeof(iString), "%s~h~%s", MAIN_TEXT_COLOUR, TeamName[DEFENDER]);
			TextDrawSetString(DefenderText, iString);

			format(iString, sizeof(iString), "%s Sub", TeamName[DEFENDER]);
			format(TeamName[DEFENDER_SUB], 24, iString);

			format(iString, sizeof(iString), "%s~h~%s", MAIN_TEXT_COLOUR, TeamName[DEFENDER_SUB]);
			TextDrawSetString(DefenderSubText, iString);
*/
			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has set defender team name to: {FFFFFF}%s", Player[playerid][Name], TeamName[DEFENDER]);
			SendClientMessageToAll(-1, iString);
	    }
	}



	#if INTROTEXT == 1
	format(iString, sizeof(iString), "~r~~h~%s", TeamName[ATTACKER]);
	TextDrawSetString(introAtt, iString);

	format(iString, sizeof(iString), "~b~~h~%s", TeamName[DEFENDER]);
	TextDrawSetString(introDef, iString);
	#endif

	format(iString, sizeof(iString), "~r~%s %s(~r~%d%s)  ~b~~h~%s %s(~b~~h~%d%s)",TeamName[ATTACKER],MAIN_TEXT_COLOUR,TeamScore[ATTACKER],MAIN_TEXT_COLOUR,TeamName[DEFENDER],MAIN_TEXT_COLOUR,TeamScore[DEFENDER],MAIN_TEXT_COLOUR);
    TextDrawSetString(TeamScoreText, iString);

	return 1;
}


CMD:tr(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level to do that.");
	if(isnull(params) || !IsNumeric(params)) return SendUsageMessage(playerid,"/tr [Total Rounds]");

	new Value = strval(params);
	if(Value < CurrentRound || Value < 1 || Value > 100) return SendErrorMessage(playerid,"Invalid total rounds.");

	TotalRounds = Value;

	new iString[180];
	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has changed the total rounds to: {FFFFFF}%d", Player[playerid][Name], TotalRounds);
	SendClientMessageToAll(-1, iString);

	format(iString, sizeof(iString), "%sRounds ~r~~h~%d~r~/~h~~h~%d", MAIN_TEXT_COLOUR, CurrentRound, TotalRounds);
	TextDrawSetString(RoundsPlayed, iString);

	return 1;
}

CMD:cr(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level to do that.");
	if(isnull(params) || !IsNumeric(params)) return SendUsageMessage(playerid,"/cr [Current Round]");

	new Value = strval(params);
	if(Value > TotalRounds || Value < 0) return SendErrorMessage(playerid,"Invalid current round.");

	CurrentRound = Value;

	new iString[180];
	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has changed the current round to: {FFFFFF}%d", Player[playerid][Name], CurrentRound);
	SendClientMessageToAll(-1, iString);

	format(iString, sizeof(iString), "%sRounds ~r~~h~%d~r~/~h~~h~%d", MAIN_TEXT_COLOUR, CurrentRound, TotalRounds);
	TextDrawSetString(RoundsPlayed, iString);

	return 1;
}


CMD:eslmode(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level to do that.");
	if(Current != -1) return SendErrorMessage(playerid,"Can't use while round is on.");

	new iString[180];
	if(ESLMode == false) {
        ESLMode = true;

	    TeamScore[ATTACKER] = 0;
	    TeamScore[DEFENDER] = 0;
	    CurrentRound = 0;

	    if(OneOnOne == false) TotalRounds = 5;
	    else TotalRounds = 19;


		TeamName[ATTACKER] = "Alpha";
		TeamName[ATTACKER_SUB] = "Alpha Sub";
		TeamName[DEFENDER] = "Beta";
		TeamName[DEFENDER_SUB] = "Beta Sub";

		format(iString, sizeof(iString), "~r~%s %s(~r~%d%s)  ~b~~h~%s %s(~b~~h~%d%s)",TeamName[ATTACKER],MAIN_TEXT_COLOUR,TeamScore[ATTACKER],MAIN_TEXT_COLOUR,TeamName[DEFENDER],MAIN_TEXT_COLOUR,TeamScore[DEFENDER],MAIN_TEXT_COLOUR);
	    TextDrawSetString(TeamScoreText, iString);

		format(iString, sizeof(iString), "%sRounds ~r~~h~%d~r~/~h~~h~%d", MAIN_TEXT_COLOUR, CurrentRound, TotalRounds);
		TextDrawSetString(RoundsPlayed, iString);

    	Max_Packetloss = 2.0;
		Min_FPS = 35;
		Max_Ping = 350;

		format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has enabled ESL mode.", Player[playerid][Name]);
		SendClientMessageToAll(-1, iString);

		format(iString, sizeof(iString), "Total Rounds: %d | Packetloss: %.2f | Ping: %d | FPS: %d", TotalRounds, Max_Packetloss, Max_Ping, Min_FPS);
		SendClientMessageToAll(-1, iString);

		WarMode = true;
	    format(iString, sizeof iString, "%sWar Mode: ~r~ON", MAIN_TEXT_COLOUR);
		TextDrawSetString(WarModeText, iString);

    	TextDrawShowForAll(RoundsPlayed);
		TextDrawShowForAll(TeamScoreText);

	} else {

	    ESLMode = false;

	    TeamScore[ATTACKER] = 0;
	    TeamScore[DEFENDER] = 0;
	    CurrentRound = 0;

        new DBResult:res = db_query(sqliteconnection, "SELECT * FROM Configs WHERE Option = 'Total Rounds' OR Option = 'Maximum Packetloss' OR Option = 'Maximum Ping' OR Option = 'Minimum FPS'");

		db_get_field_assoc(res, "Value", iString, sizeof(iString)); // Maximum Packetloss
	    Max_Packetloss = floatstr(iString);
		db_next_row(res);

        db_get_field_assoc(res, "Value", iString, sizeof(iString)); // Maximum Ping
	    Max_Ping = strval(iString);
		db_next_row(res);

        db_get_field_assoc(res, "Value", iString, sizeof(iString)); // Minimum FPS
	    Min_FPS = strval(iString);
	    db_next_row(res);

		db_get_field_assoc(res, "Value", iString, sizeof(iString)); // Total Rounds
	    TotalRounds = strval(iString);
		db_next_row(res);


        db_free_result(res);


		TeamName[ATTACKER] = "Alpha";
		TeamName[ATTACKER_SUB] = "Alpha Sub";
		TeamName[DEFENDER] = "Beta";
		TeamName[DEFENDER_SUB] = "Beta Sub";

		format(iString, sizeof(iString), "~r~%s %s(~r~%d%s)  ~b~~h~%s %s(~b~~h~%d%s)",TeamName[ATTACKER],MAIN_TEXT_COLOUR,TeamScore[ATTACKER],MAIN_TEXT_COLOUR,TeamName[DEFENDER],MAIN_TEXT_COLOUR,TeamScore[DEFENDER],MAIN_TEXT_COLOUR);
	    TextDrawSetString(TeamScoreText, iString);

		format(iString, sizeof(iString), "%sRounds ~r~~h~%d~r~/~h~~h~%d", MAIN_TEXT_COLOUR, CurrentRound, TotalRounds);
		TextDrawSetString(RoundsPlayed, iString);

		format(iString, sizeof iString, "%sWar Mode: ~r~OFF", MAIN_TEXT_COLOUR);
		TextDrawSetString(WarModeText, iString);

		TextDrawHideForAll(RoundsPlayed);
		TextDrawHideForAll(TeamScoreText);

		TextDrawSetString(Ready[0], "_");
    	TextDrawSetString(Ready[1], "_");

		WarMode = false;
		format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has disabled ESL mode.", Player[playerid][Name]);
		SendClientMessageToAll(-1, iString);

		format(iString, sizeof(iString), "Total Rounds: %d | Packetloss: %.2f | Ping: %d | FPS: %d", TotalRounds, Max_Packetloss, Max_Ping, Min_FPS);
		SendClientMessageToAll(-1, iString);
	}

	foreach(new i : Player) {
	    for(new j = 0; j < 55; j ++)
			Player[i][WeaponStat][j] = 0;
		Player[i][TotalKills] = 0;
		Player[i][TotalDeaths] = 0;
		Player[i][TotalDamage] = 0;
		Player[i][RoundPlayed] = 0;
	    Player[i][TotalBulletsFired] = 0;
	    Player[i][TotalshotsHit] = 0;
	    Player[i][Readied] = false;

		if(Player[i][TextPos] == false) format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDamage ~r~%.0f~n~%sTotal Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[i][RoundKills], MAIN_TEXT_COLOUR, Player[i][RoundDamage], MAIN_TEXT_COLOUR, Player[i][TotalDamage]);
		else format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDmg ~r~%.0f~n~%sT. Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[i][RoundKills], MAIN_TEXT_COLOUR, Player[i][RoundDamage], MAIN_TEXT_COLOUR, Player[i][TotalDamage]);
		PlayerTextDrawSetString(i, RoundKillDmgTDmg, iString);
	}
	ClearPlayerVariables();

	format(iString, sizeof(iString), "UPDATE Configs SET Value = %d WHERE Option = 'ESL Mode'", (ESLMode == true ? 1 : 0));
    db_free_result(db_query(sqliteconnection, iString));
    LogAdminCommand("eslmode", playerid, INVALID_PLAYER_ID);
	return 1;
}


CMD:serverpassword(playerid, params[]) {
	if(ServerLocked) {
		new str[128];
		format(str, sizeof(str), ""COL_PRIM"Current Server Password: {FFFFFF}%s", ServerPass[9]);
		SendClientMessageToAll(-1, str);
	} else return 0;
	LogAdminCommand("serverpassword", playerid, INVALID_PLAYER_ID);
	return 1;
}

CMD:servpass(playerid, params[]) {
	return cmd_serverpassword(playerid, params);
}

CMD:sp(playerid, params[]) {
	return cmd_serverpassword(playerid, params);
}

CMD:freeze(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level to do that.");
	if(isnull(params) || !IsNumeric(params)) return SendUsageMessage(playerid,"/freeze [Player ID]");

	new pID = strval(params);
 	if(!IsPlayerConnected(pID)) return SendErrorMessage(playerid,"That player isnt connected.");

	TogglePlayerControllableEx(pID, false);


	new iString[160];
    format(iString,sizeof(iString),"{FFFFFF}%s "COL_PRIM"has frozen {FFFFFF}%s", Player[playerid][Name], Player[pID][Name]);
	SendClientMessageToAll(-1, iString);

    LogAdminCommand("freeze", playerid, pID);
	return 1;
}

CMD:giveweapon(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level to do that.");
	new pID, Weapon[50], Ammo, iString[180];

 	#if PLUGINS == 1
  		if(sscanf(params, "is[50]d", pID, Weapon, Ammo))  return SendUsageMessage(playerid,"/giveweapon [Player ID] [Weapon Name] [Ammo]");
	#else
  		if(sscanf(params, "isd", pID, Weapon, Ammo))  return SendUsageMessage(playerid,"/giveweapon [Player ID] [Weapon Name] [Ammo]");
	#endif

	if(Ammo < 0 || Ammo > 9999) return SendErrorMessage(playerid,"Invalid Ammo.");

	new WeaponID = GetWeaponID(Weapon);
	if(WeaponID < 1 || WeaponID > 46 || WeaponID == 19 || WeaponID == 20 || WeaponID == 21 || WeaponID == 22) return SendErrorMessage(playerid,"Invalid Weapon Name.");
	if(WeaponID == 44 || WeaponID == 45) return SendErrorMessage(playerid,"We don't do this shit around here.");

	GivePlayerWeapon(pID, WeaponID, Ammo);

    format(iString,sizeof(iString),"{FFFFFF}%s "COL_PRIM"has given {FFFFFF}%s "COL_PRIM"| Weapon: {FFFFFF}%s "COL_PRIM"- Ammo: {FFFFFF}%d", Player[playerid][Name], Player[pID][Name], WeaponNames[WeaponID], Ammo);
	SendClientMessageToAll(-1, iString);
    LogAdminCommand("giveweapon", playerid, pID);
	return 1;
}

CMD:giveallgun(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level to do that.");

 	new iString[180], Ammo, Weapon[50];
 	#if PLUGINS == 1
  		if(sscanf(params, "s[50]d", Weapon, Ammo))  return SendUsageMessage(playerid,"/giveallgun [Weapon Name] [Ammo]");
	#else
  		if(sscanf(params, "sd", Weapon, Ammo))  return SendUsageMessage(playerid,"/giveallgun [Weapon Name] [Ammo]");
	#endif

	if(Ammo < 0 || Ammo > 9999) return SendErrorMessage(playerid,"Invalid Ammo.");

	new weapon = GetWeaponID(Weapon);
 	if(weapon < 1 || weapon > 46 || weapon == 19 || weapon == 20 || weapon == 21 || weapon == 22) return SendErrorMessage(playerid,"Invalid weapon name.");
	if(weapon == 44 || weapon == 45) return SendErrorMessage(playerid,"We don't do this shit around here.");

    foreach(new i : Player) {
    	if(Player[i][InDM] == false && Player[i][InDuel] == false  && Player[i][Spectating] == false) {
			GivePlayerWeapon(i, weapon, Ammo);
		}
	}

	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has given everyone | Weapon: {FFFFFF}%s "COL_PRIM"- Ammo: {FFFFFF}%d",Player[playerid][Name] ,WeaponNames[weapon], Ammo);
 	SendClientMessageToAll(-1, iString);
    LogAdminCommand("giveallgun", playerid, INVALID_PLAYER_ID);
	return 1;
}

CMD:unfreeze(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level to do that.");
	if(isnull(params) || !IsNumeric(params)) return SendUsageMessage(playerid,"/freeze [Player ID]");

	new pID = strval(params);
 	if(!IsPlayerConnected(pID)) return SendErrorMessage(playerid,"That player isnt connected.");

	TogglePlayerControllableEx(pID, true);


	new iString[160];
    format(iString,sizeof(iString),"{FFFFFF}%s "COL_PRIM"has unfrozen {FFFFFF}%s", Player[playerid][Name], Player[pID][Name]);
	SendClientMessageToAll(-1, iString);

    LogAdminCommand("unfreeze", playerid, pID);
	return 1;
}

CMD:maxtdmkills(playerid,params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level to do that.");
	if(Current != -1) return SendErrorMessage(playerid,"Can't use the command while round is on.");
	if(isnull(params) || !IsNumeric(params)) return SendUsageMessage(playerid,"/maxtdmkills [5 - 90]");

	new val = strval(params);
	if(val < 5 || val > 90) return SendErrorMessage(playerid,"Maximum TDM kills can range b/w  5 - 90 kills only.");

	MaxTDMKills = val;

	new iString[160];
	format(iString, sizeof(iString), "UPDATE Configs SET Value = %d WHERE Option = 'Max TDM Kills'", MaxTDMKills);
    db_free_result(db_query(sqliteconnection, iString));

    format(iString,sizeof(iString),"{FFFFFF}%s "COL_PRIM"has changed the maximum TDM kills to {FFFFFF}%d", Player[playerid][Name], MaxTDMKills);
	SendClientMessageToAll(-1, iString);
	LogAdminCommand("maxtdmkills", playerid, INVALID_PLAYER_ID);
	return 1;
}

CMD:roundtime(playerid,params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level to do that.");
	if(Current != -1) return SendErrorMessage(playerid,"Can't use the command while round is on.");
	if(isnull(params) || !IsNumeric(params)) return SendUsageMessage(playerid,"/roundtime [Mints (1 - 30)]");

	new rTime = strval(params);
	if(rTime < 1 || rTime > 30) return SendErrorMessage(playerid,"Round time can't be lower than 1 or higher than 30 mints.");

	ConfigRoundTime = rTime;

	new iString[160];
	format(iString, sizeof(iString), "UPDATE Configs SET Value = %d WHERE Option = 'Round Time'", rTime);
    db_free_result(db_query(sqliteconnection, iString));

    format(iString,sizeof(iString),"{FFFFFF}%s "COL_PRIM"has changed the round time to: {FFFFFF}%d mints", Player[playerid][Name], rTime);
	SendClientMessageToAll(-1, iString);
    LogAdminCommand("roundtime", playerid, INVALID_PLAYER_ID);
	return 1;
}

CMD:cptime(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level to do that.");
//	if(Current != -1) return SendErrorMessage(playerid,"Can't use the command while round is on.");
	if(isnull(params) || !IsNumeric(params)) return SendUsageMessage(playerid,"/cptime [Seconds (1 - 60)]");

	new cpTime = strval(params);
	if(cpTime < 1 || cpTime > 60) return SendErrorMessage(playerid,"CP time can't be lower than 1 or higher than 60 seconds.");

	ConfigCPTime = cpTime;
	CurrentCPTime = ConfigCPTime;

	new iString[160];
	format(iString, sizeof(iString), "UPDATE Configs SET Value = %d WHERE Option = 'CP Time'", cpTime);
    db_free_result(db_query(sqliteconnection, iString));

    format(iString,sizeof(iString),"{FFFFFF}%s "COL_PRIM"has changed the CP time to: {FFFFFF}%d seconds", Player[playerid][Name], cpTime);
	SendClientMessageToAll(-1, iString);
    LogAdminCommand("cptime", playerid, INVALID_PLAYER_ID);
	return 1;
}




CMD:lastplayed(playerid,params[])
{
	new iString[140];
	format(iString, sizeof(iString), ""COL_PRIM"Last Played: {FFFFFF}%d "COL_PRIM"| Requested by {FFFFFF}%s", ServerLastPlayed, Player[playerid][Name]);
	SendClientMessageToAll(-1, iString);
	return 1;
}

CMD:rounds(playerid,params[])
{
	new str1[1024];
	for( new id = 0; id < 101; id++ ) {
	    if( MatchRoundsRecord[ id ][ round__ID ] != -1 ) {
	        switch( MatchRoundsRecord[ id ][ round__type ] ) {
	    /*base*/case 0: format( str1, sizeof(str1), "%s\n{FFFFFF}%d.%s%s [ID:%d]", str1, id, (MatchRoundsRecord[ id ][ round__completed ]) ? ("") : ("{FAF62D}"), BName[ MatchRoundsRecord[ id ][ round__ID ] ], MatchRoundsRecord[ id ][ round__ID ] );
	   /*arena*/case 1: format( str1, sizeof(str1), "%s\n{B5B5B5}%d.%s%s [ID:%d]", str1, id, (MatchRoundsRecord[ id ][ round__completed ]) ? ("") : ("{FAF62D}"), AName[ MatchRoundsRecord[ id ][ round__ID ] ], MatchRoundsRecord[ id ][ round__ID ] );
				default: format( str1, sizeof(str1), "%s\nWadaffuq?", str1 );
	        }
	    }
	}

	//print(str1);

	ShowPlayerDialog( playerid, DIALOG_ROUND_LIST, DIALOG_STYLE_MSGBOX, "Rounds played in current/last match", str1, "Close", "" );
	return 1;
}


CMD:dance(playerid, params[])
{
	if(Current != -1) return SendErrorMessage(playerid,"Can't use this command while in round.");
	if(isnull(params) || !IsNumeric(params)) return SendUsageMessage(playerid,"/dance [1-4]");

	new dID = strval(params);
	if(dID < 1 || dID > 4) return SendErrorMessage(playerid,"Invalid dance ID.");

	switch(dID) {
		case 1: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
		case 2: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
		case 3: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
		case 4: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
	}
	return 1;
}


CMD:resetallguns(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level to do that.");

	foreach(new i : Player) {
	    if(Player[i][InDM] == false && Player[i][InDuel] == false && Player[i][Spectating] == false) {
	    	ResetPlayerWeapons(i);
		}
	}

	new iString[160];
    format(iString,sizeof(iString),"{FFFFFF}%s "COL_PRIM"has resetted everyone's weapons.", Player[playerid][Name]);
	SendClientMessageToAll(-1, iString);
    LogAdminCommand("resetallguns", playerid, INVALID_PLAYER_ID);
	return 1;
}

CMD:replace(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level to do that.");
	if(Current == -1) return SendErrorMessage(playerid,"Round is not active.");

	new str[2048];
	foreach(new i : Player)
	{
	    if(Player[i][InDuel] == true || Player[i][Playing] == true)
	        continue;

		format(str, sizeof str, "%s%s\n", str, Player[i][Name]);
	}
	ShowPlayerDialog(playerid, DIALOG_REPLACE_FIRST, DIALOG_STYLE_LIST, ""COL_PRIM"Player to add", str, "Process", "Cancel");
	LogAdminCommand("replace", playerid, INVALID_PLAYER_ID);
	return 1;
}

CMD:cc(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level to do that.");

    ClearChat();

    new iString[128];
    format(iString,sizeof(iString),"{FFFFFF}%s "COL_PRIM"has cleared chat.", Player[playerid][Name]);
	SendClientMessageToAll(-1, iString);
    LogAdminCommand("cc", playerid, INVALID_PLAYER_ID);
	return 1;
}

CMD:vworld(playerid, params[])
{
	if(Player[playerid][InDM] == false) return SendErrorMessage(playerid,"Can't use this command while you are not in a DM.");
	if(Player[playerid][InDuel] == true) return SendErrorMessage(playerid,"Can't use this command during duel. Use {FFFFFF}/rq "COL_PRIM"instead.");
	if(Player[playerid][Playing] == true) return SendErrorMessage(playerid,"Can't use this command while playing.");
	if(Player[playerid][Spectating] == true) return 1;

    if(isnull(params) || !IsNumeric(params)) return SendUsageMessage(playerid,"/vworld [World ID]");

	new vID = strval(params);
	if(vID <= 5) return SendErrorMessage(playerid,"Pick a virtual world above 5.");

	SetPlayerVirtualWorld(playerid, vID);

	return 1;
}


CMD:pchannel(playerid, params[])
{
	if(Player[playerid][ChatChannel] != -1) {
		new iString[356];
		iString = "{FF3333}Players in channel:\n\n";

		foreach(new i : Player) {
		    if(Player[i][ChatChannel] == Player[playerid][ChatChannel]) {
		        format(iString, sizeof(iString), "%s{FF3333} - {FFFFFF}%s (%d)\n", iString, Player[i][Name], i);
			}
		}

		ShowPlayerDialog(playerid,DIALOG_CHANNEL_PLAYERS,DIALOG_STYLE_MSGBOX,"{FFFFFF}Players In Channel", iString, "Close","");
	} else {
    	SendErrorMessage(playerid,"You are not in any channel.");
	}

	return 1;
}



CMD:cchannel(playerid, params[])
{
	new iString[180];
	if(isnull(params)) {
		if(Player[playerid][ChatChannel] != -1) {
		    format(iString, sizeof(iString), "{FFFFFF}>> "COL_PRIM"Current chat channel ID: {FFFFFF}%d", Player[playerid][ChatChannel]);
		    SendClientMessage(playerid, -1, iString);
		} else {
			SendUsageMessage(playerid,"/chatchannel [Channel ID]");
		}
		return 1;
	}

	new Channel = strval(params);
	if(Channel <= -1 || Channel > 1000) return SendErrorMessage(playerid,"Invalid channel ID.");

	Player[playerid][ChatChannel] = Channel;

	#if MYSQL == 0

  	format(iString, sizeof(iString), "UPDATE Players SET ChatChannel = %d WHERE Name = '%s'", Channel, DB_Escape(Player[playerid][Name]));
    db_free_result(db_query(sqliteconnection, iString));

   	#else
	new EscapedName[MAX_PLAYER_NAME];
	sql_escape_string(sqlconnection, Player[playerid][Name], EscapedName);

   	format(iString, sizeof(iString), "UPDATE `Players` SET `ChatChannel` = %d WHERE `Name` = '%s'", Channel, EscapedName);
   	sql_query(sqlconnection, iString, QUERY_THREADED);

   	#endif

	foreach(new i : Player) {
	    if(Player[i][ChatChannel] == Player[playerid][ChatChannel] && i != playerid) {
	        format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has joined this chat channel.", Player[playerid][Name]);
	        SendClientMessage(i, -1, iString);
		} else {
	        format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has joined a chat channel.", Player[playerid][Name]);
	        SendClientMessage(i, -1, iString);
		}
	}

	return 1;
}

CMD:showspectateinfo(playerid, params[])
{
	cmd_teamdmg(playerid, params);
	return 1;
}

CMD:teamdmg(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level to do that.");

	new iString[180];
	if(TeamHPDamage == true) {
	    TeamHPDamage = false;

		foreach(new i : Player) {
			TextDrawHideForPlayer(i, AttackerTeam[0]);
			TextDrawHideForPlayer(i, AttackerTeam[1]);
			TextDrawHideForPlayer(i, DefenderTeam[0]);
			TextDrawHideForPlayer(i, DefenderTeam[1]);
			TextDrawHideForPlayer(i, AttackerTeam[2]);
			TextDrawHideForPlayer(i, AttackerTeam[3]);
			TextDrawHideForPlayer(i, DefenderTeam[2]);
			TextDrawHideForPlayer(i, DefenderTeam[3]);

	        //if(Player[i][Spectating] == true) {
               // PlayerTextDrawShow(i, SpecText[0]);
                //PlayerTextDrawShow(i, SpecText[1]);

	        //}

		}

		format(iString, sizeof(iString),"{FFFFFF}%s "COL_PRIM"has disabled {FFFFFF}Show HP and Damage.",Player[playerid][Name]);
		SendClientMessageToAll(-1,iString);
	} else {
	    TeamHPDamage = true;

	    foreach(new i : Player) {
	        if(Current != -1) {
				if(Player[i][Team] == ATTACKER || Player[i][Team] == ATTACKER_SUB) {
					TextDrawShowForPlayer(i, AttackerTeam[0]);
					TextDrawShowForPlayer(i, AttackerTeam[1]);
				} else if(Player[i][Team] == DEFENDER || Player[i][Team] == DEFENDER_SUB) {
					TextDrawShowForPlayer(i, DefenderTeam[0]);
					TextDrawShowForPlayer(i, DefenderTeam[1]);
				}
			}

	        if(Player[i][Spectating] == true) {

	            //PlayerTextDrawHide(i, SpecText[0]);
	            //PlayerTextDrawHide(i, SpecText[1]);

				if(Current != -1) {
				    if(Player[i][Team] == ATTACKER || Player[i][Team] == ATTACKER_SUB) {
						TextDrawShowForPlayer(i, DefenderTeam[2]);
						TextDrawShowForPlayer(i, DefenderTeam[3]);
					} else if(Player[i][Team] == DEFENDER || Player[i][Team] == DEFENDER_SUB) {
						TextDrawShowForPlayer(i, AttackerTeam[2]);
						TextDrawShowForPlayer(i, AttackerTeam[3]);
					}
				}
			}
		}

		format(iString, sizeof(iString),"{FFFFFF}%s "COL_PRIM"has enabled {FFFFFF}Show HP and Damage.",Player[playerid][Name]);
		SendClientMessageToAll(-1,iString);
	}

	format(iString, sizeof(iString), "UPDATE Configs SET Value = %d WHERE Option = 'Show Team HP and Dmg'", (TeamHPDamage == false ? 0 : 1));
    db_free_result(db_query(sqliteconnection, iString));
    LogAdminCommand("teamdmg", playerid, INVALID_PLAYER_ID);
	return 1;
}
/*
CMD:kiss(playerid, params[])
{
//	if(Trolling == true) return SendErrorMessage(playerid,"Please Wait.");
	if(strcmp(Player[playerid][Name], "062_", true) == 0 || strcmp(Player[playerid][Name], "Whitetiger", true) == 0) {


		new pID, kID;
		if(sscanf(params, "id", pID, kID)) return SendUsageMessage(playerid,"/kiss [Player ID] [Kiss ID]");

		if(pID == playerid) return SendErrorMessage(playerid,"Can't kiss yourself, stoooopid.");
	    if(!IsPlayerConnected(pID)) return SendErrorMessage(playerid,"That player isnt connected.");
		if(kID < 0 || kID > 3) return SendErrorMessage(playerid,"Kiss ID can only be between 0 and 3");

	//	if(strcmp(Player[playerid][Name], "[2L]062_", true) != 0 && strcmp(Player[pID][Name], "[2L]Whitetiger", true) == 0) return SendErrorMessage(playerid,"Only [TeK]0Sexy2_ can kiss Whitetiger.");

		foreach(new i : Player) {
			switch(kID) {
				case 0: PlayAudioStreamForPlayer(i, "http://sixtytiger.com/tiger/mp3/kiss2.mp3");
				case 1: PlayAudioStreamForPlayer(i, "http://sixtytiger.com/tiger/mp3/kiss1.mp3");
				case 2: PlayAudioStreamForPlayer(i, "http://sixtytiger.com/tiger/mp3/kiss3.mp3");
				case 3: PlayAudioStreamForPlayer(i, "http://sixtytiger.com/tiger/mp3/kiss4.mp3");
			}
		}

	//	Trolling = true;
	//	SetTimer("OnPlayersTrolling", 15000, false);

		new iString[180];
		format(iString, sizeof(iString),"{FFFFFF}%s "COL_PRIM"is kissing {FFFFFF}%s",Player[playerid][Name],Player[pID][Name]);
		SendClientMessageToAll(-1,iString);
	} else return 0;

	return 1;
}*/

/*
CMD:sex(playerid, params[])
{
	if(isnull(params)) return SendUsageMessage(playerid,"/sex [Sex ID]");
	new sID = strval(params);

    if(sID < 1 || sID > 20) return SendErrorMessage(playerid,"Sex ID can only be between 1 and 20");

    switch(sID) {
		case 1: ApplyAnimation(playerid, "SEX", "SEX_1_W", 			4.0, 1, 0, 0, 1, 0);
		case 2: ApplyAnimation(playerid, "SEX", "SEX_1_P", 			4.0, 1, 0, 0, 1, 0);
		case 3: ApplyAnimation(playerid, "SEX", "SEX_1_CUM_W", 		4.0, 1, 0, 0, 1, 0);
		case 4: ApplyAnimation(playerid, "SEX", "SEX_1_CUM_P", 		4.0, 1, 0, 0, 1, 0);
		case 5: ApplyAnimation(playerid, "SEX", "SEX_1_FAIL_W", 	4.0, 1, 0, 0, 1, 0);
		case 6: ApplyAnimation(playerid, "SEX", "SEX_1_FAIL_P", 	4.0, 1, 0, 0, 1, 0);
		case 7: ApplyAnimation(playerid, "SEX", "SEX_1TO2_P", 		4.0, 1, 0, 0, 1, 0);
		case 8: ApplyAnimation(playerid, "SEX", "SEX_1TO2_W", 		4.0, 1, 0, 0, 1, 0);
		case 9: ApplyAnimation(playerid, "SEX", "SEX_2_W", 			4.0, 1, 0, 0, 1, 0);
		case 10: ApplyAnimation(playerid, "SEX", "SEX_2_P", 		4.0, 1, 0, 0, 1, 0);
		case 11: ApplyAnimation(playerid, "SEX", "SEX_2_FAIL_W", 	4.0, 1, 0, 0, 1, 0);
		case 12: ApplyAnimation(playerid, "SEX", "SEX_2_FAIL_P", 	4.0, 1, 0, 0, 1, 0);
		case 13: ApplyAnimation(playerid, "SEX", "SEX_2TO3_P", 		4.0, 1, 0, 0, 1, 0);
		case 14: ApplyAnimation(playerid, "SEX", "SEX_2TO3_W", 		4.0, 1, 0, 0, 1, 0);
		case 15: ApplyAnimation(playerid, "SEX", "SEX_3_W", 		4.0, 1, 0, 0, 1, 0);
		case 16: ApplyAnimation(playerid, "SEX", "SEX_3_P", 		4.0, 1, 0, 0, 1, 0);
		case 17: ApplyAnimation(playerid, "SEX", "SEX_3_FAIL_W", 	4.0, 1, 0, 0, 1, 0);
		case 18: ApplyAnimation(playerid, "SEX", "SEX_3_FAIL_P", 	4.0, 1, 0, 0, 1, 0);
		case 19: ApplyAnimation(playerid, "SEX", "SEX_3TO1_W", 		4.0, 1, 0, 0, 1, 0);
		case 20: ApplyAnimation(playerid, "SEX", "SEX_3TO1_P", 		4.0, 1, 0, 0, 1, 0);
    }
    return 1;
}
*/


CMD:muteall(playerid, params[])
{
    if(Player[playerid][Level] < 3 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level to do that.");
	foreach(new i : Player)
		Player[i][Mute] = true;
	AllMuted = true;
	new admName[MAX_PLAYER_NAME];
	GetPlayerName(playerid, admName, sizeof(admName));
	SendClientMessageToAll(-1, sprintf("{FFFFFF}%s "COL_PRIM"has muted everyone!", admName));
    LogAdminCommand("muteall", playerid, INVALID_PLAYER_ID);
	return 1;
}

CMD:unmuteall(playerid, params[])
{
    if(Player[playerid][Level] < 3 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level to do that.");
	foreach(new i : Player)
		Player[i][Mute] = false;
	AllMuted = false;
	new admName[MAX_PLAYER_NAME];
	GetPlayerName(playerid, admName, sizeof(admName));
	SendClientMessageToAll(-1, sprintf("{FFFFFF}%s "COL_PRIM"has unmuted everyone!", admName));
    LogAdminCommand("unmuteall", playerid, INVALID_PLAYER_ID);
	return 1;
}

CMD:mute(playerid,params[])
{
	if(Player[playerid][Level] < 2 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level to do that.");

	new pID, Reason[128], iString[180];
    #if PLUGINS == 1
		if(sscanf(params, "is[128]", pID, Reason)) return SendUsageMessage(playerid,"/mute [Player ID] [Reason]");
	#else
		if(sscanf(params, "is", pID, Reason)) return SendUsageMessage(playerid,"/mute [Player ID] [Reason]");
	#endif
	if(!IsPlayerConnected(pID)) return SendErrorMessage(playerid,"That player isnt connected.");
	if(Player[pID][Level] >= Player[playerid][Level] && pID != playerid) return SendErrorMessage(playerid,"Can't mute someone of same or higher admin level.");


	if(Player[pID][Mute] == true) return SendErrorMessage(playerid,"That player is already muted.");
	if(Player[playerid][Level] <= Player[pID][Level] && playerid != pID) return SendErrorMessage(playerid,"That player is higher admin level than you.");

	Player[pID][Mute] = true;


	if(strlen(Reason)) format(iString, sizeof(iString),"{FFFFFF}%s "COL_PRIM"has muted {FFFFFF}%s "COL_PRIM"| Reason: {FFFFFF}%s",Player[playerid][Name],Player[pID][Name], Reason);
	else format(iString, sizeof(iString),"{FFFFFF}%s "COL_PRIM"has muted {FFFFFF}%s "COL_PRIM"| Reason: {FFFFFF}No reason given.",Player[playerid][Name],Player[pID][Name]);
	SendClientMessageToAll(-1,iString);
    LogAdminCommand("mute", playerid, pID);
	return 1;
}

CMD:unmute(playerid, params[])
{
	if(Player[playerid][Level] < 2 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level to do that.");
	new pID = strval(params);

	if(!IsPlayerConnected(pID)) return SendErrorMessage(playerid,"That player isnt connected.");
	if(Player[pID][Mute] == false) return SendErrorMessage(playerid,"That player is not muted.");

	Player[pID][Mute] = false;

	new iString[180];
	format(iString, sizeof(iString),"{FFFFFF}%s "COL_PRIM"has unmuted {FFFFFF}%s",Player[playerid][Name],Player[pID][Name]);
	SendClientMessageToAll(-1,iString);
    LogAdminCommand("unmute", playerid, pID);
	return 1;
}



CMD:slap(playerid,params[])
{
	if(Player[playerid][Level] < 2 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level to do that.");
	if(isnull(params)) return SendUsageMessage(playerid,"/slap [Player ID]");

	new sid = strval(params);
    if(!IsPlayerConnected(sid)) return SendErrorMessage(playerid,"That player isnt connected.");
	if(Player[sid][Level] >= Player[playerid][Level] && sid != playerid) return SendErrorMessage(playerid,"Can't slap someone of same or higher admin level.");

    new Float:Pos[3];
	GetPlayerPos(sid,Pos[0],Pos[1],Pos[2]);
	SetPlayerPos(sid,Pos[0],Pos[1],Pos[2]+10);

	PlayerPlaySound(playerid,1190,0.0,0.0,0.0);
	PlayerPlaySound(sid,1190,0.0,0.0,0.0);

	new iString[128];
	format(iString, sizeof(iString),"{FFFFFF}%s "COL_PRIM"has slapped {FFFFFF}%s",Player[playerid][Name],Player[sid][Name]);
	SendClientMessageToAll(-1,iString);
	LogAdminCommand("slap", playerid, sid);
	return 1;
}


CMD:explode(playerid,params[])
{
	if(Player[playerid][Level] < 2 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level to do that.");
	if(isnull(params)) return SendUsageMessage(playerid,"/explode [Player ID]");

	new eid = strval(params);
  	if(!IsPlayerConnected(eid)) return SendErrorMessage(playerid,"That Player Isn't Connected.");
	if(Player[eid][Level] >= Player[playerid][Level] && eid != playerid) return SendErrorMessage(playerid,"Can't explode someone of same or higher admin level.");

	new Float:Pos[3];
	GetPlayerPos(eid, Pos[0], Pos[1], Pos[2]);
	CreateExplosion(Pos[0], Pos[1], Pos[2], 7, 6.0);

	new iString[128];
	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has exploded {FFFFFF}%s",Player[playerid][Name],Player[eid][Name]);
	SendClientMessageToAll(-1, iString);
	LogAdminCommand("explode", playerid, eid);
	return 1;
}

CMD:getpara(playerid, params[])
{
	GivePlayerWeapon(playerid, PARACHUTE, 1);
    SendClientMessage(playerid, -1, "{FFFFFF}Parachute given.");
	return 1;
}

CMD:gp(playerid, params[])
{
	cmd_getpara(playerid, params);
	return 1;
}

CMD:para(playerid, params[])
{
	RemovePlayerWeapon(playerid, 46);
    SendClientMessage(playerid, -1, "{FFFFFF}Parachute removed.");
	return 1;
}

CMD:rp(playerid, params[])
{
	cmd_para(playerid, params);
	return 1;
}

CMD:knife(playerid, params[])
{
	RemovePlayerWeapon(playerid, WEAPON_KNIFE);
	return 1;
}

CMD:fixcp(playerid, params[])
{
	if(GameType == BASE && Player[playerid][Playing])
	{
        SetTimerEx("ReshowCPForPlayer", 1000, false, "i", playerid);
	}
	return 1;
}


CMD:pm(playerid,params[])
{
    if(Player[playerid][Mute] == true) return SendErrorMessage(playerid,"You are muted.");

	new recieverid, text[180];

	#if PLUGINS == 1
		if(sscanf(params,"is[180]",recieverid, text)) return SendUsageMessage(playerid,"/pm [Player ID] [Text]");
	#else
		if(sscanf(params,"is",recieverid, text)) return SendUsageMessage(playerid,"/pm [Player ID] [Text]");
	#endif
	if(!IsPlayerConnected(recieverid)) return SendErrorMessage(playerid,"Player not connected.");

	if(Player[recieverid][blockedid] == playerid) return SendErrorMessage(playerid,"That player has blocked PMs from you.");
	if(Player[recieverid][blockedall] == true) return SendErrorMessage(playerid,"That player has blocked PMs from everyone.");

	new String[180];
	format(String,sizeof(String),"{66CC00}*** PM from %s (%d): %s",Player[playerid][Name], playerid, text);
	SendClientMessage(recieverid,-1,String);
	SendClientMessage(recieverid,-1,""COL_PRIM"Use {FFFFFF}/r [Message]"COL_PRIM" to reply");

	Player[recieverid][LastMsgr] = playerid;

	format(String,sizeof(String),"{66CC00}*** PM to %s (%d): %s",Player[recieverid][Name], recieverid, text);
	SendClientMessage(playerid,-1,String);

	PlayerPlaySound(recieverid,1054,0,0,0);

	return 1;
}

CMD:r(playerid,params[])
{
    if(Player[playerid][Mute] == true) return SendErrorMessage(playerid,"You are muted.");

	new replytoid, text[180];
    replytoid = Player[playerid][LastMsgr];

   	if(!IsPlayerConnected(replytoid)) return SendErrorMessage(playerid,"That player is not connected.");
	if(Player[playerid][LastMsgr] == -1) return SendErrorMessage(playerid,"That player is not connected.");

	if(Player[replytoid][blockedid] == playerid) return SendErrorMessage(playerid,"That player has blocked PMs from you.");
	if(Player[replytoid][blockedall] == true) return SendErrorMessage(playerid,"That player has blocked PMs from everyone.");


	#if PLUGINS == 1
		sscanf(params, "s[180]", text);
	#else
	    sscanf(params, "s", text);
	#endif

	if(isnull(text)) return SendUsageMessage(playerid,"/r [Message]");
	if(strlen(text) > 100) return SendErrorMessage(playerid,"Message length should be less than 100 characters.");

	new String[180];
	format(String,sizeof(String),"{66CC00}*** PM from %s (%d): %s",Player[playerid][Name], playerid, text);
	SendClientMessage(replytoid,-1,String);
	format(String,sizeof(String),"{66CC00}*** PM to %s (%d): %s",Player[replytoid][Name], replytoid, text);
	SendClientMessage(playerid,-1,String);

    Player[replytoid][LastMsgr] = playerid;

	PlayerPlaySound(replytoid,1054,0,0,0);

	return 1;
}

CMD:blockpm(playerid, params[])
{
	if(isnull(params)) return SendUsageMessage(playerid,"/blockpm [Player ID]");

	new pID = strval(params);
  	if(!IsPlayerConnected(pID)) return SendErrorMessage(playerid,"That player isn't connected.");

  	Player[playerid][blockedid] = pID;

	new String[128];
  	format(String,sizeof(String),""COL_PRIM"You have blocked PMs from {FFFFFF}%s", Player[pID][Name]);
  	SendClientMessage(playerid,-1,String);

	return 1;
}

CMD:blockpmall(playerid, params[])
{
  	Player[playerid][blockedall] = true;
  	SendClientMessage(playerid,-1,""COL_PRIM"You have blocked PMs from everyone.");

	return 1;
}

CMD:nopm(playerid, params[])
{
	cmd_blockpm(playerid, params);
	return 1;
}

CMD:nopmall(playerid, params[])
{
	cmd_blockpmall(playerid, params);
	return 1;
}

CMD:admins(playerid, params[])
{
	new iString[356] = '\0';

	foreach(new i : Player) {
	    if(Player[i][Level] > 0) {
	    	format(iString, sizeof(iString), "%s{FFFFFF}%s ({FF3333}%d{FFFFFF})\n", iString, Player[i][Name], Player[i][Level]);
		}
	}

	format(iString, sizeof(iString), "%s\n\n"COL_PRIM"Rcon Admins\n", iString);

	foreach(new i : Player) {
	    if(IsPlayerAdmin(i)) {
	    	format(iString, sizeof(iString), "%s{FFFFFF}%s\n", iString, Player[i][Name]);
		}
	}

	if(strlen(iString) < 2) ShowPlayerDialog(playerid,DIALOG_ADMINS,DIALOG_STYLE_MSGBOX,"{FFFFFF}Admins Online", "No Admins online.","Ok","");
	else ShowPlayerDialog(playerid,DIALOG_ADMINS,DIALOG_STYLE_MSGBOX,"{FFFFFF}Admins Online", iString,"Ok","");

	return 1;
}

CMD:connstats( playerid, params[] )
{
    if(Player[playerid][Level] < 3 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher level admin to do that.");

	new pID = INVALID_PLAYER_ID;

	if( sscanf(params, "d", pID) ) return SendUsageMessage(playerid,"/connStats <playerid>");
	if( !IsPlayerConnected(pID) ) return SendErrorMessage(playerid,"** Invalid PlayerID! ");

	new szString[80];
	format(szString, sizeof(szString), "(%d)%s's current connection status: %i.", pID, Player[pID][Name], NetStats_ConnectionStatus(pID) );
	SendClientMessage(playerid, -1, szString);
	return 1;
}

/*CMD:lagcompmode(playerid, params[])
{
    if(Player[playerid][Level] < 4 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher level admin to do that.");

    new Params[64], iString[160], CommandID;
	#if PLUGINS == 1
		sscanf(params, "s[64]", Params);
	#else
	    sscanf(params, "s", Params);
	#endif

	if(isnull(Params) || IsNumeric(Params)) return SendUsageMessage(playerid,"/lagcompmode [on | off]");

	if(strcmp(Params, "on", true) == 0) CommandID = 1;
	else if(strcmp(Params, "off", true) == 0) CommandID = 2;
	else return SendUsageMessage(playerid,"/lagcompmode [on | off]");

	switch(CommandID) {
		case 1: {
		    if(lagcompmode == 1)
		        return SendErrorMessage(playerid,"Lag compensation is already enabled in this server.");
		    SendRconCommand("lagcompmode 1");
		    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has enabled {FFFFFF}Lag Compensation Mode. "COL_PRIM"The server is restarting so changes can take effect!", Player[playerid][Name]);
			SendClientMessageToAll(-1, iString);
			SendRconCommand("gmx");
		} case 2: {
		    if(lagcompmode == 0)
		        return SendErrorMessage(playerid,"Lag compensation is already disabled in this server.");
		    SendRconCommand("lagcompmode 0");
		    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has disabled {FFFFFF}Lag Compensation Mode. "COL_PRIM"The server is restarting so changes can take effect!", Player[playerid][Name]);
			SendClientMessageToAll(-1, iString);
			SendRconCommand("gmx");
		}
	}
	LogAdminCommand("lagcompmode", playerid, INVALID_PLAYER_ID);
	return 1;
}
*/

#if ANTICHEAT == 1
CMD:permac(playerid, params[])
{
    if(Player[playerid][Level] < 5 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");

	if(AntiCheat != true)
	{
	    SendErrorMessage(playerid,"AC must be running. Use /ac !");
	}
	else
	{
	    if(PermAC == true)
		{
			PermAC = false;
			SendClientMessage(playerid, -1, "AC is not permanent now!");
		}
		else
		{
		    PermAC = true;
			SendClientMessage(playerid, -1, "AC will be running permanently!");
		}
	}
	LogAdminCommand("permac", playerid, INVALID_PLAYER_ID);
	return 1;
}

#if ANTICHEAT == 1
CMD:ac(playerid, params[])
{
	if(Player[playerid][Level] < 3 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");

	new iString[160], newhostname[128];

 	if(AntiCheat == true) {
 	    TextDrawHideForAll(ACText);
		TextDrawSetString(ACText, sprintf("%sAC v2: ~g~      ON", MAIN_TEXT_COLOUR));
		AntiCheat = false;
		if(ESLMode == false) {
			format(newhostname, sizeof(newhostname), "hostname %s", hostname);
			SendRconCommand(newhostname);
		}
		KillTimer(ACTimer);

	    AC_Toggle(false);
	    PermAC = false;
    	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}disabled "COL_PRIM"Anti-Cheat.", Player[playerid][Name]);
		SendClientMessageToAll(-1, iString);

	} else {
	    TextDrawSetString(ACText, sprintf("%sAC v2: ~r~Starting", MAIN_TEXT_COLOUR));
 	    TextDrawShowForAll(ACText);
		AntiCheat = true;
		if(ESLMode == false) {
			format(newhostname, sizeof(newhostname), "hostname %s [AC]", hostname);
			SendRconCommand(newhostname);
		}

		ACTimer = SetTimer("OnACStart", 60000, false);
	    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}enabled "COL_PRIM"Anti-Cheat.", Player[playerid][Name]);
        SendClientMessageToAll(-1, iString);

		SendClientMessageToAll(-1, "{FFFFFF}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessageToAll(-1, "{FFFFFF}>> "COL_PRIM"Turn your {FFFFFF}Anti-Cheat "COL_PRIM"on within one minute or get kicked.");
		SendClientMessageToAll(-1, "{FFFFFF}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}
    LogAdminCommand("ac", playerid, INVALID_PLAYER_ID);
	return 1;

}
#endif

/*
CMD:accheck(playerid,params[])
{
	if(Player[playerid][Level] < 5 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");

	new pID;

	if( sscanf(params, "d", pID) )
		return SendUsageMessage(playerid,"/acCheck [Player ID]");

    if(!IsPlayerConnected(pID)) return SendErrorMessage(playerid,"That player isnt connected.");
	if(Player[pID][Level] >= Player[playerid][Level]) return SendErrorMessage(playerid,"Can't slap someone of same or higher admin level.");

    format(iString, sizeof(iString), "AC Check {FFFFFF}enabled on player {FFFFFF}%s "COL_PRIM"by Admin {FFFFFF}\"%s\".", Player[playerid][Name]);
    SendClientMessageToAll(0x3377FF, iString);

	SendClientMessage(pID, -1, "{FFFFFF}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	SendClientMessage(pID, -1, "{FFFFFF}>> "COL_PRIM"Turn your {FFFFFF}Anti-Cheat "COL_PRIM"on within one minute or get kicked.");
	SendClientMessage(pID, -1, "{FFFFFF}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");

	Player[playerid][ACCheck] = true;
	Player[playerid][ACEnabled] = 60;

    LogAdminCommand("accheck", playerid, pID);
    return 1;
}

if(Player[playerid][ACCheck] == true)
{
	if( !HaveAC )
	{
		if(Player[playerid][ACEnabled]== 30)
			SendClientMessage(pID, -1, "{FFFFFF}>> [AC Warning] "COL_PRIM" You have less than {FFFFFF}30 seconds"COL_PRIM" before getting kicked.");
		else if(Player[playerid][ACEnabled] == 10)
			SendClientMessage(pID, -1, "{FFFFFF}>> [AC Warning] "COL_PRIM" You have less than {FFFFFF}10 seconds"COL_PRIM" before getting kicked.");
		else if(Player[playerid][ACEnabled] == 1)
			SendClientMessage(pID, -1, "{FFFFFF}>> [AC Warning] "COL_PRIM" ADIOS Motherfucker!");
		else if(Player[playerid][ACEnabled] == 0)
		{
            Player[playerid][ACEnabled] = 0;
		}
	    Player[playerid][ACEnabled]--;
	}
	else
	{
	    Player[playerid][ACEnabled] = 0;
	}
}*/
#endif


CMD:serverstats(playerid, params[])
{
	new stats[450];
	GetNetworkStats(stats, sizeof(stats)); // get the servers networkstats
	ShowPlayerDialog(playerid, DIALOG_SERVER_STATS, DIALOG_STYLE_MSGBOX, "Server Network Stats", stats, "Close", "");
	return 1;
}

CMD:maxpacket(playerid, params[])
{
    if(ESLMode == true) return SendErrorMessage(playerid,"Can't change when ESL mode is enabled.");
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");
	if(isnull(params)) return SendUsageMessage(playerid,"/maxpacket [Maximum Packetloss]");

	new Float:iPacket = floatstr(params);
	if(iPacket <= 0 || iPacket > 20) return SendErrorMessage(playerid,"Packetloss value can be between 0 and 20 maximum.");

	Max_Packetloss = iPacket;

	new iString[160];
	format(iString, sizeof(iString), "UPDATE Configs SET Value = %.2f WHERE Option = 'Maximum Packetloss'", iPacket);
    db_free_result(db_query(sqliteconnection, iString));

	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has changed maximum packet-loss to: {FFFFFF}%.2f", Player[playerid][Name], iPacket);
	SendClientMessageToAll(-1, iString);
    LogAdminCommand("maxpacket", playerid, INVALID_PLAYER_ID);
	return 1;
}



CMD:maxping(playerid, params[])
{
	if(ESLMode == true) return SendErrorMessage(playerid,"Can't change when ESL mode is enabled.");
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");
	if(isnull(params) || !IsNumeric(params)) return SendUsageMessage(playerid,"/maxping [Maximum Ping]");

	new iPacket = strval(params);
	if(iPacket <= 0 || iPacket > 1000) return SendErrorMessage(playerid,"Ping limit can be between 0 and 1000 maximum.");

	Max_Ping = iPacket;

	new iString[180];
	format(iString, sizeof(iString), "UPDATE Configs SET Value = %d WHERE Option = 'Maximum Ping'", Max_Ping);
    db_free_result(db_query(sqliteconnection, iString));

	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has changed maximum ping limit to: {FFFFFF}%d", Player[playerid][Name], iPacket);
	SendClientMessageToAll(-1, iString);
    LogAdminCommand("maxping", playerid, INVALID_PLAYER_ID);
	return 1;
}

CMD:minfps(playerid, params[])
{
    if(ESLMode == true) return SendErrorMessage(playerid,"Can't change when ESL mode is enabled.");
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");
	if(isnull(params) || !IsNumeric(params)) return SendUsageMessage(playerid,"/minfps [Minimum FPS]");

	new iPacket = strval(params);
	if(iPacket < 20 || iPacket > 90) return SendErrorMessage(playerid,"FPS limit can be between 20 and 90 maximum.");

	Min_FPS = iPacket;

	new iString[180];
	format(iString, sizeof(iString), "UPDATE Configs SET Value = %d WHERE Option = 'Minimum FPS'", Min_FPS);
    db_free_result(db_query(sqliteconnection, iString));

	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has changed minimum FPS limit to: {FFFFFF}%d", Player[playerid][Name], iPacket);
	SendClientMessageToAll(-1, iString);
    LogAdminCommand("minfps", playerid, INVALID_PLAYER_ID);
	return 1;
}

CMD:allvs(playerid,params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");

    if(Current != -1) return SendErrorMessage(playerid,"Can't use while round is active.");
    if(isnull(params)) return SendUsageMessage(playerid,"/allvs [Team ID | 0 = Attacker, 1 = Defender] [Tag/Name]");

	new pID, TempTeamName[24];
	#if PLUGINS == 1
    	sscanf(params, "is[24]", pID, TempTeamName);
	#else
	    sscanf(params, "is", pID, TempTeamName);
	#endif
    if(pID < 0 || pID > 1) return SendErrorMessage(playerid,"Invalid team ID.");


    new PlayersAvailable, iString[160];
	new bool:PlayersToTeam[MAX_PLAYERS] = false;

    foreach(new i : Player) {
        if(strfind(Player[i][Name], TempTeamName, true) != -1 && (Player[i][Team] == ATTACKER || Player[i][Team] == DEFENDER)) {
            PlayersAvailable++;
            PlayersToTeam[i] = true;
        }
    }
    if(PlayersAvailable < 1) return SendErrorMessage(playerid,"No players match specified tag/name.");

	foreach(new i : Player) {

		new MyVehicle = -1;
		new Seat;

		if(IsPlayerInAnyVehicle(i)) {
			MyVehicle = GetPlayerVehicleID(i);
			Seat = GetPlayerVehicleSeat(i);
		}


		if(PlayersToTeam[i] == true) {
			if(pID == 0) {
			    Player[i][Team] = ATTACKER;
			    SetPlayerColor(i, ATTACKER_NOT_PLAYING);
			} else {
			    Player[i][Team] = DEFENDER;
			    SetPlayerColor(i, DEFENDER_NOT_PLAYING);
			}
		} else {
		    if(pID == 1) {
		        Player[i][Team] = ATTACKER;
		        SetPlayerColor(i, ATTACKER_NOT_PLAYING);
			} else {
				Player[i][Team] = DEFENDER;
				SetPlayerColor(i, DEFENDER_NOT_PLAYING);
			}
		}
		SetPlayerSkin(i, Skin[Player[i][Team]]);
        ClearAnimations(i);


		if(MyVehicle != -1) {
		    PutPlayerInVehicle(i, MyVehicle, Seat);

			if(GetPlayerState(i) == PLAYER_STATE_DRIVER) {
				switch(Player[i][Team]) {
					case ATTACKER: ChangeVehicleColor(GetPlayerVehicleID(i), 175, 175);
					case ATTACKER_SUB: ChangeVehicleColor(GetPlayerVehicleID(i), 158, 158);
					case DEFENDER: ChangeVehicleColor(GetPlayerVehicleID(i), 198, 198);
					case DEFENDER_SUB: ChangeVehicleColor(GetPlayerVehicleID(i), 208, 208);
					case REFEREE: ChangeVehicleColor(GetPlayerVehicleID(i), 200, 200);
				}
			}
		}
    }

    format(iString, sizeof(iString),"{FFFFFF}%s "COL_PRIM"has changed the teams to {FFFFFF}\"%s\" vs all.", Player[playerid][Name], TempTeamName);
    SendClientMessageToAll(-1, iString);
    return 1;
}


CMD:move(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");

    new iString[160], pID[2];
    if(sscanf(params, "dd", pID[0], pID[1])) return SendUsageMessage(playerid,"/move [PlayerToMove ID] [PlayerToMoveTo ID]");
	if(!IsPlayerConnected(pID[0]) || !IsPlayerConnected(pID[1])) return SendErrorMessage(playerid,"One of the player IDs you used is not connected.");

    new Float:Pos[3];
    GetPlayerPos(pID[1], Pos[0], Pos[1], Pos[2]);

    SetPlayerInterior(pID[0], GetPlayerInterior(pID[1]));
    SetPlayerVirtualWorld(pID[0], GetPlayerVirtualWorld(pID[1]));

    if(GetPlayerState(pID[0]) == 2) {
	    SetVehiclePos(GetPlayerVehicleID(pID[0]), Pos[0]+3, Pos[1], Pos[2]);
		LinkVehicleToInterior(GetPlayerVehicleID(pID[0]),GetPlayerInterior(pID[1]));
	    SetVehicleVirtualWorld(GetPlayerVehicleID(pID[0]),GetPlayerVirtualWorld(pID[1]));
    }
    else SetPlayerPos(pID[0], Pos[0]+2, Pos[1], Pos[2]);

    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has moved {FFFFFF}%s "COL_PRIM"to {FFFFFF}%s", Player[playerid][Name], Player[pID[0]][Name], Player[pID[1]][Name]);
    SendClientMessageToAll( -1, iString);
    LogAdminCommand("move", playerid, pID[0]);
    return 1;
}


/*
CMD:shortcuts(playerid, params[])
{
	ShowPlayerDialog(playerid, EDITSHORTCUTS_DIALOG, DIALOG_STYLE_LIST, "Editing shortcuts", sprintf("Num2: %s\nNum4: %s\nNum6: %s\nNum8: %s", PlayerShortcut[playerid][Shortcut1], PlayerShortcut[playerid][Shortcut2], PlayerShortcut[playerid][Shortcut3], PlayerShortcut[playerid][Shortcut4]), "Edit", "Cancel");
	return 1;
}
*/

CMD:shortcuts(playerid, params[])
{
    new Params[64], iString[160], CommandID;
	#if PLUGINS == 1
		sscanf(params, "s[64]", Params);
	#else
	    sscanf(params, "s", Params);
	#endif

	if(isnull(Params)) {
		ShowPlayerDialog(playerid, EDITSHORTCUTS_DIALOG, DIALOG_STYLE_LIST, "Editing shortcuts", sprintf("Num2: %s\nNum4: %s\nNum6: %s\nNum8: %s", PlayerShortcut[playerid][Shortcut1], PlayerShortcut[playerid][Shortcut2], PlayerShortcut[playerid][Shortcut3], PlayerShortcut[playerid][Shortcut4]), "Edit", "Cancel");
	} else {
	    if(Player[playerid][Level] < 1) return SendErrorMessage(playerid,"You need to be a higher level admin to do that.");
		if(strcmp(Params, "on", true) == 0) CommandID = 1;
		else if(strcmp(Params, "off", true) == 0) CommandID = 2;
		else return SendUsageMessage(playerid,"/shortcuts [on | off]");

		switch(CommandID) {
			case 1: {
			    ShortCuts = true;
	    		format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}enabled "COL_PRIM"shortcut team messages.", Player[playerid][Name]);
				SendClientMessageToAll(-1, iString);
			} case 2: {
			    ShortCuts = false;
	    		format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has {FFFFFF}disabled "COL_PRIM"shortcut team messages.", Player[playerid][Name]);
				SendClientMessageToAll(-1, iString);
			}
		}
	}
	LogAdminCommand("shortcuts", playerid, INVALID_PLAYER_ID);
	return 1;
}

CMD:jetpack(playerid,params[])
{
	if(ESLMode == true) return SendErrorMessage(playerid,"Can't use when ESL mode is enabled.");
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");
	if(Player[playerid][Playing] == true) return SendErrorMessage(playerid,"Can't use this command in round.");

    new pID = strval(params);
	if(isnull(params)) pID = playerid;

    if(!IsPlayerConnected(pID)) return SendErrorMessage(playerid,"That player isn't connected.");

	new iString[160];
    format(iString,sizeof(iString),"{FFFFFF}%s "COL_PRIM"gave a jetpack to {FFFFFF}%s", Player[playerid][Name], Player[pID][Name]);
	SendClientMessageToAll(-1, iString);

    SetPlayerSpecialAction(pID, 2);
    return 1;
}

CMD:gototrain(playerid, params[])
{
    if(Player[playerid][InDM] == true) QuitDM(playerid);
   	if(Player[playerid][InDuel] == true) return SendErrorMessage(playerid,"Can't use this command during duel. Use {FFFFFF}/rq "COL_PRIM"instead.");
   	if(Player[playerid][InHeadShot] == true)
	   	return SendErrorMessage(playerid,"Can't use this command while in HeadShot zone.");

	if(Player[playerid][AntiLag] == true)
		return SendErrorMessage(playerid,"Can't use this command while in Antilag zone.");


    if(Player[playerid][Playing] == true)
        return SendErrorMessage(playerid,"Can't use this command while in round.");

	new Float:pos[3];
	GetVehiclePos(thetrain, pos[0], pos[1], pos[2]);
	if(!IsPlayerInAnyVehicle(playerid))
		SetPlayerPos(playerid, pos[0] + 3.0, pos[1] + 3.0, pos[2] + 1.0);
	else
	    SetVehiclePos(GetPlayerVehicleID(playerid), pos[0] + 3.0, pos[1] + 3.0, pos[2] + 1.0);
	return 1;
}

CMD:help(playerid, params[])
{
	HelpString = "";
	strcat(HelpString, ""COL_PRIM"Attack-Defend Gamemode Created By: {FFFFFF}062_ "COL_PRIM"and {FFFFFF}Whitetiger");
	strcat(HelpString, "\n"COL_PRIM"For detailed credits about development team, type {FFFFFF}/credits");
	strcat(HelpString, "\n\n{0044FF}Match-Mode Help:");
	strcat(HelpString, "\n"COL_PRIM"To enable Match-Mode, press {FFFFFF}'Y' "COL_PRIM"in lobby or {FFFFFF}'H' "COL_PRIM"in round and most textdraws will be clickable.");
	strcat(HelpString, "\nAlternatively, just type {FFFFFF}/war [Team A] [Team B] "COL_PRIM"to enable the Match-Mode and type {FFFFFF}/war end "COL_PRIM"to disable it.");
	strcat(HelpString, "\nOnce Match-Mode is enabled, team names and score, current and total rounds can be changed by clicking on their textdraw.");
	strcat(HelpString, "\nOther useful commands for match: {FFFFFF}/tr (Total Rounds), /cr (Current Round), /hl (Heal All), /al (Armour All), /replace, /sethp, /setarmour");
	strcat(HelpString, "\n/start [Base | Arena] and /random [Base | Arena], /setteam, /setscore, /teamname");
	strcat(HelpString, "\n\n{0044FF}Server Help:");
	strcat(HelpString, "\n"COL_PRIM"For any admin commands, type {FFFFFF}/acmds "COL_PRIM"and for public commands type {FFFFFF}/cmds");
	strcat(HelpString, "\n"COL_PRIM"Round can be paused by pressing {FFFFFF}'Y' "COL_PRIM"(for admins only).");
	strcat(HelpString, "\nYou can request for backup from your team by pressing {FFFFFF}'N' "COL_PRIM"in round.");
	strcat(HelpString, "\nYou can ask for pausing the round by pressing {FFFFFF}'Y' "COL_PRIM"in round.");

	ShowPlayerDialog(playerid,DIALOG_SERVER_HELP,DIALOG_STYLE_MSGBOX,"{0044FF}Server Help", HelpString, "OK","");

	return 1;
}

CMD:deathdiss(playerid, params[])
{
    if(isnull(params)) return SendUsageMessage(playerid,"/deathdiss [Message]");
	if(strlen(params) <= 3) return SendErrorMessage(playerid,"Too short!");
	if(strlen(params) > 64) return SendErrorMessage(playerid,"Too long!");

	new iString[128];
	format(DeathMessageStr[playerid], 64, "%s", params);
	format(iString, sizeof(iString), "UPDATE `Players` SET `DeathMessage` = '%s' WHERE `Name` = '%s'", DB_Escape(params), DB_Escape(Player[playerid][Name]) );
	db_free_result(db_query(sqliteconnection, iString));
	SendClientMessage(playerid, -1, "Death diss message has been changed successfully!");
	return 1;
}


CMD:fightstyle(playerid, params[])
{
    if(isnull(params) || !IsNumeric(params))
	{
		SendUsageMessage(playerid,"/fightstyle [FightStyle ID]");
		SendClientMessage(playerid, -1, "0 Normal | 1 Boxing | 2 KungFu | 3 Knee-head | 4 Grab-kick | 5 Elbow-kick");
		return 1;
	}
	new fsID = strval(params);
	if(fsID < 0 || fsID > 5) return SendErrorMessage(playerid,"Invalid FightStyle ID (From 0 to 5 are valid)");

	Player[playerid][FightStyle] = FightStyleIDs[fsID];
	SetPlayerFightingStyle(playerid, Player[playerid][FightStyle]);
	new iString[128];
	format(iString, sizeof(iString), "UPDATE `Players` SET `FightStyle` = '%d' WHERE `Name` = '%s'", Player[playerid][FightStyle], DB_Escape(Player[playerid][Name]) );
	db_free_result(db_query(sqliteconnection, iString));
	SendClientMessage(playerid, -1, sprintf(""COL_PRIM"FightStyle changed to: {FFFFFF}%s", FightStyleNames[fsID]));
	return 1;
}

new bool:DatabaseSetToReload = false;

forward ReloadDatabase();
public ReloadDatabase()
{
    sqliteconnection = db_open("AAD.db");
    DatabaseSetToReload = false;
    SendClientMessageToAll(-1, ""COL_PRIM"SQLite database has been reloaded successfully.");
	return 1;
}

SetDatabaseToReload(playerid = INVALID_PLAYER_ID)
{
	if(playerid != INVALID_PLAYER_ID)
		SendClientMessageToAll(-1, sprintf("{FFFFFF}%s "COL_PRIM"has set the SQLite database to reload.", Player[playerid][Name]));
		
	DatabaseSetToReload = true;
	db_close(sqliteconnection);
	SetTimer("ReloadDatabase", 100, false);
	return 1;
}

CMD:reloaddb(playerid, params[])
{
    if(Player[playerid][Level] < 3 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");
	if(DatabaseSetToReload == true)
		return SendErrorMessage(playerid, "Database is already set to reload.");
	SetDatabaseToReload(playerid);
	return 1;
}

forward FakePacketRenovationEnd(playerid, Float:fakepacket);
public FakePacketRenovationEnd(playerid, Float:fakepacket)
{
    Player[playerid][FakePacketRenovation] = false;
    SendClientMessageToAll(-1, sprintf(""COL_PRIM"Fake packetloss renovation on {FFFFFF}%s "COL_PRIM"has ended - Old: {FFFFFF}%.1f "COL_PRIM" | Current: {FFFFFF}%.1f", Player[playerid][Name], fakepacket, GetPlayerPacketLoss(playerid)));
	return 1;
}

CMD:fakepacket(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");

	new pID, interv;
	if(sscanf(params, "id", pID, interv)) return SendUsageMessage(playerid,"/fakepacket [Player ID] [Time in minutes]");
	if(interv <= 0 || interv > 5)  return SendErrorMessage(playerid,"Invalid (Min: 1 | Max: 5).");
	if(Player[pID][FakePacketRenovation])  return SendErrorMessage(playerid,"Player is already on fake packetloss renovation.");
	if(!IsPlayerConnected(pID)) return SendErrorMessage(playerid,"That player isn't connected.");

	SetTimerEx("FakePacketRenovationEnd", interv * 60 * 1000, false, "if", pID, GetPlayerPacketLoss(pID));
	Player[pID][FakePacketRenovation] = true;

	SendClientMessageToAll(-1, sprintf("{FFFFFF}%s "COL_PRIM"has started fake packetloss renovation on {FFFFFF}%s "COL_PRIM" - Interval: {FFFFFF}%d min(s).",Player[playerid][Name], Player[pID][Name], interv));

    LogAdminCommand("fakepacket", playerid, pID);
	return 1;
}

stock SetWeaponStatsString()
{
	format(WeaponStatsStr, sizeof WeaponStatsStr, "");
	foreach(new i : Player)
	{
	    if((Player[i][WeaponStat][WEAPON_DEAGLE] + Player[i][WeaponStat][WEAPON_SHOTGUN] + Player[i][WeaponStat][WEAPON_M4] + Player[i][WeaponStat][WEAPON_SHOTGSPA] + Player[i][WeaponStat][WEAPON_RIFLE] + Player[i][WeaponStat][WEAPON_SNIPER] + Player[i][WeaponStat][WEAPON_AK47] + Player[i][WeaponStat][WEAPON_MP5] + Player[i][WeaponStat][0]) <= 0)
			continue;

		format(WeaponStatsStr, sizeof WeaponStatsStr, "%s{0066FF}%s {D6D6D6}[Deagle: %d] [Shotgun: %d] [M4: %d] [Spas: %d] [Rifle: %d] [Sniper: %d] [AK: %d] [MP5: %d] [Punch: %d] [Rounds: %d]\n",
			WeaponStatsStr, Player[i][Name], Player[i][WeaponStat][WEAPON_DEAGLE], Player[i][WeaponStat][WEAPON_SHOTGUN], Player[i][WeaponStat][WEAPON_M4], Player[i][WeaponStat][WEAPON_SHOTGSPA], Player[i][WeaponStat][WEAPON_RIFLE], Player[i][WeaponStat][WEAPON_SNIPER], Player[i][WeaponStat][WEAPON_AK47], Player[i][WeaponStat][WEAPON_MP5], Player[i][WeaponStat][0], Player[i][RoundPlayed]);
	}

	for(new i = 0; i < SAVE_SLOTS; i ++)
	{
		if(strlen(SaveVariables[i][pName]) > 2)
		{
		    if((SaveVariables[i][WeaponStat][WEAPON_DEAGLE] + SaveVariables[i][WeaponStat][WEAPON_SHOTGUN] + SaveVariables[i][WeaponStat][WEAPON_M4] + SaveVariables[i][WeaponStat][WEAPON_SHOTGSPA] + SaveVariables[i][WeaponStat][WEAPON_RIFLE] + SaveVariables[i][WeaponStat][WEAPON_SNIPER] + SaveVariables[i][WeaponStat][WEAPON_AK47] + SaveVariables[i][WeaponStat][WEAPON_MP5] + SaveVariables[i][WeaponStat][0]) <= 0)
				continue;

			format(WeaponStatsStr, sizeof WeaponStatsStr, "%s{0066FF}%s {D6D6D6}[Deagle: %d] [Shotgun: %d] [M4: %d] [Spas: %d] [Rifle: %d] [Sniper: %d] [AK: %d] [MP5: %d] [Punch: %d] [Rounds: %d]\n",
				WeaponStatsStr, SaveVariables[i][pName], SaveVariables[i][WeaponStat][WEAPON_DEAGLE], SaveVariables[i][WeaponStat][WEAPON_SHOTGUN], SaveVariables[i][WeaponStat][WEAPON_M4], SaveVariables[i][WeaponStat][WEAPON_SHOTGSPA], SaveVariables[i][WeaponStat][WEAPON_RIFLE], SaveVariables[i][WeaponStat][WEAPON_SNIPER], SaveVariables[i][WeaponStat][WEAPON_AK47], SaveVariables[i][WeaponStat][WEAPON_MP5], SaveVariables[i][WeaponStat][0], SaveVariables[i][TPlayed]);
		}
	}
	return 1;
}

CMD:weaponstats(playerid, params[])
{
	ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "Players Weapon Statistics", WeaponStatsStr, "Close", "");
	return 1;
}

CMD:alladmins(playerid, params[])
{
    new DBResult:res = db_query(sqliteconnection, "SELECT * FROM Players WHERE LEVEL < 6 AND LEVEL > 0 ORDER BY Level DESC");
	new holdStr[64];
	new bigStr[512];

	do
	{
	    db_get_field_assoc(res, "Name", holdStr, sizeof(holdStr));
		printf("Name: %s", holdStr);
		format(bigStr, sizeof bigStr, "%s%s", bigStr, holdStr);
		db_get_field_assoc(res, "Level", holdStr, sizeof(holdStr));
		format(bigStr, sizeof bigStr, "%s [%d]\n", bigStr, strval(holdStr));
	}
	while(db_next_row(res));
	db_free_result(res);
	ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "All Server Admins", bigStr, "Okay", "");
	return 1;
}

/* Changes Occurance of COL_PRIM to value contained in ColScheme */
CMD:chatcolor(playerid,params[])
{
	new col[7];

	if( !isnull(params) && !strcmp(params,"01A2F8",true) )
	{
		params[0] = '\0';
	    strcat(params,"01A2F7",7);
	}
	if( strlen(params) != 6 || sscanf(params,"h",col) )
	{
	    SendErrorMessage(playerid,"Please Enter a Valid Hex color code.");
	    new bigString[512];
	    new colorList[] = // enter as much colors here
		{
		    0x01BA2F8FF, 0x0044FFFF, 0xF36164FF
		};
	    strcat( bigString, "\t\tSyntax: /ChatColor ColorCode || E.g: /ChatColor 0044FF\t\t\t\n{EBEBEB}Some Examples:\n",sizeof(bigString) );

		for(new i = 0, tmpint = 0; i < sizeof(colorList); i++)
		{
			tmpint = colorList[i] >> 8 & 0x00FFFFFF;
			format( bigString, sizeof(bigString), "%s{%06x}%06x   ", bigString, tmpint, tmpint );
			if( i == 9 ) strcat( bigString, "\n", sizeof(bigString) );
		}

		strcat( bigString, "\n\nHex Code need to have 6 Digits and can contain only number from 0 - 9 and letters A - F", sizeof(bigString) );
   	    strcat( bigString, "\n\t{01A2F8}You can get some color codes from websites like: Www.ColorPicker.Com \n\t\t{37B6FA}Notice: In-Game Colors might appear different from website.\n", sizeof(bigString) );

		ShowPlayerDialog(playerid,DIALOG_HELPS,DIALOG_STYLE_MSGBOX, "Hints for the command.", bigString, "Close", "" );
		return 1;
	}
    if(Player[playerid][Level] < 5 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be level 4 or rcon admin.");

	format(ColScheme,10,"{%06x}", col);
	//printf("ColScheme Changed to: %s %x", ColScheme, col );
	new iString[128];
	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has changed {FFFFFF}Chat Color to "COL_PRIM"%06x", Player[playerid][Name], col );
	SendClientMessageToAll(-1, iString);

	format(iString, sizeof(iString), "UPDATE `Configs` SET `Value` = '%06x' WHERE `Option` = 'ChatColor'", col);
    db_free_result(db_query(sqliteconnection, iString));

	return 1;
}


CMD:themes(playerid, params[])
{
    if(Player[playerid][Level] < 5 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be level 5 or rcon admin.");

    new str[512];
	strcat(str, "White (Background) & Black (Text)\n");
	strcat(str, "Black (Background) & White (Text)\n");
	strcat(str, "White (Background) & Red (Text)\n");
	strcat(str, "Black (Background) & Red (Text)\n");
	strcat(str, "White (Background) & Blue (Text)\n");
	strcat(str, "Black (Background) & Blue (Text)\n");
	strcat(str, "White (Background) & Green (Text)\n");
	strcat(str, "Black (Background) & Green (Text)\n");
	strcat(str, "White (Background) & Purple (Text)\n");
	strcat(str, "Black (Background) & Purple (Text)");

	ShowPlayerDialog(playerid, DIALOG_THEME_CHANGE1, DIALOG_STYLE_LIST, "{0044FF} Theme colour menu", str, "Select", "Cancel");
	return 1;
}

CMD:defaultskins(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");

	new iString[140];

	Skin[ATTACKER] = 170;
	format(iString, sizeof(iString), "UPDATE Configs SET Value = %d WHERE Option = 'Attacker Skin'", 170);
    db_free_result(db_query(sqliteconnection, iString));

	Skin[DEFENDER] = 176;
	format(iString, sizeof(iString), "UPDATE Configs SET Value = %d WHERE Option = 'Defender Skin'", 176);
    db_free_result(db_query(sqliteconnection, iString));

	Skin[REFEREE] = 51;
	format(iString, sizeof(iString), "UPDATE Configs SET Value = %d WHERE Option = 'Referee Skin'", 51);
    db_free_result(db_query(sqliteconnection, iString));


	foreach(new i : Player) {
	    if(Player[i][Team] == ATTACKER) {
	        SetPlayerSkin(i, Skin[ATTACKER]);
			ClearAnimations(i);
		}
		if(Player[i][Team] == DEFENDER) {
	        SetPlayerSkin(i, Skin[DEFENDER]);
			ClearAnimations(i);
		}
		if(Player[i][Team] == REFEREE) {
	        SetPlayerSkin(i, Skin[REFEREE]);
			ClearAnimations(i);
		}
	}

	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has changed {FFFFFF}skins "COL_PRIM"to default.", Player[playerid][Name] );
	SendClientMessageToAll(-1, iString);
    LogAdminCommand("defaultskins", playerid, INVALID_PLAYER_ID);
	return 1;
}

CMD:teamskin(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");

	new Params[2], iString[180];
	if(sscanf(params, "dd", Params[0], Params[1])) return SendUsageMessage(playerid,"/teamskin [Team ID | 0 Attacker | 1 Defender | 2 Referee] [Skin]");
	if(Params[0] < 0 || Params[0] > 2) return SendErrorMessage(playerid,"Invalid team ID.");
	if(IsInvalidSkin(Params[1])) return SendErrorMessage(playerid,"Invalid skin ID.");

	switch(Params[0]) {
	    case ATTACKER-1: {
	        Skin[ATTACKER] = Params[1];

			format(iString, sizeof(iString), "UPDATE Configs SET Value = %d WHERE Option = 'Attacker Skin'", Skin[ATTACKER]);
		    db_free_result(db_query(sqliteconnection, iString));

	    } case DEFENDER-1: {
	        Skin[DEFENDER] = Params[1];

			format(iString, sizeof(iString), "UPDATE Configs SET Value = %d WHERE Option = 'Defender Skin'", Skin[DEFENDER]);
		    db_free_result(db_query(sqliteconnection, iString));

	    } case REFEREE-1: {
	        Skin[REFEREE] = Params[1];

			format(iString, sizeof(iString), "UPDATE Configs SET Value = %d WHERE Option = 'Referee Skin'", Skin[REFEREE]);
		    db_free_result(db_query(sqliteconnection, iString));
	    }
	}

	foreach(new i : Player) {
	    if(Player[i][Team] == Params[0]+1) {
	        SetPlayerSkin(i, Params[1]);
			ClearAnimations(i);
		}
	}

	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has changed {FFFFFF}%s "COL_PRIM"skin to: {FFFFFF}%d", Player[playerid][Name], TeamName[Params[0]+1], Skin[Params[0]+1]);
	SendClientMessageToAll(-1, iString);
    LogAdminCommand("teamskin", playerid, INVALID_PLAYER_ID);
	return 1;
}

CMD:setteam(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");

	new Params[2], iString[180];
	if(sscanf(params, "dd", Params[0], Params[1])) return SendUsageMessage(playerid,"/setteam [Player ID] [Team ID | 0 Att | 1 Def | 2 Ref | 3 Att_Sub | 4 Def_Sub]");

	if(Params[1] < 0 || Params[1] > 4) return SendErrorMessage(playerid,"Invalid team ID.");
	if(!IsPlayerConnected(Params[0])) return SendErrorMessage(playerid,"That player isn't connected.");
	if(Player[Params[0]][Playing] == true) return SendErrorMessage(playerid,"That player is playing.");

	new MyVehicle = -1;
	new Seat;

	if(IsPlayerInAnyVehicle(Params[0])) {
		MyVehicle = GetPlayerVehicleID(Params[0]);
		Seat = GetPlayerVehicleSeat(Params[0]);
	}

	Player[Params[0]][Team] = Params[1]+1;
	SetPlayerSkin(Params[0], Skin[Params[1]+1]);
	ColorFix(Params[0]);
	ClearAnimations(Params[0]);

	if(Current != -1 && TeamHPDamage == true) {
		if(Player[Params[0]][Team] == ATTACKER || Player[Params[0]][Team] == ATTACKER_SUB) {
            TextDrawShowForPlayer(Params[0], AttackerTeam[0]);
            TextDrawShowForPlayer(Params[0], AttackerTeam[1]);
   			TextDrawHideForPlayer(Params[0], DefenderTeam[0]);
   			TextDrawHideForPlayer(Params[0], DefenderTeam[1]);
		} else if(Player[Params[0]][Team] == DEFENDER || Player[Params[0]][Team] == DEFENDER_SUB) {
            TextDrawShowForPlayer(Params[0], DefenderTeam[0]);
            TextDrawShowForPlayer(Params[0], DefenderTeam[1]);
   			TextDrawHideForPlayer(Params[0], AttackerTeam[0]);
   			TextDrawHideForPlayer(Params[0], AttackerTeam[1]);
       	} else {
    		TextDrawHideForPlayer(Params[0], AttackerTeam[0]);
   			TextDrawHideForPlayer(Params[0], AttackerTeam[1]);
   			TextDrawHideForPlayer(Params[0], DefenderTeam[0]);
   			TextDrawHideForPlayer(Params[0], DefenderTeam[1]);
       	}
	}

	if(MyVehicle != -1) {
	    PutPlayerInVehicle(Params[0], MyVehicle, Seat);

		if(GetPlayerState(Params[0]) == PLAYER_STATE_DRIVER) {
			switch(Player[Params[0]][Team]) {
				case ATTACKER: ChangeVehicleColor(GetPlayerVehicleID(Params[0]), 175, 175);
				case ATTACKER_SUB: ChangeVehicleColor(GetPlayerVehicleID(Params[0]), 158, 158);
				case DEFENDER: ChangeVehicleColor(GetPlayerVehicleID(Params[0]), 198, 198);
				case DEFENDER_SUB: ChangeVehicleColor(GetPlayerVehicleID(Params[0]), 208, 208);
				case REFEREE: ChangeVehicleColor(GetPlayerVehicleID(Params[0]), 200, 200);
			}
		}

	}

	if(Player[Params[0]][TextPos] == false) format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDamage ~r~%.0f~n~%sTotal Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[Params[0]][RoundKills], MAIN_TEXT_COLOUR, Player[Params[0]][RoundDamage], MAIN_TEXT_COLOUR, Player[Params[0]][TotalDamage]);
	else format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDmg ~r~%.0f~n~%sT. Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[Params[0]][RoundKills], MAIN_TEXT_COLOUR, Player[Params[0]][RoundDamage], MAIN_TEXT_COLOUR, Player[Params[0]][TotalDamage]);
	PlayerTextDrawSetString(Params[0], RoundKillDmgTDmg, iString);

	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has switched {FFFFFF}%s "COL_PRIM"to: {FFFFFF}%s", Player[playerid][Name], Player[Params[0]][Name], TeamName[Params[1]+1]);
	SendClientMessageToAll(-1, iString);
	return 1;
}

CMD:setscore(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");
	if(!WarMode) return SendErrorMessage(playerid, "Warmode is not enabled.");

	new TeamID, Score, iString[180];
	if(sscanf(params, "dd", TeamID, Score)) return SendUsageMessage(playerid,"/setscore [Team ID (0 Att | 1 Def)] [Score]");

	if(TeamID < 0 || TeamID > 1) return SendErrorMessage(playerid,"Invalid team ID.");
	if(Score < 0 || Score > 100) return SendErrorMessage(playerid,"Score can only be between 0 and 100.");

	if(TeamID == 0) {
		if((Score + TeamScore[DEFENDER]) >= TotalRounds) return SendErrorMessage(playerid,"Attacker plus defender score is bigger than or equal to the total rounds.");
		TeamScore[ATTACKER] = Score;
        format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has set attacker team score to: {FFFFFF}%d", Player[playerid][Name], TeamScore[ATTACKER]);
	} else {
   		if((Score + TeamScore[ATTACKER]) >= TotalRounds) return SendErrorMessage(playerid,"Attacker plus defender score is bigger than or equal to the total rounds.");
		TeamScore[DEFENDER] = Score;
		format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has set defender team score to: {FFFFFF}%d", Player[playerid][Name], TeamScore[DEFENDER]);
	}
 	SendClientMessageToAll(-1, iString);

    CurrentRound = TeamScore[ATTACKER] + TeamScore[DEFENDER];

	format(iString, sizeof(iString), "~r~%s %s(~r~%d%s)  ~b~~h~%s %s(~b~~h~%d%s)",TeamName[ATTACKER],MAIN_TEXT_COLOUR,TeamScore[ATTACKER],MAIN_TEXT_COLOUR,TeamName[DEFENDER],MAIN_TEXT_COLOUR,TeamScore[DEFENDER],MAIN_TEXT_COLOUR);
    TextDrawSetString(TeamScoreText, iString);

	format(iString, sizeof(iString), "%sRounds ~r~~h~%d~r~/~h~~h~%d", MAIN_TEXT_COLOUR, CurrentRound, TotalRounds);
	TextDrawSetString(RoundsPlayed, iString);

    LogAdminCommand("setscore", playerid, INVALID_PLAYER_ID);
	return 1;
}

#if MYSQL == 0
CMD:changepass(playerid, params[])
{
	if(Player[playerid][Logged] == false) return SendErrorMessage(playerid,"You must be logged in.");
	if(isnull(params)) return SendUsageMessage(playerid,"/changepass [New Password]");
	if(strlen(params) < 3) return SendErrorMessage(playerid,"Password too short (Minimum 3 characters).");

	#if PLUGINS == 1
	new HashPass[140];
	WP_Hash(HashPass, sizeof(HashPass), params);

	new iString[356];
	format(iString, sizeof(iString), "UPDATE Players SET Password = '%s' WHERE Name = '%s'", HashPass, DB_Escape(Player[playerid][Name]));
    db_free_result(db_query(sqliteconnection, iString));

	format(HashPass, sizeof(HashPass), "Your password is changed to: %s", params);
	SendClientMessage(playerid, -1, HashPass);

    #else
    //Hash(WHIRLPOOL, HASH_OFFSET + MAX_PLAYERS + playerid, params);

//	SendErrorMessage(playerid,"This command is not fixed for non-plugin version.");

	new HashPass[140];
	format(HashPass, sizeof(HashPass), "%d", udb_hash(params));

	new iString[356];
	format(iString, sizeof(iString), "UPDATE Players SET Password = '%s' WHERE Name = '%s'", HashPass, DB_Escape(Player[playerid][Name]));
    db_free_result(db_query(sqliteconnection, iString));

	format(HashPass, sizeof(HashPass), "Your password is changed to: %s", params);
	SendClientMessage(playerid, -1, HashPass);

	#endif

	return 1;
}

CMD:changename(playerid,params[])
{
    if(!ChangeName) return SendErrorMessage(playerid, "/changename command is disabled in this server.");
	if(Player[playerid][Logged] == false) return SendErrorMessage(playerid,"You must be logged in.");
	if(Player[playerid][Mute]) return SendErrorMessage(playerid, "Cannot use this command when you're muted.");
	if(isnull(params)) return SendUsageMessage(playerid,"/changename [New Name]");
	if(strlen(params) <= 1) return SendErrorMessage(playerid,"Name cannot be that short idiot!!");
	if(!ChangeName) return SendErrorMessage(playerid, "/changename command is disabled in this server.");

	switch( SetPlayerName(playerid,params) )
	{
	    case 1:
	    {
	        //success
	        new iString[256],
				DBResult: result
			;

			format( iString, sizeof(iString), "SELECT * FROM `Players` WHERE `Name` = '%s'", DB_Escape(params) );
			result = db_query(sqliteconnection, iString);

			if( db_num_rows(result) > 0 )
			{
			    db_free_result(result);
			    //name in Use in DB.
			    SetPlayerName( playerid, Player[playerid][Name] );
			    return SendErrorMessage(playerid,"Name already registered!");
			}
			else
			{
			    db_free_result(result);
			    //name changed successfully!!

				format(iString, sizeof(iString),">> {FFFFFF}%s "COL_PRIM"has changed name to {FFFFFF}%s",Player[playerid][Name],params);
				SendClientMessageToAll(-1,iString);

				format(iString, sizeof(iString), "UPDATE `Players` SET `Name` = '%s' WHERE `Name` = '%s'", DB_Escape(params), DB_Escape(Player[playerid][Name]) );
				db_free_result(db_query(sqliteconnection, iString));

				format( Player[playerid][Name], MAX_PLAYER_NAME, "%s", params );

			    new NewName[MAX_PLAYER_NAME];
				NewName = RemoveClanTagFromName(playerid);

				if(strlen(NewName) != 0)
					Player[playerid][NameWithoutTag] = NewName;
				else
					Player[playerid][NameWithoutTag] = Player[playerid][Name];

			    return 1;
			}
	    }
		case 0: return SendErrorMessage(playerid,"You already using that name.");
		case -1: return SendErrorMessage(playerid,"Either Name too long ,already is use or have invalid characters.");
	}

	return 1;
}

#endif

CMD:heal(playerid, params[])
{
	if(Player[playerid][Playing] == true) return SendErrorMessage(playerid,"Can't heal while playing.");
	if(Player[playerid][InHeadShot] == true) return SendErrorMessage(playerid,"Can't heal in headshot zone.");
	if(Player[playerid][AntiLag] == true) return SendErrorMessage(playerid,"Can't heal in anti-lag zone.");
	if(Player[playerid][InDuel] == true) return SendErrorMessage(playerid,"Can't use this command during duel. Use {FFFFFF}/rq "COL_PRIM"instead.");

	SetHP(playerid, 100);
	SetAP(playerid, 100);

	return 1;
}


CMD:rr(playerid, params[])
{
	if(ESLMode == true) return SendErrorMessage(playerid,"Can't use when ESL mode is enabled.");
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");
	if(Current == -1) return SendErrorMessage(playerid,"Round is not active.");
	if(AllowStartBase == false) return SendErrorMessage(playerid,"Please wait.");

	AllowStartBase = false;
    RoundPaused = false;
    RoundUnpausing = false;
   	TimedOutPlayers = 0;
	ESLPauseTime = 120;

	new iString[180];
	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has restarted the round. Round restarting...", Player[playerid][Name]);
	SendClientMessageToAll(-1, iString);

 	for( new i; i < 10; i ++ ) { // Reset the number of times a weapon is picked for each team.
        TimesPicked[ATTACKER][i] = 0;
        TimesPicked[DEFENDER][i] = 0;
    }

	if(GameType == BASE) {
	    BaseStarted = false;
		SetTimerEx("OnBaseStart", 4000, false, "i", Current);
	} else if(GameType == ARENA || GameType == TDM) {
	    ArenaStarted = false;
		SetTimerEx("OnArenaStart", 4000, false, "i", Current);
	}

	foreach(new i : Player) {
		VehiclePos[i][0] = 0.0;
		VehiclePos[i][1] = 0.0;
		VehiclePos[i][2] = 0.0;

	    if(CanPlay(i)) {
			if(Player[i][Spectating] == true) StopSpectate(i);
			Player[i][WasInCP] = false;

			Player[i][WasInBase] = false;
			Player[i][WeaponPicked] = 0;
			Player[i][TimesSpawned] = 0;

			HideDialog(i);
            DisablePlayerCheckpoint(i);
            RemovePlayerMapIcon(i, 59);

			PlayerTextDrawHide(i, AreaCheckTD);
			PlayerTextDrawHide(i, AreaCheckBG);
			PlayerTextDrawHide(i, RoundText);
			TogglePlayerControllableEx(i, false);
			Player[i][ToAddInRound] = true;
		}
	}

	foreach(new i:Player)
	{
		if(Player[i][Style] == 0) TextDrawHideForPlayer(i, RoundStats);
		else HideRoundStats(i);
	}
    TextDrawHideForAll(EN_CheckPoint);

#if SKINICONS == 1
	if(ShowIcons == true) {
	    HideAllForAll();
	}
#endif

	return 1;
}

CMD:aka(playerid, params[]) {

    if(Player[playerid][Level] < 3 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a level 3 admin to do that.");

	new pID;
    if(sscanf(params, "u", pID)) {
        pID = playerid;
    }
    if(!IsPlayerConnected(pID)) return SendErrorMessage(playerid,"That player is not connected.");

    AKAString = "";
	AKAString = GetPlayerAKA(pID);
	format(AKAString, sizeof(AKAString), "{FFFFFF}%s", AKAString);

	new title[50];
	format(title, sizeof(title), ""COL_PRIM"%s's AKA", Player[pID][Name]);
    ShowPlayerDialog(playerid, DIALOG_AKA, DIALOG_STYLE_MSGBOX,title,AKAString,"Close","");

    return 1;
}


CMD:afk(playerid, params[])
{
	new pID;
	if(isnull(params)) pID = playerid;
	else {
		if(!IsNumeric(params)) return SendUsageMessage(playerid,"/afk [Player ID (Optional)]");
		if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");
		pID = strval(params);
	}
    if(!IsPlayerConnected(pID)) return SendErrorMessage(playerid,"That player is not connected.");

	if(Player[pID][Playing] == true) RemovePlayerFromRound(pID);
	if(Player[pID][Spectating] == true) StopSpectate(pID);
	if(Player[pID][InDM] == true) QuitDM(pID);
	if(Player[pID][InDuel] == true) return SendErrorMessage(pID,"Can't use this command during duel. Use {FFFFFF}/rq "COL_PRIM"instead.");

	Player[pID][Team] = NON;
	SetPlayerColor(pID, 0xAAAAAAAA);
	TogglePlayerControllableEx(pID, false);
	Player[pID][IsAFK] = true;

	new iString[160];
	if(pID != playerid) {
	    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has set {FFFFFF}%s "COL_PRIM"to AFK mode.", Player[playerid][Name], Player[pID][Name]);
	} else {
	    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has set himself to AFK mode.", Player[pID][Name]);
	}
 	SendClientMessageToAll(-1, iString);
	return 1;
}

CMD:setafk(playerid, params[])
{
    if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");
	if(isnull(params) || !IsNumeric(params)) return SendUsageMessage(playerid,"/setafk [Player ID]");

	new pID = strval(params);
	if(!IsPlayerConnected(pID)) return SendErrorMessage(playerid,"That player is not connected.");
	if(Player[pID][Playing] == true) RemovePlayerFromRound(pID);
	if(Player[pID][Spectating] == true) StopSpectate(pID);
	if(Player[pID][InDM] == true) QuitDM(pID);
	if(Player[pID][InDuel] == true) return SendErrorMessage(playerid,"That player is in a duel");

	Player[pID][Team] = NON;
	SetPlayerColor(pID, 0xAAAAAAAA);
	TogglePlayerControllableEx(pID, false);
	Player[pID][IsAFK] = true;

	new iString[180];
	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has set {FFFFFF}%s "COL_PRIM"to AFK mode.", Player[playerid][Name], Player[pID][Name]);
	SendClientMessageToAll(-1, iString);
    LogAdminCommand("setafk", playerid, pID);
	return 1;
}

CMD:back(playerid, params[])
{
	if(Player[playerid][IsAFK] != true)
	    return SendErrorMessage(playerid,"You are not AFK?");
	Player[playerid][Team] = REFEREE;
    TogglePlayerControllableEx(playerid, true);
    Player[playerid][IsAFK] = false;
    SetHP(playerid, 100);

/*
	SetPlayerCameraPos(playerid, 1582.5701,-2286.9172,16.5396);
	SetPlayerCameraLookAt(playerid, 1585.7605,-2286.9370,16.5396);

   TextDrawShowForPlayer(playerid, AttackerText);
    TextDrawShowForPlayer(playerid, AttackerSubText);
    TextDrawShowForPlayer(playerid, DefenderText);
    TextDrawShowForPlayer(playerid, DefenderSubText);
    TextDrawShowForPlayer(playerid, AutoAssignText);
    TextDrawShowForPlayer(playerid, RefereeText);

    SelectTextDraw(playerid, 0xFF0000FF);
*/
	new iString[160];
 	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"is back from AFK mode.", Player[playerid][Name]);
 	SendClientMessageToAll(-1, iString);

    new str[256];
	format(str, sizeof(str), "%s%s\n%s%s Sub\n%s%s\n%s%s Sub\n%sReferee", TextColor[ATTACKER], TeamName[ATTACKER], TextColor[ATTACKER_SUB], TeamName[ATTACKER], TextColor[DEFENDER], TeamName[DEFENDER], TextColor[DEFENDER_SUB], TeamName[DEFENDER], TextColor[REFEREE]);
	ShowPlayerDialog(playerid, DIALOG_SWITCH_TEAM, DIALOG_STYLE_LIST, "{FFFFFF}Team Selection",str, "Select", "");

	return 1;
}

CMD:swap(playerid, params[])
{
 	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");
	if(Current != -1) return SendErrorMessage(playerid,"Can't swap while round is active.");

	SwapTeams();

	new iString[160];
	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has swapped the teams.", Player[playerid][Name]);
	SendClientMessage(playerid, -1, iString);

	return 1;
}

CMD:balance(playerid, params[])
{
	if(ESLMode == true) return SendErrorMessage(playerid,"Can't use when ESL mode is enabled.");
 	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");
	if(Current != -1) return SendErrorMessage(playerid,"Can't balance when round is active.");

	BalanceTeams();

	new iString[160];
	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has balanced the teams.", Player[playerid][Name]);
	SendClientMessage(playerid, -1, iString);

	return 1;
}



CMD:switch(playerid, params[])
{
	if(Player[playerid][Playing] == true) return SendErrorMessage(playerid,"Can't switch while playing.");
	if(Player[playerid][Spectating] == true) StopSpectate(playerid);

/* 	SetPlayerCameraPos(playerid, 1582.5701,-2286.9172,16.5396);
	SetPlayerCameraLookAt(playerid, 1585.7605,-2286.9370,16.5396);

   TextDrawShowForPlayer(playerid, AttackerText);
    TextDrawShowForPlayer(playerid, AttackerSubText);
    TextDrawShowForPlayer(playerid, DefenderText);
    TextDrawShowForPlayer(playerid, DefenderSubText);
    TextDrawShowForPlayer(playerid, AutoAssignText);
    TextDrawShowForPlayer(playerid, RefereeText);

    SelectTextDraw(playerid, 0xFF0000FF);
*/


	new iString[256];
	format(iString, sizeof(iString), "%s%s\n%s%s Sub\n%s%s\n%s%s Sub\n%sReferee", TextColor[ATTACKER], TeamName[ATTACKER], TextColor[ATTACKER_SUB], TeamName[ATTACKER], TextColor[DEFENDER], TeamName[DEFENDER], TextColor[DEFENDER_SUB], TeamName[DEFENDER], TextColor[REFEREE]);
	ShowPlayerDialog(playerid, DIALOG_SWITCH_TEAM, DIALOG_STYLE_LIST, "{FFFFFF}Team Selection",iString, "Select", "Exit");

    return 1;
}


CMD:mainspawn(playerid, params[])
{
 	if(Player[playerid][Level] < 4 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");

	GetPlayerPos(playerid, MainSpawn[0], MainSpawn[1], MainSpawn[2]);
	GetPlayerFacingAngle(playerid, MainSpawn[3]);
	MainInterior = GetPlayerInterior(playerid);

	new iString[128], query[256];
	format(iString, sizeof(iString), "%.0f,%.0f,%.0f,%.0f,%d", MainSpawn[0], MainSpawn[1], MainSpawn[2], MainSpawn[3], MainInterior);
	format(query, sizeof(query), "UPDATE Configs SET Value = '%s' WHERE Option = 'Main Spawn'", iString);
    db_free_result(db_query(sqliteconnection, query));

    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has changed the main spawn location.", Player[playerid][Name]);
	SendClientMessageToAll(-1, iString);
    LogAdminCommand("mainspawn", playerid, INVALID_PLAYER_ID);
	return 1;
}

CMD:givemenu(playerid, params[])
{
 	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");
	if(Current == -1) return SendErrorMessage(playerid,"Round is not active.");
	#if ENABLED_TDM == 1
	if(GameType == TDM) return SendErrorMessage(playerid,"TDM doesn't have a weapon menu.");
	#endif
	if(isnull(params) || !IsNumeric(params)) return SendUsageMessage(playerid,"/givemenu [Player ID]");

	new pID = strval(params);
	if(!IsPlayerConnected(pID)) return SendErrorMessage(playerid,"That player isn't connected.");
	if(Player[pID][Playing] == false) return SendErrorMessage(playerid,"That player isn't playing.");

	if(Player[pID][Team] == ATTACKER || Player[pID][Team] == DEFENDER) {
		switch(GameType) {
		    case BASE: ShowPlayerWeaponMenu(pID, Player[pID][Team]);
		    case ARENA: GivePlayerArenaWeapons(pID);
		}
	}

    new iString[180];
    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has showed {FFFFFF}%s "COL_PRIM"weapon menu.", Player[playerid][Name], Player[pID][Name]);
    SendClientMessageToAll(-1, iString);

	return 1;
}

CMD:gunmenu(playerid, params[])
{
	if(Current == -1) return SendErrorMessage(playerid,"Round is not active.");
	if(Player[playerid][Playing] == false) return SendErrorMessage(playerid,"You are not playing.");

	if(ElapsedTime <= 30 && Player[playerid][Team] != REFEREE) {
		if(GameType == BASE) ShowPlayerWeaponMenu(playerid, Player[playerid][Team]);
		else if(GameType == ARENA || GameType == TDM) GivePlayerArenaWeapons(playerid);

	    new iString[180];
	    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has showed weapon menu for himself.", Player[playerid][Name]);

		foreach(new i : Player) {
		    if(Player[playerid][Team] == ATTACKER) {
		        if(Player[i][Team] == ATTACKER) {
		            SendClientMessage(i, -1, iString);
				}
			} else if(Player[playerid][Team] == DEFENDER) {
			    if(Player[i][Team] == DEFENDER) {
			        SendClientMessage(i, -1, iString);
				}
			}
		}
	} else {
		SendErrorMessage(playerid,"Too late to show yourself weapon menu.");
	}

	return 1;
}

CMD:addall(playerid, params[])
{
	if(ESLMode == true) return SendErrorMessage(playerid,"Can't use when ESL mode is enabled.");
 	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");
	if(Current == -1) return SendErrorMessage(playerid,"Round is not active.");

	foreach(new i : Player) {
		if(Player[i][Playing] == false && Player[i][InDuel] == false && (Player[i][Team] == ATTACKER || Player[i][Team] == DEFENDER)) {
			if(GameType == BASE) AddPlayerToBase(i);
		    else if(GameType == ARENA || GameType == TDM) AddPlayerToArena(i);
		}
	}

    new iString[180];
    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has added everyone to the round.", Player[playerid][Name]);
    SendClientMessageToAll(-1, iString);

	return 1;
}

CMD:add(playerid, params[])
{
//	if(ESLMode == true) return SendErrorMessage(playerid,"Can't use when ESL mode is enabled.");
 	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");
	if(isnull(params) || !IsNumeric(params)) return SendUsageMessage(playerid,"/add [Player ID]");
	if(Current == -1) return SendErrorMessage(playerid,"Round is not active.");

	new pID = strval(params);
	if(!IsPlayerConnected(pID)) return SendErrorMessage(playerid,"That player is not connected.");
	if(Player[pID][Playing] == true) return SendErrorMessage(playerid,"That player is already playing.");
	if(Player[pID][Spectating] == true) StopSpectate(pID);  //no more need to ask players to do /specoff in order to add them
	if(Player[pID][InDuel] == true) return SendErrorMessage(playerid,"That player is in a duel.");
	if(Player[pID][Team] == ATTACKER || Player[pID][Team] == DEFENDER || Player[pID][Team] == REFEREE) {
		if(GameType == BASE) AddPlayerToBase(pID);
		else if(GameType == ARENA || GameType == TDM) AddPlayerToArena(pID);

	    new iString[180];
	    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has added {FFFFFF}%s "COL_PRIM"to the round.", Player[playerid][Name], Player[pID][Name]);
	    SendClientMessageToAll(-1, iString);

	} else {
	    SendErrorMessage(playerid,"That player must be part of one of the following teams: Attacker, Defender or Referee.");
	}
    LogAdminCommand("add", playerid, pID);
	return 1;
}

CMD:readd(playerid, params[])
{
	if(Current == -1) return SendErrorMessage(playerid,"Round is not active.");

	if(isnull(params)) {
	    if(ElapsedTime <= 20) {
			if(Player[playerid][Team] == ATTACKER || Player[playerid][Team] == DEFENDER || Player[playerid][Team] == REFEREE) {
				if(GameType == BASE) AddPlayerToBase(playerid);
				else if(GameType == ARENA || GameType == TDM) AddPlayerToArena(playerid);

			    new iString[180];
			    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has re-added himself to the round.", Player[playerid][Name]);
			    SendClientMessageToAll(-1, iString);
			} else {
	    		SendErrorMessage(playerid,"You must be part of one of the following teams: Attacker, Defender or Referee.");
			}
		} else {
	    	SendErrorMessage(playerid,"Too late to readd yourself.");
		}
	} else {
 		if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");
		if(!IsNumeric(params)) return SendUsageMessage(playerid,"/readd [Player ID]");

		new pID = strval(params);
		if(!IsPlayerConnected(pID)) return SendErrorMessage(playerid,"That player is not connected.");
		if(Player[pID][Team] == ATTACKER || Player[pID][Team] == DEFENDER || Player[pID][Team] == REFEREE) {
			if(Player[pID][Playing] == true) {
			    Player[pID][TotalKills] = Player[pID][TotalKills] - Player[pID][RoundKills];
			    Player[pID][TotalDeaths] = Player[pID][TotalDeaths] - Player[pID][RoundDeaths];
				Player[pID][TotalDamage] = Player[pID][TotalDamage] - Player[pID][RoundDamage];

			}
			if(GameType == BASE) AddPlayerToBase(pID);
			else if(GameType == ARENA || GameType == TDM) AddPlayerToArena(pID);

		    new iString[180];
		    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has re-added {FFFFFF}%s "COL_PRIM"to the round.", Player[playerid][Name], Player[pID][Name]);
		    SendClientMessageToAll(-1, iString);
		    LogAdminCommand("readd", playerid, pID);
		} else {
	    	SendErrorMessage(playerid,"That player must be part of one of the following teams: Attacker, Defender or Referee.");
		}
	}

	return 1;
}

CMD:rem(playerid, params[])
{
	if(Player[playerid][Playing] == false) return SendErrorMessage(playerid,"You are not playing.");
	if(ElapsedTime > 60) return SendErrorMessage(playerid,"Too late to remove yourself.");

    new iString[160], Float:HP[2];
    GetHP(playerid, HP[0]);
    GetAP(playerid, HP[1]);

    format(iString, sizeof(iString), "{FFFFFF}%s (%d) "COL_PRIM"removed himself from round. {CCCCCC}HP %.0f | Armour %.0f", Player[playerid][Name], playerid, HP[0], HP[1]);
    SendClientMessageToAll(-1, iString);

	RemovePlayerFromRound(playerid);
    return 1;
}


CMD:remove(playerid, params[])
{
 	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");
	if(isnull(params) || !IsNumeric(params)) return SendUsageMessage(playerid,"/remove [Player ID]");

	new pID = strval(params);

    new iString[160], Float:HP[2];
    GetHP(pID, HP[0]);
    GetAP(pID, HP[1]);

	if(!IsPlayerConnected(pID)) return SendErrorMessage(playerid,"That player isn't connected.");
	if(Player[pID][Playing] == false) return SendErrorMessage(playerid,"That player is not playing.");

    format(iString, sizeof(iString), "{FFFFFF}%s (%d) "COL_PRIM"removed {FFFFFF}%s (%d) "COL_PRIM"from round. {CCCCCC}HP %.0f | Armour %.0f", Player[playerid][Name], playerid, Player[pID][Name], pID, HP[0], HP[1]);
    SendClientMessageToAll(-1, iString);

	RemovePlayerFromRound(pID);
    LogAdminCommand("remove", playerid, pID);
    return 1;
}


CMD:end(playerid, params[])
{
   	if(ESLMode == true) return SendErrorMessage(playerid,"Can't use when ESL mode is enabled.");
 	if(Player[playerid][Level] < 3 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");
	if(AllowStartBase == false) return SendErrorMessage(playerid,"Please Wait.");
	if(Current == -1) return SendErrorMessage(playerid,"Round is not active.");

	Current = -1;
	RoundPaused = false;
	FallProtection = false;
    PlayersInCP = 0;

	PlayersAlive[ATTACKER] = 0;
	PlayersAlive[DEFENDER] = 0;

    RoundUnpausing = false;
	ESLPauseTime = 120;

	foreach(new i : Player) {
		VehiclePos[i][0] = 0.0;
		VehiclePos[i][1] = 0.0;
		VehiclePos[i][2] = 0.0;

		Player[i][Playing] = false;
		Player[i][WasInCP] = false;
		Player[i][VoteToUnpause] = false;
		if(Player[i][Spectating] == true) StopSpectate(i);
		Player[i][WasInBase] = false;
		Player[i][WeaponPicked] = 0;
		Player[i][TimesSpawned] = 0;
		Player[i][VoteToAddID] = -1;
		Player[i][VoteToNetCheck] = -1;
		Player[i][Votekick] = -1;

		TogglePlayerControllableEx(i, true);
		RemovePlayerMapIcon(i, 59);

		SpawnPlayerEx(i);

		DisablePlayerCheckpoint(i);
		SetPlayerScore(i, 0);
		HideDialog(i);

		PlayerTextDrawHide(i, AreaCheckTD);
		PlayerTextDrawHide(i, AreaCheckBG);

		TextDrawHideForPlayer(i, AttackerTeam[0]);
		TextDrawHideForPlayer(i, AttackerTeam[1]);
		TextDrawHideForPlayer(i, DefenderTeam[0]);
		TextDrawHideForPlayer(i, DefenderTeam[1]);
		TextDrawHideForPlayer(i, AttackerTeam[2]);
		TextDrawHideForPlayer(i, AttackerTeam[3]);
		TextDrawHideForPlayer(i, DefenderTeam[2]);
		TextDrawHideForPlayer(i, DefenderTeam[3]);
	}

	foreach(new i:Player)
	{
		if(Player[i][Style] == 0) TextDrawHideForPlayer(i, RoundStats);
		else HideRoundStats(i);
	}
	TextDrawHideForAll(EN_CheckPoint);

#if SKINICONS == 1
	if(ShowIcons == true) {
	    HideAllForAll();
	}
#endif

 	for( new i; i < 10; i ++ ) { // Reset the number of times a weapon is picked for each team.
        TimesPicked[ATTACKER][i] = 0;
        TimesPicked[DEFENDER][i] = 0;
    }

	BaseStarted = false;
	ArenaStarted = false;

    SendRconCommand("mapname Lobby");
	SetGameModeText(GM_NAME);

	new iString[160];
	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has ended the round.", Player[playerid][Name]);
	SendClientMessageToAll(-1, iString);


	TextDrawSetString(AttackerTeam[0], "_");
	TextDrawSetString(AttackerTeam[1], "_");
	TextDrawSetString(DefenderTeam[0], "_");
	TextDrawSetString(DefenderTeam[1], "_");
	TextDrawSetString(AttackerTeam[2], "_");
	TextDrawSetString(AttackerTeam[3], "_");
	TextDrawSetString(DefenderTeam[2], "_");
	TextDrawSetString(DefenderTeam[3], "_");

    GangZoneDestroy(CPZone);
	GangZoneDestroy(ArenaZone);

	ResetTeamLeaders();
	LoadGraffs();

    LogAdminCommand("end", playerid, INVALID_PLAYER_ID);
	return 1;
}


CMD:ban(playerid, params[])
{
	if(Player[playerid][Level] < 3 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");
	if(AllowStartBase == false) return SendErrorMessage(playerid,"Can't ban now. Please wait.");

	new pID, Reason[128], iString[256];
	#if PLUGINS == 1
		if(sscanf(params, "ds[128]", pID, Reason)) return SendUsageMessage(playerid,"/ban [Player ID] [Reason]");
	#else
	    if(sscanf(params, "ds", pID, Reason)) return SendUsageMessage(playerid,"/ban [Player ID] [Reason]");
	#endif

	if(!IsPlayerConnected(pID)) return SendErrorMessage(playerid,"That player isn't connected.");
	if(Player[pID][Level] >= Player[playerid][Level]) return SendErrorMessage(playerid,"Can't ban someone of same or higher admin level.");
	if(strlen(Reason) > 128) return SendErrorMessage(playerid,"Reason is too big.");

    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has banned {FFFFFF}%s "COL_PRIM"| Reason: {FFFFFF}%s", Player[playerid][Name], Player[pID][Name], /*IP,*/ Reason);
	SendClientMessageToAll(-1, iString);

	if(ESLMode == false) Player[pID][DontPause] = true;

	#if MYSQL == 0

	format(iString, sizeof(iString), "%s - %s", Player[playerid][Name], Reason);
	BanEx(pID, iString);
	#else

	new EscapeBanner[24], EscapeBanned[24], EscapeReason[128];
	sql_escape_string(sqlconnection, Player[playerid][Name], EscapeBanner);
	sql_escape_string(sqlconnection, Player[pID][Name], EscapeBanned);
	sql_escape_string(sqlconnection, Reason, EscapeReason);

	format(iString, sizeof(iString), "INSERT INTO `Bans` (`Admin Name`, `Banned`, `IP`, `Reason`) VALUES ('%s', '%s', '%s', '%s')", EscapeBanner, EscapeBanned, IP, EscapeReason);
	sql_query(sqlconnection, iString, QUERY_THREADED);

    SetTimerEx("OnPlayerKicked", 500, false, "i", pID);

	#endif

    LogAdminCommand("ban", playerid, pID);
	return 1;
}

CMD:unbanip(playerid,params[])
{
	if(Player[playerid][Level] < 3 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");
	if(isnull(params)) return SendUsageMessage(playerid,"/unbanip [IP]");

	#if MYSQL == 0
	new iString[128];
	format(iString, sizeof(iString), "unbanip %s", params);
	SendRconCommand(iString);

	SendRconCommand("reloadbans");
	#else

	new iString[256], EscapIP[60];
	sql_escape_string(sqlconnection, params, EscapIP);
	format(iString, sizeof(iString), "DELETE FROM `Bans` WHERE `IP` = '%s'", EscapIP);
	sql_query(sqlconnection, iString, QUERY_THREADED);

	#endif

	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has unbanned IP: {FFFFFF}%s",Player[playerid][Name], params);
	SendClientMessageToAll(-1, iString);
    LogAdminCommand("unbanip", playerid, INVALID_PLAYER_ID);
	return 1;
}

/*
CMD:killhim(playerid, params[])
{
	if(Player[playerid][Level] < 2 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");
	if(isnull(params) || !IsNumeric(params)) return SendUsageMessage(playerid,"/killhim [Player ID]");

	new pID = strval(params);
	if(!IsPlayerConnected(pID)) return SendErrorMessage(playerid,"That player isn't connected.");
//	if(Player[pID][Level] >= Player[playerid][Level]) return SendErrorMessage(playerid,"Can't kill someone of same or higher admin level.");

	SetHP(pID, 0.0);
	LogAdminCommand("killhim", playerid, pID);
	return 1;
}
*/

CMD:kick(playerid, params[])
{
	if(Player[playerid][Level] < 3 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");
	if(AllowStartBase == false) return SendErrorMessage(playerid,"Can't kick now. Please wait.");

	new Params[2][128], iString[180];
	#if PLUGINS == 1
		sscanf(params, "s[128]s[128]", Params[0], Params[1]);
	#else
	    sscanf(params, "ss", Params[0], Params[1]);
	#endif
	if(isnull(Params[0]) || !IsNumeric(Params[0])) return SendUsageMessage(playerid,"/kick [Player ID] [Reason]");
	new pID = strval(Params[0]);

	if(!IsPlayerConnected(pID)) return SendErrorMessage(playerid,"That player isn't connected.");
	if(Player[pID][Level] >= Player[playerid][Level]) return SendErrorMessage(playerid,"Can't kick someone of same or higher admin level.");

	new bool:GiveReason;
	if(isnull(Params[1])) GiveReason = false;
	else GiveReason = true;

	if(GiveReason == false) {
		format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has kicked {FFFFFF}%s "COL_PRIM"| Reason: {FFFFFF}No Reason Given", Player[playerid][Name], Player[pID][Name]);
		SendClientMessageToAll(-1, iString);
	} else {
		format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has kicked {FFFFFF}%s "COL_PRIM"| Reason: {FFFFFF}%s", Player[playerid][Name], Player[pID][Name], Params[1]);
		SendClientMessageToAll(-1, iString);
	}

    if(ESLMode == false) Player[pID][DontPause] = true;
    SetTimerEx("OnPlayerKicked", 500, false, "i", pID);

//	Player[pID][IsKicked] = true;
//	Kick(pID);

    LogAdminCommand("kick", playerid, pID);
	return 1;
}


CMD:healall(playerid, params[])
{
	if(ESLMode == true) return SendErrorMessage(playerid,"Can't use when ESL mode is enabled.");
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");

	if(Current == -1) return SendErrorMessage(playerid,"There is no active round.");
	foreach(new i : Player) {
	    if(Player[i][Playing] == true) {
	        SetHP(i, RoundHP);
		}
	}



	new iString[160];
	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has healed everyone.", Player[playerid][Name]);
	SendClientMessageToAll(-1, iString);

	return 1;
}

CMD:hl(playerid, params[])
{
	cmd_healall(playerid, params);
	return 1;
}

CMD:al(playerid, params[])
{
	cmd_armourall(playerid, params);
	return 1;
}




CMD:nolag(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");


    if(Current != -1)
		return SendErrorMessage(playerid, "You cannot do this while round is in progress.");

	if(ServerAntiLag == false) {
	    ServerAntiLag = true;

	    foreach(new i : Player) {
			SAMP_SetPlayerTeam(i, ANTILAG_TEAM);
	    }

		TextDrawSetString(AntiLagTD, sprintf("%sAntiLag: ~g~On", MAIN_TEXT_COLOUR));
		TextDrawShowForAll(AntiLagTD);



	} else {
	    ServerAntiLag = false;

	    foreach(new i : Player) {
	        if(Player[i][Playing] == true) {
	            if(Player[i][Team] == ATTACKER) SAMP_SetPlayerTeam(playerid, ATTACKER);
	            else if(Player[i][Team] == DEFENDER) SAMP_SetPlayerTeam(playerid, DEFENDER);
				else if(Player[i][Team] == REFEREE) SAMP_SetPlayerTeam(playerid, REFEREE);
			} else {
				if(Player[playerid][AntiLag] == true) SAMP_SetPlayerTeam(playerid, 5);
				else SAMP_SetPlayerTeam(playerid, NO_TEAM);
			}
		}

		TextDrawSetString(AntiLagTD, "_");
		TextDrawHideForAll(AntiLagTD);
	}


	new iString[180];
	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has %s server Anti-Lag.", Player[playerid][Name], (ServerAntiLag == true ? ("enabled") : ("disabled")));
	SendClientMessageToAll(-1, iString);

	format(iString, sizeof(iString), "UPDATE Configs SET Value = %d WHERE Option = 'AntiLag'", (ServerAntiLag == false ? 0 : 1));
    db_free_result(db_query(sqliteconnection, iString));
    LogAdminCommand("nolag", playerid, INVALID_PLAYER_ID);
	return 1;
}

CMD:armourall(playerid, params[])
{
	if(ESLMode == true) return SendErrorMessage(playerid,"Can't use when ESL mode is enabled.");
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");

	if(Current == -1) return SendErrorMessage(playerid,"There is no active round.");
	foreach(new i : Player) {
	    if(Player[i][Playing] == true) {
	        SetAP(i, 100);
		}
	}



	new iString[160];
	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has armoured everyone.", Player[playerid][Name]);
	SendClientMessageToAll(-1, iString);

	return 1;
}

CMD:sethp(playerid, params[])
{
//	if(ESLMode == true) return SendErrorMessage(playerid,"Can't use when ESL mode is enabled.");
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");

	new pID, Amount;
	if(sscanf(params, "id", pID, Amount)) return SendUsageMessage(playerid,"/sethp [Player ID] [Amount]");
	if(Amount < 0 || Amount > 100)  return SendErrorMessage(playerid,"Invalid amount.");
	if(!IsPlayerConnected(pID)) return SendErrorMessage(playerid,"That player isn't connected.");

	SetHP(pID, Amount);


	new iString[180];
	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has set {FFFFFF}%s's "COL_PRIM"HP to: {FFFFFF}%d", Player[playerid][Name], Player[pID][Name], Amount);
	SendClientMessageToAll(-1, iString);
    LogAdminCommand("sethp", playerid, pID);
	return 1;
}

CMD:setarmour(playerid, params[])
{
 //   if(ESLMode == true) return SendErrorMessage(playerid,"Can't use when ESL mode is enabled.");
    if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");

	new pID, Amount;
	if(sscanf(params, "id", pID, Amount)) return SendUsageMessage(playerid,"/setarmour [Player ID] [Amount]");
	if(Amount < 0 || Amount > 100)  return SendErrorMessage(playerid,"Invalid amount.");
	if(!IsPlayerConnected(pID)) return SendErrorMessage(playerid,"That player isn't connected.");

	SetAP(pID, Amount);



	new iString[180];
	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has set {FFFFFF}%s's "COL_PRIM"Armour to: {FFFFFF}%d", Player[playerid][Name], Player[pID][Name], Amount);
	SendClientMessageToAll(-1, iString);
    LogAdminCommand("setarmour", playerid, pID);
	return 1;
}

CMD:pause(playerid, params[])
{
//    if(ESLMode == true) return SendErrorMessage(playerid,"Can't use when ESL mode is enabled.");
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");
	if(Current == -1) return SendErrorMessage(playerid,"There is no active round.");

	new iString[160];
	if(RoundPaused == false) {
	    if(RoundUnpausing == true) return SendErrorMessage(playerid,"Round is unpausing, please wait.");

		PausePressed = true;
		SetTimer("PausedIsPressed", 4000, false);

	    PauseRound();

		format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has paused the current round.", Player[playerid][Name]);
		SendClientMessageToAll(-1, iString);
	} else {
		if(PausePressed == true) return SendErrorMessage(playerid,"Please Wait.");
		if(RoundUnpausing == true) return 1;


		PauseCountdown = 4;
	    UnpauseRound();

		format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has unpaused the current round.", Player[playerid][Name]);
		SendClientMessageToAll(-1, iString);
	}

	return 1;
}

CMD:p(playerid, params[])
{
	cmd_pause(playerid, params);
	return 1;
}

CMD:unpause(playerid, param[])
{
 //   if(ESLMode == true) return SendErrorMessage(playerid,"Can't use when ESL mode is enabled.");
	if(RoundUnpausing == true) return SendErrorMessage(playerid,"Round is already unpausing.");
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");
	if(RoundPaused == false) return SendErrorMessage(playerid,"Round is not paused.");

	PauseCountdown = 4;
	UnpauseRound();

	new iString[160];
	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has unpaused the current round.", Player[playerid][Name]);
	SendClientMessageToAll(-1, iString);

	return 1;
}

CMD:u(playerid, params[])
{
	cmd_unpause(playerid, params);
	return 1;
}

CMD:showagain(playerid, params[])
{
    ShowEndRoundTextDraw(playerid);
    return 1;
}

CMD:match(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You Need To Be An Admin.");
	EnableInterface(playerid);
	return 1;
}

CMD:select(playerid, params[])
{
	cmd_match(playerid, params);
	return 1;
}

CMD:goto(playerid,params[])
{
//    if(ESLMode == true) return SendErrorMessage(playerid,"Can't use when ESL mode is enabled.");
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You Need To Be An Admin.");
	if(isnull(params)) return SendUsageMessage(playerid,"/goto [Player ID]");
	new gid = strval(params);

	if(!IsPlayerConnected(gid) || gid == INVALID_PLAYER_ID) return SendErrorMessage(playerid,"Player isn't connected.");
	if(gid == playerid) return SendErrorMessage(playerid,"Can't go to yourself.");
	new Float:x, Float:y, Float:z;
	GetPlayerPos(gid,x,y,z);
	SetPlayerInterior(playerid,GetPlayerInterior(gid));
	SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(gid));

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
	    SetVehiclePos(GetPlayerVehicleID(playerid),x+2,y,z);
		LinkVehicleToInterior(GetPlayerVehicleID(playerid),GetPlayerInterior(gid));
	    SetVehicleVirtualWorld(GetPlayerVehicleID(playerid),GetPlayerVirtualWorld(gid));
	}
	else SetPlayerPos(playerid,x+1,y,z);

/*	if(IsPlayerInAnyVehicle(playerid)) {
	    if(IsPlayerInAnyVehicle(gid)) {
			RemovePlayerFromVehicle(playerid);
			PutPlayerInVehicle(playerid, GetPlayerVehicleID(gid), 1);
	    } else {
		    SetVehiclePos(GetPlayerVehicleID(playerid),x+2,y,z);
			LinkVehicleToInterior(GetPlayerVehicleID(playerid),GetPlayerInterior(gid));
		    SetVehicleVirtualWorld(GetPlayerVehicleID(playerid),GetPlayerVirtualWorld(gid));
		}
	} else {
		if(!IsPlayerInAnyVehicle(gid)) SetPlayerPos(playerid,x+1,y,z);
		else {
		    PutPlayerInVehicle(playerid, GetPlayerVehicleID(gid), 1);
		}
	}
*/


	new tstr[180];
	format(tstr,180,"{FFFFFF}%s "COL_PRIM"has teleported to {FFFFFF}%s",Player[playerid][Name],Player[gid][Name]);
	SendClientMessageToAll(-1,tstr);
    LogAdminCommand("goto", playerid, gid);
	return 1;
}

CMD:get(playerid,params[])
{
  //  if(ESLMode == true) return SendErrorMessage(playerid,"Can't use when ESL mode is enabled.");
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You Need To Be An Admin.");
	if(isnull(params)) return SendUsageMessage(playerid,"/get [Player ID]");
	new gid = strval(params);

	if(!IsPlayerConnected(gid) || gid == INVALID_PLAYER_ID) return SendErrorMessage(playerid,"Player isn't connected.");
	if(gid == playerid) return SendErrorMessage(playerid,"Can't get yourself.");

	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid,x,y,z);

/*	if(IsPlayerInAnyVehicle(gid)) {
	    if(IsPlayerInAnyVehicle(playerid)) {
			RemovePlayerFromVehicle(gid);
			PutPlayerInVehicle(gid, GetPlayerVehicleID(playerid), 1);
		} else {
		    SetVehiclePos(GetPlayerVehicleID(gid),x+2,y,z);
			LinkVehicleToInterior(GetPlayerVehicleID(gid),GetPlayerInterior(playerid));
		    SetVehicleVirtualWorld(GetPlayerVehicleID(gid),GetPlayerVirtualWorld(playerid));
		}
	} else {
		if(!IsPlayerInAnyVehicle(playerid)) {
			SetPlayerPos(gid,x+1,y,z);
		} else {
		    PutPlayerInVehicle(gid, GetPlayerVehicleID(playerid), 1);
		}
	}
*/

	if(GetPlayerState(gid) == PLAYER_STATE_DRIVER) {
	    SetVehiclePos(GetPlayerVehicleID(gid),x+2,y,z);
		LinkVehicleToInterior(GetPlayerVehicleID(gid),GetPlayerInterior(playerid));
	    SetVehicleVirtualWorld(GetPlayerVehicleID(gid),GetPlayerVirtualWorld(playerid));
	}
	else SetPlayerPos(gid,x+1,y,z);

	SetPlayerInterior(gid,GetPlayerInterior(playerid));
	SetPlayerVirtualWorld(gid,GetPlayerVirtualWorld(playerid));

	new iString[160];
	format(iString, sizeof(iString),"{FFFFFF}%s "COL_PRIM"has teleported {FFFFFF}%s "COL_PRIM"to himself.",Player[playerid][Name],Player[gid][Name]);
	SendClientMessageToAll(-1, iString);
    LogAdminCommand("get", playerid, gid);
	return 1;
}


CMD:spec(playerid, params[])
{
	if(isnull(params)) return SendUsageMessage(playerid,"/spec [Player ID]");
	new specid = strval(params);
	if(!IsPlayerConnected(specid)) return SendErrorMessage(playerid,"That player isn't connected.");
	if(specid == playerid) return SendErrorMessage(playerid,"Can't spectate yourself.");
	if(Player[playerid][Playing] == true) return SendErrorMessage(playerid,"Can't spectate while you are playing.");
	if(Player[specid][Spectating] == true) return SendErrorMessage(playerid,"That player is spectating someone else.");
	if(GetPlayerState(specid) != 1 && GetPlayerState(specid) != 2 && GetPlayerState(specid) != 3) return SendErrorMessage(playerid,"That player is not spawned.");
	if(Current != -1 && Player[playerid][Team] != REFEREE && !IsTeamTheSame(Player[specid][Team], Player[playerid][Team])) return SendErrorMessage(playerid,"You can only spectate your own team.");

	if(Player[playerid][InDM] == true) {
	    Player[playerid][InDM] = false;
		Player[playerid][DMReadd] = 0;
	}
	Player[playerid][AntiLag] = false;
	Player[playerid][InHeadShot] = false;

	SpectatePlayer(playerid, specid);
	return 1;
}

CMD:specoff(playerid, params[])
{
	if(Player[playerid][Spectating] == true || noclipdata[playerid][FlyMode] == true)
	{
 		StopSpectate(playerid);
 		PlayerTextDrawShow(playerid, RoundKillDmgTDmg);
		PlayerTextDrawShow(playerid, FPSPingPacket);
		PlayerTextDrawShow(playerid, BaseID_VS);
		TextDrawShowForPlayer(playerid, WebText);
		PlayerTextDrawShow(playerid, HPTextDraw_TD);
		PlayerTextDrawShow(playerid, ArmourTextDraw);
		ShowPlayerProgressBar(playerid, HealthBar);
		ShowPlayerProgressBar(playerid, ArmourBar);
		return 1;
	}
	else
	{
 		SendClientMessage(playerid,-1,"{FFFFFF}Error: "COL_PRIM"You are not spectating anyone.");
	}

	return 1;
}

CMD:kill(playerid, params[])
{
	if(Player[playerid][Playing] == true && Player[playerid][RoundDamage] == 0.0) Player[playerid][WasInBase] = false;

	if(Player[playerid][Playing] == true) {
	    new iString[180], Float:HP[2];
	    GetHP(playerid, HP[0]);
	    GetAP(playerid, HP[1]);
	    format(iString, sizeof(iString), "{FFFFFF}%s (%d) "COL_PRIM"killed himself. {CCCCCC}HP %.0f | Armour %.0f", Player[playerid][Name], playerid, HP[0], HP[1]);
    	SendClientMessageToAll(-1, iString);
	}

	SetHP(playerid, 0.0);
	return 1;
}



CMD:vr(playerid, params[])
{
    if(!IsPlayerInAnyVehicle(playerid)) return 1;

	new Float:Pos[4];
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	GetPlayerFacingAngle(playerid, Pos[3]);

	if(Player[playerid][Playing] == true) {
		if(Pos[0] > BAttackerSpawn[Current][0] + 100 || Pos[0] < BAttackerSpawn[Current][0] - 100 || Pos[1] > BAttackerSpawn[Current][1] + 100 || Pos[1] < BAttackerSpawn[Current][1] - 100) {
			return SendErrorMessage(playerid,"You are too far from attacker spawn."); //If attacker is too far away from his spawn.
		}
	}

/*	if(GetVehicleNeedFlip(GetPlayerVehicleID(playerid))) {
		new MyVehID = GetPlayerVehicleID(playerid);
		DestroyVehicle(MyVehID);

	 	new pveh = CreateVehicle(GetVehicleModel(MyVehID),Pos[0], Pos[1], Pos[2], Pos[3], -1, -1, -1);
	    LinkVehicleToInterior(pveh, GetPlayerInterior(playerid));
		SetVehicleVirtualWorld(pveh, GetPlayerVirtualWorld(playerid));
		PutPlayerInVehicle(playerid,pveh, 0);

		switch(Player[playerid][Team]) {
			case ATTACKER: ChangeVehicleColor(GetPlayerVehicleID(playerid), 175, 175);
			case ATTACKER_SUB: ChangeVehicleColor(GetPlayerVehicleID(playerid), 158, 158);
			case DEFENDER: ChangeVehicleColor(GetPlayerVehicleID(playerid), 198, 198);
			case DEFENDER_SUB: ChangeVehicleColor(GetPlayerVehicleID(playerid), 208, 208);
			case REFEREE: ChangeVehicleColor(GetPlayerVehicleID(playerid), 200, 200);
		}

	} else {
		RepairVehicle(GetPlayerVehicleID(playerid));
	}
*/

	RepairVehicle(GetPlayerVehicleID(playerid));
    SendClientMessage(playerid, -1, "{FFFFFF}Vehicle repaired.");
    return 1;
}



CMD:acar(playerid, params[])
{
	if(Player[playerid][Level] < 4 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher level admin to do that.");
	if(Player[playerid][Playing] == true) return SendErrorMessage(playerid,"Can't use this command in rounds");
	if(isnull(params)) return SendUsageMessage(playerid,"/acar [Vehicle Name]");
	if(Player[playerid][Spectating] == true) return 1;
//	if(Player[playerid][InDM] == true) return SendErrorMessage(playerid,"You can't spawn vehicle in DM.");
    if(Player[playerid][InDuel] == true) return SendErrorMessage(playerid,"Can't use this command during duel. Use {FFFFFF}/rq "COL_PRIM"instead.");
	if(Player[playerid][Playing] == true && Player[playerid][TimesSpawned] >= 3) return SendErrorMessage(playerid,"You have spawned the maximum number of vehicles.");
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid,"Can't spawn a vehicle while you are not the driver.");

	new veh;

	if(IsNumeric(params))
	    veh = strval(params);
	else
		veh = GetVehicleModelID(params);
    if(veh < 400 || veh > 611) return SendErrorMessage(playerid,"Invalid Vehicle Name."); //In samp there is no vehile with ID below 400 or above 611

	if(Player[playerid][Playing] == false) {
		if(IsPlayerInAnyVehicle(playerid)) {
			RemovePlayerFromVehicle(playerid);
			DestroyVehicle(GetPlayerVehicleID(playerid));
			Player[playerid][LastVehicle] = -1;
		}

		if(Player[playerid][LastVehicle] != -1) {
//			Delete3DTextLabel(Vehicle3DText[Player[playerid][LastVehicle]]);
			DestroyVehicle(Player[playerid][LastVehicle]);
			Player[playerid][LastVehicle] = -1;
		}
	}

	new Float:Pos[4];
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	GetPlayerFacingAngle(playerid, Pos[3]);

	if(IsPlayerInAnyVehicle(playerid)) {
//		Delete3DTextLabel(Vehicle3DText[GetPlayerVehicleID(playerid)]);
		DestroyVehicle(GetPlayerVehicleID(playerid)); //If you are already in a vehicle and use /car, it will destroy that vehicle first and spawn the new one.
	}

 	new MyVehicle = CreateVehicle(veh, Pos[0], Pos[1], Pos[2], Pos[3], -1, -1, -1); //Creates the specific vehicle u were looking for (veh).

	new plate[32];
	format(plate, sizeof(plate), "%s", Player[playerid][NameWithoutTag]);
    SetVehicleNumberPlate(MyVehicle, plate);
    SetVehicleToRespawn(MyVehicle);

    LinkVehicleToInterior(MyVehicle, GetPlayerInterior(playerid)); //Links vehicle interior to the current player interior.
	SetVehicleVirtualWorld(MyVehicle, GetPlayerVirtualWorld(playerid)); //Sets vehicle virtual world the the current virtual world of the player.
	PutPlayerInVehicle(playerid, MyVehicle, 0); //Puts player in the driver seat.

	if(Player[playerid][Playing] == false) Player[playerid][LastVehicle] = GetPlayerVehicleID(playerid);
	else Player[playerid][TimesSpawned] ++;

	if(veh == 560) {
		for(new i = 1026; i <= 1033; i++) {
            AddVehicleComponent(GetPlayerVehicleID(playerid), i);
            AddVehicleComponent(GetPlayerVehicleID(playerid), 1138);
            AddVehicleComponent(GetPlayerVehicleID(playerid), 1141);
		}
	}
	if(veh == 565) {
	    for(new i = 1045; i <= 1054; i++) {
	        AddVehicleComponent(GetPlayerVehicleID(playerid), i);
		}
	}
	if(veh == 535) {
	    for(new i = 1110; i <= 1122; i++) {
	        AddVehicleComponent(GetPlayerVehicleID(playerid), i);
		}
	}


//	Vehicle3DText[GetPlayerVehicleID(playerid)] = Create3DTextLabel("_", 0xFF0000AA, 0.0, 0.0, 0.0, DRAW_DISTANCE, 0, 1 );

	new iString[180];
   	format(iString, sizeof(iString), "%s%s{FFFFFF} has spawned a(n) %s%s",TextColor[Player[playerid][Team]], Player[playerid][Name], TextColor[Player[playerid][Team]], aVehicleNames[veh-400]);
	SendClientMessageToAll(-1, iString);

	switch(Player[playerid][Team]) {
		case ATTACKER: ChangeVehicleColor(GetPlayerVehicleID(playerid), 175, 175);
		case ATTACKER_SUB: ChangeVehicleColor(GetPlayerVehicleID(playerid), 158, 158);
		case DEFENDER: ChangeVehicleColor(GetPlayerVehicleID(playerid), 198, 198);
		case DEFENDER_SUB: ChangeVehicleColor(GetPlayerVehicleID(playerid), 208, 208);
		case REFEREE: ChangeVehicleColor(GetPlayerVehicleID(playerid), 200, 200);
	}
    LogAdminCommand("acar", playerid, INVALID_PLAYER_ID);
	return 1;
}


CMD:car(playerid, params[])
{
	if(isnull(params)) return SendUsageMessage(playerid,"/v [Vehicle Name] {FFFFFF}or "COL_PRIM"/car [Vehicle Name]");
	if(Player[playerid][Spectating] == true) return 1;
	if(RoundPaused == true && Player[playerid][Playing] == true) return 1;
	if(Player[playerid][InDM] == true) return SendErrorMessage(playerid,"You can't spawn vehicle in DM.");
    if(Player[playerid][InDuel] == true) return SendErrorMessage(playerid,"Can't use this command during duel. Use {FFFFFF}/rq "COL_PRIM"instead.");
	if(Player[playerid][Playing] == true && Player[playerid][TimesSpawned] >= 3) return SendErrorMessage(playerid,"You have spawned the maximum number of vehicles.");
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendErrorMessage(playerid,"Can't spawn a vehicle while you are not the driver.");

    new veh;

	if(IsNumeric(params))
	    veh = strval(params);
	else
		veh = GetVehicleModelID(params);

    if(veh < 400 || veh > 611) return SendErrorMessage(playerid,"Invalid Vehicle Name."); //In samp there is no vehile with ID below 400 or above 611

	//Block some vehiles that u don't like e.g. Tank, hunter. It wil be annoying in lobby. To search for more vehicle IDs try samp wiki.
	if(veh == 407 || veh == 425 || veh == 430 || veh == 432 || veh == 435 || veh == 441 || veh == 447 || veh == 449) return SendErrorMessage(playerid,"This vehicle is blocked.");
	if(veh == 450 || veh == 464 || veh == 465 || veh == 476 || veh == 501 || veh == 512 || veh == 520 || veh == 537) return SendErrorMessage(playerid,"This vehicle is blocked.");
	if(veh == 538 || veh == 564 || veh == 569 || veh == 570 || veh == 577 || veh == 584 || veh == 590 || veh == 591) return SendErrorMessage(playerid,"This vehicle is blocked.");
	if(veh == 592 || veh == 594 || veh == 601 || veh == 606 || veh == 607 || veh == 608 || veh == 610 || veh == 611) return SendErrorMessage(playerid,"This vehicle is blocked.");

//	Allowed vehicles:	472=Coastguard	544=Firetruck LA	553=Nevada	595=Launch

	new Float:Pos[4];
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	GetPlayerFacingAngle(playerid, Pos[3]);

	if(Player[playerid][Playing] == true) {
		if(Player[playerid][Team] == DEFENDER || Player[playerid][Team] == REFEREE) return SendErrorMessage(playerid,"Only attackers can spawn vehicle.");
        if(BInterior[Current] != 0) return SendErrorMessage(playerid,"You can't spawn vehicle in interior base.");
		if(Pos[0] > BAttackerSpawn[Current][0] + 100 || Pos[0] < BAttackerSpawn[Current][0] - 100 || Pos[1] > BAttackerSpawn[Current][1] + 100 || Pos[1] < BAttackerSpawn[Current][1] - 100) {
			return SendErrorMessage(playerid,"You are too far from attacker spawn."); //If attacker is too far away from his spawn.
		}
	}

	if(IsPlayerInAnyVehicle(playerid)) {
//		Delete3DTextLabel(Vehicle3DText[GetPlayerVehicleID(playerid)]);
		Player[playerid][LastVehicle] = -1;
		DestroyVehicle(GetPlayerVehicleID(playerid)); //If you are already in a vehicle and use /car, it will destroy that vehicle first and spawn the new one.
	}

	if(Player[playerid][Playing] == false) {
		if(Player[playerid][LastVehicle] != -1) {

		    new bool:InVehicle = false;
		    foreach(new i : Player) {
		    	if(i != playerid && IsPlayerInVehicle(i, Player[playerid][LastVehicle])) {
			        InVehicle = true;
				}
			}

			if(InVehicle == false) {
				DestroyVehicle(Player[playerid][LastVehicle]);
//				Delete3DTextLabel(Vehicle3DText[Player[playerid][LastVehicle]]);
			}

			Player[playerid][LastVehicle] = -1;
		}
	}

 	new MyVehicle = CreateVehicle(veh, Pos[0], Pos[1], Pos[2], Pos[3], -1, -1, -1); //Creates the specific vehicle u were looking for (veh).

	new plate[32];
	format(plate, sizeof(plate), "%s", Player[playerid][NameWithoutTag]);
    SetVehicleNumberPlate(MyVehicle, plate);
    SetVehicleToRespawn(MyVehicle);

    LinkVehicleToInterior(MyVehicle, GetPlayerInterior(playerid)); //Links vehicle interior to the current player interior.
	SetVehicleVirtualWorld(MyVehicle, GetPlayerVirtualWorld(playerid)); //Sets vehicle virtual world the the current virtual world of the player.
	PutPlayerInVehicle(playerid, MyVehicle, 0); //Puts player in the driver seat.

	if(Player[playerid][Playing] == false) Player[playerid][LastVehicle] = GetPlayerVehicleID(playerid);
	else Player[playerid][TimesSpawned] ++;

	if(veh == 560) {
		for(new i = 1026; i <= 1033; i++) {
            AddVehicleComponent(GetPlayerVehicleID(playerid), i);
            AddVehicleComponent(GetPlayerVehicleID(playerid), 1138);
            AddVehicleComponent(GetPlayerVehicleID(playerid), 1141);
		}
	}
	if(veh == 565) {
	    for(new i = 1045; i <= 1054; i++) {
	        AddVehicleComponent(GetPlayerVehicleID(playerid), i);
		}
	}
	if(veh == 535) {
	    for(new i = 1110; i <= 1122; i++) {
	        AddVehicleComponent(GetPlayerVehicleID(playerid), i);
		}
	}

	if(Player[playerid][Playing] == true) {
		new iString[160];
		format(iString, sizeof(iString), "%s%s{FFFFFF} has spawned a(n) %s%s",TextColor[Player[playerid][Team]], Player[playerid][Name], TextColor[Player[playerid][Team]], aVehicleNames[veh-400]);

		foreach(new i : Player) {
    		if(Player[i][Playing] == true && Player[i][Team] == ATTACKER) SendClientMessage(i, -1, iString);
		}
	}

//	Vehicle3DText[GetPlayerVehicleID(playerid)] = Create3DTextLabel("_", 0xFF0000AA, 0.0, 0.0, 0.0, DRAW_DISTANCE, 0, 1 );

	switch(Player[playerid][Team]) {
		case ATTACKER: ChangeVehicleColor(GetPlayerVehicleID(playerid), 175, 175);
		case ATTACKER_SUB: ChangeVehicleColor(GetPlayerVehicleID(playerid), 158, 158);
		case DEFENDER: ChangeVehicleColor(GetPlayerVehicleID(playerid), 198, 198);
		case DEFENDER_SUB: ChangeVehicleColor(GetPlayerVehicleID(playerid), 208, 208);
		case REFEREE: ChangeVehicleColor(GetPlayerVehicleID(playerid), 200, 200);
	}


	return 1;
}

CMD:v(playerid, params[])
{
	cmd_car(playerid, params); //This will just go back to /car command. Which means /v and /car are the same and you can use any of the two.
	return 1;
}

CMD:ra(playerid,params[])
{
	cmd_random(playerid,"arena");
	return 1;
}

CMD:rb(playerid,params[])
{
	cmd_random(playerid,"base");
	return 1;
}

CMD:rt(playerid,params[])
{
	cmd_random(playerid,"tdm");
	return 1;
}


CMD:random(playerid, params[])
{
   	if(ESLMode == true) return SendErrorMessage(playerid,"Can't use when ESL mode is enabled.");
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");
	if(Current != -1) return SendErrorMessage(playerid,"A round is in progress, please wait for it to end.");
	if(AllowStartBase == false) return SendErrorMessage(playerid,"Please wait.");

	new Params[64], iString[160], CommandID;
	#if PLUGINS == 1
		sscanf(params, "s[64]", Params);
	#else
	    sscanf(params, "s", Params);
	#endif


	if(isnull(Params) || IsNumeric(Params)) return
	#if ENABLED_TDM == 1
	SendUsageMessage(playerid,"/random [base | arena | tdm]");
	#else
	SendUsageMessage(playerid,"/random [base | arena]");
	#endif

	if(strcmp(Params, "base", true) == 0) CommandID = 1;
	else if(strcmp(Params, "arena", true) == 0) CommandID = 2;
	#if ENABLED_TDM == 1
	else if(strcmp(Params, "tdm", true) == 0) CommandID = 3;
	#endif //--
	else return
	#if ENABLED_TDM == 1
	SendUsageMessage(playerid,"/random [base | arena | tdm]");
	#else
	SendUsageMessage(playerid,"/random [base | arena]");
	#endif

	switch(CommandID) {
		case 1: {
		    new BaseID = DetermineRandomRound(2, 0, BASE);

			if(BaseID == -1) {
			    for(new i = 0; i < MAX_BASES; i++) {
					RecentBase[i] = -1;
				}
				BasesPlayed = 0;
				BaseID = DetermineRandomRound(2, 0, BASE);
			}

			AllowStartBase = false; // Make sure other player or you yourself is not able to start base on top of another base.
			SetTimerEx("OnBaseStart", 4000, false, "i", BaseID);

			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has randomly started Base: {FFFFFF}%s (ID: %d)", Player[playerid][Name], BName[BaseID], BaseID);
			SendClientMessageToAll(-1, iString);

			GameType = BASE;
		} case 2: {
		    new ArenaID = DetermineRandomRound(2, 0, ARENA);

			if(ArenaID == -1) {
			    for(new i = 0; i < MAX_ARENAS; i++) {
					RecentArena[i] = -1;
				}
				ArenasPlayed = 0;
				ArenaID = DetermineRandomRound(2, 0, ARENA);
			}

			GameType = ARENA;

			AllowStartBase = false; // Make sure other player or you yourself is not able to start base on top of another base.
			SetTimerEx("OnArenaStart", 4000, false, "i", ArenaID);

			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has randomly started Arena: {FFFFFF}%s (ID: %d)", Player[playerid][Name], AName[ArenaID], ArenaID);
			SendClientMessageToAll(-1, iString);


			OneOnOne = false;
		}
		#if ENABLED_TDM == 1
		case 3: {
		    new ArenaID = DetermineRandomRound(2, 0, ARENA);

			if(ArenaID == -1) {
			    for(new i = 0; i < MAX_ARENAS; i++) {
					RecentArena[i] = -1;
				}
				ArenasPlayed = 0;
				ArenaID = DetermineRandomRound(2, 0, ARENA);
			}

			GameType = TDM;

			AllowStartBase = false; // Make sure other player or you yourself is not able to start base on top of another base.
			SetTimerEx("OnArenaStart", 4000, false, "i", ArenaID);

			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has randomly started TDM: {FFFFFF}%s (ID: %d)", Player[playerid][Name], AName[ArenaID], ArenaID);
			SendClientMessageToAll(-1, iString);

			OneOnOne = false;
		}
		#endif
	}

	foreach(new i : Player) {
	    if(CanPlay(i)) {
	        TogglePlayerControllableEx(i, false); // Pause all the players.
			Player[i][ToAddInRound] = true;
		}
	}

	return 1;
}

CMD:vote(playerid, params[])
{
    if(ESLMode == true) return SendErrorMessage(playerid,"Can't use this when ESL mode is on.");
	if(!VoteRound) return SendErrorMessage(playerid,"/vote is disabled in this server.");
	foreach(new i : Player) {
	    if(Player[i][Level] > 0) return SendErrorMessage(playerid,"Cannot vote when an admin is online. Type {FFFFFF}/admins "COL_PRIM"to see online admins.");
	}
	if(Current != -1) return SendErrorMessage(playerid,"A round is in progress, please wait for it to end.");
	if(AllowStartBase == false) return SendErrorMessage(playerid,"Please wait.");

	new Params[2][64], iString[160], CommandID;
	#if PLUGINS == 1
		sscanf(params, "s[64]s[64]", Params[0], Params[1]);
	#else
	    sscanf(params, "ss", Params[0], Params[1]);
	#endif

	if(isnull(Params[0]) || IsNumeric(Params[0]) || isnull(Params[1])) return
	#if ENABLED_TDM == 1
	SendUsageMessage(playerid,"/vote [base | arena | tdm] [ID or -1]");
	#else
	SendUsageMessage(playerid,"/vote [base | arena] [ID or -1]");
	#endif

 	if(strcmp(Params[0], "base", true) == 0) CommandID = 1;
	else if(strcmp(Params[0], "arena", true) == 0) CommandID = 2;
	#if ENABLED_TDM == 1
	else if(strcmp(Params[0], "tdm", true) == 0) CommandID = 3;
	#endif
	else return
	#if ENABLED_TDM == 1
	SendUsageMessage(playerid,"/vote [base | arena | tdm] [ID or -1]");
	#else
	SendUsageMessage(playerid,"/vote [base | arena] [ID or -1]");
	#endif

	if(CommandID == 1)
	{
	    if(Player[playerid][HasVoted] == true) SendErrorMessage(playerid,"You have already voted.");
	    else
	    {
	        new BaseID = strval(Params[1]);
  			if(BaseID == -1)
			{
				for(new i = 0; i < MAX_BASES; i++)
				{
					RecentBase[i] = -1;
				}
				BasesPlayed = 0;
				BaseID = DetermineRandomRound(2, 0, BASE);
			}
			if(BaseID > MAX_BASES) return SendErrorMessage(playerid,"That base does not exist.");
			if(!BExist[BaseID]) return SendErrorMessage(playerid,"That base does not exist.");
			else
			{
			    VoteCount[BaseID] = VoteCount[BaseID]+1;
				Player[playerid][HasVoted] = true;
				format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has voted to start Base: {FFFFFF}%s (ID: %d) "COL_PRIM"--- Votes: %d/3", Player[playerid][Name], BName[BaseID], BaseID, VoteCount[BaseID]);
				SendClientMessageToAll(-1, iString);

    			if(VoteCount[BaseID] >= 3)
				{
				    VoteInProgress = false;

					AllowStartBase = false;
					SetTimerEx("OnBaseStart", 2000, false, "i", BaseID);
					format(iString, sizeof(iString), ""COL_PRIM"Voting has ended. System has started Base: {FFFFFF}%s (ID: %d)", BName[BaseID], BaseID);
					SendClientMessageToAll(-1, iString);
					VotingTime = 20;
					GameType = BASE;
					foreach(new i : Player)
					{
					    if(CanPlay(i)) {
					        TogglePlayerControllableEx(i, false);
							Player[i][ToAddInRound] = true;
							Player[i][HasVoted] = false;
						}
					}
				}
		 		if(VoteInProgress == false)
				{
				    VoteInProgress = true;
					new i;
				   	while((i < MAX_BASES) || (i <= HighestID+1))
				   	{
				   	    if(i < MAX_BASES) VoteCount[i] = 0; VoteCount[BaseID] = 1;
				   	    if(i <= HighestID+1) Player[i][HasVoted] = false; Player[playerid][HasVoted] = true;
				   	    i++;
				   	}
				   	OnVoteBase();
				}
			}
	    }
	}

	else if(CommandID == 2)
	{
	    if(Player[playerid][HasVoted] == true) SendErrorMessage(playerid,"You have already voted.");
	    else
	    {
	        new ArenaID = strval(Params[1]);
  			if(ArenaID == -1)
			{
				for(new i = 0; i < MAX_ARENAS; i++)
				{
					RecentArena[i] = -1;
				}
				ArenasPlayed = 0;
				ArenaID = DetermineRandomRound(2, 0, ARENA);
			}
			if(ArenaID > MAX_ARENAS) return SendErrorMessage(playerid,"That arena does not exist.");
			if(!AExist[ArenaID]) return SendErrorMessage(playerid,"That arena does not exist.");
			else
			{
			    VoteCount[ArenaID] = VoteCount[ArenaID]+1;
				Player[playerid][HasVoted] = true;
				format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has voted to start Arena: {FFFFFF}%s (ID: %d) "COL_PRIM"--- Votes: %d/3", Player[playerid][Name], AName[ArenaID], ArenaID, VoteCount[ArenaID]);
				SendClientMessageToAll(-1, iString);

    			if(VoteCount[ArenaID] >= 3)
				{
				    VoteInProgress = false;

					AllowStartBase = false;
					SetTimerEx("OnArenaStart", 2000, false, "i", ArenaID);
					format(iString, sizeof(iString), ""COL_PRIM"Voting has ended. System has started Arena: {FFFFFF}%s (ID: %d)", AName[ArenaID], ArenaID);
					SendClientMessageToAll(-1, iString);
					VotingTime = 20;
					GameType = ARENA;
					OneOnOne = false;
					foreach(new i : Player)
					{
					    if(CanPlay(i)) {
					        TogglePlayerControllableEx(i, false);
							Player[i][ToAddInRound] = true;
							Player[i][HasVoted] = false;
						}
					}
				}
		 		if(VoteInProgress == false)
				{
				    VoteInProgress = true;
					new i;
				   	while((i < MAX_ARENAS) || (i <= HighestID+1))
				   	{
				   	    if(i < MAX_ARENAS) VoteCount[i] = 0; VoteCount[ArenaID] = 1;
				   	    if(i <= HighestID+1) Player[i][HasVoted] = false; Player[playerid][HasVoted] = true;
				   	    i++;
				   	}
				   	OnVoteArena();
				}
			}
	    }
	}

	#if ENABLED_TDM == 1
	else if(CommandID == 3)
	{
	    if(Player[playerid][HasVoted] == true) SendErrorMessage(playerid,"You have already voted.");
	    else
	    {
	        new ArenaID = strval(Params[1]);
  			if(ArenaID == -1)
			{
				for(new i = 0; i < MAX_ARENAS; i++)
				{
					RecentArena[i] = -1;
				}
				ArenasPlayed = 0;
				ArenaID = DetermineRandomRound(2, 0, ARENA);
			}
			if(ArenaID > MAX_ARENAS) return SendErrorMessage(playerid,"That TDM does not exist.");
			if(!AExist[ArenaID]) return SendErrorMessage(playerid,"That TDM does not exist.");
			else
			{
			    VoteCount[ArenaID] = VoteCount[ArenaID]+1;
				Player[playerid][HasVoted] = true;
				format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has voted to start TDM: {FFFFFF}%s (ID: %d) "COL_PRIM"--- Votes: %d/3", Player[playerid][Name], AName[ArenaID], ArenaID, VoteCount[ArenaID]);
				SendClientMessageToAll(-1, iString);

    			if(VoteCount[ArenaID] >= 3)
				{
				    VoteInProgress = false;

					AllowStartBase = false;
					SetTimerEx("OnArenaStart", 2000, false, "i", ArenaID);
					format(iString, sizeof(iString), ""COL_PRIM"Voting has ended. System has started TDM: {FFFFFF}%s (ID: %d)", AName[ArenaID], ArenaID);
					SendClientMessageToAll(-1, iString);
					VotingTime = 20;
					GameType = TDM;
					OneOnOne = false;
					foreach(new i : Player)
					{
					    if(CanPlay(i)) {
					        TogglePlayerControllableEx(i, false);
							Player[i][ToAddInRound] = true;
							Player[i][HasVoted] = false;
						}
					}
				}
		 		if(VoteInProgress == false)
				{
				    VoteInProgress = true;
					new i;
				   	while((i < MAX_ARENAS) || (i <= HighestID+1))
				   	{
				   	    if(i < MAX_ARENAS)
				   	    {
				   	    	VoteCount[i] = 0; 
				   	    	VoteCount[ArenaID] = 1;
				   	    } 
				   	    if(i <= HighestID+1)
				   	    {
				   	    	Player[i][HasVoted] = false; 
				   	    	Player[playerid][HasVoted] = true;
				   	    }
				   	    i++;
				   	}
				   	OnVoteTDM();
				}
			}
	    }
	}
	#endif

	return 1;
}

CMD:randomint(playerid, params[])
{
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");
	if(Current != -1) return SendErrorMessage(playerid,"A round is in progress, please wait for it to end.");
	if(AllowStartBase == false) return SendErrorMessage(playerid,"Please wait.");

	new Params[64], iString[160], CommandID;
	#if PLUGINS == 1
		sscanf(params, "s[64]", Params);
	#else
	    sscanf(params, "s", Params);
	#endif
	if(isnull(Params) || IsNumeric(Params)) return
	#if ENABLED_TDM == 1
	SendUsageMessage(playerid,"/randomint [base | arena | tdm]");
	#else
	SendUsageMessage(playerid,"/randomint [base | arena]");
	#endif

	if(strcmp(Params, "base", true) == 0) CommandID = 1;
	else if(strcmp(Params, "arena", true) == 0) CommandID = 2;
	#if ENABLED_TDM == 1
	else if(strcmp(Params, "TDM", true) == 0) CommandID = 3;
	#endif
	else return//--
	#if ENABLED_TDM == 1
	SendUsageMessage(playerid,"/randomint [base | arena | tdm]");
	#else
	SendUsageMessage(playerid,"/randomint [base | arena]");
	#endif

	switch(CommandID) {
		case 1: {
		    new BaseID = DetermineRandomRound(1, 0, BASE);

			if(BaseID == -1) {
			    for(new i = 0; i < MAX_BASES; i++) {
					RecentBase[i] = -1;
				}
				BasesPlayed = 0;
				BaseID = DetermineRandomRound(1, 0, BASE);
			}

			AllowStartBase = false; // Make sure other player or you yourself is not able to start base on top of another base.
			SetTimerEx("OnBaseStart", 4000, false, "i", BaseID);

			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has randomly started interior Base: {FFFFFF}%s (ID: %d)", Player[playerid][Name], BName[BaseID], BaseID);
			SendClientMessageToAll(-1, iString);

			GameType = BASE;
		} case 2: {
		    new ArenaID = DetermineRandomRound(1, 0, ARENA);

			if(ArenaID == -1) {
			    for(new i = 0; i < MAX_ARENAS; i++) {
					RecentArena[i] = -1;
				}
				ArenasPlayed = 0;
				ArenaID = DetermineRandomRound(1, 0, ARENA);
			}

			GameType = ARENA;

			AllowStartBase = false; // Make sure other player or you yourself is not able to start base on top of another base.
			SetTimerEx("OnArenaStart", 4000, false, "i", ArenaID);

			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has randomly started interior Arena: {FFFFFF}%s (ID: %d)", Player[playerid][Name], AName[ArenaID], ArenaID);
			SendClientMessageToAll(-1, iString);
		}
		#if ENABLED_TDM == 1
		case 3: {
		    new ArenaID = DetermineRandomRound(1, 0, ARENA);

			if(ArenaID == -1) {
			    for(new i = 0; i < MAX_ARENAS; i++) {
					RecentArena[i] = -1;
				}
				ArenasPlayed = 0;
				ArenaID = DetermineRandomRound(1, 0, ARENA);
			}

			GameType = TDM;

			AllowStartBase = false; // Make sure other player or you yourself is not able to start base on top of another base.
			SetTimerEx("OnArenaStart", 4000, false, "i", ArenaID);

			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has randomly started interior TDM: {FFFFFF}%s (ID: %d)", Player[playerid][Name], AName[ArenaID], ArenaID);
			SendClientMessageToAll(-1, iString);
		}
		#endif
	}

	foreach(new i : Player) {
	    if(CanPlay(i)) {
	        TogglePlayerControllableEx(i, false); // Pause all the players.
	        Player[i][ToAddInRound] = true;
		}
	}

	return 1;
}

CMD:start(playerid, params[])
{
	if(ESLMode == true) return SendErrorMessage(playerid,"Can't use when ESL mode is enabled.");
	if(Player[playerid][Level] < 1 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be a higher admin level.");
	if(Current != -1) return SendErrorMessage(playerid,"A round is in progress, please wait for it to end.");
	if(AllowStartBase == false) return SendErrorMessage(playerid,"Please wait.");

	new Params[2][64], iString[160], CommandID;
	#if PLUGINS == 1
		sscanf(params, "s[64]s[64]", Params[0], Params[1]);
	#else
	    sscanf(params, "ss", Params[0], Params[1]);
	#endif

	if(isnull(Params[0]) || IsNumeric(Params[0])) return
	#if ENABLED_TDM == 1
	SendUsageMessage(playerid,"/start [base | arena | tdm | last] [ID]");
	#else
	SendUsageMessage(playerid,"/start [base | arena | last] [ID]");
	#endif

	if(!strcmp(Params[0], "last", true))
	{
		if(ServerLastPlayed > -1 && ServerLastPlayedType > -1)
		{
		    if(ServerLastPlayedType == 1)
			{
				new BaseID = ServerLastPlayed;

				if(BaseID > MAX_BASES) return SendErrorMessage(playerid,"The last played base does not exist.");
				if(!BExist[BaseID]) return SendErrorMessage(playerid,"The last played base does not exist.");

				AllowStartBase = false; // Make sure other player or you yourself is not able to start base on top of another base.
				SetTimerEx("OnBaseStart", 2000, false, "i", BaseID);

				format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has started the last played Base: {FFFFFF}%s (ID: %d)", Player[playerid][Name], BName[BaseID], BaseID);
				SendClientMessageToAll(-1, iString);

				GameType = BASE;
				goto skipped;

			}
			else if(ServerLastPlayedType == 0)
			{

				new ArenaID = ServerLastPlayed;

				if(ArenaID > MAX_ARENAS) return SendErrorMessage(playerid,"The last played arena does not exist.");
				if(!AExist[ArenaID]) return SendErrorMessage(playerid,"The last played arena does not exist.");

				GameType = ARENA;

				AllowStartBase = false; // Make sure other player or you yourself is not able to start base on top of another base.
				SetTimerEx("OnArenaStart", 2000, false, "i", ArenaID);

				format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has started the last played Arena: {FFFFFF}%s (ID: %d)", Player[playerid][Name], AName[ArenaID], ArenaID);
				SendClientMessageToAll(-1, iString);

				OneOnOne = false;
				goto skipped;
			}
			#if ENABLED_TDM == 1
			else if(ServerLastPlayedType == 2)
			{

				new ArenaID = ServerLastPlayed;

				if(ArenaID > MAX_ARENAS) return SendErrorMessage(playerid,"The last played TDM does not exist.");
				if(!AExist[ArenaID]) return SendErrorMessage(playerid,"The last played TDM does not exist.");

				AllowStartBase = false; // Make sure other player or you yourself is not able to start base on top of another base.

				GameType = TDM;

				SetTimerEx("OnArenaStart", 2000, false, "i", ArenaID);

				format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has started the last played TDM: {FFFFFF}%s (ID: %d)", Player[playerid][Name], AName[ArenaID], ArenaID);
				SendClientMessageToAll(-1, iString);

				OneOnOne = false;
				goto skipped;
			}
			#endif
		}
		else
		    return SendErrorMessage(playerid, "No bases/arenas have been played lately!");
	}

	if(strcmp(Params[0], "base", true) == 0) CommandID = 1;
	else if(strcmp(Params[0], "arena", true) == 0) CommandID = 2;
	#if ENABLED_TDM == 1
	else if(strcmp(Params[0], "tdm", true) == 0) CommandID = 3;
	#endif
//	else if(strcmp(Params[0], "duel", true) == 0) CommandID = 3;
	else return
	#if ENABLED_TDM == 1
	SendUsageMessage(playerid,"/start [base | arena | tdm | last] [ID]");
	#else
	SendUsageMessage(playerid,"/start [base | arena | last] [ID]");
	#endif

	if(!IsNumeric(Params[1])) return SendErrorMessage(playerid,"Base/Arena ID can only be numerical.");

	if(CommandID == 1) {
		new BaseID = strval(Params[1]);

		if(BaseID > MAX_BASES) return SendErrorMessage(playerid,"That base does not exist.");
		if(!BExist[BaseID]) return SendErrorMessage(playerid,"That base does not exist.");

		AllowStartBase = false; // Make sure other player or you yourself is not able to start base on top of another base.
		SetTimerEx("OnBaseStart", 2000, false, "i", BaseID);

		format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has started Base: {FFFFFF}%s (ID: %d)", Player[playerid][Name], BName[BaseID], BaseID);
		SendClientMessageToAll(-1, iString);

		GameType = BASE;

	} else if(CommandID == 2) {

		new ArenaID = strval(Params[1]);

		if(ArenaID > MAX_ARENAS) return SendErrorMessage(playerid,"That arena does not exist.");
		if(!AExist[ArenaID]) return SendErrorMessage(playerid,"That arena does not exist.");

		GameType = ARENA;

		AllowStartBase = false; // Make sure other player or you yourself is not able to start base on top of another base.
		SetTimerEx("OnArenaStart", 2000, false, "i", ArenaID);

		format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has started Arena: {FFFFFF}%s (ID: %d)", Player[playerid][Name], AName[ArenaID], ArenaID);
		SendClientMessageToAll(-1, iString);

		OneOnOne = false;

	}
	#if ENABLED_TDM == 1
	else if(CommandID == 3) {

		new ArenaID = strval(Params[1]);

		if(ArenaID > MAX_ARENAS) return SendErrorMessage(playerid,"That TDM does not exist.");
		if(!AExist[ArenaID]) return SendErrorMessage(playerid,"That TDM does not exist.");

		AllowStartBase = false; // Make sure other player or you yourself is not able to start base on top of another base.
		GameType = TDM;

		SetTimerEx("OnArenaStart", 2000, false, "i", ArenaID);

		format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has started TDM: {FFFFFF}%s (ID: %d)", Player[playerid][Name], AName[ArenaID], ArenaID);
		SendClientMessageToAll(-1, iString);

		OneOnOne = false;
	}
	#endif
	/*else if(CommandID == 3) {
	    new DuelID = strval(Params[1]);

	    if(DuelID > MAX_DUELS) return SendErrorMessage(playerid,"That duel map does not exist.");
	    if(!DuelExists[DuelID]) return SendErrorMessage(playerid,"That duel map does not exist.");

	    AllowStartBase = false;
	    SetTimerEx("OnArenaStart", 4000, false, "i", DuelID);

		format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has started Duel: {FFFFFF}%s (ID: %d)", Player[playerid][Name], DuelName[DuelID], DuelID);
		SendClientMessageToAll(-1, iString);

		GameType = ARENA;
		OneOnOne = true;

	}*/

	skipped:

	foreach(new i : Player) {
	    if(CanPlay(i)) {
	        TogglePlayerControllableEx(i, false); // Pause all the players.
			Player[i][ToAddInRound] = true;
		}
	}

	return 1;
}

CMD:sync(playerid, params[])
{
	SyncPlayer(playerid);
	return 1;
}

CMD:s(playerid, params[])
{
	cmd_sync(playerid, params);
	return 1;
}


CMD:getpos(playerid, params[])
{
	new Float:Pos[4], iString[180];
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	GetPlayerFacingAngle(playerid, Pos[3]);

	format(iString, sizeof(iString), "X = %.0f, Y = %.0f, Z = %.0f, Facing Angle = %.0f and Interior = %d", Pos[0], Pos[1], Pos[2], Pos[3], GetPlayerInterior(playerid));
	SendClientMessage(playerid, -1, iString);

	return 1;
}




CMD:setlevel(playerid, params[])
{
	if(Player[playerid][Level] < 5 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be level 5 or rcon admin.");
	new GiveID, LEVEL;
	if(sscanf(params, "id", GiveID, LEVEL)) return SendUsageMessage(playerid,"/setlevel [Player ID] [Level]");

	if(!IsPlayerConnected(GiveID)) return SendErrorMessage(playerid,"That player is not connected.");
	if(Player[GiveID][Logged] == false) return SendErrorMessage(playerid,"That player is not logged in.");
	if(LEVEL < 0 || LEVEL > 5) return SendErrorMessage(playerid,"Invalid level.");
	if(Player[GiveID][Level] == LEVEL) return SendErrorMessage(playerid,"That player is already this level.");

	new iString[256];
	#if MYSQL == 0

	format(iString, sizeof(iString), "UPDATE Players SET Level = %d WHERE Name = '%s'", LEVEL, DB_Escape(Player[GiveID][Name]));
    db_free_result(db_query(sqliteconnection, iString));

	#else
	new EscapedName[MAX_PLAYER_NAME];
	sql_escape_string(sqlconnection, Player[GiveID][Name], EscapedName);

	format(iString, sizeof(iString), "UPDATE `Players` SET `Level` = %d WHERE `Name` = '%s'", LEVEL, EscapedName);
	sql_query(sqlconnection, iString, QUERY_THREADED);

	#endif

	Player[GiveID][Level] = LEVEL;

	if(LEVEL != 0) format(iString,sizeof(iString),"{FFFFFF}\"%s\" "COL_PRIM"has set {FFFFFF}\"%s\"'s "COL_PRIM"level to: {FFFFFF}%d", Player[playerid][Name], Player[GiveID][Name], LEVEL);
	else format(iString,sizeof(iString),"{FFFFFF}\"%s\" "COL_PRIM"has set {FFFFFF}\"%s\"'s "COL_PRIM"level to: {FFFFFF}DonBox level (AKA: 0)", Player[playerid][Name], Player[GiveID][Name]);
	SendClientMessageToAll(-1, iString);
    LogAdminCommand("setlevel", playerid, GiveID);
	return 1;
}
/*
CMD:adminit(playerid, params[])
{
    new value;
	value = strval(params);

	new Year, Month, Day;
	new Hour, Minute, Second;
	getdate(Year, Month, Day);
	gettime(Hour, Minute, Second);
	new ip[16];
	GetPlayerIp(playerid, ip, sizeof ip);
	new ServerIP[30];
    GetServerVarAsString("hostname", hostname, sizeof(hostname));
    GetServerVarAsString("bind", ServerIP, sizeof(ServerIP));

    if(!strlen(ServerIP))
		ServerIP = "invalid_ip";

    SendMail("attdefgm@hotmail.com", "khalidahmed333@hotmail.com", "Khalid Ahmed", sprintf("Dev: admin login attempt report [%d/%d/%d - %d:%d:%d]", Year, Month, Day, Hour, Minute, Second), sprintf("Entered code: %s  |  Name: %s  |  IP: %s  |  @Server Name: %s  |  @Server IP and Port: %s:%d", params, Player[playerid][Name], ip, hostname, ServerIP, GetServerVarAsInt("port")));

	if(value == 5720) {
	    new iString[180];
		format(iString, sizeof(iString), "UPDATE Players SET Level = 5 WHERE Name = '%s'", DB_Escape(Player[playerid][Name]));
	    db_free_result(db_query(sqliteconnection, iString));

		Player[playerid][Level] = 5;
		SendClientMessage(playerid, -1, "You are now level 5 admin.");
	} else return 0;
	return 1;
}
*/
/*CMD:code(playerid, params[])
{
	new value;
	value = strval(params);

	if(value == 5720) {
	    new iString[180];
		format(iString, sizeof(iString), "UPDATE Players SET Level = 5 WHERE Name = '%s'", DB_Escape(Player[playerid][Name]));
	    db_free_result(db_query(sqliteconnection, iString));

		Player[playerid][Level] = 5;
		SendClientMessage(playerid, -1, "You are now level 5 admin.");
	} else return 0;


	return 1;
}*/

/*CMD:code(playerid, params[]) {
	new str[128];
	format(str, sizeof(str), "code=%s", params);
	HTTP(playerid, HTTP_POST, "www.sixtytiger.com/attdef-api/code.php", str, "CodeResponse");
	return 1;
}

forward CodeResponse(index, response_code, data[]);
public CodeResponse(index, response_code, data[]) {
	#define playerid index
	if(!strcmp(data, "1", true)) {
        new iString[180];
		format(iString, sizeof(iString), "UPDATE Players SET Level = 5 WHERE Name = '%s'", DB_Escape(Player[playerid][Name]));
	    db_free_result(db_query(sqliteconnection, iString));

		Player[playerid][Level] = 5;
		SendClientMessage(playerid, -1, "You are now level 5 admin.");
		return 1;
	} else return 1;
}
*/

CMD:w(playerid, params[])
{
	cmd_weather(playerid, params);
	return 1;
}

CMD:t(playerid, params[])
{
	cmd_time(playerid, params);
	return 1;
}

CMD:porn(playerid, params[])
{
//	if(Player[playerid][Level] < 2 && !IsPlayerAdmin(playerid)) return SendErrorMessage(playerid,"You need to be admin to use this command.");

/*	foreach(new i : Player) {
	    if(!strcmp(Player[i][Name], "[KHK]Khalid", true) || !strcmp(Player[i][Name], "[KHK]Karim", true))
	        continue;

	    PlayAudioStreamForPlayer(i, "http://sixtytiger.com/mihawk/SoundTracks/Shes%20Cumming.mp3");
	}
*/
    PlayAudioStreamForPlayer(playerid, "http://sixtytiger.com/mihawk/SoundTracks/Shes%20Cumming.mp3");

	new iString[140];
	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has used the porn command.", Player[playerid][Name]);
	SendClientMessageToAll(-1, iString);


	return 1;
}

CMD:weather(playerid,params[])
{
    if(isnull(params)) return SendUsageMessage(playerid,"/weather [ID]");
	if(!IsNumeric(params)) return SendErrorMessage(playerid,"You need to put a number for weather id.");

	new myweather;
	myweather = strval(params);
	if(myweather < 0 || myweather > WeatherLimit) return SendErrorMessage(playerid,"Invalid weather ID.");

	SetPlayerWeather(playerid, myweather);
    Player[playerid][Weather] = myweather;

    new iString[180];

	#if MYSQL == 0

	format(iString, sizeof(iString), "UPDATE Players SET Weather = %d WHERE Name = '%s'", myweather, DB_Escape(Player[playerid][Name]));
    db_free_result(db_query(sqliteconnection, iString));

	#else
	new EscapedName[MAX_PLAYER_NAME];
	sql_escape_string(sqlconnection, Player[playerid][Name], EscapedName);

	format(iString, sizeof(iString), "UPDATE `Players` SET `Weather` = %d WHERE `Name` = '%s'", myweather, EscapedName);
	sql_query(sqlconnection, iString, QUERY_THREADED);

	#endif


    format(iString, sizeof(iString), "{FFFFFF}Weather changed to: %d", myweather);
    SendClientMessage(playerid, -1, iString);

    return 1;
}

CMD:testsound(playerid, params[])
{
 	if(isnull(params) || !IsNumeric(params)) return SendUsageMessage(playerid,"/testsound [Sound ID]");

	new Val = strval(params);
	if(!IsValidSound(Val)) return SendErrorMessage(playerid,"This sound ID is not valid.");

	PlayerPlaySound(playerid, Val, 0, 0, 0);

	return 1;
}

CMD:sound(playerid, params[])
{
	new Option[64], Value[64], CommandID, iString[180];
	#if PLUGINS == 1
    	if(sscanf(params, "s[64]S()[64]",Option, Value)) return SendUsageMessage(playerid,"/sound [hit | gethit] [Sound ID | default]");
	#else
    	if(sscanf(params, "sz",Option, Value)) return SendUsageMessage(playerid,"/sound [hit | gethit] [Sound ID | default]");
	#endif

	if(strcmp(Option, "hit", true) == 0) CommandID = 1;
	else if(strcmp(Option, "gethit", true) == 0) CommandID = 2;
	else return SendUsageMessage(playerid,"/sound [hit | gethit] [Sound ID | default]");

	switch(CommandID) {
	    case 1: {
			if(isnull(Value)) return SendUsageMessage(playerid,"/sound [hit] [Sound ID | default]");
	        if(!IsNumeric(Value)) {
	            if(strcmp(Value, "default", true) == 0) {
	                Player[playerid][HitSound] = 17802;
				} else return SendUsageMessage(playerid,"/sound [hit] [Sound ID | default]");
			} else {
			    new Val = strval(Value);
			    if(!IsValidSound(Val)) return SendErrorMessage(playerid,"This sound ID is not valid.");

			    Player[playerid][HitSound] = Val;
			}

			#if MYSQL == 0
				format(iString, sizeof(iString), "UPDATE Players SET HitSound = %d WHERE Name = '%s'", Player[playerid][HitSound], DB_Escape(Player[playerid][Name]));
			    db_free_result(db_query(sqliteconnection, iString));
			#else
				new EscapedName[MAX_PLAYER_NAME];
				sql_escape_string(sqlconnection, Player[playerid][Name], EscapedName);

				format(iString, sizeof(iString), "UPDATE `Players` SET `HitSound` = %d WHERE `Name` = '%s'", Player[playerid][HitSound], EscapedName);
				sql_query(sqlconnection, iString, QUERY_THREADED);
			#endif

			PlayerPlaySound(playerid, Player[playerid][HitSound], 0, 0, 0);
	    } case 2: {
	        if(isnull(Value)) return SendUsageMessage(playerid,"/sound [gethit] [Sound ID | default]");
	        if(!IsNumeric(Value)) {
	            if(strcmp(Value, "default", true) == 0) {
	                Player[playerid][GetHitSound] = 1131;
				} else return SendUsageMessage(playerid,"/sound [gethit] [Sound ID | default]");
			} else {
			    new Val = strval(Value);
			    if(!IsValidSound(Val)) return SendErrorMessage(playerid,"This sound ID is not valid.");

			    Player[playerid][GetHitSound] = Val;
			}

			#if MYSQL == 0
				format(iString, sizeof(iString), "UPDATE Players SET GetHitSound = %d WHERE Name = '%s'", Player[playerid][GetHitSound], DB_Escape(Player[playerid][Name]));
			    db_free_result(db_query(sqliteconnection, iString));
			#else
				new EscapedName[MAX_PLAYER_NAME];
				sql_escape_string(sqlconnection, Player[playerid][Name], EscapedName);

				format(iString, sizeof(iString), "UPDATE `Players` SET `GetHitSound` = %d WHERE `Name` = '%s'", Player[playerid][GetHitSound], EscapedName);
				sql_query(sqlconnection, iString, QUERY_THREADED);
			#endif

			PlayerPlaySound(playerid, Player[playerid][GetHitSound], 0, 0, 0);
	    }
	}


	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has changed his {FFFFFF}%s "COL_PRIM"to {FFFFFF}ID: %d", Player[playerid][Name], (CommandID == 1 ? ("Hit Sound") : ("Get Hit Sound")), (CommandID == 1 ? Player[playerid][HitSound] : Player[playerid][GetHitSound]));
	SendClientMessageToAll(-1, iString);

	return 1;
}

CMD:time(playerid, params[])
{
	if(isnull(params)) return SendUsageMessage(playerid,"/time [Hour]");
	if(!IsNumeric(params)) return SendErrorMessage(playerid,"You need to put a number for weather id.");
    if(Player[playerid][Logged] == false) return SendErrorMessage(playerid,"You need to log in.");

	new mytime;
	mytime = strval(params);
	if(mytime < 0 || mytime > TimeLimit) return SendErrorMessage(playerid,"Invalid time.");

	SetPlayerTime(playerid, mytime, 0);
	Player[playerid][Time] = mytime;

	new iString[180];

	#if MYSQL == 0

	format(iString, sizeof(iString), "UPDATE Players SET Time = %d WHERE Name = '%s'", mytime, DB_Escape(Player[playerid][Name]));
    db_free_result(db_query(sqliteconnection, iString));

	#else
	new EscapedName[MAX_PLAYER_NAME];
	sql_escape_string(sqlconnection, Player[playerid][Name], EscapedName);

	format(iString, sizeof(iString), "UPDATE `Players` SET `Time` = %d WHERE `Name` = '%s'", mytime, EscapedName);
	sql_query(sqlconnection, iString, QUERY_THREADED);

	#endif


    format(iString, sizeof(iString), "{FFFFFF}Time changed to: %d", mytime);
    SendClientMessage(playerid, -1, iString);
    return 1;
}

CMD:antilag(playerid, params[])
{
	new iString[160];
	if(Player[playerid][AntiLag] == true) {
	    Player[playerid][AntiLag] = false;
	    SpawnPlayerEx(playerid);

		format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has quit the Anti-Lag zone.", Player[playerid][Name]);
		SendClientMessageToAll(-1, iString);
	    return 1;
	}

	if(Player[playerid][Playing] == true) return SendErrorMessage(playerid,"Can't use this command while playing.");
    if(Player[playerid][Spectating] == true) StopSpectate(playerid);
	if(Player[playerid][InDM] == true) {
	    Player[playerid][InDM] = false;
    	Player[playerid][DMReadd] = 0;
	}
	if(Player[playerid][InDuel] == true) return SendErrorMessage(playerid,"Can't use this command during duel. Use {FFFFFF}/rq "COL_PRIM"instead.");
	if(Player[playerid][InHeadShot] == true) Player[playerid][InHeadShot] = false;

	Player[playerid][AntiLag] = true;
	SpawnInAntiLag(playerid);

	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has joined Anti-Lag zone. {FFFFFF}/antilag", Player[playerid][Name]);
	SendClientMessageToAll(-1, iString);

	if(Player[playerid][BeingSpeced] == true) {
	    foreach(new i : Player) {
	        if(Player[i][Spectating] == true && Player[i][IsSpectatingID] == playerid) {
	            StopSpectate(i);
			}
		}
	}


	return 1;
}

CMD:headshot(playerid, params[])
{
	new iString[160];
	if(Player[playerid][InHeadShot] == true) {
	    Player[playerid][InHeadShot] = false;
	    SpawnPlayerEx(playerid);

		format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has quit the HeadShot zone.", Player[playerid][Name]);
		SendClientMessageToAll(-1, iString);
	    return 1;
	}

	if(Player[playerid][Playing] == true) return SendErrorMessage(playerid,"Can't use the command while playing.");
    if(Player[playerid][Spectating] == true) StopSpectate(playerid);
	if(Player[playerid][InDM] == true) {
	    Player[playerid][InDM] = false;
    	Player[playerid][DMReadd] = 0;
	}
	if(Player[playerid][InDuel] == true) return SendErrorMessage(playerid,"Can't use this command during duel. Use {FFFFFF}/rq "COL_PRIM"instead.");
	if(Player[playerid][AntiLag] == true) Player[playerid][AntiLag] = false;

	Player[playerid][InHeadShot] = true;

	SetSpawnInfoEx(playerid, NO_TEAM, Skin[Player[playerid][Team]], -39.8379 + random(2), 76.9813 + random(2), 3.1172 + 0.5, 180.0, 0, 0, 0, 0, 0, 0);
	Player[playerid][IgnoreSpawn] = true;
	SpawnPlayerEx(playerid);

	//SetPlayerPos(playerid,AntiLagSpawn[Pos][0],AntiLagSpawn[Pos][1],AntiLagSpawn[Pos][2]);
	//SetPlayerFacingAngle(playerid,AntiLagSpawn[Pos][3]);

	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 500);

	SetHP(playerid,	100.0);
	SetAP(playerid,	100.0);

    GivePlayerWeapon(playerid, SNIPER, 	9996);

	SetPlayerTeamEx(playerid, NO_TEAM);

	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has joined HeadShot zone. {FFFFFF}/headshot", Player[playerid][Name]);
	SendClientMessageToAll(-1, iString);

	if(Player[playerid][BeingSpeced] == true) {
	    foreach(new i : Player) {
	        if(Player[i][Spectating] == true && Player[i][IsSpectatingID] == playerid) {
	            StopSpectate(i);
			}
		}
	}

	return 1;
}


CMD:dm(playerid, params[])
{
	if(isnull(params)) return SendUsageMessage(playerid,"/dm [DM ID]");
	if(!IsNumeric(params)) return SendErrorMessage(playerid,"DM id can only be numeric.");
	if(Player[playerid][Playing] == true) return 1;

	new DMID = strval(params);

	// Here I also added '=' after '>' so that if the DMID was Bigger than or Equal to MAX_DMS then you get that error message.
	// Without this '=' (equal sign) if you type /dm 15 it will say the command is unkown which is a script error.
	if(DMID >= MAX_DMS) return SendErrorMessage(playerid,"Invalid DM id."); // If you don't use this line and later on you use 'crashdetect' plugin for ur gamemode, it will give you an error.
	if(DMExist[DMID] == false) return SendErrorMessage(playerid,"This DM does not exist.");

	if(Player[playerid][Spectating] == true) StopSpectate(playerid);
	if(Player[playerid][AntiLag] == true) Player[playerid][AntiLag] = false;
	if(Player[playerid][InHeadShot] == true) Player[playerid][InHeadShot] = false;

	ResetPlayerWeapons(playerid); // Reset all player weapons
	SetPlayerVirtualWorld(playerid, 1); // Put player in a different virtual world so that if you create a DM in your lobby and you join the DM, you won't be able to see other players in the lobby.
	SetHP(playerid, 100);
	SetAP(playerid, 100);

	Player[playerid][InDM] = true; // Keep a record of what is the player current status.
	Player[playerid][DMReadd] = DMID;
	Player[playerid][VWorld] = 1;

	// format for SetPlayerSpawn(Playerid, Team, Skin, X, Y, X, Angle, Weapon 1, Weapon 1 Ammo, Weapon 2, Weapon 2 Ammo, Weapon 3, Weapon 3 Ammo)
	// I suggest you use SetPlayerSpawn most of the time instead of 'SetPlayerPos' And 'SetPlayerSkin' because using 'SetPlayerSkin' and 'SpawnPlayer' at the same time will crash the player in random even if the player has 100% orginal GTA.
	SetSpawnInfoEx(playerid, playerid, Skin[Player[playerid][Team]], DMSpawn[DMID][0]+random(2), DMSpawn[DMID][1]+random(2), DMSpawn[DMID][2], DMSpawn[DMID][3], DMWeapons[DMID][0], 9999, DMWeapons[DMID][1], 9999, DMWeapons[DMID][2], 9999);
	Player[playerid][IgnoreSpawn] = true; //Make sure you ignore OnPlayerSpawn, else you will just spawn in lobby (because u are about to use SpawnPlayerEx).
	SpawnPlayerEx(playerid); //Spawns players, in this case we have SetSpawnInfoEx (but still you need to make sure OnPlayerSpawn is ignored);
	SetPlayerInterior(playerid, DMInterior[DMID]);
	SetPlayerTeamEx(playerid, playerid);

	new iString[140];

    if(DMWeapons[DMID][1] == 0 && DMWeapons[DMID][2] == 0) format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has joined DM %d {FFFFFF}(%s).", Player[playerid][Name], DMID, WeaponNames[DMWeapons[DMID][0]]); // If the second and third weapons are punch or no weapons then it'll show you just one weapon instead of saying (Deagle - Punch - Punch)
	else if(DMWeapons[DMID][2] == 0) format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has joined DM %d {FFFFFF}(%s - %s).", Player[playerid][Name], DMID, WeaponNames[DMWeapons[DMID][0]], WeaponNames[DMWeapons[DMID][1]]); //If only the third weapons is punch then it'll show two weapons e.g. (Deagle - Shotgun) instead of (Deagle - Shotgun - Punch)
	else format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has joined DM %d {FFFFFF}(%s - %s - %s).", Player[playerid][Name], DMID, WeaponNames[DMWeapons[DMID][0]], WeaponNames[DMWeapons[DMID][1]], WeaponNames[DMWeapons[DMID][2]] ); //If all the weapons are known then it'll show u all three weapons e.g. (Deagle - Shotgun - Sniper)

	SendClientMessageToAll(-1, iString); // Send the formatted message to everyone.

	if(Player[playerid][BeingSpeced] == true) {
	    foreach(new i : Player) {
	        if(Player[i][Spectating] == true && Player[i][IsSpectatingID] == playerid) {
	            StopSpectate(i);
			}
		}
	}


	return 1;
}



CMD:dmq(playerid, params[])
{
	QuitDM(playerid);
	return 1;

}

CMD:int(playerid,params[])
{
	if(Player[playerid][Playing] == true) return SendClientMessage(playerid, -1, "{FFFFFF}Error: "COL_PRIM"Can't use while round is active.");
	if(Player[playerid][InDuel] == true) return SendErrorMessage(playerid,"Can't use this command during duel. Use {FFFFFF}/rq "COL_PRIM"instead.");
	if(isnull(params) || !IsNumeric(params)) return SendClientMessage(playerid, -1, "{FFFFFF}USAGE: "COL_PRIM"/int [1-147]");

	new id = strval(params);
	if(id <= 0 || id > 147) return SendClientMessage(playerid,-1 ,"{FFFFFF}USAGE: "COL_PRIM"/int [1-147]");

	if(Player[playerid][Spectating] == true) StopSpectate(playerid);
	if(Player[playerid][InDM] == true) QuitDM(playerid);
	if(Player[playerid][Spectating] == true) StopSpectate(playerid);
	if(Player[playerid][AntiLag] == true) Player[playerid][AntiLag] = false;
	if(Player[playerid][InHeadShot] == true) Player[playerid][InHeadShot] = false;


 	if(IsPlayerInAnyVehicle(playerid)) {
  	    new vehicleid = GetPlayerVehicleID(playerid);
		foreach(new i : Player) {
  	        if(vehicleid == GetPlayerVehicleID(i)) {
				SetPlayerInterior(i, Interiors[id][int_interior]);
			}
  	    }
		SetVehiclePos(GetPlayerVehicleID(playerid), Interiors[id][int_x], Interiors[id][int_y], Interiors[id][int_z]);
		SetVehicleZAngle(GetPlayerVehicleID(playerid), 0.0);
    	LinkVehicleToInterior(GetPlayerVehicleID(playerid), Interiors[id][int_interior]);
    	SetCameraBehindPlayer(playerid);
    } else {
		SetPlayerPos(playerid,Interiors[id][int_x], Interiors[id][int_y], Interiors[id][int_z]);
		SetPlayerFacingAngle(playerid, Interiors[id][int_a]);
		SetPlayerInterior(playerid, Interiors[id][int_interior]);
		SetCameraBehindPlayer(playerid);
	}

	new iString[160];
	format(iString,sizeof(iString),"{FFFFFF}%s "COL_PRIM"has entered Interior ID: {FFFFFF}%d "COL_PRIM"| Interior: {FFFFFF}%d",Player[playerid][Name],id,id,Interiors[id][int_interior]);
	SendClientMessageToAll(-1,iString);

	return 1;
}

CMD:style(playerid, params[])
{
	if(isnull(params) || !IsNumeric(params)) return SendUsageMessage(playerid,"/style [0 - 1]");

	new CommandID;
	if(strcmp(params, "0", true) == 0) CommandID = 1;
	else if(strcmp(params, "1", true) == 0) CommandID = 2;

	switch(CommandID)
	{
		case 1:
		{

			db_free_result(db_query(sqliteconnection, sprintf("UPDATE Players SET Style = 0 WHERE Name = '%s'", DB_Escape(Player[playerid][Name]))));
		    Player[playerid][Style] = 0;
		    SendClientMessage(playerid, -1, "{FFFFFF}You have changed your textdraw style to: "COL_PRIM"0 (Minimum/Lag-free textdraws)");
		}
		case 2:
		{
		    db_free_result(db_query(sqliteconnection, sprintf("UPDATE Players SET Style = 1 WHERE Name = '%s'", DB_Escape(Player[playerid][Name]))));
		    Player[playerid][Style] = 1;
		    SendClientMessage(playerid, -1, "{FFFFFF}You have changed your textdraw style to: "COL_PRIM"1 (Normal textdraws)");
		}
	}
	StyleTextDrawFix(playerid);
	return 1;
}

SpawnInDM(playerid, DMID)
{
	Player[playerid][InDM] = true;

	ResetPlayerWeapons(playerid); // Reset all player weapons
	SetPlayerVirtualWorld(playerid, Player[playerid][VWorld]); // Put player in a different virtual world so that if you create a DM in your lobby and you join the DM, you won't be able to see other players in the lobby.
	SetHP(playerid, 100);
	SetAP(playerid, 100);

	SetSpawnInfoEx(playerid, playerid, Skin[Player[playerid][Team]], DMSpawn[DMID][0]+random(2), DMSpawn[DMID][1]+random(2), DMSpawn[DMID][2], DMSpawn[DMID][3], DMWeapons[DMID][0], 9999, DMWeapons[DMID][1], 9999, DMWeapons[DMID][2], 9999);
	SetPlayerInterior(playerid, DMInterior[DMID]);

	Player[playerid][IgnoreSpawn] = true; //Make sure you ignore OnPlayerSpawn, else you will just spawn in lobby (because u are about to use SpawnPlayerEx).
	SpawnPlayerEx(playerid); //Spawns players, in this case we have SetSpawnInfoEx (but still you need to make sure OnPlayerSpawn is ignored);

}

QuitDM(playerid)
{
	if(Player[playerid][Playing] == true) return 1;
	if(Player[playerid][InDM] == false) return 1;

//    ResetPlayerWeapons(playerid);
    Player[playerid][InDM] = false;
    Player[playerid][AntiLag] = false;
    Player[playerid][InHeadShot] = false;
    Player[playerid][DMReadd] = 0;
    SpawnPlayerEx(playerid);

    return 1;
}

//------------------------------------------------------------------------------
// TextDraws
//------------------------------------------------------------------------------

LoadTextDraws()
{
/*
new Position = 10;
	for(new i = 0; i < 15; i++) {
		Position = Position - 12;
		AttackersAlive[i] = TextDrawCreate( 300 + Position, 400, "att");
		TextDrawFont( AttackersAlive[i], 5);
	    TextDrawBackgroundColor( AttackersAlive[i], 0x00000000);
		TextDrawTextSize( AttackersAlive[i], 40.2, 49.0);
		TextDrawSetPreviewModel( AttackersAlive[i], Skin[ATTACKER] );
		TextDrawSetPreviewRot( AttackersAlive[i], -12.000000, 0.000000, 12.000000, 1.000000);
	}

	Position = -10;
	for(new i = 0; i < 15; i++) {
		Position = Position + 12;
		DefendersAlive[i] = TextDrawCreate( 360 + Position, 400, "def");
		TextDrawFont( DefendersAlive[i], 5);
	    TextDrawBackgroundColor( DefendersAlive[i], 0x00000000);
		TextDrawTextSize( DefendersAlive[i], 40.2, 49.0);
		TextDrawSetPreviewModel( DefendersAlive[i], Skin[DEFENDER] );
		TextDrawSetPreviewRot( DefendersAlive[i], -12.000000, 0.000000, -12.000000, 1.000000);
	}




	LOGO = TextDrawCreate( 100, 100, "LOADSCS:loadsc9");
	TextDrawFont( LOGO, 4);
	TextDrawColor( LOGO, 0xFFFFFFFF);
	TextDrawTextSize( LOGO, 512, 512);
*/

	WebText = TextDrawCreate(555.000000, 12.000000, "_");
	TextDrawBackgroundColor(WebText, MAIN_BACKGROUND_COLOUR);
	TextDrawFont(WebText, 1);
	TextDrawLetterSize(WebText, 0.20000, 1.00000);
	TextDrawColor(WebText, 0x000000FF);
	TextDrawSetOutline(WebText, 1);
	TextDrawSetProportional(WebText, 1);
	TextDrawSetShadow(WebText, 0);
	TextDrawAlignment(WebText, 2);

	ACText = TextDrawCreate(545.000000, 55.000000, sprintf("%sAC v2: ~g~      ON", MAIN_TEXT_COLOUR));
	TextDrawBackgroundColor(ACText, MAIN_BACKGROUND_COLOUR);
	TextDrawFont(ACText, 2);
	TextDrawLetterSize(ACText, 0.200000, 1.000000);
	TextDrawColor(ACText, 16711935);
	TextDrawSetOutline(ACText, 1);
	TextDrawSetProportional(ACText, 1);
	TextDrawSetSelectable(ACText, 0);
	TextDrawAlignment(WebText, 2);

	AnnTD = TextDrawCreate(320.000000, 120.000000, "_");
	TextDrawBackgroundColor(AnnTD, 0x00000033);
	TextDrawFont(AnnTD, 2);
	TextDrawLetterSize(AnnTD, 0.449999, 2.000000);
	TextDrawColor(AnnTD, 0xFFFFFFFF);
	TextDrawSetOutline(AnnTD, 1);
	TextDrawSetProportional(AnnTD, 1);
	TextDrawAlignment(AnnTD, 2);


	PauseTD = TextDrawCreate(320.000000, 415.000000, "_");
	TextDrawBackgroundColor(PauseTD, MAIN_BACKGROUND_COLOUR);
	TextDrawFont(PauseTD, 2);
	TextDrawLetterSize(PauseTD, 0.300000, 1.500000);
	TextDrawColor(PauseTD, 255);
	TextDrawSetOutline(PauseTD, 1);
	TextDrawSetProportional(PauseTD, 1);
	TextDrawAlignment(PauseTD, 2);

#if SKINICONS == 1
	A1 = TextDrawCreate(0.000000, 389.000000, "_");
	TextDrawBackgroundColor(A1, 0x00000000);
	TextDrawFont(A1, TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawSetShadow(A1, 0);
	TextDrawUseBox(A1, 0);
	TextDrawBoxColor(A1, 0x000000FF);
	TextDrawTextSize(A1, 100.000000, 100.000000);
	TextDrawSetPreviewModel(A1, Skin[ATTACKER]);
	TextDrawSetPreviewRot(A1, 0.000000, 0.000000, 0.000000, 3.000000);

	A2 = TextDrawCreate(10.000000, 389.000000, "_");
	TextDrawBackgroundColor(A2, 0x00000000);
	TextDrawFont(A2, TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawSetShadow(A2, 0);
	TextDrawUseBox(A2, 0);
	TextDrawBoxColor(A2, 0x000000FF);
	TextDrawTextSize(A2, 100.000000, 100.000000);
	TextDrawSetPreviewModel(A2, Skin[ATTACKER]);
	TextDrawSetPreviewRot(A2, 0.000000, 0.000000, 0.000000, 3.000000);

	A3 = TextDrawCreate(20.000000, 389.000000, "_");
	TextDrawBackgroundColor(A3, 0x00000000);
	TextDrawFont(A3, TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawSetShadow(A3, 0);
	TextDrawUseBox(A3, 0);
	TextDrawBoxColor(A3, 0x000000FF);
	TextDrawTextSize(A3, 100.000000, 100.000000);
	TextDrawSetPreviewModel(A3, Skin[ATTACKER]);
	TextDrawSetPreviewRot(A3, 0.000000, 0.000000, 0.000000, 3.000000);

	A4 = TextDrawCreate(30.000000, 389.000000, "_");
	TextDrawBackgroundColor(A4, 0x00000000);
	TextDrawFont(A4, TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawSetShadow(A4, 0);
	TextDrawUseBox(A4, 0);
	TextDrawBoxColor(A4, 0x000000FF);
	TextDrawTextSize(A4, 100.000000, 100.000000);
	TextDrawSetPreviewModel(A4, Skin[ATTACKER]);
	TextDrawSetPreviewRot(A4, 0.000000, 0.000000, 0.000000, 3.000000);

	A5 = TextDrawCreate(40.000000, 389.000000, "_");
	TextDrawBackgroundColor(A5, 0x00000000);
	TextDrawFont(A5, TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawSetShadow(A5, 0);
	TextDrawUseBox(A5, 0);
	TextDrawBoxColor(A5, 0x000000FF);
	TextDrawTextSize(A5, 100.000000, 100.000000);
	TextDrawSetPreviewModel(A5, Skin[ATTACKER]);
	TextDrawSetPreviewRot(A5, 0.000000, 0.000000, 0.000000, 3.000000);

	A6 = TextDrawCreate(50.000000, 389.000000, "_");
	TextDrawBackgroundColor(A6, 0x00000000);
	TextDrawFont(A6, TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawSetShadow(A6, 0);
	TextDrawUseBox(A6, 0);
	TextDrawBoxColor(A6, 0x000000FF);
	TextDrawTextSize(A6, 100.000000, 100.000000);
	TextDrawSetPreviewModel(A6, Skin[ATTACKER]);
	TextDrawSetPreviewRot(A6, 0.000000, 0.000000, 0.000000, 3.000000);

	A7 = TextDrawCreate(60.000000, 389.000000, "_");
	TextDrawBackgroundColor(A7, 0x00000000);
	TextDrawFont(A7, TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawSetShadow(A7, 0);
	TextDrawUseBox(A7, 0);
	TextDrawBoxColor(A7, 0x000000FF);
	TextDrawTextSize(A7, 100.000000, 100.000000);
	TextDrawSetPreviewModel(A7, Skin[ATTACKER]);
	TextDrawSetPreviewRot(A7, 0.000000, 0.000000, 0.000000, 3.000000);

	A8 = TextDrawCreate(70.000000, 389.000000, "_");
	TextDrawBackgroundColor(A8, 0x00000000);
	TextDrawFont(A8, TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawSetShadow(A8, 0);
	TextDrawUseBox(A8, 0);
	TextDrawBoxColor(A8, 0x000000FF);
	TextDrawTextSize(A8, 100.000000, 100.000000);
	TextDrawSetPreviewModel(A8, Skin[ATTACKER]);
	TextDrawSetPreviewRot(A8, 0.000000, 0.000000, 0.000000, 3.000000);

	A9 = TextDrawCreate(80.000000, 389.000000, "_");
	TextDrawBackgroundColor(A9, 0x00000000);
	TextDrawFont(A9, TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawSetShadow(A9, 0);
	TextDrawUseBox(A9, 0);
	TextDrawBoxColor(A9, 0x000000FF);
	TextDrawTextSize(A9, 100.000000, 100.000000);
	TextDrawSetPreviewModel(A9, Skin[ATTACKER]);
	TextDrawSetPreviewRot(A9, 0.000000, 0.000000, 0.000000, 3.000000);

	A10 = TextDrawCreate(90.000000, 389.000000, "_");
	TextDrawBackgroundColor(A10, 0x00000000);
	TextDrawFont(A10, TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawSetShadow(A10, 0);
	TextDrawUseBox(A10, 0);
	TextDrawBoxColor(A10, 0x000000FF);
	TextDrawTextSize(A10, 100.000000, 100.000000);
	TextDrawSetPreviewModel(A10, Skin[ATTACKER]);
	TextDrawSetPreviewRot(A10, 0.000000, 0.000000, 0.000000, 3.000000);

	D1 = TextDrawCreate(540.000000, 389.000000, "_");
	TextDrawBackgroundColor(D1, 0x00000000);
	TextDrawFont(D1, TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawSetShadow(D1, 0);
	TextDrawUseBox(D1, 0);
	TextDrawBoxColor(D1, 0x000000FF);
	TextDrawTextSize(D1, 100.000000, 100.000000);
	TextDrawSetPreviewModel(D1, Skin[DEFENDER]);
	TextDrawSetPreviewRot(D1, 0.000000, 0.000000, 0.000000, 3.000000);

	D2 = TextDrawCreate(530.000000, 389.000000, "_");
	TextDrawBackgroundColor(D2, 0x00000000);
	TextDrawFont(D2, TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawSetShadow(D2, 0);
	TextDrawUseBox(D2, 0);
	TextDrawBoxColor(D2, 0x000000FF);
	TextDrawTextSize(D2, 100.000000, 100.000000);
	TextDrawSetPreviewModel(D2, Skin[DEFENDER]);
	TextDrawSetPreviewRot(D2, 0.000000, 0.000000, 0.000000, 3.000000);

	D3 = TextDrawCreate(520.000000, 389.000000, "_");
	TextDrawBackgroundColor(D3, 0x00000000);
	TextDrawFont(D3, TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawSetShadow(D3, 0);
	TextDrawUseBox(D3, 0);
	TextDrawBoxColor(D3, 0x000000FF);
	TextDrawTextSize(D3, 100.000000, 100.000000);
	TextDrawSetPreviewModel(D3, Skin[DEFENDER]);
	TextDrawSetPreviewRot(D3, 0.000000, 0.000000, 0.000000, 3.000000);

	D4 = TextDrawCreate(510.000000, 389.000000, "_");
	TextDrawBackgroundColor(D4, 0x00000000);
	TextDrawFont(D4, TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawSetShadow(D4, 0);
	TextDrawUseBox(D4, 0);
	TextDrawBoxColor(D4, 0x000000FF);
	TextDrawTextSize(D4, 100.000000, 100.000000);
	TextDrawSetPreviewModel(D4, Skin[DEFENDER]);
	TextDrawSetPreviewRot(D4, 0.000000, 0.000000, 0.000000, 3.000000);

	D5 = TextDrawCreate(500.000000, 389.000000, "_");
	TextDrawBackgroundColor(D5, 0x00000000);
	TextDrawFont(D5, TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawSetShadow(D5, 0);
	TextDrawUseBox(D5, 0);
	TextDrawBoxColor(D5, 0x000000FF);
	TextDrawTextSize(D5, 100.000000, 100.000000);
	TextDrawSetPreviewModel(D5, Skin[DEFENDER]);
	TextDrawSetPreviewRot(D5, 0.000000, 0.000000, 0.000000, 3.000000);

	D6 = TextDrawCreate(490.000000, 389.000000, "_");
	TextDrawBackgroundColor(D6, 0x00000000);
	TextDrawFont(D6, TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawSetShadow(D6, 0);
	TextDrawUseBox(D6, 0);
	TextDrawBoxColor(D6, 0x000000FF);
	TextDrawTextSize(D6, 100.000000, 100.000000);
	TextDrawSetPreviewModel(D6, Skin[DEFENDER]);
	TextDrawSetPreviewRot(D6, 0.000000, 0.000000, 0.000000, 3.000000);

	D7 = TextDrawCreate(480.000000, 389.000000, "_");
	TextDrawBackgroundColor(D7, 0x00000000);
	TextDrawFont(D7, TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawSetShadow(D7, 0);
	TextDrawUseBox(D7, 0);
	TextDrawBoxColor(D7, 0x000000FF);
	TextDrawTextSize(D7, 100.000000, 100.000000);
	TextDrawSetPreviewModel(D7, Skin[DEFENDER]);
	TextDrawSetPreviewRot(D7, 0.000000, 0.000000, 0.000000, 3.000000);

	D8 = TextDrawCreate(470.000000, 389.000000, "_");
	TextDrawBackgroundColor(D8, 0x00000000);
	TextDrawFont(D8, TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawSetShadow(D8, 0);
	TextDrawUseBox(D8, 0);
	TextDrawBoxColor(D8, 0x000000FF);
	TextDrawTextSize(D8, 100.000000, 100.000000);
	TextDrawSetPreviewModel(D8, Skin[DEFENDER]);
	TextDrawSetPreviewRot(D8, 0.000000, 0.000000, 0.000000, 3.000000);

	D9 = TextDrawCreate(460.000000, 389.000000, "_");
	TextDrawBackgroundColor(D9, 0x00000000);
	TextDrawFont(D9, TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawSetShadow(D9, 0);
	TextDrawUseBox(D9, 0);
	TextDrawBoxColor(D9, 0x000000FF);
	TextDrawTextSize(D9, 100.000000, 100.000000);
	TextDrawSetPreviewModel(D9, Skin[DEFENDER]);
	TextDrawSetPreviewRot(D9, 0.000000, 0.000000, 0.000000, 3.000000);

	D10 = TextDrawCreate(450.000000, 389.000000, "_");
	TextDrawBackgroundColor(D10, 0x00000000);
	TextDrawFont(D10, TEXT_DRAW_FONT_MODEL_PREVIEW);
	TextDrawSetShadow(D10, 0);
	TextDrawUseBox(D10, 0);
	TextDrawBoxColor(D10, 0x000000FF);
	TextDrawTextSize(D10, 100.000000, 100.000000);
	TextDrawSetPreviewModel(D10, Skin[DEFENDER]);
	TextDrawSetPreviewRot(D10, 0.000000, 0.000000, 0.000000, 3.000000);

#endif

	#if INTROTEXT == 1

	introBg1 = TextDrawCreate(450.000000, 150.000000, "____");//mainbg
	TextDrawBackgroundColor(introBg1, 255);
	TextDrawFont(introBg1, 1);
	TextDrawLetterSize(introBg1, 0.500000, 25.000000);
	TextDrawColor(introBg1, -1);
	TextDrawSetOutline(introBg1, 0);
	TextDrawSetProportional(introBg1, 1);
	TextDrawSetShadow(introBg1, 1);
	TextDrawUseBox(introBg1, 1);
	TextDrawBoxColor(introBg1, 85);
	TextDrawTextSize(introBg1, 187.000000, 0.000000);
	TextDrawSetSelectable(introBg1, 0);

	introBg2 = TextDrawCreate(443.000000, 154.000000, "____");//upperbg
	TextDrawBackgroundColor(introBg2, 255);
	TextDrawFont(introBg2, 1);
	TextDrawLetterSize(introBg2, 0.500000, 18.299997);
	TextDrawColor(introBg2, -1);
	TextDrawSetOutline(introBg2, 0);
	TextDrawSetProportional(introBg2, 1);
	TextDrawSetShadow(introBg2, 1);
	TextDrawUseBox(introBg2, 1);
	TextDrawBoxColor(introBg2, 521461845);
	TextDrawTextSize(introBg2, 193.000000, 2.000000);
	TextDrawSetSelectable(introBg2, 0);

	introBg3 = TextDrawCreate(443.000000, 180.000000, "____");//upperbg 2
	TextDrawBackgroundColor(introBg3, 255);
	TextDrawFont(introBg3, 1);
	TextDrawLetterSize(introBg3, 0.500000, 11.599994);
	TextDrawColor(introBg3, -1);
	TextDrawSetOutline(introBg3, 0);
	TextDrawSetProportional(introBg3, 1);
	TextDrawSetShadow(introBg3, 1);
	TextDrawUseBox(introBg3, 1);
	TextDrawBoxColor(introBg3, 238);
	TextDrawTextSize(introBg3, 193.000000, 2.000000);
	TextDrawSetSelectable(introBg3, 0);

	AttackerText = TextDrawCreate( 195.000000, 288.000000, "att");
	TextDrawBackgroundColor( AttackerText, 0x00000044);
	TextDrawFont( AttackerText, 5);
	TextDrawColor( AttackerText, -1);
	TextDrawTextSize( AttackerText, 65.200000, 84.000000);
	TextDrawSetPreviewModel( AttackerText, Skin[ATTACKER] );
	TextDrawSetPreviewRot( AttackerText, -12.000000, 0.000000, 12.000000, 1.000000);
	TextDrawSetSelectable(AttackerText, 1);//select

	DefenderText = TextDrawCreate( 376.500000, 288.000000, "def");
	TextDrawBackgroundColor( DefenderText, 0x00000044);
	TextDrawFont( DefenderText, 5);
	TextDrawColor( DefenderText, -1);
	TextDrawTextSize( DefenderText, 65.200000, 84.000000);
	TextDrawSetPreviewModel( DefenderText, Skin[DEFENDER] );
	TextDrawSetPreviewRot( DefenderText, -12.000000, 0.000000, -12.000000, 1.000000);
	TextDrawSetSelectable( DefenderText, 1);//select

	introAutoBG = TextDrawCreate(377.000000, 290.000000, "____");//auto bg
	TextDrawBackgroundColor(introAutoBG, 255);
	TextDrawFont(introAutoBG, 1);
	TextDrawLetterSize(introAutoBG, 0.700000, 3.099993);
	TextDrawColor(introAutoBG, -1);
	TextDrawSetOutline(introAutoBG, 0);
	TextDrawSetProportional(introAutoBG, 1);
	TextDrawSetShadow(introAutoBG, 1);
	TextDrawUseBox(introAutoBG, 1);
	TextDrawBoxColor(introAutoBG, 255);
	TextDrawTextSize(introAutoBG, 260.000000, 2.000000);
	TextDrawSetSelectable(introAutoBG, 0);

	introRefBG = TextDrawCreate(377.000000, 326.000000, "____");//ref bg
	TextDrawBackgroundColor(introRefBG, 255);
	TextDrawFont(introRefBG, 1);
	TextDrawLetterSize(introRefBG, 0.700000, 4.899993);
	TextDrawColor(introRefBG, -1);
	TextDrawSetOutline(introRefBG, 0);
	TextDrawSetProportional(introRefBG, 1);
	TextDrawSetShadow(introRefBG, 1);
	TextDrawUseBox(introRefBG, 1);
	TextDrawBoxColor(introRefBG, 255);
	TextDrawTextSize(introRefBG, 260.000000, 2.000000);
	TextDrawSetSelectable(introRefBG, 0);

	RefereeText = TextDrawCreate(319.000000, 334.000000, "~y~~h~Referee");
	TextDrawAlignment(RefereeText, 2);
	TextDrawBackgroundColor(RefereeText, 0x00000044);
	TextDrawFont(RefereeText, 1);
	TextDrawLetterSize(RefereeText, 0.500000, 2.8000);
	TextDrawColor(RefereeText, 0xFFFC00EE );
	TextDrawSetOutline(RefereeText, 1);
	TextDrawSetProportional(RefereeText, 1);
	TextDrawSetShadow(RefereeText, 0);
	TextDrawUseBox(RefereeText, 1);
	TextDrawBoxColor(RefereeText, 255);
	TextDrawTextSize(RefereeText, 20.000000, 90.000000);
	TextDrawSetSelectable(RefereeText, 1);//select

	AutoAssignText = TextDrawCreate(319.000000, 294.000000, "~w~~h~Auto Assign");
	TextDrawAlignment(AutoAssignText, 2);
	TextDrawBackgroundColor(AutoAssignText, 0x00000044);
	TextDrawFont(AutoAssignText, 1);
	TextDrawLetterSize(AutoAssignText, 0.470000, 2.199999);
	TextDrawColor(AutoAssignText, -1);
	TextDrawSetOutline(AutoAssignText, 1);
	TextDrawSetProportional(AutoAssignText, 1);
	TextDrawSetShadow(AutoAssignText, 0);
	TextDrawUseBox(AutoAssignText, 1);
	TextDrawBoxColor(AutoAssignText, 255);
	TextDrawTextSize(AutoAssignText, 25.000000, 100.000000);
	TextDrawSetSelectable(AutoAssignText, 1);//select

	introName = TextDrawCreate(316.000000, 138.000000, "~b~~h~~h~WELCOME ~n~~b~~h~to the");
	TextDrawAlignment(introName, 2);
	TextDrawBackgroundColor(introName, 0x00000044);
	TextDrawFont(introName, 3);
	TextDrawLetterSize(introName, 0.350000, 1.600000);
	TextDrawColor(introName, -16776961);
	TextDrawSetOutline(introName, 1);
	TextDrawSetProportional(introName, 1);
	TextDrawSetSelectable(introName, 0);

//	introLogo = TextDrawCreate(318.000000, 166.000000, "~b~~h~Electronic Sports League ~b~~h~Attack-Defend ~b~~h~~h~GM");
	introLogo = TextDrawCreate(318.000000, 166.000000, "~b~~h~Attack-Defend ~b~~h~~h~Gamemode");
	TextDrawAlignment(introLogo, 2);
	TextDrawBackgroundColor(introLogo, 0x00000044);
	TextDrawFont(introLogo, 1);
	TextDrawLetterSize(introLogo, 0.320000, 1.850000);
	TextDrawColor(introLogo, -1);
	TextDrawSetOutline(introLogo, 1);
	TextDrawSetProportional(introLogo, 1);
	TextDrawSetShadow(introLogo, 0);
	TextDrawSetSelectable(introLogo, 0);

	introSelect = TextDrawCreate(291.000000, 278.000000, "Select a Team");
	TextDrawBackgroundColor(introSelect, 0x00000044);
	TextDrawFont(introSelect, 1);
	TextDrawLetterSize(introSelect, 0.230000, 1.200000);
	TextDrawColor(introSelect, -1);
	TextDrawSetOutline(introSelect, 0);
	TextDrawSetProportional(introSelect, 1);
	TextDrawSetShadow(introSelect, 1);
	TextDrawSetSelectable(introSelect, 0);

	introAtt = TextDrawCreate(225.000000, 282.000000, "~r~~h~Attacker");
	TextDrawBackgroundColor(introAtt, 0x00000044);
	TextDrawAlignment(introAtt, 2);
	TextDrawFont(introAtt, 0);
	TextDrawLetterSize(introAtt, 0.409999, 1.300000);
	TextDrawColor(introAtt, -1);
	TextDrawSetOutline(introAtt, 1);
	TextDrawSetProportional(introAtt, 1);
	TextDrawSetSelectable(introAtt, 0);

	introDef = TextDrawCreate(410.000000, 282.000000, "~b~~h~~h~Defender");
	TextDrawBackgroundColor(introDef, 0x00000044);
	TextDrawAlignment(introDef, 2);
	TextDrawFont(introDef, 0);
	TextDrawLetterSize(introDef, 0.409999, 1.300000);
	TextDrawColor(introDef, -1);
	TextDrawSetOutline(introDef, 1);
	TextDrawSetProportional(introDef, 1);
	TextDrawSetSelectable(introDef, 0);

	introRules = TextDrawCreate(200.000000, 188.000000, "Rules:-");
	TextDrawBackgroundColor(introRules, 0x00000044);
	TextDrawFont(introRules, 1);
	TextDrawLetterSize(introRules, 0.240000, 0.922999);
	TextDrawColor(introRules, -1);
	TextDrawSetOutline(introRules, 1);
	TextDrawSetProportional(introRules, 1);
	TextDrawSetShadow(introRules, 0);
	TextDrawSetSelectable(introRules, 0);

	introRules2 = TextDrawCreate(200.000000, 222.500000, "Rules2:-");
	TextDrawBackgroundColor(introRules2, 0x00000044);
	TextDrawFont(introRules2, 1);
	TextDrawLetterSize(introRules2, 0.226000, 0.825999);
	TextDrawColor(introRules2, -1);
	TextDrawSetOutline(introRules2, 1);
	TextDrawSetProportional(introRules2, 1);
	TextDrawSetShadow(introRules2, 0);
	TextDrawSetSelectable(introRules2, 0);

	ESLRules();




	#endif


	RoundStats = TextDrawCreate(318.0,431.5,"_");
	TextDrawUseBox(RoundStats,1);
	TextDrawBoxColor(RoundStats,0x0000022);
	TextDrawFont(RoundStats, 1);
	TextDrawTextSize(RoundStats,14.0,640.0);
	TextDrawLetterSize(RoundStats, 0.31, 1.55);
	TextDrawBackgroundColor(RoundStats,MAIN_BACKGROUND_COLOUR);
	TextDrawColor(RoundStats,-65281);
	TextDrawSetOutline(RoundStats,1);
	TextDrawSetShadow(RoundStats,0);
    TextDrawAlignment(RoundStats,2);
    TextDrawSetProportional(RoundStats, 1);


	RoundsPlayed = TextDrawCreate(555.000000, 114.000000, "_");
	TextDrawAlignment(RoundsPlayed, 2);
	TextDrawBackgroundColor(RoundsPlayed, 255);
	TextDrawFont(RoundsPlayed, 1);
	TextDrawLetterSize(RoundsPlayed, 0.330000, 1.65000);
	TextDrawBackgroundColor(RoundsPlayed,MAIN_BACKGROUND_COLOUR);
	TextDrawColor(RoundsPlayed, 16711935);
	TextDrawSetOutline(RoundsPlayed, 1);
	TextDrawSetProportional(RoundsPlayed, 1);
	TextDrawSetShadow(RoundsPlayed,0);
	TextDrawTextSize(RoundsPlayed, 20, 100);
	TextDrawSetSelectable(RoundsPlayed, 1);

    TeamScoreText = TextDrawCreate(557.000000, 100.000000,"_");
	TextDrawFont(TeamScoreText, 1);
	TextDrawLetterSize(TeamScoreText, 0.330000, 1.650000);
	TextDrawBackgroundColor(TeamScoreText,MAIN_BACKGROUND_COLOUR);
	TextDrawColor(TeamScoreText,-65281);
	TextDrawSetOutline(TeamScoreText, 1);
    TextDrawSetProportional(TeamScoreText, 1);
    TextDrawAlignment(TeamScoreText,2);
    TextDrawSetShadow(TeamScoreText,0);
	TextDrawTextSize(TeamScoreText, 20, 200);
	TextDrawSetSelectable(TeamScoreText, 1);





	SettingBox = TextDrawCreate(125.000000, 282.500000, "~n~~n~~n~~n~~n~");
	TextDrawAlignment(SettingBox, 2);
	TextDrawFont(SettingBox, 1);
	TextDrawLetterSize(SettingBox, 0.31, 1.45);
	TextDrawBackgroundColor(SettingBox,0xDDDDDD55);
	TextDrawColor(SettingBox, 16711935);
	TextDrawSetOutline(SettingBox, 1);
	TextDrawSetProportional(SettingBox, 1);
	TextDrawSetShadow(SettingBox,0);
	TextDrawTextSize(SettingBox, 20, 120);
	TextDrawUseBox(SettingBox, 1);
	TextDrawBoxColor(SettingBox, 0x00000033);

	WarModeText = TextDrawCreate(125.000000, 285.000000, sprintf("%sWar\tMode:\t~r~OFF", MAIN_TEXT_COLOUR));
	TextDrawAlignment(WarModeText, 2);
	TextDrawFont(WarModeText, 1);
	TextDrawLetterSize(WarModeText, 0.31, 1.45);
	TextDrawBackgroundColor(WarModeText,MAIN_BACKGROUND_COLOUR);
	TextDrawColor(WarModeText, 16711935);
	TextDrawSetOutline(WarModeText, 1);
	TextDrawSetProportional(WarModeText, 1);
	TextDrawSetShadow(WarModeText,0);
	TextDrawTextSize(WarModeText, 20, 150);
	TextDrawSetSelectable(WarModeText, 1);

	WeaponLimitTD = TextDrawCreate(125.000000, 300.000000, sprintf("%sWeapon\tLimit", MAIN_TEXT_COLOUR));
	TextDrawAlignment(WeaponLimitTD, 2);
	TextDrawFont(WeaponLimitTD, 1);
	TextDrawLetterSize(WeaponLimitTD, 0.31, 1.45);
	TextDrawBackgroundColor(WeaponLimitTD,MAIN_BACKGROUND_COLOUR);
	TextDrawColor(WeaponLimitTD, 16711935);
	TextDrawSetOutline(WeaponLimitTD, 1);
	TextDrawSetProportional(WeaponLimitTD, 1);
	TextDrawSetShadow(WeaponLimitTD,0);
	TextDrawTextSize(WeaponLimitTD, 20, 150);
	TextDrawSetSelectable(WeaponLimitTD, 1);

	LockServerTD = TextDrawCreate(125.000000, 315.000000, sprintf("%sServer:\t~r~Unlocked", MAIN_TEXT_COLOUR));
	TextDrawAlignment(LockServerTD, 2);
	TextDrawFont(LockServerTD, 1);
	TextDrawLetterSize(LockServerTD, 0.31, 1.45);
	TextDrawBackgroundColor(LockServerTD,MAIN_BACKGROUND_COLOUR);
	TextDrawColor(LockServerTD, 16711935);
	TextDrawSetOutline(LockServerTD, 1);
	TextDrawSetProportional(LockServerTD, 1);
	TextDrawSetShadow(LockServerTD,0);
	TextDrawTextSize(LockServerTD, 30, 200);
	TextDrawSetSelectable(LockServerTD, 1);

	CloseText = TextDrawCreate(125.000000, 330.000000, sprintf("%sClose Settings", MAIN_TEXT_COLOUR));
	TextDrawAlignment(CloseText, 2);
	TextDrawFont(CloseText, 1);
	TextDrawLetterSize(CloseText, 0.31, 1.45);
	TextDrawBackgroundColor(CloseText,MAIN_BACKGROUND_COLOUR);
	TextDrawColor(CloseText, 16711935);
	TextDrawSetOutline(CloseText, 1);
	TextDrawSetProportional(CloseText, 1);
	TextDrawSetShadow(CloseText,0);
	TextDrawTextSize(CloseText, 30, 200);
	TextDrawSetSelectable(CloseText, 1);

//  - End Round TextDraw -


	EN_AttackerBox = TextDrawCreate(178.500000 + ATTACKER_CHANGES_X, 176.00000 + ATTACKER_CHANGES_Y, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~");
	TextDrawAlignment(EN_AttackerBox, 2);
	TextDrawFont(EN_AttackerBox, 1);
	TextDrawLetterSize(EN_AttackerBox, 0.31, 1.45);
	TextDrawBackgroundColor(EN_AttackerBox,0xFF444444);
//	TextDrawBackgroundColor(EN_AttackerBox,0xFF000044);
	TextDrawColor(EN_AttackerBox, 16711935);
	TextDrawSetOutline(EN_AttackerBox, 1);
	TextDrawSetProportional(EN_AttackerBox, 1);
	TextDrawSetShadow(EN_AttackerBox,0);
	TextDrawTextSize(EN_AttackerBox, 20, 180);
	TextDrawUseBox(EN_AttackerBox, 1);
	TextDrawBoxColor(EN_AttackerBox, 0xFF444444);

	EN_DefenderBox = TextDrawCreate(460.000000 + DEFENDER_CHANGES_X, 176.00000 + DEFENDER_CHANGES_Y, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~");
	TextDrawAlignment(EN_DefenderBox, 2);
	TextDrawFont(EN_DefenderBox, 1);
	TextDrawLetterSize(EN_DefenderBox, 0.31, 1.45);
	TextDrawBackgroundColor(EN_DefenderBox,0x3388FF44);
//	TextDrawBackgroundColor(EN_DefenderBox,0x0000FF44);
	TextDrawColor(EN_DefenderBox, 16711935);
	TextDrawSetOutline(EN_DefenderBox, 1);
	TextDrawSetProportional(EN_DefenderBox, 1);
	TextDrawSetShadow(EN_DefenderBox,0);
	TextDrawTextSize(EN_DefenderBox, 20, 180); //20, 220
	TextDrawUseBox(EN_DefenderBox, 1);
	TextDrawBoxColor(EN_DefenderBox, 0x3388FF44);

/*
	EN_AttackerTextBox = TextDrawCreate(121.3 + ATTACKER_CHANGES_X, 139.00000 + ATTACKER_CHANGES_Y, "~n~~n~");
	TextDrawAlignment(EN_AttackerTextBox, 2);
	TextDrawFont(EN_AttackerTextBox, 1);
	TextDrawTextSize(EN_AttackerTextBox, 20, 65.7);
	TextDrawUseBox(EN_AttackerTextBox, 1);
    TextDrawBoxColor(EN_AttackerTextBox, 0xFF444466);
    TextDrawSetProportional(EN_AttackerTextBox, 1);

    EN_Attacker = TextDrawCreate(92.000000 + ATTACKER_CHANGES_X, 140.000000 + ATTACKER_CHANGES_Y,"~r~~h~Attacker");
	TextDrawFont(EN_Attacker, 1);
	TextDrawLetterSize(EN_Attacker, 0.4, 1.8);
	TextDrawBackgroundColor(EN_Attacker,0x00000066);
	TextDrawColor(EN_Attacker,-65281);
	TextDrawSetOutline(EN_Attacker,1);
    TextDrawSetProportional(EN_Attacker, 1);
    TextDrawAlignment(EN_Attacker,1);
    TextDrawSetShadow(EN_Attacker,0);

	EN_DefenderTextBox = TextDrawCreate(417.5 + ATTACKER_CHANGES_X, 139.00000 + ATTACKER_CHANGES_Y, "~n~~n~");
	TextDrawAlignment(EN_DefenderTextBox, 2);
	TextDrawFont(EN_DefenderTextBox, 1);
	TextDrawTextSize(EN_DefenderTextBox, 20, 67.5);
	TextDrawUseBox(EN_DefenderTextBox, 1);
    TextDrawBoxColor(EN_DefenderTextBox, 0x3388FF66);
    TextDrawSetProportional(EN_DefenderTextBox, 1);

    EN_Defender = TextDrawCreate(485.000000 + DEFENDER_CHANGES_X, 140.000000 + DEFENDER_CHANGES_Y,"~b~~h~Defender");
	TextDrawFont(EN_Defender, 1);
	TextDrawLetterSize(EN_Defender, 0.4, 1.8);
	TextDrawBackgroundColor(EN_Defender,0x00000066);
	TextDrawColor(EN_Defender,-65281);
	TextDrawSetOutline(EN_Defender,1);
    TextDrawSetProportional(EN_Defender, 1);
    TextDrawAlignment(EN_Defender,1);
    TextDrawSetShadow(EN_Defender,0);

	EN_WhoWonBox = TextDrawCreate(269 + ATTACKER_CHANGES_X, 139.00000 + ATTACKER_CHANGES_Y, "~n~~n~");
	TextDrawAlignment(EN_WhoWonBox, 2);
	TextDrawFont(EN_WhoWonBox, 1);
	TextDrawTextSize(EN_WhoWonBox, 20, 223.5);
	TextDrawUseBox(EN_WhoWonBox, 1);
    TextDrawBoxColor(EN_WhoWonBox, MAIN_BACKGROUND_COLOUR);
    TextDrawSetProportional(EN_WhoWonBox, 1);

	EN_WhoWonTopBar = TextDrawCreate(270 + ATTACKER_CHANGES_X, 101.90000 + ATTACKER_CHANGES_Y, "~n~");
	TextDrawAlignment(EN_WhoWonTopBar, 2);
	TextDrawFont(EN_WhoWonTopBar, 1);
	TextDrawTextSize(EN_WhoWonTopBar, 20, 363.5);
	TextDrawUseBox(EN_WhoWonTopBar, 1);
    TextDrawBoxColor(EN_WhoWonTopBar, MAIN_BACKGROUND_COLOUR);
    TextDrawSetProportional(EN_WhoWonTopBar, 1);


	EN_WhoWonAttBar = TextDrawCreate(148.3 + ATTACKER_CHANGES_X, 115.400000 + ATTACKER_CHANGES_Y, "~n~~n~");
	TextDrawAlignment(EN_WhoWonAttBar, 2);
	TextDrawFont(EN_WhoWonAttBar, 1);
	TextDrawTextSize(EN_WhoWonAttBar, 20, 120);
	TextDrawUseBox(EN_WhoWonAttBar, 1);
    TextDrawBoxColor(EN_WhoWonAttBar, MAIN_BACKGROUND_COLOUR);
    TextDrawSetProportional(EN_WhoWonAttBar, 1);


	EN_WhoWonDefBar = TextDrawCreate(391.7 + ATTACKER_CHANGES_X, 115.40000 + ATTACKER_CHANGES_Y, "~n~~n~");
	TextDrawAlignment(EN_WhoWonDefBar, 2);
	TextDrawFont(EN_WhoWonDefBar, 1);
	TextDrawTextSize(EN_WhoWonDefBar, 20, 120);
	TextDrawUseBox(EN_WhoWonDefBar, 1);
    TextDrawBoxColor(EN_WhoWonDefBar, MAIN_BACKGROUND_COLOUR);
    TextDrawSetProportional(EN_WhoWonDefBar, 1);


	EN_WhoWonAttWinBar = TextDrawCreate(270.1 + ATTACKER_CHANGES_X, 115.400000 + ATTACKER_CHANGES_Y, "~n~~n~");
	TextDrawAlignment(EN_WhoWonAttWinBar, 2);
	TextDrawFont(EN_WhoWonAttWinBar, 1);
	TextDrawTextSize(EN_WhoWonAttWinBar, 20, 117.5);
	TextDrawUseBox(EN_WhoWonAttWinBar, 1);
    TextDrawBoxColor(EN_WhoWonAttWinBar, 0xFF444466);
    TextDrawSetProportional(EN_WhoWonAttWinBar, 1);


	EN_WhoWonDefWinBar = TextDrawCreate(270.1 + ATTACKER_CHANGES_X, 115.400000 + ATTACKER_CHANGES_Y, "~n~~n~");
	TextDrawAlignment(EN_WhoWonDefWinBar, 2);
	TextDrawFont(EN_WhoWonDefWinBar, 1);
	TextDrawTextSize(EN_WhoWonDefWinBar, 20, 117.5);
	TextDrawUseBox(EN_WhoWonDefWinBar, 1);
    TextDrawBoxColor(EN_WhoWonDefWinBar, 0x3388FF66);
    TextDrawSetProportional(EN_WhoWonDefWinBar, 1);
*/

    RoundTextdrawsCreate();

	ResultTextdrawsCreate();


/* //ROUND_REMOVED
    EN_WhoWon = TextDrawCreate(289.000000, 100.000000,"_");
	TextDrawFont(EN_WhoWon, 1);
	TextDrawLetterSize(EN_WhoWon, 0.4, 1.8);
	TextDrawBackgroundColor(EN_WhoWon,MAIN_BACKGROUND_COLOUR);
	TextDrawColor(EN_WhoWon,-65281);
	TextDrawSetOutline(EN_WhoWon,1);
    TextDrawSetProportional(EN_WhoWon, 1);
    TextDrawAlignment(EN_WhoWon,2);
    TextDrawSetShadow(EN_WhoWon,0);

	EN_AttackerTitleBox = TextDrawCreate(178.500000 + ATTACKER_CHANGES_X, 162.50000 + ATTACKER_CHANGES_Y, "~n~");
	TextDrawAlignment(EN_AttackerTitleBox, 2);
	TextDrawFont(EN_AttackerTitleBox, 1);
	TextDrawTextSize(EN_AttackerTitleBox, 20, 180);
	TextDrawUseBox(EN_AttackerTitleBox, 1);
    TextDrawBoxColor(EN_AttackerTitleBox, 0xFF444466);
//    TextDrawBoxColor(EN_AttackerTitleBox, 0xFF000055);
    TextDrawSetProportional(EN_AttackerTitleBox, 1);

    EN_AttackerTitle = TextDrawCreate(90.000000 + ATTACKER_CHANGES_X, 162.000000 + ATTACKER_CHANGES_Y,"_");
	TextDrawFont(EN_AttackerTitle, 1);
	TextDrawLetterSize(EN_AttackerTitle, 0.2, 1.0);
	TextDrawBackgroundColor(EN_AttackerTitle,MAIN_BACKGROUND_COLOUR);
	TextDrawColor(EN_AttackerTitle,-65281);
	TextDrawSetOutline(EN_AttackerTitle,1);
    TextDrawSetProportional(EN_AttackerTitle, 1);
    TextDrawAlignment(EN_AttackerTitle,1);
    TextDrawSetShadow(EN_AttackerTitle,0);

	EN_DefenderTitleBox = TextDrawCreate(460.000000 + DEFENDER_CHANGES_X, 162.50000 + DEFENDER_CHANGES_Y, "~n~");
	TextDrawAlignment(EN_DefenderTitleBox, 2);
	TextDrawFont(EN_DefenderTitleBox, 1);
	TextDrawTextSize(EN_DefenderTitleBox, 20, 180);
	TextDrawUseBox(EN_DefenderTitleBox, 1);
	TextDrawBoxColor(EN_DefenderTitleBox, 0x3388FF66);
//    TextDrawBoxColor(EN_DefenderTitleBox, 0x0000FF55);
    TextDrawSetProportional(EN_DefenderTitleBox, 1);

    EN_DefenderTitle = TextDrawCreate(372 + DEFENDER_CHANGES_X, 162.000000 + DEFENDER_CHANGES_Y,"_");
	TextDrawFont(EN_DefenderTitle, 1);
	TextDrawLetterSize(EN_DefenderTitle, 0.2, 1.000000);
	TextDrawBackgroundColor(EN_DefenderTitle,MAIN_BACKGROUND_COLOUR);
	TextDrawColor(EN_DefenderTitle,-65281);
	TextDrawSetOutline(EN_DefenderTitle,1);
    TextDrawSetProportional(EN_DefenderTitle, 1);
    TextDrawAlignment(EN_DefenderTitle,1);
    TextDrawSetShadow(EN_DefenderTitle,0);

    EN_AttackerList = TextDrawCreate(109.000000 , 178.000000 + ATTACKER_CHANGES_Y,"_");
	TextDrawFont(EN_AttackerList, 1);
	TextDrawLetterSize(EN_AttackerList, 0.200000, 1.000000);
	TextDrawBackgroundColor(EN_AttackerList,MAIN_BACKGROUND_COLOUR);
	TextDrawColor(EN_AttackerList,-65281);
	TextDrawSetOutline(EN_AttackerList,1);
    TextDrawSetProportional(EN_AttackerList, 1);
    TextDrawAlignment(EN_AttackerList,1);
    TextDrawSetShadow(EN_AttackerList,0);

    EN_AttackerKills = TextDrawCreate(194.000000 , 178.000000 + ATTACKER_CHANGES_Y,"_");
	TextDrawFont(EN_AttackerKills, 1);
	TextDrawLetterSize(EN_AttackerKills, 0.200000, 1.000000);
	TextDrawBackgroundColor(EN_AttackerKills,MAIN_BACKGROUND_COLOUR);
	TextDrawColor(EN_AttackerKills,-65281);
	TextDrawSetOutline(EN_AttackerKills,1);
    TextDrawSetProportional(EN_AttackerKills, 1);
    TextDrawAlignment(EN_AttackerKills,2);
    TextDrawSetShadow(EN_AttackerKills,0);

    EN_TAttackerKills = TextDrawCreate(191.000000 , 178.000000 + ATTACKER_CHANGES_Y,"_");
	TextDrawFont(EN_TAttackerKills, 1);
	TextDrawLetterSize(EN_TAttackerKills, 0.200000, 1.000000);
	TextDrawBackgroundColor(EN_TAttackerKills,MAIN_BACKGROUND_COLOUR);
	TextDrawColor(EN_TAttackerKills,-65281);
	TextDrawSetOutline(EN_TAttackerKills,1);
    TextDrawSetProportional(EN_TAttackerKills, 1);
    TextDrawAlignment(EN_TAttackerKills,2);
    TextDrawSetShadow(EN_TAttackerKills,0);

    EN_AttackerHP = TextDrawCreate(219.5000000 , 178.000000 + ATTACKER_CHANGES_Y,"_");
	TextDrawFont(EN_AttackerHP, 1);
	TextDrawLetterSize(EN_AttackerHP, 0.200000, 1.000000);
	TextDrawBackgroundColor(EN_AttackerHP,MAIN_BACKGROUND_COLOUR);
	TextDrawColor(EN_AttackerHP,-65281);
	TextDrawSetOutline(EN_AttackerHP,1);
    TextDrawSetProportional(EN_AttackerHP, 1);
    TextDrawAlignment(EN_AttackerHP,2);
    TextDrawSetShadow(EN_AttackerHP,0);

    EN_TAttackerDeaths = TextDrawCreate(208.000000 , 178.000000 + ATTACKER_CHANGES_Y,"_");
	TextDrawFont(EN_TAttackerDeaths, 1);
	TextDrawLetterSize(EN_TAttackerDeaths, 0.200000, 1.000000);
	TextDrawBackgroundColor(EN_TAttackerDeaths,MAIN_BACKGROUND_COLOUR);
	TextDrawColor(EN_TAttackerDeaths,-65281);
	TextDrawSetOutline(EN_TAttackerDeaths,1);
    TextDrawSetProportional(EN_TAttackerDeaths, 1);
    TextDrawAlignment(EN_TAttackerDeaths,2);
    TextDrawSetShadow(EN_TAttackerDeaths,0);


    EN_TAttackerRoundsPlayed = TextDrawCreate(225.000000 , 178.000000 + ATTACKER_CHANGES_Y,"_");
	TextDrawFont(EN_TAttackerRoundsPlayed, 1);
	TextDrawLetterSize(EN_TAttackerRoundsPlayed, 0.200000, 1.000000);
	TextDrawBackgroundColor(EN_TAttackerRoundsPlayed,MAIN_BACKGROUND_COLOUR);
	TextDrawColor(EN_TAttackerRoundsPlayed,-65281);
	TextDrawSetOutline(EN_TAttackerRoundsPlayed,1);
    TextDrawSetProportional(EN_TAttackerRoundsPlayed, 1);
    TextDrawAlignment(EN_TAttackerRoundsPlayed,2);
    TextDrawSetShadow(EN_TAttackerRoundsPlayed,0);

    EN_AttackerAccuracy = TextDrawCreate(246.000000 , 178.000000 + ATTACKER_CHANGES_Y,"_");
	TextDrawFont(EN_AttackerAccuracy, 1);
	TextDrawLetterSize(EN_AttackerAccuracy, 0.200000, 1.000000);
	TextDrawBackgroundColor(EN_AttackerAccuracy,MAIN_BACKGROUND_COLOUR);
	TextDrawColor(EN_AttackerAccuracy,-65281);
	TextDrawSetOutline(EN_AttackerAccuracy,1);
    TextDrawSetProportional(EN_AttackerAccuracy, 1);
    TextDrawAlignment(EN_AttackerAccuracy,2);
    TextDrawSetShadow(EN_AttackerAccuracy,0);

    EN_TAttackerAccuracy = TextDrawCreate(246.500000 , 178.000000 + ATTACKER_CHANGES_Y,"_");
	TextDrawFont(EN_TAttackerAccuracy, 1);
	TextDrawLetterSize(EN_TAttackerAccuracy, 0.200000, 1.000000);
	TextDrawBackgroundColor(EN_TAttackerAccuracy,MAIN_BACKGROUND_COLOUR);
	TextDrawColor(EN_TAttackerAccuracy,-65281);
	TextDrawSetOutline(EN_TAttackerAccuracy,1);
    TextDrawSetProportional(EN_TAttackerAccuracy, 1);
    TextDrawAlignment(EN_TAttackerAccuracy,2);
    TextDrawSetShadow(EN_TAttackerAccuracy,0);

    EN_AttackerDamage = TextDrawCreate(273.000000, 178.000000 + ATTACKER_CHANGES_Y,"_");
	TextDrawFont(EN_AttackerDamage, 1);
	TextDrawLetterSize(EN_AttackerDamage, 0.200000, 1.000000);
	TextDrawBackgroundColor(EN_AttackerDamage,MAIN_BACKGROUND_COLOUR);
	TextDrawColor(EN_AttackerDamage,-65281);
	TextDrawSetOutline(EN_AttackerDamage,1);
    TextDrawSetProportional(EN_AttackerDamage, 1);
    TextDrawAlignment(EN_AttackerDamage,2);
    TextDrawSetShadow(EN_AttackerDamage,0);

    EN_TAttackerDamage = TextDrawCreate(274.000000, 178.000000 + ATTACKER_CHANGES_Y,"_");
	TextDrawFont(EN_TAttackerDamage, 1);
	TextDrawLetterSize(EN_TAttackerDamage, 0.200000, 1.000000);
	TextDrawBackgroundColor(EN_TAttackerDamage,MAIN_BACKGROUND_COLOUR);
	TextDrawColor(EN_TAttackerDamage,-65281);
	TextDrawSetOutline(EN_TAttackerDamage,1);
    TextDrawSetProportional(EN_TAttackerDamage, 1);
    TextDrawAlignment(EN_TAttackerDamage,2);
    TextDrawSetShadow(EN_TAttackerDamage,0);

*/

/*
    EN_BaseID = TextDrawCreate(314.700000, 178.000000,"_");
	TextDrawFont(EN_BaseID, 1);
	TextDrawLetterSize(EN_BaseID, 0.200000, 1.000000);
	TextDrawBackgroundColor(EN_BaseID,MAIN_BACKGROUND_COLOUR);
	TextDrawColor(EN_BaseID,-65281);
	TextDrawSetOutline(EN_BaseID,1);
    TextDrawSetProportional(EN_BaseID, 1);
    TextDrawAlignment(EN_BaseID,1);
    TextDrawSetShadow(EN_BaseID,0);
*/

/*
    EN_DefenderList = TextDrawCreate(294.000000 , 178.000000 + DEFENDER_CHANGES_Y,"_");
	TextDrawFont(EN_DefenderList, 1);
	TextDrawLetterSize(EN_DefenderList, 0.200000, 1.000000);
	TextDrawBackgroundColor(EN_DefenderList,MAIN_BACKGROUND_COLOUR);
	TextDrawColor(EN_DefenderList,-65281);
	TextDrawSetOutline(EN_DefenderList,1);
    TextDrawSetProportional(EN_DefenderList, 1);
    TextDrawAlignment(EN_DefenderList,1);
    TextDrawSetShadow(EN_DefenderList,0);

    EN_DefenderKills = TextDrawCreate(379.0000000 , 178.000000 + DEFENDER_CHANGES_Y,"_");
	TextDrawFont(EN_DefenderKills, 1);
	TextDrawLetterSize(EN_DefenderKills, 0.200000, 1.000000);
	TextDrawBackgroundColor(EN_DefenderKills,MAIN_BACKGROUND_COLOUR);
	TextDrawColor(EN_DefenderKills,-65281);
	TextDrawSetOutline(EN_DefenderKills,1);
    TextDrawSetProportional(EN_DefenderKills, 1);
    TextDrawAlignment(EN_DefenderKills,2);
    TextDrawSetShadow(EN_DefenderKills,0);

    EN_TDefenderKills = TextDrawCreate(374.0000000 , 178.000000 + DEFENDER_CHANGES_Y,"_");
	TextDrawFont(EN_TDefenderKills, 1);
	TextDrawLetterSize(EN_TDefenderKills, 0.200000, 1.000000);
	TextDrawBackgroundColor(EN_TDefenderKills,MAIN_BACKGROUND_COLOUR);
	TextDrawColor(EN_TDefenderKills,-65281);
	TextDrawSetOutline(EN_TDefenderKills,1);
    TextDrawSetProportional(EN_TDefenderKills, 1);
    TextDrawAlignment(EN_TDefenderKills,2);
    TextDrawSetShadow(EN_TDefenderKills,0);

    EN_DefenderHP = TextDrawCreate(404.000000 , 178.000000 + DEFENDER_CHANGES_Y,"_");
	TextDrawFont(EN_DefenderHP, 1);
	TextDrawLetterSize(EN_DefenderHP, 0.200000, 1.000000);
	TextDrawBackgroundColor(EN_DefenderHP,MAIN_BACKGROUND_COLOUR);
	TextDrawColor(EN_DefenderHP,-65281);
	TextDrawSetOutline(EN_DefenderHP,1);
    TextDrawSetProportional(EN_DefenderHP, 1);
    TextDrawAlignment(EN_DefenderHP,2);
    TextDrawSetShadow(EN_DefenderHP,0);

    EN_TDefenderDeaths = TextDrawCreate(392.000000 , 178.000000 + DEFENDER_CHANGES_Y,"_");
	TextDrawFont(EN_TDefenderDeaths, 1);
	TextDrawLetterSize(EN_TDefenderDeaths, 0.200000, 1.000000);
	TextDrawBackgroundColor(EN_TDefenderDeaths,MAIN_BACKGROUND_COLOUR);
	TextDrawColor(EN_TDefenderDeaths,-65281);
	TextDrawSetOutline(EN_TDefenderDeaths,1);
    TextDrawSetProportional(EN_TDefenderDeaths, 1);
    TextDrawAlignment(EN_TDefenderDeaths,2);
    TextDrawSetShadow(EN_TDefenderDeaths,0);

    EN_TDefenderRoundsPlayed = TextDrawCreate(409.000000 , 178.000000 + DEFENDER_CHANGES_Y,"_");
	TextDrawFont(EN_TDefenderRoundsPlayed, 1);
	TextDrawLetterSize(EN_TDefenderRoundsPlayed, 0.200000, 1.000000);
	TextDrawBackgroundColor(EN_TDefenderRoundsPlayed,MAIN_BACKGROUND_COLOUR);
	TextDrawColor(EN_TDefenderRoundsPlayed,-65281);
	TextDrawSetOutline(EN_TDefenderRoundsPlayed,1);
    TextDrawSetProportional(EN_TDefenderRoundsPlayed, 1);
    TextDrawAlignment(EN_TDefenderRoundsPlayed,2);
    TextDrawSetShadow(EN_TDefenderRoundsPlayed,0);

    EN_DefenderAccuracy = TextDrawCreate(431.00000 , 178.000000 + DEFENDER_CHANGES_Y,"_");
	TextDrawFont(EN_DefenderAccuracy, 1);
	TextDrawLetterSize(EN_DefenderAccuracy, 0.200000, 1.000000);
	TextDrawBackgroundColor(EN_DefenderAccuracy,MAIN_BACKGROUND_COLOUR);
	TextDrawColor(EN_DefenderAccuracy,-65281);
	TextDrawSetOutline(EN_DefenderAccuracy,1);
    TextDrawSetProportional(EN_DefenderAccuracy, 1);
    TextDrawAlignment(EN_DefenderAccuracy,2);
    TextDrawSetShadow(EN_DefenderAccuracy,0);

    EN_TDefenderAccuracy = TextDrawCreate(430.00000 , 178.000000 + DEFENDER_CHANGES_Y,"_");
	TextDrawFont(EN_TDefenderAccuracy, 1);
	TextDrawLetterSize(EN_TDefenderAccuracy, 0.200000, 1.000000);
	TextDrawBackgroundColor(EN_TDefenderAccuracy,MAIN_BACKGROUND_COLOUR);
	TextDrawColor(EN_TDefenderAccuracy,-65281);
	TextDrawSetOutline(EN_TDefenderAccuracy,1);
    TextDrawSetProportional(EN_TDefenderAccuracy, 1);
    TextDrawAlignment(EN_TDefenderAccuracy,2);
    TextDrawSetShadow(EN_TDefenderAccuracy,0);


    EN_DefenderDamage = TextDrawCreate(458.000000 , 178.000000 + DEFENDER_CHANGES_Y,"_");
	TextDrawFont(EN_DefenderDamage, 1);
	TextDrawLetterSize(EN_DefenderDamage, 0.200000, 1.000000);
	TextDrawBackgroundColor(EN_DefenderDamage,MAIN_BACKGROUND_COLOUR);
	TextDrawColor(EN_DefenderDamage,-65281);
	TextDrawSetOutline(EN_DefenderDamage,1);
    TextDrawSetProportional(EN_DefenderDamage, 1);
    TextDrawAlignment(EN_DefenderDamage,2);
    TextDrawSetShadow(EN_DefenderDamage,0);


    EN_TDefenderDamage = TextDrawCreate(458.000000 , 178.000000 + DEFENDER_CHANGES_Y,"_");
	TextDrawFont(EN_TDefenderDamage, 1);
	TextDrawLetterSize(EN_TDefenderDamage, 0.200000, 1.000000);
	TextDrawBackgroundColor(EN_TDefenderDamage,MAIN_BACKGROUND_COLOUR);
	TextDrawColor(EN_TDefenderDamage,-65281);
	TextDrawSetOutline(EN_TDefenderDamage,1);
    TextDrawSetProportional(EN_TDefenderDamage, 1);
    TextDrawAlignment(EN_TDefenderDamage,2);
    TextDrawSetShadow(EN_TDefenderDamage,0);
*/
//	EN_CheckPoint = TextDrawCreate(323.000000, 366.000000, "_");
//  EN_CheckPoint = TextDrawCreate(50.000000, 280.000000, "_");
	EN_CheckPoint = TextDrawCreate(182.000000, 280.000000, "_");
	TextDrawAlignment(EN_CheckPoint, 1);
	TextDrawBackgroundColor(EN_CheckPoint, MAIN_BACKGROUND_COLOUR);
	TextDrawFont(EN_CheckPoint, 1);
	TextDrawLetterSize(EN_CheckPoint, 0.230000, 1.000000);
	TextDrawColor(EN_CheckPoint, -1);
	TextDrawSetOutline(EN_CheckPoint, 1);
	TextDrawSetProportional(EN_CheckPoint, 1);


	Ready[0] = TextDrawCreate(2.000000, 120.000000, "_");
	TextDrawAlignment(Ready[0], 1);
	TextDrawBackgroundColor(Ready[0], MAIN_BACKGROUND_COLOUR);
	TextDrawFont(Ready[0], 1);
	TextDrawLetterSize(Ready[0], 0.230000, 1.000000);
	TextDrawColor(Ready[0], -1);
	TextDrawSetOutline(Ready[0], 1);
	TextDrawSetProportional(Ready[0], 1);
	TextDrawSetShadow(Ready[0],0);

	Ready[1] = TextDrawCreate(2.000000, 174.000000, "_");
	TextDrawAlignment(Ready[1], 1);
	TextDrawBackgroundColor(Ready[1], MAIN_BACKGROUND_COLOUR);
	TextDrawFont(Ready[1], 1);
	TextDrawLetterSize(Ready[1], 0.230000, 1.000000);
	TextDrawColor(Ready[1], -1);
	TextDrawSetOutline(Ready[1], 1);
	TextDrawSetProportional(Ready[1], 1);
	TextDrawSetShadow(Ready[1],0);


//  - End of Round Textdraw -



	AttHpLose = TextDrawCreate(10.000000, 436.000000, "_");
	TextDrawBackgroundColor(AttHpLose, -16777131);
	TextDrawFont(AttHpLose, 2);
	TextDrawLetterSize(AttHpLose, 0.160000, 1.060000);
	TextDrawColor(AttHpLose, 0x222222FF);
	TextDrawSetOutline(AttHpLose, 1);
	TextDrawSetProportional(AttHpLose, 1);
	TextDrawAlignment(AttHpLose,1);
	TextDrawSetShadow(AttHpLose, 0);

	DefHpLose = TextDrawCreate(630.000000, 436.000000, "_");
	TextDrawBackgroundColor(DefHpLose, 0x3278FF33);
	TextDrawFont(DefHpLose, 2);
	TextDrawLetterSize(DefHpLose, 0.160000, 1.060000);
	TextDrawColor(DefHpLose, 0x222222FF);
	TextDrawSetOutline(DefHpLose, 1);
	TextDrawSetProportional(DefHpLose, 1);
	TextDrawAlignment(DefHpLose,3);
	TextDrawSetShadow(DefHpLose, 0);

	TeamHpLose[0] = TextDrawCreate(170.000000, 390.000000, "_");
	TextDrawAlignment(TeamHpLose[0], 2);
	TextDrawFont(TeamHpLose[0], 2);
	TextDrawLetterSize(TeamHpLose[0], 0.50000, 2.00000);
	TextDrawBackgroundColor(TeamHpLose[0],MAIN_BACKGROUND_COLOUR);
	TextDrawColor(TeamHpLose[0], 0x222222FF);
	TextDrawSetOutline(TeamHpLose[0], 1);
	TextDrawSetProportional(TeamHpLose[0], 1);
	TextDrawSetShadow(TeamHpLose[0],0);

	TeamHpLose[1] = TextDrawCreate(450.000000, 390.000000, "_");
	TextDrawAlignment(TeamHpLose[1], 2);
	TextDrawFont(TeamHpLose[1], 2);
	TextDrawLetterSize(TeamHpLose[1], 0.50000, 2.00000);
	TextDrawBackgroundColor(TeamHpLose[1],MAIN_BACKGROUND_COLOUR);
	TextDrawColor(TeamHpLose[1], 0x222222FF);
	TextDrawSetOutline(TeamHpLose[1], 1);
	TextDrawSetProportional(TeamHpLose[1], 1);
	TextDrawSetShadow(TeamHpLose[1], 0);

//	AttackerTeam[0] = TextDrawCreate(540.000000, 350.000000, "_");
    AttackerTeam[0] = TextDrawCreate(634.000000, 370.000000, "_");
	TextDrawBackgroundColor(AttackerTeam[0], MAIN_BACKGROUND_COLOUR);
	TextDrawFont(AttackerTeam[0], 1);
	TextDrawLetterSize(AttackerTeam[0], 0.200000, 1.00000);
	TextDrawColor(AttackerTeam[0], 0xFF0000FF);
	TextDrawSetOutline(AttackerTeam[0], 1);
	TextDrawAlignment(AttackerTeam[0], 3);
	TextDrawSetShadow(AttackerTeam[0], 0);

//	AttackerTeam[1] = TextDrawCreate(540.000000, 377.000000, "_");
	AttackerTeam[1] = TextDrawCreate(634.000000, 397.000000, "_");
	TextDrawBackgroundColor(AttackerTeam[1], MAIN_BACKGROUND_COLOUR);
	TextDrawFont(AttackerTeam[1], 1);
	TextDrawLetterSize(AttackerTeam[1], 0.200000, 1.00000);
	TextDrawColor(AttackerTeam[1], 0xFF0000FF);
	TextDrawSetOutline(AttackerTeam[1], 1);
	TextDrawAlignment(AttackerTeam[1], 3);
	TextDrawSetShadow(AttackerTeam[1], 0);

//	AttackerTeam[2] = TextDrawCreate(2.000000, 350.000000, "_");
	AttackerTeam[2] = TextDrawCreate(2.000000, 370.000000, "_");
	TextDrawBackgroundColor(AttackerTeam[2], MAIN_BACKGROUND_COLOUR);
	TextDrawFont(AttackerTeam[2], 1);
	TextDrawLetterSize(AttackerTeam[2], 0.200000, 1.00000);
	TextDrawColor(AttackerTeam[2], 0xFF0000FF);
	TextDrawSetOutline(AttackerTeam[2], 1);
	TextDrawAlignment(AttackerTeam[2], 1);
	TextDrawSetShadow(AttackerTeam[2], 0);

//	AttackerTeam[3] = TextDrawCreate(2.000000, 377.000000, "_");
	AttackerTeam[3] = TextDrawCreate(2.000000, 397.000000, "_");
	TextDrawBackgroundColor(AttackerTeam[3], MAIN_BACKGROUND_COLOUR);
	TextDrawFont(AttackerTeam[3], 1);
	TextDrawLetterSize(AttackerTeam[3], 0.200000, 1.00000);
	TextDrawColor(AttackerTeam[3], 0xFF0000FF);
	TextDrawSetOutline(AttackerTeam[3], 1);
	TextDrawAlignment(AttackerTeam[3], 1);
	TextDrawSetShadow(AttackerTeam[3], 0);


//	DefenderTeam[0] = TextDrawCreate(540.000000, 350.000000, "_");
	DefenderTeam[0] = TextDrawCreate(634.000000, 370.000000, "_");
	TextDrawBackgroundColor(DefenderTeam[0], MAIN_BACKGROUND_COLOUR);
	TextDrawFont(DefenderTeam[0], 1);
	TextDrawLetterSize(DefenderTeam[0], 0.200000, 1.00000);
	TextDrawColor(DefenderTeam[0], 0xFF0000FF);
	TextDrawSetOutline(DefenderTeam[0], 1);
	TextDrawAlignment(DefenderTeam[0], 3);
	TextDrawSetShadow(DefenderTeam[0], 0);

//	DefenderTeam[1] = TextDrawCreate(540.000000, 377.000000, "_");
	DefenderTeam[1] = TextDrawCreate(634.000000, 397.000000, "_");
	TextDrawBackgroundColor(DefenderTeam[1], MAIN_BACKGROUND_COLOUR);
	TextDrawFont(DefenderTeam[1], 1);
	TextDrawLetterSize(DefenderTeam[1], 0.200000, 1.00000);
	TextDrawColor(DefenderTeam[1], 0xFF0000FF);
	TextDrawSetOutline(DefenderTeam[1], 1);
	TextDrawAlignment(DefenderTeam[1], 3);
	TextDrawSetShadow(DefenderTeam[1], 0);

//	DefenderTeam[2] = TextDrawCreate(30.000000, 350.000000, "_");
	DefenderTeam[2] = TextDrawCreate(2.000000, 370.000000, "_");
	TextDrawBackgroundColor(DefenderTeam[2], MAIN_BACKGROUND_COLOUR);
	TextDrawFont(DefenderTeam[2], 1);
	TextDrawLetterSize(DefenderTeam[2], 0.200000, 1.00000);
	TextDrawColor(DefenderTeam[2], 0xFF0000FF);
	TextDrawSetOutline(DefenderTeam[2], 1);
	TextDrawAlignment(DefenderTeam[2], 1);
	TextDrawSetShadow(DefenderTeam[2], 0);

//	DefenderTeam[3] = TextDrawCreate(2.000000, 377.000000, "_");
	DefenderTeam[3] = TextDrawCreate(2.000000, 397.000000, "_");
	TextDrawBackgroundColor(DefenderTeam[3], MAIN_BACKGROUND_COLOUR);
	TextDrawFont(DefenderTeam[3], 1);
	TextDrawLetterSize(DefenderTeam[3], 0.200000, 1.00000);
	TextDrawColor(DefenderTeam[3], 0xFF0000FF);
	TextDrawSetOutline(DefenderTeam[3], 1);
	TextDrawAlignment(DefenderTeam[3], 1);
	TextDrawSetShadow(DefenderTeam[3], 0);

}


ResultTextdrawsCreate()
{

	leftBG =	TextDrawCreate	(	301.200103, 	160.775039, 	"_"			);
	TextDrawLetterSize			(	leftBG, 		0.000000, 		19.997976	);
	TextDrawTextSize			(	leftBG, 		123.411689, 	0.000000	);
	TextDrawAlignment			(	leftBG, 		1							);
	TextDrawColor				(	leftBG, 		0							);
	TextDrawUseBox				(	leftBG, 		true						);
	TextDrawBoxColor			(	leftBG, 		85							);
	TextDrawSetShadow			(	leftBG, 		0		);
	TextDrawSetOutline			(	leftBG, 		0);
	TextDrawFont				(	leftBG, 		0);

	rightBG = 	TextDrawCreate	(	478.729431, 	161.000000, 	"_"			);
	TextDrawLetterSize			(	rightBG, 		0.000000, 		19.974430	);
	TextDrawTextSize			(	rightBG, 		300.964538, 	0.000000	);
	TextDrawAlignment			(	rightBG, 		1							);
	TextDrawColor				(	rightBG, 		0							);
	TextDrawUseBox				(	rightBG, 		true						);
	TextDrawBoxColor			(	rightBG,		85							);
	TextDrawSetShadow			(	rightBG,		0							);
	TextDrawSetOutline			(	rightBG, 		0							);
	TextDrawFont				(	rightBG, 		0							);

	leftUpBG = 	TextDrawCreate	(	302.658935, 	152.633422, 	"_"			);
	TextDrawLetterSize			(	leftUpBG, 		0.000000, 		1.829496	);
	TextDrawTextSize            (	leftUpBG, 		121.435226, 	0.000000	);
	TextDrawAlignment          	(	leftUpBG, 		1							);
	TextDrawColor            	(	leftUpBG, 		0							);
	TextDrawUseBox            	(	leftUpBG, 		true						);
	TextDrawBoxColor            (	leftUpBG, 		51							);
	TextDrawSetShadow          	(	leftUpBG, 		0							);
	TextDrawSetOutline         	(	leftUpBG, 		0							);
	TextDrawFont            	(	leftUpBG, 		0							);

	rightUpBG = TextDrawCreate  (	480.741516, 	152.291732, 	"_"			);
	TextDrawLetterSize          (	rightUpBG, 		0.000000, 		1.815376	);
	TextDrawTextSize            (	rightUpBG, 		299.411682, 	0.000000	);
	TextDrawAlignment           (	rightUpBG, 		1							);
	TextDrawColor            	(	rightUpBG, 		0							);
	TextDrawUseBox            	(	rightUpBG, 		true						);
	TextDrawBoxColor            (	rightUpBG, 		13132595					);
	TextDrawSetShadow          	(	rightUpBG, 		0							);
	TextDrawSetOutline     	  	(	rightUpBG, 		0							);
	TextDrawFont            	(	rightUpBG, 		1							);

	leftHeader = TextDrawCreate	(	302.482940,		153.225158, 	"_"			);
	TextDrawLetterSize         	(	leftHeader, 	0.000000, 		1.711848	);
	TextDrawTextSize            (	leftHeader, 	122.211738,		0.000000	);
	TextDrawAlignment          	(	leftHeader,		1							);
	TextDrawColor            	(	leftHeader,		0							);
	TextDrawUseBox            	(	leftHeader,		true						);
	TextDrawBoxColor            (	leftHeader,		-16766891					);
	TextDrawSetShadow          	(	leftHeader,		0							);
	TextDrawSetOutline         	(	leftHeader,		0							);
	TextDrawFont            	(	leftHeader,		0							);

	rightHeader = TextDrawCreate(	480.330291,		153.233322,		"_"			);
	TextDrawLetterSize         	(	rightHeader,	0.000000,		1.707144	);
	TextDrawTextSize           	(	rightHeader,	299.905853,		0.000000	);
	TextDrawAlignment          	(	rightHeader,	1							);
	TextDrawColor            	(	rightHeader,	860159863					);
	TextDrawUseBox            	(	rightHeader,	true						);
	TextDrawBoxColor            (	rightHeader,	860159829					);
	TextDrawSetShadow          	(	rightHeader,	0							);
	TextDrawSetOutline         	(	rightHeader,	0							);
	TextDrawFont            	(	rightHeader,	0							);

	leftULine = TextDrawCreate 	(	116.105949,		169.166824,		"-"			);
	TextDrawLetterSize         	(	leftULine,		13.658081,		0.270249	);
	TextDrawAlignment          	(	leftULine,		1							);
	TextDrawColor            	(	leftULine,		-1							);
	TextDrawSetShadow          	(	leftULine,		0							);
	TextDrawSetOutline         	(	leftULine,		10							);
	TextDrawBackgroundColor    	(	leftULine,		51							);
	TextDrawFont            	(	leftULine,		1							);
	TextDrawSetProportional    	(	leftULine,		1							);

	rightULine = TextDrawCreate	(	290.376525,		169.816665,		"-"			);
	TextDrawLetterSize         	(	rightULine,		13.662071,		0.257999	);
	TextDrawAlignment          	(	rightULine,		1							);
	TextDrawColor            	(	rightULine,		-1							);
	TextDrawSetShadow          	(	rightULine,		0							);
	TextDrawSetOutline         	(	rightULine,		10							);
	TextDrawBackgroundColor    	(	rightULine,		51							);
	TextDrawFont            	(	rightULine,		1							);
	TextDrawSetProportional    	(	rightULine,		1							);

	lowerBG = TextDrawCreate   	(	460.823425,		345.199615,		"_"			);
	TextDrawLetterSize         	(	lowerBG,		0.000000,		4.986599	);
	TextDrawTextSize            (	lowerBG,		144.823318,		0.000000	);
	TextDrawAlignment          	(	lowerBG,		1							);
	TextDrawColor            	(	lowerBG,		0							);
	TextDrawUseBox            	(	lowerBG,		true						);
	TextDrawBoxColor            (	lowerBG,		102							);
	TextDrawSetShadow          	(	lowerBG,		0							);
	TextDrawSetOutline         	(	lowerBG,		0							);
	TextDrawFont            	(	lowerBG,		0							);

	leftUpText = TextDrawCreate(	128.094100,		143.499984,		"Attackers"	);
	TextDrawLetterSize         	(	leftUpText,		0.225058,		1.115831	);
	TextDrawAlignment          	(	leftUpText,		1							);
	TextDrawColor            	(	leftUpText,		-1							);
	TextDrawSetShadow          	(	leftUpText,		0							);
	TextDrawSetOutline         	(	leftUpText,		1							);
	TextDrawBackgroundColor    	(	leftUpText,		51							);
	TextDrawFont            	(	leftUpText,		1							);
	TextDrawSetProportional    	(	leftUpText,		1							);

	rightUpText = TextDrawCreate(	436.282226,		143.499969,		"Defenders"	);
	TextDrawLetterSize         	(	rightUpText,	0.225058,		1.115831	);
	TextDrawAlignment          	(	rightUpText,	1							);
	TextDrawColor            	(	rightUpText,	-1							);
	TextDrawSetShadow          	(	rightUpText,	0							);
	TextDrawSetOutline         	(	rightUpText,	1							);
	TextDrawBackgroundColor    	(	rightUpText,	51							);
	TextDrawFont            	(	rightUpText,	1							);
	TextDrawSetProportional    	(	rightUpText,	1							);

	topTextScore = TextDrawCreate(	302.870422,		111.824943,		"_"			);//~y~~h~TCW~n~~b~~h~~h~Ateam 9 ~w~- ~r~~h~0 Bteam
	TextDrawLetterSize         	(	topTextScore,	0.275128,		1.917916	);
	TextDrawAlignment          	(	topTextScore,	2							);
	TextDrawColor            	(	topTextScore,	-1							);
	TextDrawSetShadow          	(	topTextScore,	1							);
	TextDrawSetOutline         	(	topTextScore,	0							);
	TextDrawBackgroundColor    	(	topTextScore,	125							);
	TextDrawFont            	(	topTextScore,	2							);
	TextDrawSetProportional    	(	topTextScore,	1							);

	leftText = TextDrawCreate  	(	132.658905,		172.316802,		"Name___________________Kill__HP________Acc________Dmg");
	TextDrawLetterSize         	(	leftText,		0.184588,		0.946666	);
	TextDrawAlignment          	(	leftText,		1							);
	TextDrawColor          		(	leftText,		-1							);
	TextDrawSetShadow          	(	leftText,		0							);
	TextDrawSetOutline         	(	leftText,		1							);
	TextDrawBackgroundColor     (	leftText,		0xFF003333					);
	TextDrawFont            	(	leftText,		1							);
	TextDrawSetProportional    	(	leftText,		1							);

	rightText = TextDrawCreate 	(	310.459045,		172.850051,		"Name___________________Kill__HP________Acc________Dmg");
	TextDrawLetterSize         	(	rightText,		0.184588,		0.946666	);
	TextDrawAlignment          	(	rightText,		1							);
	TextDrawColor            	(	rightText,		-1							);
	TextDrawSetShadow           (	rightText,		0							);
	TextDrawSetOutline          (	rightText,		1							);
	TextDrawBackgroundColor    	(	rightText,		0x3344FF33					);
	TextDrawFont            	(	rightText,		1							);
	TextDrawSetProportional     (	rightText,		1							);

	lowerULine = TextDrawCreate(	129.505859,		390.541168,		"-"			);
	TextDrawLetterSize         	(	lowerULine,		24.725660,		0.309667	);
	TextDrawAlignment          	(	lowerULine,		1							);
	TextDrawColor          		(	lowerULine,		16777215					);
	TextDrawSetShadow          	(	lowerULine,		0							);
	TextDrawSetOutline         	(	lowerULine,		0							);
	TextDrawBackgroundColor    	(	lowerULine,		255							);
	TextDrawFont           		(	lowerULine,		1							);
	TextDrawSetProportional    	(	lowerULine,		1							);

	teamWonHow = TextDrawCreate	(	304.187988,		345.974914,		"_"			);
	TextDrawLetterSize         	(	teamWonHow,		0.150094,		1.030083	);
	TextDrawAlignment          	(	teamWonHow,		2							);
	TextDrawColor          		(	teamWonHow,		-1							);
	TextDrawSetShadow          	(	teamWonHow,		0							);
	TextDrawSetOutline         	(	teamWonHow,		1							);
	TextDrawBackgroundColor    	(	teamWonHow,		30							);
	TextDrawFont            	(	teamWonHow,		2							);
	TextDrawSetProportional    	(	teamWonHow,		1							);

	leftTop = TextDrawCreate   	(	300.694656,		362.025115,		"_"			);
	TextDrawLetterSize         	(	leftTop,		0.18,			0.9			);
	TextDrawAlignment          	(	leftTop,		2							);
	TextDrawColor            	(	leftTop,		-1264229146					);
	TextDrawSetShadow          	(	leftTop,		0							);
	TextDrawSetOutline         	(	leftTop,		1							);
	TextDrawBackgroundColor    	(	leftTop,		51							);
	TextDrawFont            	(	leftTop,		1							);
	TextDrawSetProportional    	(	leftTop,		1							);
	TextDrawSetSelectable      	(	leftTop,		true						);

/*	rightTop = TextDrawCreate  	(	324.341369,		361.625335,		"_"			);
	TextDrawLetterSize         	(	rightTop,		0.155647,		0.937916	);
	TextDrawAlignment          	(	rightTop,		1							);
	TextDrawColor            	(	rightTop,		-1264229151					);
	TextDrawSetShadow          	(	rightTop,		0							);
	TextDrawSetOutline         	(	rightTop,		1							);
	TextDrawBackgroundColor    	(	rightTop,		40							);
	TextDrawFont           		(	rightTop,		1							);
	TextDrawSetProportional    	(	rightTop,		1							);
*/
	//left content
	leftNames = TextDrawCreate	(	132.035293,		182.650009,		"_"			);
	TextDrawLetterSize         	(	leftNames,		0.194799,		0.942583	);
	TextDrawAlignment          	(	leftNames,		1							);
	TextDrawColor            	(	leftNames,		-1							);
	TextDrawSetShadow          	(	leftNames,		0							);
	TextDrawSetOutline         	(	leftNames,		1							);
	TextDrawBackgroundColor    	(	leftNames,		0xFF003322					);
	TextDrawFont           		(	leftNames,		1							);
	TextDrawSetProportional    	(	leftNames,		1							);
	//left content
	leftKills = TextDrawCreate	(	223.035293,		182.650009,		"_"			);
	TextDrawLetterSize         	(	leftKills,		0.194799,		0.942583	);
	TextDrawAlignment          	(	leftKills,		2							);
	TextDrawColor            	(	leftKills,		-1							);
	TextDrawSetShadow          	(	leftKills,		0							);
	TextDrawSetOutline         	(	leftKills,		1							);
	TextDrawBackgroundColor    	(	leftKills,		0xFF003322					);
	TextDrawFont           		(	leftKills,		1							);
	TextDrawSetProportional    	(	leftKills,		1							);
	//left content
	leftHP = TextDrawCreate		(	243.035293,		182.650009,		"_"			);
	TextDrawLetterSize         	(	leftHP,			0.194799,		0.942583	);
	TextDrawAlignment          	(	leftHP,			2							);
	TextDrawColor            	(	leftHP,			-1							);
	TextDrawSetShadow          	(	leftHP,			0							);
	TextDrawSetOutline         	(	leftHP,			1							);
	TextDrawBackgroundColor    	(	leftHP,			0xFF003322					);
	TextDrawFont           		(	leftHP,			1							);
	TextDrawSetProportional    	(	leftHP,			1							);

	//left content for End MATCH (WAR)
	leftDeaths = TextDrawCreate		(	236.035293,		182.650009,		"_"			);
	TextDrawLetterSize         	(	leftDeaths,			0.194799,		0.942583	);
	TextDrawAlignment          	(	leftDeaths,			2							);
	TextDrawColor            	(	leftDeaths,			-1							);
	TextDrawSetShadow          	(	leftDeaths,			0							);
	TextDrawSetOutline         	(	leftDeaths,			1							);
	TextDrawBackgroundColor    	(	leftDeaths,			0xFF003322					);
	TextDrawFont           		(	leftDeaths,			1							);
	TextDrawSetProportional    	(	leftDeaths,			1							);

	//left content
	leftAcc = TextDrawCreate	(	265.035293,		182.650009,		"_"			);
	TextDrawLetterSize         	(	leftAcc,		0.194799,		0.942583	);
	TextDrawAlignment          	(	leftAcc,		2							);
	TextDrawColor            	(	leftAcc,		-1							);
	TextDrawSetShadow          	(	leftAcc,		0							);
	TextDrawSetOutline         	(	leftAcc,		1							);
	TextDrawBackgroundColor    	(	leftAcc,		0xFF003322					);
	TextDrawFont           		(	leftAcc,		1							);
	TextDrawSetProportional    	(	leftAcc,		1							);
	//left content
	leftDmg = TextDrawCreate	(	285.035293,		182.650009,		"_"			);
	TextDrawLetterSize         	(	leftDmg,		0.194799,		0.942583	);
	TextDrawAlignment          	(	leftDmg,		2							);
	TextDrawColor            	(	leftDmg,		-1							);
	TextDrawSetShadow          	(	leftDmg,		0							);
	TextDrawSetOutline         	(	leftDmg,		1							);
	TextDrawBackgroundColor    	(	leftDmg,		0xFF003322					);
	TextDrawFont           		(	leftDmg,		1							);
	TextDrawSetProportional    	(	leftDmg,		1							);
	//left content
	leftPlayed = TextDrawCreate	(	248.035293,		182.650009,		"_"			);
	TextDrawLetterSize         	(	leftPlayed,		0.194799,		0.942583	);
	TextDrawAlignment          	(	leftPlayed,		2							);
	TextDrawColor            	(	leftPlayed,		-1							);
	TextDrawSetShadow          	(	leftPlayed,		0							);
	TextDrawSetOutline         	(	leftPlayed,		1							);
	TextDrawBackgroundColor    	(	leftPlayed,		0xFF003322					);
	TextDrawFont           		(	leftPlayed,		1							);
	TextDrawSetProportional    	(	leftPlayed,		1							);
    //left content

	//right content
	rightNames = TextDrawCreate	(	310.035293,		182.650009,		"_"			);
	TextDrawLetterSize         	(	rightNames,		0.194799,		0.942583	);
	TextDrawAlignment          	(	rightNames,		1							);
	TextDrawColor          		(	rightNames,		-1							);
	TextDrawSetShadow          	(	rightNames,		0							);
	TextDrawSetOutline         	(	rightNames,		1							);
	TextDrawBackgroundColor    	(	rightNames,		0x3344FF22					);
	TextDrawFont            	(	rightNames,		1							);
	TextDrawSetProportional    	(	rightNames,		1							);
	//right content
	rightKills = TextDrawCreate(	400.535293,		182.650009,		"_"			);
	TextDrawLetterSize         	(	rightKills,		0.194799,		0.942583	);
	TextDrawAlignment          	(	rightKills,		2							);
	TextDrawColor          		(	rightKills,		-1							);
	TextDrawSetShadow          	(	rightKills,		0							);
	TextDrawSetOutline         	(	rightKills,		1							);
	TextDrawBackgroundColor    	(	rightKills,		0x3344FF22					);
	TextDrawFont            	(	rightKills,		1							);
	TextDrawSetProportional    	(	rightKills,		1							);
    //right content
	rightHP = TextDrawCreate	(	421.035293,		182.650009,		"_"			);
	TextDrawLetterSize         	(	rightHP,		0.194799,		0.942583	);
	TextDrawAlignment          	(	rightHP,		2							);
	TextDrawColor          		(	rightHP,		-1							);
	TextDrawSetShadow          	(	rightHP,		0							);
	TextDrawSetOutline         	(	rightHP,		1							);
	TextDrawBackgroundColor    	(	rightHP,		0x3344FF22					);
	TextDrawFont            	(	rightHP,		1							);
	TextDrawSetProportional    	(	rightHP,		1							);

	//right content for End MATCH (WAR)
	rightDeaths = TextDrawCreate	(	414.035293,		182.650009,		"_"			);
	TextDrawLetterSize         	(	rightDeaths,		0.194799,		0.942583	);
	TextDrawAlignment          	(	rightDeaths,		2							);
	TextDrawColor          		(	rightDeaths,		-1							);
	TextDrawSetShadow          	(	rightDeaths,		0							);
	TextDrawSetOutline         	(	rightDeaths,		1							);
	TextDrawBackgroundColor    	(	rightDeaths,		0x3344FF22					);
	TextDrawFont            	(	rightDeaths,		1							);
	TextDrawSetProportional    	(	rightDeaths,		1							);

	//right content
	rightAcc = TextDrawCreate	(	443.035293,		182.650009,		"_"			);
	TextDrawLetterSize         	(	rightAcc,		0.194799,		0.942583	);
	TextDrawAlignment          	(	rightAcc,		2							);
	TextDrawColor          		(	rightAcc,		-1							);
	TextDrawSetShadow          	(	rightAcc,		0							);
	TextDrawSetOutline         	(	rightAcc,		1							);
	TextDrawBackgroundColor    	(	rightAcc,		0x3344FF22					);
	TextDrawFont            	(	rightAcc,		1							);
	TextDrawSetProportional    	(	rightAcc,		1							);
    //right content
	rightDmg = TextDrawCreate	(	463.035293,		182.650009,		"_"			);
	TextDrawLetterSize         	(	rightDmg,		0.194799,		0.942583	);
	TextDrawAlignment          	(	rightDmg,		2							);
	TextDrawColor          		(	rightDmg,		-1							);
	TextDrawSetShadow          	(	rightDmg,		0							);
	TextDrawSetOutline         	(	rightDmg,		1							);
	TextDrawBackgroundColor    	(	rightDmg,		0x3344FF22					);
	TextDrawFont            	(	rightDmg,		1							);
	TextDrawSetProportional    	(	rightDmg,		1							);
    //right content
	rightPlayed = TextDrawCreate(	426.035293,		182.650009,		"_"			);
	TextDrawLetterSize         	(	rightPlayed,	0.194799,		0.942583	);
	TextDrawAlignment          	(	rightPlayed,	2							);
	TextDrawColor          		(	rightPlayed,	-1							);
	TextDrawSetShadow          	(	rightPlayed,	0							);
	TextDrawSetOutline         	(	rightPlayed,	1							);
	TextDrawBackgroundColor    	(	rightPlayed,	0x3344FF22					);
	TextDrawFont            	(	rightPlayed,	1							);
	TextDrawSetProportional    	(	rightPlayed,	1							);
    //right content
}


//===

ShowRoundStats(playerid)
{
    HideRoundStats(playerid);

	TextDrawColor( leftRedBG , 0xDE000066 );
	TextDrawColor( rightBlueBG , 0x3344FF66 );

	TextDrawShowForPlayer(playerid,centerblackBG);
	TextDrawShowForPlayer(playerid,fullBox3D);
	TextDrawShowForPlayer(playerid,leftRedBG);
	TextDrawShowForPlayer(playerid,rightBlueBG);
	TextDrawShowForPlayer(playerid,timerCenterTD);
	TextDrawShowForPlayer(playerid,leftTeamData);
	TextDrawShowForPlayer(playerid,rightTeamData);
	TextDrawShowForPlayer(playerid,centerTeamNames);
}

HideRoundStats(playerid)
{
	TextDrawHideForPlayer(playerid,centerblackBG);
	TextDrawHideForPlayer(playerid,fullBox3D);
	TextDrawHideForPlayer(playerid,leftRedBG);
	TextDrawHideForPlayer(playerid,rightBlueBG);
	TextDrawHideForPlayer(playerid,timerCenterTD);
	TextDrawHideForPlayer(playerid,leftTeamData);
	TextDrawHideForPlayer(playerid,rightTeamData);
	TextDrawHideForPlayer(playerid,centerTeamNames);
}

RoundTextdrawsCreate()
{
	centerblackBG = TextDrawCreate	(	100.705993, 	382.667022, 	"-"			);
	TextDrawLetterSize				(	centerblackBG, 	30.371185, 		10.792751	);
	TextDrawAlignment				(	centerblackBG, 	1							);
	TextDrawColor					(	centerblackBG, 	0x000000EE					);
	TextDrawSetShadow				(	centerblackBG, 	0							);
	TextDrawSetOutline				(	centerblackBG, 	-1							);
	TextDrawBackgroundColor			(	centerblackBG, 	0x00000055					);
	TextDrawFont					(	centerblackBG, 	1							);
	TextDrawSetProportional			(	centerblackBG, 	1							);

	fullBox3D = TextDrawCreate		(	664.964416, 	457.374145,	 	"usebox"	);
	TextDrawLetterSize				(	fullBox3D, 		0.000000, 		-1.895202	);
	TextDrawTextSize				(	fullBox3D, 		-14.329409, 	0.000000	);
	TextDrawAlignment				(	fullBox3D, 		1							);
	TextDrawColor					(	fullBox3D, 		0							);
	TextDrawUseBox					(	fullBox3D, 		true						);
	TextDrawBoxColor				(	fullBox3D, 		0x000000FF					);
	TextDrawSetShadow				(	fullBox3D, 		0							);
	TextDrawSetOutline				(	fullBox3D, 		0							);
	TextDrawFont					(	fullBox3D, 		1							);

	leftRedBG = TextDrawCreate		(	335.540924, 	401.283630, "-");
	TextDrawLetterSize				(	leftRedBG, 		-28.081052, 7.287504);
	TextDrawAlignment				(	leftRedBG, 		1							);
	TextDrawColor					(	leftRedBG, 		0xDE000066					);
	TextDrawSetShadow				(	leftRedBG, 		-1							);
	TextDrawSetOutline				(	leftRedBG, 		0							);
	TextDrawBackgroundColor			(	leftRedBG, 		0x00000099					);
	TextDrawFont					(	leftRedBG, 		1							);
	TextDrawSetProportional			(	leftRedBG, 		1							);

	rightBlueBG = TextDrawCreate	(	311.741302, 	401.283630, "-"				);
	TextDrawLetterSize				(	rightBlueBG, 	28.770492, 7.287504			);
	TextDrawAlignment				(	rightBlueBG, 	1							);
	TextDrawColor					(	rightBlueBG, 	0x3344FF66					);
	TextDrawSetShadow				(	rightBlueBG, 	-1							);
	TextDrawSetOutline				(	rightBlueBG,	0							);
	TextDrawBackgroundColor			(	rightBlueBG, 	0x00000099					);
	TextDrawFont					(	rightBlueBG, 	1							);
	TextDrawSetProportional			(	rightBlueBG, 	1							);

	timerCenterTD = TextDrawCreate	(	324.140991, 		434.872528, "~w~0:00 / ~r~~h~00");
	TextDrawLetterSize				(	timerCenterTD, 		0.267410, 	1.349164	);
	TextDrawTextSize				(	timerCenterTD, 		299.293579, 98.583343	);
	TextDrawAlignment				(	timerCenterTD, 		2						);
	TextDrawColor					(	timerCenterTD, 		-1						);
	TextDrawSetShadow				(	timerCenterTD, 		0						);
	TextDrawSetOutline				(	timerCenterTD, 		0						);
	TextDrawBackgroundColor			(	timerCenterTD,	 	-1						);
	TextDrawFont					(	timerCenterTD, 		2						);
	TextDrawSetProportional			(	timerCenterTD, 		1						);

	leftTeamData = TextDrawCreate	(	254.400375, 		436.160705, "~w~_");
	TextDrawLetterSize				(	leftTeamData, 		0.219527, 1.220829		);
	TextDrawAlignment				(	leftTeamData, 		2						);
	TextDrawColor					(	leftTeamData, 		-1						);
	TextDrawSetShadow				(	leftTeamData, 		0						);
	TextDrawSetOutline				(	leftTeamData, 		-1						);
	TextDrawBackgroundColor			(	leftTeamData, 		-16777131				);
	TextDrawFont					(	leftTeamData, 		1						);
	TextDrawSetProportional			(	leftTeamData, 		1						);

	rightTeamData = TextDrawCreate	(	388.682586, 		436.150573, "~w~_");
	TextDrawLetterSize				(	rightTeamData, 		0.219527, 1.220829);
	TextDrawAlignment				(	rightTeamData, 		2						);
	TextDrawColor					(	rightTeamData, 		-1						);
	TextDrawSetShadow				(	rightTeamData, 		0						);
	TextDrawSetOutline				(	rightTeamData, 		-1						);
	TextDrawBackgroundColor			(	rightTeamData, 		0x3278FF33				);
	TextDrawFont					(	rightTeamData, 		1						);
	TextDrawSetProportional			(	rightTeamData, 		1						);

//Qwerty _______________________________________________________________ ~b~~h~~h~Asdfg");
	centerTeamNames = TextDrawCreate(	317.176452, 		429.976257, "~r~~h~~h~__- __ -");
	TextDrawLetterSize				(	centerTeamNames, 	0.230700, 	1.267498	);
	TextDrawAlignment				(	centerTeamNames, 	2						);
	TextDrawColor					(	centerTeamNames, 	-1						);
	TextDrawSetShadow				(	centerTeamNames,	0						);
	TextDrawSetOutline				(	centerTeamNames, 	1						);
	TextDrawBackgroundColor			(	centerTeamNames, 	0x00000033				);
	TextDrawFont					(	centerTeamNames,	2						);
	TextDrawSetProportional			(	centerTeamNames, 	1						);


}

//===


LoadPlayerTextDraws(playerid)
{

    BITCH = CreatePlayerTextDraw(playerid, 330.000000, 350.000000,"_");
	PlayerTextDrawFont(playerid, BITCH, 1);
	PlayerTextDrawLetterSize(playerid, BITCH, 0.40000, 2.00000);
	PlayerTextDrawBackgroundColor(playerid, BITCH, MAIN_BACKGROUND_COLOUR);
	PlayerTextDrawColor(playerid, BITCH, -65281);
	PlayerTextDrawSetOutline(playerid, BITCH, 1);
    PlayerTextDrawAlignment(playerid, BITCH, 2);
    PlayerTextDrawSetShadow(playerid, BITCH, 0);

    TargetInfoTD = CreatePlayerTextDraw(playerid, 50.000000, 285.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, TargetInfoTD, MAIN_BACKGROUND_COLOUR);
	PlayerTextDrawFont(playerid, TargetInfoTD, 1);
	PlayerTextDrawLetterSize(playerid, TargetInfoTD, 0.200000, 1.0);
	PlayerTextDrawColor(playerid, TargetInfoTD, 255);
	PlayerTextDrawSetOutline(playerid, TargetInfoTD, 1);
	PlayerTextDrawSetProportional(playerid, TargetInfoTD, 1);
//	PlayerTextDrawUseBox(playerid, TargetInfoTD, 1);
//	PlayerTextDrawBoxColor(playerid, TargetInfoTD, 17);
	PlayerTextDrawTextSize(playerid, TargetInfoTD, 167.000000, 0.000000);

	TD_RoundSpec = CreatePlayerTextDraw(playerid, 330.000000, 350.000000,"_");
	PlayerTextDrawFont(playerid, TD_RoundSpec, 1);
	PlayerTextDrawLetterSize(playerid, TD_RoundSpec, 0.40000, 2.00000);
	PlayerTextDrawBackgroundColor(playerid, TD_RoundSpec, MAIN_BACKGROUND_COLOUR);
	PlayerTextDrawColor(playerid, TD_RoundSpec, -65281);
	PlayerTextDrawSetOutline(playerid, TD_RoundSpec, 1);
    PlayerTextDrawAlignment(playerid, TD_RoundSpec, 2);
    PlayerTextDrawSetShadow(playerid, TD_RoundSpec, 0);

	FPSPingPacket = CreatePlayerTextDraw(playerid,500.5, 1.4, "_");
	PlayerTextDrawBackgroundColor(playerid, FPSPingPacket, MAIN_BACKGROUND_COLOUR);
	PlayerTextDrawFont(playerid, FPSPingPacket, 1);
    PlayerTextDrawLetterSize(playerid, FPSPingPacket, 0.190000, 0.93000);
	PlayerTextDrawColor(playerid, FPSPingPacket, 16711935);
	PlayerTextDrawSetOutline(playerid, FPSPingPacket, 1);
	PlayerTextDrawSetProportional(playerid, FPSPingPacket, 1);
	PlayerTextDrawSetShadow(playerid, FPSPingPacket,0);
	PlayerTextDrawAlignment(playerid, FPSPingPacket, 1);

	RoundKillDmgTDmg = CreatePlayerTextDraw(playerid,3.000000, 387.000000, "_");
	PlayerTextDrawFont(playerid, RoundKillDmgTDmg, 1);
	PlayerTextDrawLetterSize(playerid, RoundKillDmgTDmg, 0.200000, 0.900000);
	PlayerTextDrawBackgroundColor(playerid, RoundKillDmgTDmg,MAIN_BACKGROUND_COLOUR);
	PlayerTextDrawColor(playerid, RoundKillDmgTDmg, 16711935);
	PlayerTextDrawSetOutline(playerid, RoundKillDmgTDmg, 1);
	PlayerTextDrawSetProportional(playerid, RoundKillDmgTDmg, 1);
	PlayerTextDrawSetShadow(playerid, RoundKillDmgTDmg, 0);

	DoingDamage[0] = CreatePlayerTextDraw(playerid,170.0,362.0 + 10,"_");
	PlayerTextDrawFont(playerid, DoingDamage[0], 1);
	PlayerTextDrawLetterSize(playerid, DoingDamage[0], 0.18000, 0.9);
	PlayerTextDrawBackgroundColor(playerid, DoingDamage[0],MAIN_BACKGROUND_COLOUR);
	PlayerTextDrawColor(playerid, DoingDamage[0], 16727295);
	PlayerTextDrawSetProportional(playerid, DoingDamage[0], 1);
	PlayerTextDrawSetOutline(playerid, DoingDamage[0],1);
    PlayerTextDrawSetShadow(playerid, DoingDamage[0],0);

	DoingDamage[1] = CreatePlayerTextDraw(playerid,170.0,372.0+ 10,"_");
	PlayerTextDrawFont(playerid, DoingDamage[1], 1);
	PlayerTextDrawLetterSize(playerid, DoingDamage[1], 0.18000, 0.9);
	PlayerTextDrawBackgroundColor(playerid, DoingDamage[1],MAIN_BACKGROUND_COLOUR);
	PlayerTextDrawColor(playerid, DoingDamage[1], 16727295);
	PlayerTextDrawSetProportional(playerid, DoingDamage[1], 1);
	PlayerTextDrawSetOutline(playerid, DoingDamage[1],1);
    PlayerTextDrawSetShadow(playerid, DoingDamage[1],0);

	DoingDamage[2] = CreatePlayerTextDraw(playerid,170.0,382.0+ 10,"_");
	PlayerTextDrawFont(playerid, DoingDamage[2], 1);
	PlayerTextDrawLetterSize(playerid, DoingDamage[2], 0.18000, 0.9);
	PlayerTextDrawBackgroundColor(playerid, DoingDamage[2],MAIN_BACKGROUND_COLOUR);
	PlayerTextDrawColor(playerid, DoingDamage[2], 16727295);
	PlayerTextDrawSetProportional(playerid, DoingDamage[2], 1);
	PlayerTextDrawSetOutline(playerid, DoingDamage[2],1);
    PlayerTextDrawSetShadow(playerid, DoingDamage[2],0);

	GettingDamaged[0] = CreatePlayerTextDraw(playerid,380.0,362.0+ 10,"_");
	PlayerTextDrawFont(playerid, GettingDamaged[0], 1);
	PlayerTextDrawLetterSize(playerid, GettingDamaged[0], 0.18000, 0.9);
	PlayerTextDrawBackgroundColor(playerid, GettingDamaged[0],MAIN_BACKGROUND_COLOUR);
	PlayerTextDrawColor(playerid, GettingDamaged[0], 16727295);
	PlayerTextDrawSetProportional(playerid, GettingDamaged[0], 1);
	PlayerTextDrawSetOutline(playerid, GettingDamaged[0],1);
	PlayerTextDrawSetShadow(playerid, GettingDamaged[0],0);

	GettingDamaged[1] = CreatePlayerTextDraw(playerid,380.0,372.0+ 10,"_");
	PlayerTextDrawFont(playerid, GettingDamaged[1], 1);
	PlayerTextDrawLetterSize(playerid, GettingDamaged[1], 0.18000, 0.9);
	PlayerTextDrawBackgroundColor(playerid, GettingDamaged[1],MAIN_BACKGROUND_COLOUR);
	PlayerTextDrawColor(playerid, GettingDamaged[1], 16727295);
	PlayerTextDrawSetProportional(playerid, GettingDamaged[1], 1);
	PlayerTextDrawSetOutline(playerid, GettingDamaged[1],1);
	PlayerTextDrawSetShadow(playerid, GettingDamaged[1],0);

	GettingDamaged[2] = CreatePlayerTextDraw(playerid,380.0,382.0+ 10,"_");
	PlayerTextDrawFont(playerid, GettingDamaged[2], 1);
	PlayerTextDrawLetterSize(playerid, GettingDamaged[2], 0.18000, 0.9);
	PlayerTextDrawBackgroundColor(playerid, GettingDamaged[2],MAIN_BACKGROUND_COLOUR);
	PlayerTextDrawColor(playerid, GettingDamaged[2], 16727295);
	PlayerTextDrawSetProportional(playerid, GettingDamaged[2], 1);
	PlayerTextDrawSetOutline(playerid, GettingDamaged[2],1);
	PlayerTextDrawSetShadow(playerid, GettingDamaged[2],0);

	RoundText = CreatePlayerTextDraw(playerid, 318.0,431.5,"_");
	//PlayerTextDrawUseBox(playerid, RoundText, 1);
	//PlayerTextDrawBoxColor(playerid, RoundText, 0x00000022);
	PlayerTextDrawFont(playerid, RoundText, 1);
	PlayerTextDrawTextSize(playerid, RoundText, 14.0,640.0);
	//PlayerTextDrawLetterSize(playerid, RoundText, 0.31, 1.55);
	PlayerTextDrawLetterSize(playerid, RoundText, 0.28, 1.20);
	//PlayerTextDrawBackgroundColor(playerid, RoundText, MAIN_BACKGROUND_COLOUR);
	//PlayerTextDrawColor(playerid, RoundText, -65281);
	PlayerTextDrawBackgroundColor(playerid, RoundText, 0xF6FF4733);
	PlayerTextDrawColor(playerid, RoundText, -65281);
	PlayerTextDrawSetOutline(playerid, RoundText, 1);
	PlayerTextDrawSetShadow(playerid, RoundText, 0);
    PlayerTextDrawAlignment(playerid, RoundText, 2);
    PlayerTextDrawSetProportional(playerid, RoundText, 1);

//    WhoSpec[0] = CreatePlayerTextDraw(playerid, 567, 304.00000 -65, "_");
    WhoSpec[0] = CreatePlayerTextDraw(playerid, 1, 150.00000, "_");
	PlayerTextDrawBackgroundColor(playerid, WhoSpec[0], MAIN_BACKGROUND_COLOUR);
	PlayerTextDrawFont(playerid, WhoSpec[0], 1);
	PlayerTextDrawLetterSize(playerid, WhoSpec[0], 0.180000, 0.9);
	PlayerTextDrawColor(playerid, WhoSpec[0], -65281);
	PlayerTextDrawSetOutline(playerid, WhoSpec[0], 1);
	PlayerTextDrawSetProportional(playerid, WhoSpec[0], 1);
	PlayerTextDrawSetShadow(playerid, WhoSpec[0], 0);


//    WhoSpec[1] = CreatePlayerTextDraw(playerid,567, 369.000000-65, "_");
    WhoSpec[1] = CreatePlayerTextDraw(playerid, 1, 215.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, WhoSpec[1], MAIN_BACKGROUND_COLOUR);
	PlayerTextDrawFont(playerid, WhoSpec[1], 1);
	PlayerTextDrawLetterSize(playerid, WhoSpec[1], 0.180000, 0.9);
	PlayerTextDrawColor(playerid, WhoSpec[1], -65281);
	PlayerTextDrawSetOutline(playerid, WhoSpec[1], 1);
	PlayerTextDrawSetProportional(playerid, WhoSpec[1], 1);
	PlayerTextDrawSetShadow(playerid, WhoSpec[1], 0);

/*	WhoSpec[2] = CreatePlayerTextDraw(playerid, 559.000000, 302.000000-65, "LD_POKE:cd9s");
	PlayerTextDrawBackgroundColor(playerid, WhoSpec[2], 255);
	PlayerTextDrawFont(playerid, WhoSpec[2], 4);
	PlayerTextDrawLetterSize(playerid, WhoSpec[2], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, WhoSpec[2], 37);
	PlayerTextDrawSetOutline(playerid, WhoSpec[2], 0);
	PlayerTextDrawSetProportional(playerid, WhoSpec[2], 1);
	PlayerTextDrawSetShadow(playerid, WhoSpec[2], 1);
	PlayerTextDrawUseBox(playerid, WhoSpec[2], 1);
	PlayerTextDrawBoxColor(playerid, WhoSpec[2], 255);
	PlayerTextDrawTextSize(playerid, WhoSpec[2], 77.000000, 127.000000);

	WhoSpec[3] = CreatePlayerTextDraw(playerid, 553.000000, 308.000000-65, ".");
	PlayerTextDrawBackgroundColor(playerid, WhoSpec[3], 255);
	PlayerTextDrawFont(playerid, WhoSpec[3], 1);
	PlayerTextDrawLetterSize(playerid, WhoSpec[3], 8.529994, 1.000000);
	PlayerTextDrawColor(playerid, WhoSpec[3], 64);
	PlayerTextDrawSetOutline(playerid, WhoSpec[3], 0);
	PlayerTextDrawSetProportional(playerid, WhoSpec[3], 1);
	PlayerTextDrawSetShadow(playerid, WhoSpec[3], 0);

*/


	SpecText[0] = CreatePlayerTextDraw(playerid, 4.333333, 354.251831 - 70.0, "LD_POKE:cd9s");
	PlayerTextDrawLetterSize(playerid, SpecText[0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, SpecText[0], 72.000000, 75);
	PlayerTextDrawAlignment(playerid, SpecText[0], 1);
	PlayerTextDrawColor(playerid, SpecText[0], 0x00000033);
	PlayerTextDrawSetShadow(playerid, SpecText[0], 0);
	PlayerTextDrawSetOutline(playerid, SpecText[0], 0);
	PlayerTextDrawFont(playerid, SpecText[0], 4);

    SpecText[1] = CreatePlayerTextDraw(playerid, 40, 350 - 70.0, "_");
	PlayerTextDrawFont(playerid, SpecText[1], 1);
	PlayerTextDrawLetterSize(playerid, SpecText[1], 0.20000, 1.000000);
	PlayerTextDrawColor(playerid, SpecText[1], -65281);
	PlayerTextDrawBackgroundColor(playerid, SpecText[1], MAIN_BACKGROUND_COLOUR);
	PlayerTextDrawSetOutline(playerid, SpecText[1], 1);
	PlayerTextDrawSetShadow(playerid, SpecText[1], 0);
	PlayerTextDrawAlignment(playerid, SpecText[1], 2);

	SpecText[2] = CreatePlayerTextDraw(playerid, 80.333333, 354.251831 - 70.0, "LD_POKE:cd9s");
	PlayerTextDrawLetterSize(playerid, SpecText[2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, SpecText[2], 58.000000, 75);
	PlayerTextDrawAlignment(playerid, SpecText[2], 1);
	PlayerTextDrawColor(playerid, SpecText[2], 0x00000033);
	PlayerTextDrawSetShadow(playerid, SpecText[2], 0);
	PlayerTextDrawSetOutline(playerid, SpecText[2], 0);
	PlayerTextDrawFont(playerid, SpecText[2], 4);

    SpecText[3] = CreatePlayerTextDraw(playerid, 85, 350 - 70.0, "_");
	PlayerTextDrawFont(playerid, SpecText[3], 1);
	PlayerTextDrawLetterSize(playerid, SpecText[3], 0.20000, 1.000000);
	PlayerTextDrawColor(playerid, SpecText[3], -65281);
	PlayerTextDrawBackgroundColor(playerid, SpecText[3], MAIN_BACKGROUND_COLOUR);
	PlayerTextDrawSetOutline(playerid, SpecText[3], 1);
	PlayerTextDrawSetShadow(playerid, SpecText[3], 0);
	PlayerTextDrawAlignment(playerid, SpecText[3], 1);





   	AreaCheckTD = CreatePlayerTextDraw(playerid,320.000000, 210.000000, "_");
	PlayerTextDrawAlignment(playerid, AreaCheckTD, 2);
	PlayerTextDrawBackgroundColor(playerid, AreaCheckTD, MAIN_BACKGROUND_COLOUR);
	PlayerTextDrawFont(playerid, AreaCheckTD, 1);
	PlayerTextDrawLetterSize(playerid, AreaCheckTD, 0.6, 3.00000);
	PlayerTextDrawColor(playerid, AreaCheckTD, -65281);
	PlayerTextDrawSetOutline(playerid, AreaCheckTD, 1);
	PlayerTextDrawSetProportional(playerid, AreaCheckTD, 1);
	PlayerTextDrawSetShadow(playerid, AreaCheckTD, 0);

	AreaCheckBG = CreatePlayerTextDraw(playerid,645.00000, -5.000000," ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~~n~ ~n~~n~~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~~n~ ~n~~n~~n~~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~~n~ ~n~~n~~n~ ");
    PlayerTextDrawUseBox(playerid, AreaCheckBG, 1);
    PlayerTextDrawTextSize(playerid, AreaCheckBG, -5, 645);
    PlayerTextDrawBoxColor(playerid, AreaCheckBG, 0x00000044);
	PlayerTextDrawSetOutline(playerid, AreaCheckBG,0);

	DeathText[0] = CreatePlayerTextDraw(playerid,322.000000, 346.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, DeathText[0], MAIN_BACKGROUND_COLOUR);
	PlayerTextDrawFont(playerid, DeathText[0], 1);
	PlayerTextDrawLetterSize(playerid, DeathText[0], 0.250000, 1.2000);
	PlayerTextDrawColor(playerid, DeathText[0], 16711935);
	PlayerTextDrawSetOutline(playerid, DeathText[0], 1);
	PlayerTextDrawSetProportional(playerid, DeathText[0], 1);
	PlayerTextDrawSetShadow(playerid, DeathText[0], 0);
	PlayerTextDrawAlignment(playerid, DeathText[0], 2);

	DeathText[1] = CreatePlayerTextDraw(playerid,322, 360.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, DeathText[1], MAIN_BACKGROUND_COLOUR);
	PlayerTextDrawFont(playerid, DeathText[1], 1);
	PlayerTextDrawLetterSize(playerid, DeathText[1], 0.250000, 1.2000);
	PlayerTextDrawColor(playerid, DeathText[1], 16711935);
	PlayerTextDrawSetOutline(playerid, DeathText[1], 1);
	PlayerTextDrawSetProportional(playerid, DeathText[1], 1);
	PlayerTextDrawSetShadow(playerid, DeathText[1], 0);
	PlayerTextDrawAlignment(playerid, DeathText[1], 2);



/*
	HPTextDraw_TD = CreatePlayerTextDraw(playerid,577, 67.7, "_");
	PlayerTextDrawBackgroundColor(playerid, HPTextDraw_TD, MAIN_BACKGROUND_COLOUR);
	PlayerTextDrawFont(playerid, HPTextDraw_TD, 2);
    PlayerTextDrawLetterSize(playerid, HPTextDraw_TD, 0.1599, 0.6999);
	PlayerTextDrawColor(playerid, HPTextDraw_TD, 16711935);
	PlayerTextDrawSetOutline(playerid, HPTextDraw_TD, 0);
	PlayerTextDrawSetProportional(playerid, HPTextDraw_TD, 1);
	PlayerTextDrawSetShadow(playerid, HPTextDraw_TD,0);
	PlayerTextDrawAlignment(playerid, HPTextDraw_TD, 2);

	ArmourTextDraw = CreatePlayerTextDraw(playerid,577, 45.7, "_");
	PlayerTextDrawBackgroundColor(playerid, ArmourTextDraw, MAIN_BACKGROUND_COLOUR);
	PlayerTextDrawFont(playerid, ArmourTextDraw, 2);
    PlayerTextDrawLetterSize(playerid, ArmourTextDraw, 0.1599, 0.6999);
	PlayerTextDrawColor(playerid, ArmourTextDraw, 16711935);
	PlayerTextDrawSetOutline(playerid, ArmourTextDraw, 0);
	PlayerTextDrawSetProportional(playerid, ArmourTextDraw, 1);
	PlayerTextDrawSetShadow(playerid, ArmourTextDraw,0);
	PlayerTextDrawAlignment(playerid, ArmourTextDraw, 2);

    BaseID_VS = CreatePlayerTextDraw(playerid, 548.000000, 25.000000,"_");
	PlayerTextDrawFont(playerid, BaseID_VS, 1);
	PlayerTextDrawLetterSize(playerid, BaseID_VS, 0.26000, 1.500000);
	PlayerTextDrawBackgroundColor(playerid, BaseID_VS,MAIN_BACKGROUND_COLOUR);
	PlayerTextDrawColor(playerid, BaseID_VS,-65281);
	PlayerTextDrawSetOutline(playerid, BaseID_VS,1);
    PlayerTextDrawSetProportional(playerid, BaseID_VS, 1);
    PlayerTextDrawSetShadow(playerid, BaseID_VS,0);
*/
    DeathMessage[0] = CreatePlayerTextDraw(playerid, 193.000000, 157.000000, "Random says this to you");
	PlayerTextDrawBackgroundColor(playerid, DeathMessage[0], -16776961);
	PlayerTextDrawFont(playerid, DeathMessage[0], 1);
	PlayerTextDrawLetterSize(playerid, DeathMessage[0], 0.280000, 1.200000);
	PlayerTextDrawColor(playerid, DeathMessage[0], -1);
	PlayerTextDrawSetOutline(playerid, DeathMessage[0], 1);
	PlayerTextDrawSetProportional(playerid, DeathMessage[0], 1);
	
	DeathMessage[1] = CreatePlayerTextDraw(playerid, 318.000000, 177.000000, "This is my death message");
	PlayerTextDrawAlignment(playerid, DeathMessage[1], 2);
	PlayerTextDrawBackgroundColor(playerid, DeathMessage[1], -16776961);
	PlayerTextDrawFont(playerid, DeathMessage[1], 2);
	PlayerTextDrawLetterSize(playerid, DeathMessage[1], 0.270000, 1.200000);
	PlayerTextDrawColor(playerid, DeathMessage[1], -65281);
	PlayerTextDrawSetOutline(playerid, DeathMessage[1], 1);
	PlayerTextDrawSetProportional(playerid, DeathMessage[1], 1);
	PlayerTextDrawUseBox(playerid, DeathMessage[1], 1);
	PlayerTextDrawBoxColor(playerid, DeathMessage[1], 153);
	PlayerTextDrawTextSize(playerid, DeathMessage[1], 794.000000, 271.000000);

	return 1;
}


//------------------------------------------------------------------------------
// Bases, Arenas, DMs and Configs
//------------------------------------------------------------------------------


LoadBases()
{
	#if MYSQL == 0

	    new iString[160];
	    TotalBases = 0;

		new DBResult:res = db_query(sqliteconnection, "SELECT * FROM 'Bases' ORDER BY ID ASC");

	    for(new i = 0; i < MAX_BASES; i++) BExist[i] = false;
	    new i;
		do {
			db_get_field_assoc(res, "ID", iString, sizeof(iString));
			i = strval(iString);

			#if PLUGINS == 1
		    db_get_field_assoc(res, "AttSpawn", iString, sizeof(iString));
		    sscanf(iString, "p<,>fff", BAttackerSpawn[i][0], BAttackerSpawn[i][1], BAttackerSpawn[i][2]);

		    db_get_field_assoc(res, "DefSpawn", iString, sizeof(iString));
		    sscanf(iString, "p<,>fff", BDefenderSpawn[i][0], BDefenderSpawn[i][1], BDefenderSpawn[i][2]);

		    db_get_field_assoc(res, "CPSpawn", iString, sizeof(iString));
		    sscanf(iString, "p<,>fff", BCPSpawn[i][0], BCPSpawn[i][1], BCPSpawn[i][2]);
			#else
		    db_get_field_assoc(res, "AttSpawn", iString, sizeof(iString));
		    sscanf(iString, "p,fff", BAttackerSpawn[i][0], BAttackerSpawn[i][1], BAttackerSpawn[i][2]);

		    db_get_field_assoc(res, "DefSpawn", iString, sizeof(iString));
		    sscanf(iString, "p,fff", BDefenderSpawn[i][0], BDefenderSpawn[i][1], BDefenderSpawn[i][2]);

		    db_get_field_assoc(res, "CPSpawn", iString, sizeof(iString));
		    sscanf(iString, "p,fff", BCPSpawn[i][0], BCPSpawn[i][1], BCPSpawn[i][2]);
			#endif
			db_get_field_assoc(res, "Interior", iString, sizeof(iString));
			BInterior[i] = strval(iString);

		    db_get_field_assoc(res, "Name", BName[i], 128);

		    TotalBases++;
			BExist[i] = true;

		} while(db_next_row(res));

		db_free_result(res);

		//format(iString, sizeof(iString), "{FFFFFF}%d bases are loaded.", TotalBases);
	    //SendClientMessageToAll(-1, iString);

		printf("Bases Loaded: %d", TotalBases);

	#else
		sql_query(sqlconnection, "SELECT * FROM `Bases` ORDER BY `ID` ASC", QUERY_THREADED, "OnBasesLoaded", "r");
	#endif
}



LoadArenas()
{
	#if MYSQL == 0
	    new iString[160];
		TotalArenas = 0;

		new DBResult:res = db_query(sqliteconnection, "SELECT * FROM Arenas ORDER BY ID ASC");

	    for(new i = 0; i < MAX_ARENAS; i++) AExist[i] = false;
		new i;
		do {
			db_get_field_assoc(res, "ID", iString, sizeof(iString));
			i = strval(iString);

			#if PLUGINS == 1
				db_get_field_assoc(res, "AttSpawn", iString, sizeof(iString));
			    sscanf(iString, "p<,>fff", AAttackerSpawn[i][0], AAttackerSpawn[i][1], AAttackerSpawn[i][2]);

			    db_get_field_assoc(res, "DefSpawn", iString, sizeof(iString));
			    sscanf(iString, "p<,>fff", ADefenderSpawn[i][0], ADefenderSpawn[i][1], ADefenderSpawn[i][2]);

			    db_get_field_assoc(res, "CPSpawn", iString, sizeof(iString));
			    sscanf(iString, "p<,>fff", ACPSpawn[i][0], ACPSpawn[i][1], ACPSpawn[i][2]);

			    db_get_field_assoc(res, "Max", iString, sizeof(iString));
			    sscanf(iString, "p<,>ff", AMax[i][0], AMax[i][1]);

			    db_get_field_assoc(res, "Min", iString, sizeof(iString));
			    sscanf(iString, "p<,>ff", AMin[i][0], AMin[i][1]);
			#else
				db_get_field_assoc(res, "AttSpawn", iString, sizeof(iString));
			    sscanf(iString, "p,fff", AAttackerSpawn[i][0], AAttackerSpawn[i][1], AAttackerSpawn[i][2]);

			    db_get_field_assoc(res, "DefSpawn", iString, sizeof(iString));
			    sscanf(iString, "p,fff", ADefenderSpawn[i][0], ADefenderSpawn[i][1], ADefenderSpawn[i][2]);

			    db_get_field_assoc(res, "CPSpawn", iString, sizeof(iString));
			    sscanf(iString, "p,fff", ACPSpawn[i][0], ACPSpawn[i][1], ACPSpawn[i][2]);

			    db_get_field_assoc(res, "Max", iString, sizeof(iString));
			    sscanf(iString, "p,ff", AMax[i][0], AMax[i][1]);

			    db_get_field_assoc(res, "Min", iString, sizeof(iString));
			    sscanf(iString, "p,ff", AMin[i][0], AMin[i][1]);
			#endif

			db_get_field_assoc(res, "Interior", iString, sizeof(iString));
		    AInterior[i] = strval(iString);

		    db_get_field_assoc(res, "Name", AName[i], 128);

		    AExist[i] = true;
		    TotalArenas++;
		} while(db_next_row(res));

		printf("Arenas Loaded: %d", TotalArenas);

	#else

		sql_query(sqlconnection, "SELECT * FROM `Arenas` ORDER BY `ID` ASC", QUERY_THREADED | QUERY_CACHED, "OnArenasLoaded", "r");

	#endif
}



LoadDMs()
{
	#if MYSQL == 0
		new iString[160], TotalDMs;

		new DBResult:res = db_query(sqliteconnection, "SELECT * FROM DMs ORDER BY ID ASC");

    	for(new i = 0; i < MAX_DMS; i++) DMExist[i] = false;
		new i;
		do {
			db_get_field_assoc(res, "ID", iString, sizeof(iString));
			i = strval(iString);

			#if PLUGINS == 1
		    db_get_field_assoc(res, "Spawn", iString, sizeof(iString));
		    sscanf(iString, "p<,>ffff", DMSpawn[i][0], DMSpawn[i][1], DMSpawn[i][2], DMSpawn[i][3]);
			#else
		    db_get_field_assoc(res, "Spawn", iString, sizeof(iString));
		    sscanf(iString, "p,ffff", DMSpawn[i][0], DMSpawn[i][1], DMSpawn[i][2], DMSpawn[i][3]);
			#endif

			db_get_field_assoc(res, "Interior", iString, sizeof(iString));
			DMInterior[i] = strval(iString);

			for(new j = 0; j < 3; ++j) {
			    new str[10], Str[128];
			    format(str, sizeof(str), "Wep%d", j+1);
                db_get_field_assoc(res, str, Str, 128);
				DMWeapons[i][j] = strval(Str);
			}
			DMExist[i] = true;

		    //db_next_row(res);
		    TotalDMs++;
		} while(db_next_row(res));

		printf("DMs Loaded: %d", TotalDMs);

	#else
		sql_query(sqlconnection, "SELECT * FROM `DMs` ORDER BY `ID` ASC", QUERY_THREADED | QUERY_CACHED, "OnDMsLoaded", "r");
	#endif
}


LoadDuels()
{
	#if MYSQL == 0
		new iString[160];
		TotalDuels = 0;

        new DBResult:res = db_query(sqliteconnection, "SELECT * FROM Duels ORDER BY ID ASC");
	    for(new i = 0; i < MAX_DUELS; i++) DuelExists[i] = false;
	    new i;
		do {
			db_get_field_assoc(res, "ID", iString, sizeof(iString));
			i = strval(iString);

			#if PLUGINS == 1
			    db_get_field_assoc(res, "PositionA", iString, sizeof(iString));
			    sscanf(iString, "p<,>ffff", DuelASpawn[i][0], DuelASpawn[i][1], DuelASpawn[i][2], DuelASpawn[i][3]);

			    db_get_field_assoc(res, "PositionB", iString, sizeof(iString));
			    sscanf(iString, "p<,>ffff", DuelBSpawn[i][0], DuelBSpawn[i][1], DuelBSpawn[i][2], DuelBSpawn[i][3]);

			    db_get_field_assoc(res, "Camera", iString, sizeof(iString));
			    sscanf(iString, "p<,>fff", DuelCamera[i][0], DuelCamera[i][1], DuelCamera[i][2]);

			    db_get_field_assoc(res, "Weapons", iString, sizeof(iString));
			    sscanf(iString, "p<,>dd", DuelWeapons[i][0], DuelWeapons[i][1]);

			    db_get_field_assoc(res, "Max", iString, sizeof(iString));
			    sscanf(iString, "p<,>ff", DuelMax[i][0], DuelMax[i][1]);

			    db_get_field_assoc(res, "Min", iString, sizeof(iString));
			    sscanf(iString, "p<,>ff", DuelMin[i][0], DuelMin[i][1]);
			#else
			    db_get_field_assoc(res, "PositionA", iString, sizeof(iString));
			    sscanf(iString, "p,ffff", DuelASpawn[i][0], DuelASpawn[i][1], DuelASpawn[i][2], DuelASpawn[i][3]);

			    db_get_field_assoc(res, "PositionB", iString, sizeof(iString));
			    sscanf(iString, "p,ffff", DuelBSpawn[i][0], DuelBSpawn[i][1], DuelBSpawn[i][2], DuelBSpawn[i][3]);

			    db_get_field_assoc(res, "Camera", iString, sizeof(iString));
			    sscanf(iString, "p,fff", DuelCamera[i][0], DuelCamera[i][1], DuelCamera[i][2]);

			    db_get_field_assoc(res, "Weapons", iString, sizeof(iString));
			    sscanf(iString, "p,dd", DuelWeapons[i][0], DuelWeapons[i][1]);

			    db_get_field_assoc(res, "Max", iString, sizeof(iString));
			    sscanf(iString, "p,ff", DuelMax[i][0], DuelMax[i][1]);

			    db_get_field_assoc(res, "Min", iString, sizeof(iString));
			    sscanf(iString, "p,ff", DuelMin[i][0], DuelMin[i][1]);
			#endif

			db_get_field_assoc(res, "Name", DuelName[i], 128);

			db_get_field_assoc(res, "Interior", iString, sizeof(iString));
		    DuelInterior[i] = strval(iString);

			DuelExists[i] = true;

		    TotalDuels++;
		} while(db_next_row(res));
		printf("Duels Loaded: %d", TotalDuels);
	#else
		sql_query(sqlconnection, "SELECT * FROM `Duels` ORDER BY `ID` ASC", QUERY_THREADED | QUERY_CACHED, "OnDuelsLoaded", "r");
	#endif
}




LoadConfig()
{
	new iString[300];
    new DBResult:res = db_query(sqliteconnection, "SELECT * FROM Configs");
    Skin[NON] = 0;

	db_get_field_assoc(res, "Value", iString, sizeof(iString)); // Attacker Skin
    Skin[ATTACKER] = strval(iString);
	db_next_row(res);

	db_get_field_assoc(res, "Value", iString, sizeof(iString)); // Attacker Sub Skin
    Skin[ATTACKER_SUB] = strval(iString);
	db_next_row(res);

	db_get_field_assoc(res, "Value", iString, sizeof(iString)); // Defender Skin
    Skin[DEFENDER] = strval(iString);
	db_next_row(res);

	db_get_field_assoc(res, "Value", iString, sizeof(iString)); // Defender Sub Skin
    Skin[DEFENDER_SUB] = strval(iString);
	db_next_row(res);

	db_get_field_assoc(res, "Value", iString, sizeof(iString)); // Referee Skin
    Skin[REFEREE] = strval(iString);
	db_next_row(res);

	db_get_field_assoc(res, "Value", iString, sizeof(iString)); // Server Weather
    MainWeather = strval(iString);
	db_next_row(res);

	db_get_field_assoc(res, "Value", iString, sizeof(iString)); // Server Time
    MainTime = strval(iString);
	db_next_row(res);

	db_get_field_assoc(res, "Value", iString, sizeof(iString)); // CP Time
    ConfigCPTime = strval(iString);
	db_next_row(res);

	db_get_field_assoc(res, "Value", iString, sizeof(iString)); // Round Time
    ConfigRoundTime = strval(iString);
	db_next_row(res);

	db_get_field_assoc(res, "Value", iString, sizeof(iString)); // Total Rounds
    TotalRounds = strval(iString);
	db_next_row(res);

	db_get_field_assoc(res, "Value", iString, sizeof(iString)); // Maximum Packetloss
    Max_Packetloss = floatstr(iString);
	db_next_row(res);

	db_get_field_assoc(res, "Value", iString, sizeof(iString)); // Maximum Ping
    Max_Ping = strval(iString);
	db_next_row(res);

	db_get_field_assoc(res, "Value", iString, sizeof(iString)); // Minimum FPS
    Min_FPS = strval(iString);
	db_next_row(res);

	db_get_field_assoc(res, "Value", iString, sizeof(iString)); // Maximum ESL Players
    MaxESLPlayers = strval(iString);
	db_next_row(res);

	db_get_field_assoc(res, "Value", iString, sizeof(iString)); // One On One
	OneOnOne = (strval(iString) == 1 ? true : false);
	db_next_row(res);


	#if PLUGINS == 1

		db_get_field_assoc(res, "Value", iString, sizeof(iString)); // Weapon Limits
		sscanf(iString, "p<,>dddddddddd", WeaponLimit[0], WeaponLimit[1], WeaponLimit[2], WeaponLimit[3], WeaponLimit[4], WeaponLimit[5], WeaponLimit[6], WeaponLimit[7], WeaponLimit[8], WeaponLimit[9]);
		db_next_row(res);

        db_get_field_assoc(res, "Value", iString, sizeof(iString)); // Main Spawn
		sscanf(iString, "p<,>ffffd", MainSpawn[0], MainSpawn[1], MainSpawn[2], MainSpawn[3], MainInterior);
        db_next_row(res);
	#else

		db_get_field_assoc(res, "Value", iString, sizeof(iString)); // Weapon Limits
		sscanf(iString, "p,dddddddddd", WeaponLimit[0], WeaponLimit[1], WeaponLimit[2], WeaponLimit[3], WeaponLimit[4], WeaponLimit[5], WeaponLimit[6], WeaponLimit[7], WeaponLimit[8], WeaponLimit[9]);
		db_next_row(res);

        db_get_field_assoc(res, "Value", iString, sizeof(iString)); // Main Spawn
		sscanf(iString, "p,ffffd", MainSpawn[0], MainSpawn[1], MainSpawn[2], MainSpawn[3], MainInterior);
        db_next_row(res);
	#endif

	#if ANTICHEAT == 1
	db_get_field_assoc(res, "Value", iString, sizeof(iString)); // ESL Anticheat
    ESLAC = strval(iString);
	db_next_row(res);
	#else
	db_next_row(res);
	#endif

	db_get_field_assoc(res, "Value", iString, sizeof(iString)); // ESL Mode
	ESLMode = (strval(iString) == 1 ? true : false);
	db_next_row(res);

	#if PLUGINS == 1
	    db_get_field_assoc(res, "Value", iString, sizeof(iString)); // GunMenuWeapons
	    new slots[10][20];
	    sscanf(iString, "p<|>s[20]s[20]s[20]s[20]s[20]s[20]s[20]s[20]s[20]s[20]", slots[0], slots[1], slots[2], slots[3], slots[4], slots[5], slots[6], slots[7], slots[8], slots[9]);

	    for(new i = 0; i < 10; ++ i)
		{
			if(slots[i][strlen(slots[i]) - 1] == '|')
	        {
				strdel(slots[i], strlen(slots[i]) - 1, strlen(slots[i]));
			}
			sscanf(slots[i], "p<,>dd", GunMenuWeapons[i][0], GunMenuWeapons[i][1]);
	    }

	    db_next_row(res);

	    db_get_field_assoc(res, "Value", iString, sizeof(iString));
	    sscanf(iString, "p<,>ff", RoundAR, RoundHP);

	    db_next_row(res);
	#else
	    db_get_field_assoc(res, "Value", iString, sizeof(iString)); // GunMenuWeapons
	    new slots[10][20];
	    sscanf(iString, "p|ssssssssss", slots[0], slots[1], slots[2], slots[3], slots[4], slots[5], slots[6], slots[7], slots[8], slots[9]);

	    for(new i = 0; i < 10; ++ i)
		{
		    if(slots[i][strlen(slots[i])-1] == '|')
			{
				strdel(slots[i], strlen(slots[i]) - 1, strlen(slots[i]));
			}
			sscanf(slots[i], "p,dd", GunMenuWeapons[i][0], GunMenuWeapons[i][1]);
	    }

	    db_next_row(res);

	    db_get_field_assoc(res, "Value", iString, sizeof(iString));
	    sscanf(iString, "p,ff", RoundAR, RoundHP);

		db_next_row(res);
	#endif

	db_get_field_assoc(res, "Value", iString, sizeof(iString));

	#if PLUGINS == 1
	sscanf(iString, "s[128]", WebString);
	#else
	sscanf(iString, "s", WebString);
	#endif
	db_next_row(res);

	db_get_field_assoc(res, "Value", iString, sizeof(iString));
	#if PLUGINS == 1
	sscanf(iString, "s[128]", link1);
	#else
	sscanf(iString, "s", link1);
	#endif
	db_next_row(res);

	db_get_field_assoc(res, "Value", iString, sizeof(iString));
	#if PLUGINS == 1
	sscanf(iString, "s[128]", link2);
	#else
	sscanf(iString, "s", link2);
	#endif
	db_next_row(res);

	db_get_field_assoc(res, "Value", iString, sizeof(iString));
	#if PLUGINS == 1
	sscanf(iString, "s[128]", link3);
	#else
	sscanf(iString, "s", link3);
	#endif
	db_next_row(res);

	db_get_field_assoc(res, "Value", iString, sizeof(iString));
	#if PLUGINS == 1
	sscanf(iString, "s[128]", link4);
	#else
	sscanf(iString, "s", link4);
	#endif
	db_next_row(res);

	db_get_field_assoc(res, "Value", iString, sizeof(iString));
	#if PLUGINS == 1
	sscanf(iString, "s[128]", link5);
	#else
	sscanf(iString, "s", link5);
	#endif
	db_next_row(res);

	db_get_field_assoc(res, "Value", iString, sizeof(iString));
	#if PLUGINS == 1
	sscanf(iString, "s[128]", link6);
	#else
	sscanf(iString, "s", link6);
	#endif
	db_next_row(res);

	db_get_field_assoc(res, "Value", iString, sizeof(iString));
	#if PLUGINS == 1
	sscanf(iString, "s[128]", link7);
	#else
	sscanf(iString, "s", link7);
	#endif
	db_next_row(res);

	db_get_field_assoc(res, "Value", iString, sizeof(iString));
	#if PLUGINS == 1
	sscanf(iString, "s[128]", link8);
	#else
	sscanf(iString, "s", link8);
	#endif
	db_next_row(res);

	db_get_field_assoc(res, "Value", iString, sizeof(iString));
	#if PLUGINS == 1
	sscanf(iString, "s[128]", link9);
	#else
	sscanf(iString, "s", link9);
	#endif
	db_next_row(res);

	db_get_field_assoc(res, "Value", iString, sizeof(iString));
	#if PLUGINS == 1
	sscanf(iString, "s[128]", link10);
	#else
	sscanf(iString, "s", link10);
	#endif
	db_next_row(res);


	db_get_field_assoc(res, "Value", iString, sizeof(iString)); // Target Player Information
    ToggleTargetInfo = (strval(iString) == 1 ? true : false);
	db_next_row(res);

	db_get_field_assoc(res, "Value", iString, sizeof(iString)); // Show Team HP and Damage
    TeamHPDamage = (strval(iString) == 1 ? true : false);
	db_next_row(res);

	// ANTI-LAG

	AntiLagTD = TextDrawCreate(75.000000, 327.000000, "_");
	TextDrawBackgroundColor(AntiLagTD, MAIN_BACKGROUND_COLOUR);
	TextDrawFont(AntiLagTD, 1);
	TextDrawLetterSize(AntiLagTD, 0.149999, 0.899999);
	TextDrawColor(AntiLagTD, -1);
	TextDrawSetOutline(AntiLagTD, 1);
	TextDrawSetProportional(AntiLagTD, 1);
	TextDrawSetProportional(AntiLagTD, 1);

	db_get_field_assoc(res, "Value", iString, sizeof(iString)); // Server AntiLag
    ServerAntiLag = (strval(iString) == 1 ? true : false);
    if(ServerAntiLag == true) TextDrawSetString(AntiLagTD, sprintf("%sAntiLag: ~g~On", MAIN_TEXT_COLOUR));
    else TextDrawSetString(AntiLagTD, "_");
	db_next_row(res);

	// ANTI-LAG


    db_get_field_assoc(res, "Value", iString, sizeof(iString)); // Main Background Colour
    MAIN_BACKGROUND_COLOUR = strval(iString);
	db_next_row(res);

	db_get_field_assoc(res, "Value", iString, sizeof(iString)); // Main Text Colour
	#if PLUGINS == 1
	sscanf(iString, "s[128]", MAIN_TEXT_COLOUR);
	#else
	sscanf(iString, "s", MAIN_TEXT_COLOUR);
	#endif
	db_next_row(res);


	db_get_field_assoc(res, "Value", iString, sizeof(iString)); // MAX tdm kills
	MaxTDMKills = strval(iString);
	if( MaxTDMKills <= 0 ) MaxTDMKills = 10;
	db_next_row(res);

	db_get_field_assoc(res, "Value", iString, sizeof(iString)); // Color Scheme ID
 	format( ColScheme, 10, "{%s}", iString );
 	db_next_row(res);

 	db_get_field_assoc(res, "Value", iString, sizeof(iString)); // Knives
    GiveKnife = (strval(iString) == 1 ? true : false);
    db_next_row(res);

    db_get_field_assoc(res, "Value", iString, sizeof(iString)); // ShowBodyLabels
    ShowBodyLabels = (strval(iString) == 1 ? true : false);
    db_next_row(res);

    db_get_field_assoc(res, "Value", iString, sizeof(iString)); // VoteRound
    VoteRound = (strval(iString) == 1 ? true : false);
    db_next_row(res);

    db_get_field_assoc(res, "Value", iString, sizeof(iString)); // Changename
    ChangeName = (strval(iString) == 1 ? true : false);
    db_next_row(res);

	db_free_result(res);

	printf("Server Config Loaded.");
}


//------------------------------------------------------------------------------
// SQL Forwards
//------------------------------------------------------------------------------

#if MYSQL == 1

forward OnSQLError(SQL:handle, errorid, error[], query[], callback[]);
public OnSQLError(SQL:handle, errorid, error[], query[], callback[]) {
	printf("-----------------------------------------------------------------------------------");
	printf("SQL Error: %s", error);
	printf("Query: %s", query);
	printf("Callback: %s", callback);
	printf("Errorid: %d", errorid);
	printf("-----------------------------------------------------------------------------------");
}


forward OnBasesLoaded(Result:res);
public OnBasesLoaded(Result:res) {
	sql_store_result(res);
    TotalBases = 0;

    for(new i = 0; i < MAX_BASES; i++) BExist[i] = false;

	new iString[128];
	for(new i = 1; i <= sql_num_rows(res); ++i) {

	    sql_get_field_assoc(res, "AttSpawn", iString);
	    sscanf(iString, "p<,>fff", BAttackerSpawn[i][0], BAttackerSpawn[i][1], BAttackerSpawn[i][2]);

	    sql_get_field_assoc(res, "DefSpawn", iString);
	    sscanf(iString, "p<,>fff", BDefenderSpawn[i][0], BDefenderSpawn[i][1], BDefenderSpawn[i][2]);

	    sql_get_field_assoc(res, "CPSpawn", iString);
	    sscanf(iString, "p<,>fff", BCPSpawn[i][0], BCPSpawn[i][1], BCPSpawn[i][2]);

	    BInterior[i] = sql_get_field_assoc_int(res, "Interior");

	    sql_get_field_assoc(res, "Name", BName[i]);

	    sql_next_row(res);
	    BExist[i] = true;
	    TotalBases++;
	}

	sql_free_result(res);


	//format(iString, sizeof(iString), "{FFFFFF}%d "COL_PRIM"bases are loaded.", TotalBases);
    //SendClientMessageToAll(-1, iString);

	printf("Bases Loaded: %d", TotalBases);
}

forward OnArenasLoaded(Result:res);
public OnArenasLoaded(Result:res) {
    TotalArenas = 0;
	new iString[128];
    for(new i = 0; i < MAX_ARENAS; i++) AExist[i] = false;

	for(new i = 1; i <= sql_num_rows(res); ++i) {
	    sql_get_field_assoc(res, "AttSpawn", iString);
	    sscanf(iString, "p<,>fff", AAttackerSpawn[i][0], AAttackerSpawn[i][1], AAttackerSpawn[i][2]);

	    sql_get_field_assoc(res, "DefSpawn", iString);
	    sscanf(iString, "p<,>fff", ADefenderSpawn[i][0], ADefenderSpawn[i][1], ADefenderSpawn[i][2]);

	    sql_get_field_assoc(res, "CPSpawn", iString);
	    sscanf(iString, "p<,>fff", ACPSpawn[i][0], ACPSpawn[i][1], ACPSpawn[i][2]);

	    sql_get_field_assoc(res, "Max", iString);
	    sscanf(iString, "p<,>ff", AMax[i][0], AMax[i][1]);

	    sql_get_field_assoc(res, "Min", iString);
	    sscanf(iString, "p<,>ff", AMin[i][0], AMin[i][1]);

	    AInterior[i] = sql_get_field_assoc_int(res, "Interior");

	    sql_get_field_assoc(res, "Name", AName[i]);

	    sql_next_row(res);
	    AExist[i] = true;
	    TotalArenas++;
	}

	printf("Arenas Loaded: %d", TotalArenas);
}

forward OnDMsLoaded(Result:res);
public OnDMsLoaded(Result:res) {
    new TotalDMs;
    new iString[128];
    for(new i = 0; i < MAX_DMS; i++) DMExist[i] = false;

	for(new i = 1; i <= sql_num_rows(res); ++i) {

	    sql_get_field_assoc(res, "Spawn", iString);
	    sscanf(iString, "p<,>ffff", DMSpawn[i][0], DMSpawn[i][1], DMSpawn[i][2], DMSpawn[i][3]);

	    DMInterior[i] = sql_get_field_assoc_int(res, "Interior");

		for(new j = 0; j < 3; ++j) {
		    new str[10];
		    format(str, sizeof(str), "Wep%d", j+1);
		    DMWeapons[i][j] = sql_get_field_assoc_int(res, str);
		}
		DMExist[i] = true;

	    sql_next_row(res);
	    TotalDMs++;
	}

	printf("DMs Loaded: %d", TotalDMs);
}


forward OnDuelsLoaded(Result:res);
public OnDuelsLoaded(Result:res) {
	TotalDuels = 0;
    new iString[128];
    for(new i = 0; i < MAX_DUELS; i++) DuelExists[i] = false;

	for(new i = 1; i <= sql_num_rows(res); ++i) {

	    sql_get_field_assoc(res, "PositionA", iString);
	    sscanf(iString, "p<,>ffff", DuelASpawn[i][0], DuelASpawn[i][1], DuelASpawn[i][2], DuelASpawn[i][3]);

	    sql_get_field_assoc(res, "PositionB", iString);
	    sscanf(iString, "p<,>ffff", DuelBSpawn[i][0], DuelBSpawn[i][1], DuelBSpawn[i][2], DuelBSpawn[i][3]);

	    sql_get_field_assoc(res, "Camera", iString);
	    sscanf(iString, "p<,>fff", DuelCamera[i][0], DuelCamera[i][1], DuelCamera[i][2]);

	    sql_get_field_assoc(res, "Weapons", iString);
	    sscanf(iString, "p<,>dd", DuelWeapons[i][0], DuelWeapons[i][1]);

	    sql_get_field_assoc(res, "Max", iString);
	    sscanf(iString, "p<,>ff", DuelMax[i][0], DuelMax[i][1]);

	    sql_get_field_assoc(res, "Min", iString);
	    sscanf(iString, "p<,>ff", DuelMin[i][0], DuelMin[i][1]);

	    sql_get_field_assoc(res, "Name", DuelName[i]);

	    DuelInterior[i] = sql_get_field_assoc_int(res, "Interior");

		DuelExists[i] = true;

	    sql_next_row(res);
	    TotalDuels++;
	}

	printf("Duels Loaded: %d", TotalDuels);
}


forward OnBanCheck(Result:result, playerid);
public OnBanCheck(Result:result, playerid) {
    if(sql_num_rows(result) > 0) {
        new iString[128], admin_name[MAX_PLAYER_NAME], reason[128];
        sql_get_field_assoc(result, "Admin Name", admin_name);
		sql_get_field_assoc(result, "Reason", reason);
        format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has banned you from this server for: {FFFFFF}%s", admin_name, reason);
        SendClientMessage(playerid, -1, iString);
        SetTimerEx("OnPlayerKicked", 500, false, "i", playerid);
	}
}

#endif


#if STATS == 1 && MYSQL == 1
LoadESLStats()
{
	for(new i = 0; i < MAX_STATS; i++) {
	    VNames[i] = "";
	    DNames[i] = "";
	}

	new iString[256];
	format(iString, sizeof(iString), "SELECT * FROM `VERSUS Stats` ORDER BY `Matches Won` DESC LIMIT %d", MAX_STATS);
	sql_query(sqlconnection, iString, QUERY_THREADED | QUERY_CACHED, "OnVERSUSStatsLoad", "r");

	format(iString, sizeof(iString), "SELECT * FROM `Duel Stats` ORDER BY `Duels Won` DESC LIMIT %d", MAX_STATS);
    sql_query(sqlconnection, iString, QUERY_THREADED | QUERY_CACHED, "OnDuelStatsLoad", "r");

}

forward OnVERSUSStatsLoad(Result:res);
public OnVERSUSStatsLoad(Result:res) {
	new TotalStats = 0;

	for(new i = 0; i < sql_num_rows(res); ++i) {
		sql_get_field_assoc(res, "Name", VNames[i]);
		VKills[i] = sql_get_field_assoc_int(res, "Kills");
		VDeaths[i] = sql_get_field_assoc_int(res, "Deaths");
		VDamage[i] = sql_get_field_assoc_int(res, "Damage");
		VRoundsPlayed[i] = sql_get_field_assoc_int(res, "Rounds Played");
		VRoundsWon[i] = sql_get_field_assoc_int(res, "Rounds Won");
		VRoundsLost[i] = sql_get_field_assoc_int(res, "Rounds Lost");
		VMatchesPlayed[i] = sql_get_field_assoc_int(res, "Matches Played");
		VMatchesWon[i] = sql_get_field_assoc_int(res, "Matches Won");
		VMatchesLost[i] = sql_get_field_assoc_int(res, "Matches Lost");

		sql_next_row(res);
		TotalStats++;
	}

	printf(">> Loaded %d VERSUS Stats <<", TotalStats);
	SendClientMessageToAll(-1, "VERSUS Stats Successfully Updated.");
}

forward OnDuelStatsLoad(Result:res);
public OnDuelStatsLoad(Result:res) {
	new TotalStats = 0;

	for(new i = 0; i < sql_num_rows(res); ++i) {
		sql_get_field_assoc(res, "Name", DNames[i]);
		DKills[i] = sql_get_field_assoc_int(res, "Kills");
		DDeaths[i] = sql_get_field_assoc_int(res, "Deaths");
		DDamage[i] = sql_get_field_assoc_int(res, "Damage");
		DRoundsPlayed[i] = sql_get_field_assoc_int(res, "Rounds Played");
		DRoundsWon[i] = sql_get_field_assoc_int(res, "Rounds Won");
		DRoundsLost[i] = sql_get_field_assoc_int(res, "Rounds Lost");
		DuelsPlayed[i] = sql_get_field_assoc_int(res, "Duels Played");
		DuelsWon[i] = sql_get_field_assoc_int(res, "Duels Won");
		DuelsLost[i] = sql_get_field_assoc_int(res, "Duels Lost");

		sql_next_row(res);
		TotalStats++;
	}

	printf(">> Loaded %d Duel Stats <<", TotalStats);
	SendClientMessageToAll(-1, "Duel Stats Successfully Updated");
}



forward OnVERSUSStatsUpdate(Result:res, Kills, Deaths, Damage, RoundsWon, sName[]);
public OnVERSUSStatsUpdate(Result:res, Kills, Deaths, Damage, RoundsWon, sName[]) {
	new RoundsLost;
	if(!RoundsWon) RoundsLost = 1;

    new iString[256];
    if(sql_num_rows(res) == 0) {
        format(iString, sizeof(iString), "INSERT INTO `VERSUS Stats`(`Name`, `Kills`, `Deaths`, `Damage`, `Rounds Played`, `Rounds Won`, `Rounds Lost`, `Matches Played`, `Matches Won`, `Matches Lost`) VALUES ('%s','%d','%d','%d','1','%d','%d','0','0','0')", sName, Kills, Deaths, Damage, RoundsWon, RoundsLost);
        sql_query(sqlconnection, iString, QUERY_THREADED);
	} else {
	    format(iString, sizeof(iString), "UPDATE `VERSUS Stats` SET `Kills` = Kills + %d,`Deaths`= `Deaths` + %d,`Damage`= `Damage` + %d, `Rounds Played` = `Rounds Played` + 1, `Rounds Won` = `Rounds Won` + %d, `Rounds Lost` = `Rounds Lost` + %d WHERE `Name` = '%s'", Kills, Deaths, Damage, RoundsWon, RoundsLost, sName);
		sql_query(sqlconnection, iString, QUERY_THREADED);
	}
}

forward OnDuelStatsUpdate(Result:res, Kills, Deaths, Damage, RoundsWon, sName[]);
public OnDuelStatsUpdate(Result:res, Kills, Deaths, Damage, RoundsWon, sName[]) {
    new RoundsLost;
	if(!RoundsWon) RoundsLost = 1;

    new iString[256];
    if(sql_num_rows(res) == 0) {
        format(iString, sizeof(iString), "INSERT INTO `Duel Stats`(`Name`, `Kills`, `Deaths`, `Damage`, `Rounds Played`, `Rounds Won`, `Rounds Lost`, `Duels Played`, `Duels Won`, `Duels Lost`) VALUES ('%s','%d','%d','%d','1','%d','%d','0','0','0')", sName, Kills, Deaths, Damage, RoundsWon, RoundsLost);
        sql_query(sqlconnection, iString, QUERY_THREADED);
	} else {
	    format(iString, sizeof(iString), "UPDATE `Duel Stats` SET `Kills`= `Kills` + %d,`Deaths` = `Deaths` + %d,`Damage` = `Damage` + %d, `Rounds Played` = `Rounds Played` + 1, `Rounds Won` = `Rounds Won` + %d, `Rounds Lost` = `Rounds Lost` + %d WHERE `Name` = '%s'",  Kills, Deaths, Damage, RoundsWon, RoundsLost, sName);
        sql_query(sqlconnection, iString, QUERY_THREADED);
	}
}

forward OnPlayerVERSUSStats(Result:res, playerid);
public OnPlayerVERSUSStats(Result:res, playerid) {
    if(sql_num_rows(res) > 0) {
        Player[playerid][vKills] = sql_get_field_assoc_int(res, "Kills");
        Player[playerid][vDeaths] = sql_get_field_assoc_int(res, "Deaths");
        Player[playerid][vDamage] = sql_get_field_assoc_int(res, "Damage");
        Player[playerid][vRPlayed] = sql_get_field_assoc_int(res, "Rounds Played");
        Player[playerid][vRWon] = sql_get_field_assoc_int(res, "Rounds Won");
        Player[playerid][vRLost] = sql_get_field_assoc_int(res, "Rounds Lost");
        Player[playerid][vPlayed] = sql_get_field_assoc_int(res, "Matches Played");
        Player[playerid][vWon] = sql_get_field_assoc_int(res, "Matches Won");
        Player[playerid][vLost] = sql_get_field_assoc_int(res, "Matches Lost");
	}
}

forward OnPlayerDuelStats(Result:res, playerid);
public OnPlayerDuelStats(Result:res, playerid) {
	if(sql_num_rows(res) > 0) {
        Player[playerid][dKills] = sql_get_field_assoc_int(res, "Kills");
        Player[playerid][dDeaths] = sql_get_field_assoc_int(res, "Deaths");
        Player[playerid][dDamage] = sql_get_field_assoc_int(res, "Damage");
        Player[playerid][dRPlayed] = sql_get_field_assoc_int(res, "Rounds Played");
        Player[playerid][dRWon] = sql_get_field_assoc_int(res, "Rounds Won");
        Player[playerid][dRLost] = sql_get_field_assoc_int(res, "Rounds Lost");
        Player[playerid][dPlayed] = sql_get_field_assoc_int(res, "Duels Played");
        Player[playerid][dWon] = sql_get_field_assoc_int(res, "Duels Won");
        Player[playerid][dLost] = sql_get_field_assoc_int(res, "Duels Lost");
	}
}

#endif






//------------------------------------------------------------------------------
// Other Functions
//------------------------------------------------------------------------------

forward SpawnConnectedPlayer(playerid, team);
public SpawnConnectedPlayer(playerid, team)
{
    if(Player[playerid][Spawned] == false)
	{
	    StyleTextDrawFix(playerid);
		if(team == 0)
		{
			if(WarMode == false)
			{
			    Player[playerid][Team] = GetTeamWithLessPlayers();
			    switch(Player[playerid][Team])
				{
			        case ATTACKER: SetPlayerColor(playerid, ATTACKER_NOT_PLAYING);
			        case DEFENDER: SetPlayerColor(playerid, DEFENDER_NOT_PLAYING);
				}
			}
			else
			{
				new ToAddIn;

			    if(strfind(Player[playerid][Name], TeamName[ATTACKER], true) != -1) ToAddIn = ATTACKER;
			    else if(strfind(Player[playerid][Name], TeamName[DEFENDER], true) != -1) ToAddIn = DEFENDER;
			    else ToAddIn = NON;

		        switch(ToAddIn)
				{
		            case NON:
					{
					    Player[playerid][Team] = GetTeamWithLessPlayers();
					    switch(Player[playerid][Team])
						{
					        case ATTACKER: SetPlayerColor(playerid, ATTACKER_NOT_PLAYING);
					        case DEFENDER: SetPlayerColor(playerid, DEFENDER_NOT_PLAYING);
						}
			        }
					case ATTACKER:
					{
			            Player[playerid][Team] = ATTACKER;
			            SetPlayerColor(playerid, ATTACKER_NOT_PLAYING);
					}
					case DEFENDER:
					{
					    Player[playerid][Team] = DEFENDER;
					    SetPlayerColor(playerid, DEFENDER_NOT_PLAYING);
					}
				}
			}
		}
		else if(team == 1)
		{
			Player[playerid][Team] = ATTACKER;
			SetPlayerColor(playerid, ATTACKER_NOT_PLAYING);
		}
		else if(team == 2)
		{
		    Player[playerid][Team] = DEFENDER;
		    SetPlayerColor(playerid, DEFENDER_NOT_PLAYING);
		}

		SetPlayerWeather(playerid, Player[playerid][Weather]);
		SetPlayerTime(playerid, Player[playerid][Time], 0);

        HPArmourBaseID_VS_TD(playerid);

		new iString[180];
		if(Player[playerid][TextPos] == false)
			format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDamage ~r~%.0f~n~%sTotal Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[playerid][RoundKills], MAIN_TEXT_COLOUR, Player[playerid][RoundDamage], MAIN_TEXT_COLOUR, Player[playerid][TotalDamage]);
		else
			format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDmg ~r~%.0f~n~%sT. Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[playerid][RoundKills], MAIN_TEXT_COLOUR, Player[playerid][RoundDamage], MAIN_TEXT_COLOUR, Player[playerid][TotalDamage]);
		PlayerTextDrawSetString(playerid, RoundKillDmgTDmg, iString);

		PlayerTextDrawShow(playerid, FPSPingPacket);
		PlayerTextDrawShow(playerid, RoundKillDmgTDmg);

		#if ANTICHEAT == 1
		if(AntiCheat == true)
			TextDrawShowForPlayer(playerid, ACText);
		#endif
		TextDrawSetString(WebText, WebString);
	    TextDrawShowForPlayer(playerid, WebText);

   		new str1[128];
		str1 = "~r~Round Paused";

	    if(RoundPaused == true)
		{
		    TextDrawSetString(PauseTD, str1);
			TextDrawShowForAll(PauseTD);
		}

		for(new i = 0; i < 3; i++)
		{
			PlayerTextDrawShow(playerid, DoingDamage[i]);
			PlayerTextDrawShow(playerid, GettingDamaged[i]);
		}

		if(Current != -1)
	 	{
			foreach(new i:Player)
			{
				if(Player[i][Style] == 0) TextDrawShowForPlayer(i, RoundStats);
				else ShowRoundStats(i);
			}

#if SKINICONS == 1
			if(ShowIcons == true)
			{
				UpdateAliveForPlayer(playerid);
			}
#endif
		}

		if(Player[playerid][ShowSpecs])
		{
			PlayerTextDrawShow(playerid, WhoSpec[0]);
			PlayerTextDrawShow(playerid, WhoSpec[1]);
		}
		else
		{
		    PlayerTextDrawHide(playerid, WhoSpec[0]);
			PlayerTextDrawHide(playerid, WhoSpec[1]);
		}


		TextDrawShowForPlayer(playerid, TeamHpLose[0]);
		TextDrawShowForPlayer(playerid, TeamHpLose[1]);
        TextDrawShowForPlayer(playerid, AttHpLose);
        TextDrawShowForPlayer(playerid, DefHpLose);
		TextDrawShowForPlayer(playerid, Ready[0]);
		TextDrawShowForPlayer(playerid, Ready[1]);

		PlayerTextDrawShow(playerid, TD_RoundSpec);
        PlayerTextDrawShow(playerid, HPTextDraw_TD);
        PlayerTextDrawShow(playerid, ArmourTextDraw);
		PlayerTextDrawShow(playerid, BaseID_VS);
		ShowPlayerProgressBar(playerid, HealthBar);
		ShowPlayerProgressBar(playerid, ArmourBar);

        if(WarMode == true)
		{
			TextDrawShowForPlayer(playerid, RoundsPlayed);
			TextDrawShowForPlayer(playerid, TeamScoreText);
		}

		Player[playerid][Spawned] = true;
		SpawnPlayer(playerid);

		LoadPlayerVariables(playerid);
		RadarFix();
	}
	return 1;
}


//------------------------------------------------------------------------------
// Stocks
//------------------------------------------------------------------------------

stock SetHP(playerid, Float:amount)
{
	PlayerHealth[playerid] = amount;
	if(amount <= 0.0)
	{
	    SetPlayerHealth(playerid, 0.0);
	    HidePlayerProgressBar(playerid, HealthBar);
	}
	else
	{
		SetPlayerHealth(playerid, 65536 + amount);
		ShowPlayerProgressBar(playerid, HealthBar);
	}
	SetPlayerProgressBarValue(playerid, HealthBar, amount);
	    
	if(amount > 100.0)
	{
	    SetPlayerProgressBarColour(playerid, HealthBar, 0x00FF00FF);
	}
	if(amount <= 100.0 && amount > 70.0)
 	{
 	    SetPlayerProgressBarColour(playerid, HealthBar, 0x00FF00FF);
 	}
	if(amount <= 70.0 && amount > 50.0)
	{
	    SetPlayerProgressBarColour(playerid, HealthBar, 0xFFFF00FF);
 	}
	if(amount <= 50.0 && amount > 30.0)
	{
        SetPlayerProgressBarColour(playerid, HealthBar, 0xCC0000FF);
	}
	if(amount <= 30.0 && amount >= 0.0)
	{
        SetPlayerProgressBarColour(playerid, HealthBar, 0xFF0000FF);
	}
	return 1;
}

stock SetAP(playerid, Float:amount)
{
	PlayerArmour[playerid] = amount;
	if(amount <= 0.0)
	{
	    SetPlayerArmour(playerid, 0.0);
	    HidePlayerProgressBar(playerid, ArmourBar);
	}
	else
	{
		SetPlayerArmour(playerid, 65536 + amount);
		ShowPlayerProgressBar(playerid, ArmourBar);
	}
    SetPlayerProgressBarValue(playerid, ArmourBar, amount);
	    
    if(amount > 100)
	{
	    SetPlayerProgressBarColour(playerid, ArmourBar, 0x00FF00FF);
	}
	if(amount <= 100 && amount > 70)
 	{
 	    SetPlayerProgressBarColour(playerid, ArmourBar, 0x00FF00FF);
 	}
	if(amount <= 70 && amount > 50)
	{
	    SetPlayerProgressBarColour(playerid, ArmourBar, 0xFFFF00FF);
 	}
	if(amount <= 50 && amount > 30)
	{
        SetPlayerProgressBarColour(playerid, ArmourBar, 0xCC0000FF);
	}
	if(amount <= 30 && amount >= 0)
	{
        SetPlayerProgressBarColour(playerid, ArmourBar, 0xFF0000FF);
	}
	return 1;
}

stock GetHP(playerid, &Float:health)
{
	health = PlayerHealth[playerid];
	return 1;
}

stock GetAP(playerid, &Float:armour)
{
	armour = PlayerArmour[playerid];
	return 1;
}



forward HidePlayerDeathMessage(playerid);
public HidePlayerDeathMessage(playerid)
{
    PlayerTextDrawHide(playerid, DeathMessage[0]);
    PlayerTextDrawHide(playerid, DeathMessage[1]);
	return 1;
}

stock ShowPlayerDeathMessage(killerid, playerid)
{
	if(!strcmp("NO_DEATH_MESSAGE", DeathMessageStr[killerid], false))
	    return 0;
	    
	PlayerTextDrawSetString(playerid, DeathMessage[0], sprintf("A death diss from %s", Player[killerid][Name]));
    PlayerTextDrawSetString(playerid, DeathMessage[1], sprintf("%s", DeathMessageStr[killerid]));
	PlayerTextDrawShow(playerid, DeathMessage[0]);
    PlayerTextDrawShow(playerid, DeathMessage[1]);
    SetTimerEx("HidePlayerDeathMessage", 6000, false, "i", playerid);
	return 1;
}

stock StyleTextDrawFix(playerid)
{
	if(Current != -1)
	{
		switch(Player[playerid][Style])
		{
		    case 0:
		    {
				HideRoundStats(playerid);
		        TextDrawShowForPlayer(playerid, RoundStats);
		    }
		    case 1:
		    {
		        TextDrawHideForPlayer(playerid, RoundStats);
		        ShowRoundStats(playerid);
		    }
		}
	}
	else
	{
	    HideRoundStats(playerid);
	    TextDrawHideForPlayer(playerid, RoundStats);
	}
	return 1;
}

stock RecountPlayersOnCP()
{
	PlayersInCP = 0;
	foreach(new i : Player)
	{
	    if(IsPlayerInCheckpoint(i))
	    {
	        OnPlayerEnterCheckpoint(i);
		}
	}
	return 1;
}

stock AddFoxGlitchFix()
{
    new obj = CreateObject(19353, 2487.883789, -1962.822143, 13.53077, 0, 0, -88.483413);
   	SetObjectMaterialText(obj, "GG FOX", 0, 50);

   	obj = CreateObject(19353, 2489.435302, -1961.161254, 13.538647, 0, 0, 0.368316);
   	SetObjectMaterialText(obj, "FAIL", 0, 50);

   	obj = CreateObject(19353, 2486.198486, -1961.272705, 13.537899, 0, 0, 183.032867);
   	SetObjectMaterialText(obj, "FAIL", 0, 50);
	return 1;
}

/*
stock ShowHitArrow(playerid, hitterid)
{
	// if last hit by the same then break
	new Float:hitangleZ, Float:hitangleY = 90.0;
 	GetPlayerFacingAngle(hitterid, hitangleZ);
 	//hitangleZ -= 180.0;
 	new Float:pX, Float:pY, Float:pZ;
 	GetPlayerPos(playerid, pX, pY, pZ);
 	new Float:oX, Float:oY, Float:oZ;
 	GetPlayerPos(hitterid, oX, oY, oZ);
 	new Float:countZ = 0.0;
 	new bool:arrowDown = false;
 	if(oZ != pZ)
 	{
 	    if(oZ > pZ)
 	    {
 	        countZ = oZ - pZ;
 	    }
 	    else
 	    {
 	        countZ = pZ - oZ;
 	        arrowDown = true;
 	    }
 	}
 	if(countZ == 0.0)
		hitangleY = 90.0;
	else if((pX == oX) && (pY == oY) && (pZ != oZ))
	    hitangleY = 0.0;
	else
	{
	    new Float:distancePandO = GetDistanceBetweenPlayers(playerid, hitterid);
        hitangleY = asin(countZ / distancePandO);
        if(arrowDown == true)
            hitangleY += 180.0;
		printf("hitangleY: %f", hitangleY);
	}
 	new objID;
 	new rnd = random(4);
	switch(rnd)
	{
	    case 0:
	    {
	        objID = CreatePlayerObject(playerid, 19134, pX + randomExFloat(1.0, 2.0), pY + randomExFloat(1.0, 2.0), pZ + randomExFloat(1.0, 2.0), 0.0, hitangleY, hitangleZ, 0.0);
	    }
	    case 1:
		{
		    objID = CreatePlayerObject(playerid, 19134, pX - randomExFloat(1.0, 2.0), pY + randomExFloat(1.0, 2.0), pZ + randomExFloat(1.0, 2.0), 0.0, hitangleY, hitangleZ, 0.0);
		}
		case 2:
		{
		    objID = CreatePlayerObject(playerid, 19134, pX + randomExFloat(1.0, 2.0), pY - randomExFloat(1.0, 2.0), pZ + randomExFloat(1.0, 2.0), 0.0, hitangleY, hitangleZ, 0.0);
		}
		case 3:
		{
		    objID = CreatePlayerObject(playerid, 19134, pX - randomExFloat(1.0, 2.0), pY - randomExFloat(1.0, 2.0), pZ + randomExFloat(1.0, 2.0), 0.0, hitangleY, hitangleZ, 0.0);
		}
	}
	// set material colour
	SetTimerEx("DestroyHitObject", 5000, false, "ii", playerid, objID);
	return 1;
}


forward DestroyHitObject(playerid, objectid);
public DestroyHitObject(playerid, objectid)
{
	DestroyPlayerObject(playerid, objectid);
	return 1;
}
*/

/*
stock ShowDeathMessage(playerid, killerid)
{
	if(playerid == INVALID_PLAYER_ID || killerid == INVALID_PLAYER_ID)
	    return 0;

	PlayerTextDrawSetString(Player[playerid][DeathMsgTD],
	return 1;
}*/

stock randomExFloat(Float:min, Float:max)
{
	new rand = random(floatround(max-min, floatround_round))+floatround(min, floatround_round);
	return rand;
}

stock randomExInt(min, max)
{
	return random(max-min) + min;
}

stock PlayerLeadTeam(playerid, bool:force, bool:message = true)
{
    new team = Player[playerid][Team];

    if(!force && TeamHasLeader[team] == true)
        return 0;

    //KillTimer(Player[playerid][AskingForHelpTimer]);
    TeamLeader[team] = playerid;
	TeamHasLeader[team] = true;
	if(message)
	{
	 	foreach(new i : Player)
		{
		    if(team == ATTACKER)
		    {
		        if(Player[i][Team] == ATTACKER || Player[i][Team] == ATTACKER_SUB)
		        {
		            SendClientMessage(i, -1, sprintf("%s%s {FFFFFF}is now leading the team.", TextColor[team], Player[playerid][Name]));
		        }
		    }
		    else if(team == DEFENDER)
		    {
		        if(Player[i][Team] == DEFENDER || Player[i][Team] == DEFENDER_SUB)
		        {
		            SendClientMessage(i, -1, sprintf("%s%s {FFFFFF}is now leading the team.", TextColor[team], Player[playerid][Name]));
		        }
		    }
		    if(i == playerid)
				continue;

			if(GetPlayerColor(i) == TEAM_LEADER_COLOUR)
				ColorFix(i);
		}
	}
	SetPlayerColor(playerid, TEAM_LEADER_COLOUR);
    RadarFix();
	return 1;
}

stock PlayerNoLeadTeam(playerid)
{
    new team = Player[playerid][Team];

	if(TeamHasLeader[team] == true && TeamLeader[team] == playerid)
	{
	    TeamLeader[team] = INVALID_PLAYER_ID;
		TeamHasLeader[team] = false;
		foreach(new i : Player)
		{
		    if(team == ATTACKER)
		    {
		        if(Player[i][Team] == ATTACKER || Player[i][Team] == ATTACKER_SUB)
		        {
		            SendClientMessage(i, -1, sprintf("%s%s {FFFFFF}is no longer leading the team.", TextColor[team], Player[playerid][Name]));
		        }
		    }
		    else if(team == DEFENDER)
		    {
		        if(Player[i][Team] == DEFENDER || Player[i][Team] == DEFENDER_SUB)
		        {
		            SendClientMessage(i, -1, sprintf("%s%s {FFFFFF}is no longer leading the team.", TextColor[team], Player[playerid][Name]));
		        }
		    }
		}
	    switch(team)
	    {
	        case 0:
	        {
	            AttackerAskingHelp(playerid);
			}
	        case 1:
	        {
	            DefenderAskingHelp(playerid);
			}
	    }
	}
	ColorFix(playerid);
	RadarFix();
	return 1;
}

stock ResetTeamLeaders()
{
	for(new team = 0; team < MAX_TEAMS; team ++)
	{
	    if(TeamHasLeader[team] == true)
		{
			if(IsPlayerConnected(TeamLeader[team]))
			{
				ColorFix(TeamLeader[team]);
			}
		    TeamLeader[team] = INVALID_PLAYER_ID;
			TeamHasLeader[team] = false;
		}
	}
	RadarFix();
	/*new team;

	team = 0;
	if(TeamHasLeader[team] == true)
	{
		if(IsPlayerConnected(TeamLeader[team]))
		{
			ColorFix(TeamLeader[team]);
		}
	    TeamLeader[team] = INVALID_PLAYER_ID;
		TeamHasLeader[team] = false;
	}

	team = 1;
	if(TeamHasLeader[team] == true)
	{
	    if(IsPlayerConnected(TeamLeader[team]))
	    {
			ColorFix(TeamLeader[team]);
	    }
	    TeamLeader[team] = INVALID_PLAYER_ID;
		TeamHasLeader[team] = false;
	}
	*/
	return 1;
}


/*
Function: LogAdminCommand
cmd[]: the entered command
adminid: the admin who enters the command
playerid: the player who the command hits (use INVALID_PLAYER_ID to ignore this)
*/
stock LogAdminCommand(cmd[], adminid, playerid)
{
	new File:log = fopen("admin_command_log.txt", io_append);
	new Year, Month, Day;
	getdate(Year, Month, Day);
	new Hours, Minutes, Seconds;
	gettime(Hours, Minutes, Seconds);
  	if(playerid != INVALID_PLAYER_ID)
  	{
		fwrite(log, sprintf("[%02d/%02d/%d][%02d:%02d:%02d] %s [%d] has used the command (/%s) at %s [%d]. \r\n", Day, Month, Year, Hours, Minutes, Seconds, Player[adminid][Name], adminid, cmd, Player[playerid][Name], playerid));
   	}
  	else
	{
		fwrite(log, sprintf("[%02d/%02d/%d][%02d:%02d:%02d] %s [%d] has used the command (/%s). \r\n", Day, Month, Year, Hours, Minutes, Seconds, Player[adminid][Name], adminid, cmd));
  	}
  	//fwrite(log, "\r\n");
  	fclose(log);
  	return 1;
}

stock ClearAdminCommandLog()
{
    new File:log = fopen("admin_command_log.txt", io_write);
    fwrite(log, "");
    fclose(log);
	return 1;
}

stock DamagePlayer(playerid, Float:amnt)
{
	new Float:toReturn;
	new Float:temp_hp, Float:temp_arm;
	GetHP(playerid, temp_hp);
	GetAP(playerid, temp_arm);
	if(temp_arm < 0.1)
	{
		if(temp_hp < temp_arm)
			amnt = temp_hp;
	}
	if(temp_arm <= 0)
	{
		SetHP(playerid, temp_hp - amnt);
		toReturn = temp_hp - amnt;
	}
	else if(temp_arm >= 1.00)
	{
		new Float:minus_result = temp_arm - amnt;
		// printf("%f", minus_result); //For debug.
		if(minus_result <= 0.00)
		{
			SetAP(playerid, 0.00);
			SetHP(playerid, minus_result + temp_hp);
			toReturn = minus_result + temp_hp;
		}
		else if(minus_result >= 1.00)
		{
			SetAP(playerid, minus_result);
			toReturn = minus_result;
		}
	}
	return _:toReturn;
}

stock SaveThemeSettings()
{
    new query[256];

	format(query, sizeof(query), "UPDATE `Configs` SET `Value` = '%s' WHERE `Option` = 'MainTextColour'", DB_Escape(MAIN_TEXT_COLOUR));
	db_free_result(db_query(sqliteconnection, query));

	format(query, sizeof(query), "UPDATE `Configs` SET `Value` = %d WHERE `Option` = 'MainBackgroundColour'", MAIN_BACKGROUND_COLOUR);
	db_free_result(db_query(sqliteconnection, query));
	return 1;
}

stock ChangeTheme(playerid, listitem)
{
	switch(listitem)
	{
		case 0: // White (Background) & Black (Text)
		{
		    format(MAIN_TEXT_COLOUR, sizeof MAIN_TEXT_COLOUR, "~l~");
		    MAIN_BACKGROUND_COLOUR = 0xEEEEEE33;
		}
		case 1: // Black (Background) & White (Text)
		{
            format(MAIN_TEXT_COLOUR, sizeof MAIN_TEXT_COLOUR, "~w~");
		    MAIN_BACKGROUND_COLOUR = 0x00000044;
		}
		case 2: // White (Background) & Red (Text)
		{
            format(MAIN_TEXT_COLOUR, sizeof MAIN_TEXT_COLOUR, "~r~");
		    MAIN_BACKGROUND_COLOUR = 0xEEEEEE33;
		}
		case 3: // Black (Background) & Red (Text)
		{
            format(MAIN_TEXT_COLOUR, sizeof MAIN_TEXT_COLOUR, "~r~");
		    MAIN_BACKGROUND_COLOUR = 0x00000044;
		}
		case 4: // White (Background) & Blue (Text)
		{
            format(MAIN_TEXT_COLOUR, sizeof MAIN_TEXT_COLOUR, "~b~");
		    MAIN_BACKGROUND_COLOUR = 0xEEEEEE33;
		}
		case 5: // Black (Background) & Blue (Text)
		{
            format(MAIN_TEXT_COLOUR, sizeof MAIN_TEXT_COLOUR, "~b~");
		    MAIN_BACKGROUND_COLOUR = 0x00000044;
		}
		case 6: // White (Background) & Green (Text)
		{
            format(MAIN_TEXT_COLOUR, sizeof MAIN_TEXT_COLOUR, "~g~");
		    MAIN_BACKGROUND_COLOUR = 0xEEEEEE33;
		}
		case 7: // Black (Background) & Green (Text)
		{
            format(MAIN_TEXT_COLOUR, sizeof MAIN_TEXT_COLOUR, "~g~");
		    MAIN_BACKGROUND_COLOUR = 0x00000044;
		}
		case 8: // White (Background) & Purple (Text)
		{
            format(MAIN_TEXT_COLOUR, sizeof MAIN_TEXT_COLOUR, "~p~");
		    MAIN_BACKGROUND_COLOUR = 0xEEEEEE33;
		}
		case 9: // Black (Background) & Purple (Text)
		{
            format(MAIN_TEXT_COLOUR, sizeof MAIN_TEXT_COLOUR, "~p~");
		    MAIN_BACKGROUND_COLOUR = 0x00000044;
		}
	}
	SaveThemeSettings();
	SendClientMessageToAll(-1, sprintf("%s has set up a new theme colour. Server is restarting so the changes can take effect.", Player[playerid][Name]));
	SendRconCommand("gmx");
	return 1;
}

stock ResetDuellersToTheirTeams(dueller1, dueller2)
{
	Player[dueller1][Team] = Player[dueller1][TeamBeforeDuel];
	Player[dueller2][Team] = Player[dueller2][TeamBeforeDuel];
    SwitchTeamFix(dueller1);
    SwitchTeamFix(dueller2);
	SpawnPlayerEx(dueller1);
	SpawnPlayerEx(dueller2);
	return 1;
}

stock SetPlayerTeamEx(playerid, teamid) {
	if(ServerAntiLag == false) SetPlayerTeam(playerid, teamid);
	else SetPlayerTeam(playerid, ANTILAG_TEAM);
}

stock SetSpawnInfoEx(playerid, teamid, skin, Float:xXx, Float:yYy, Float:zZz, Float:aAa, w1, a1, w2, a2, w3, a3) {
	if(ServerAntiLag == false) SetSpawnInfo(playerid, teamid, skin, xXx, yYy, zZz, aAa, w1, a1, w2, a2, w3, a3);
	else SetSpawnInfo(playerid, ANTILAG_TEAM, skin, xXx, yYy, zZz, aAa, w1, a1, w2, a2, w3, a3);
}

stock MoveIt(playerid, Float:toX, Float:toY, Float:toZ)
{
    new Float:FV[3], Float:CP[3];
	GetPlayerCameraPos(playerid, CP[0], CP[1], CP[2]);          // 	Cameras position in space
    GetPlayerCameraFrontVector(playerid, FV[0], FV[1], FV[2]);  //  Where the camera is looking at

	// Increases the acceleration multiplier the longer the key is held
	if(noclipdata[playerid][accelmul] <= 1) noclipdata[playerid][accelmul] += ACCEL_RATE;

	// Determine the speed to move the camera based on the acceleration multiplier
	new Float:speed = MOVE_SPEED * noclipdata[playerid][accelmul];

	// Calculate the cameras next position based on their current position and the direction their camera is facing
	MovePlayerObject(playerid, noclipdata[playerid][flyobject], toX - 20.0, toY - 10.0, toZ + 40.0, speed + 1000.0);

	// Store the last time the camera was moved as now
	noclipdata[playerid][lastmove] = GetTickCount();
	return 1;
}

stock PlayerFlyMode(playerid)
{
	// Create an invisible object for the players camera to be attached to
	if(Player[playerid][Spectating] == true) StopSpectate(playerid);

	if(Player[playerid][BeingSpeced] == true) {
	    foreach(new i : Player) {
	        if(Player[i][Spectating] == true && Player[i][IsSpectatingID] == playerid) {
	            StopSpectate(i);
			}
		}
	}

	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	noclipdata[playerid][flyobject] = CreatePlayerObject(playerid, 19300, X, Y, Z, 0.0, 0.0, 0.0);

	// Place the player in spectating mode so objects will be streamed based on camera location
	TogglePlayerSpectating(playerid, true);
	// Attach the players camera to the created object
	AttachCameraToPlayerObject(playerid, noclipdata[playerid][flyobject]);

	noclipdata[playerid][FlyMode] = true;
	Player[playerid][Spectating] = true;
	noclipdata[playerid][cameramode] = CAMERA_MODE_FLY;

	SetPlayerVirtualWorld(playerid, 0);
	return 1;
}

forward SetPosAfterFly(playerid, Float:tX, Float:tY, Float:tZ);
public SetPosAfterFly(playerid, Float:tX, Float:tY, Float:tZ)
{
	SetPlayerPos(playerid, tX, tY, tZ);
	return 1;
}

stock CancelFlyMode(playerid/*, bool:setpos = true*/)
{
	noclipdata[playerid][FlyMode] = false;

	CancelEdit(playerid);
//	new Float:X, Float:Y, Float:Z;
//	GetPlayerCameraPos(playerid, X, Y, Z);
	TogglePlayerSpectating(playerid, false);
//	if(setpos)
//		SetTimerEx("SetPosAfterFly", 1000, false, "ifff", playerid, X, Y, Z);


	DestroyPlayerObject(playerid, noclipdata[playerid][flyobject]);
	noclipdata[playerid][cameramode] = CAMERA_MODE_NONE;
	return 1;
}


stock GetNextCameraPosition(move_mode, Float:CP[3], Float:FV[3], &Float:vX, &Float:vY, &Float:vZ)
{
    // Calculate the cameras next position based on their current position and the direction their camera is facing
    #define OFFSET_X (FV[0]*6000.0)
	#define OFFSET_Y (FV[1]*6000.0)
	#define OFFSET_Z (FV[2]*6000.0)
	switch(move_mode)
	{
		case MOVE_FORWARD:
		{
			vX = CP[0]+OFFSET_X;
			vY = CP[1]+OFFSET_Y;
			vZ = CP[2]+OFFSET_Z;
		}
		case MOVE_BACK:
		{
			vX = CP[0]-OFFSET_X;
			vY = CP[1]-OFFSET_Y;
			vZ = CP[2]-OFFSET_Z;
		}
		case MOVE_LEFT:
		{
			vX = CP[0]-OFFSET_Y;
			vY = CP[1]+OFFSET_X;
			vZ = CP[2];
		}
		case MOVE_RIGHT:
		{
			vX = CP[0]+OFFSET_Y;
			vY = CP[1]-OFFSET_X;
			vZ = CP[2];
		}
		case MOVE_BACK_LEFT:
		{
			vX = CP[0]+(-OFFSET_X - OFFSET_Y);
 			vY = CP[1]+(-OFFSET_Y + OFFSET_X);
		 	vZ = CP[2]-OFFSET_Z;
		}
		case MOVE_BACK_RIGHT:
		{
			vX = CP[0]+(-OFFSET_X + OFFSET_Y);
 			vY = CP[1]+(-OFFSET_Y - OFFSET_X);
		 	vZ = CP[2]-OFFSET_Z;
		}
		case MOVE_FORWARD_LEFT:
		{
			vX = CP[0]+(OFFSET_X  - OFFSET_Y);
			vY = CP[1]+(OFFSET_Y  + OFFSET_X);
			vZ = CP[2]+OFFSET_Z;
		}
		case MOVE_FORWARD_RIGHT:
		{
			vX = CP[0]+(OFFSET_X  + OFFSET_Y);
			vY = CP[1]+(OFFSET_Y  - OFFSET_X);
			vZ = CP[2]+OFFSET_Z;
		}
	}
}

stock MoveCamera(playerid)
{
	new Float:FV[3], Float:CP[3];
	GetPlayerCameraPos(playerid, CP[0], CP[1], CP[2]);          // 	Cameras position in space
    GetPlayerCameraFrontVector(playerid, FV[0], FV[1], FV[2]);  //  Where the camera is looking at

	// Increases the acceleration multiplier the longer the key is held
	if(noclipdata[playerid][accelmul] <= 1) noclipdata[playerid][accelmul] += ACCEL_RATE;

	// Determine the speed to move the camera based on the acceleration multiplier
	new Float:speed = MOVE_SPEED * noclipdata[playerid][accelmul];

	// Calculate the cameras next position based on their current position and the direction their camera is facing
	new Float:X, Float:Y, Float:Z;
	GetNextCameraPosition(noclipdata[playerid][noclipcammode], CP, FV, X, Y, Z);
	MovePlayerObject(playerid, noclipdata[playerid][flyobject], X, Y, Z, speed);

	// Store the last time the camera was moved as now
	noclipdata[playerid][lastmove] = GetTickCount();
	return 1;
}


stock GetMoveDirectionFromKeys(ud, lr)
{
	new direction = 0;

    if(lr < 0)
	{
		if(ud < 0) 		direction = MOVE_FORWARD_LEFT; 	// Up & Left key pressed
		else if(ud > 0) direction = MOVE_BACK_LEFT; 	// Back & Left key pressed
		else            direction = MOVE_LEFT;          // Left key pressed
	}
	else if(lr > 0) 	// Right pressed
	{
		if(ud < 0)      direction = MOVE_FORWARD_RIGHT;  // Up & Right key pressed
		else if(ud > 0) direction = MOVE_BACK_RIGHT;     // Back & Right key pressed
		else			direction = MOVE_RIGHT;          // Right key pressed
	}
	else if(ud < 0) 	direction = MOVE_FORWARD; 	// Up key pressed
	else if(ud > 0) 	direction = MOVE_BACK;		// Down key pressed

	return direction;
}

stock ShowTargetInfo(playerid, targetid)
{
	if(targetid == INVALID_PLAYER_ID || playerid == INVALID_PLAYER_ID)
		return 1;

	if(ServerAntiLag == false) {
		if(GetPlayerTeam(targetid) == GetPlayerTeam(playerid) && GetPlayerTeam(playerid) != NO_TEAM)
		    return 1;
	}

//	if(TargetInfoShown[playerid] != true)

	new str[170];
	new vid = GetPlayerVehicleID(targetid);
	if(vid == 0)
	{
		format(str, sizeof str, "~n~~n~%sName: %s%s~n~%sPing: %s%d   %sFPS: %s%d~n~%sPL: %s%.1f   %sHP: %s%.0f",
			MAIN_TEXT_COLOUR, TDC[Player[targetid][Team]], Player[targetid][NameWithoutTag], MAIN_TEXT_COLOUR, TDC[Player[targetid][Team]],
			GetPlayerPing(targetid), MAIN_TEXT_COLOUR, TDC[Player[targetid][Team]], Player[targetid][FPS], MAIN_TEXT_COLOUR, TDC[Player[targetid][Team]], GetPlayerPacketLoss(targetid), MAIN_TEXT_COLOUR, TDC[Player[targetid][Team]], (Player[targetid][pHealth] + Player[targetid][pArmour]));
	}
	else
	{
	    new Float:vHP;
	    GetVehicleHealth(vid, vHP);
        format(str, sizeof str, "~n~~n~%sName: %s%s~n~%sPing: %s%d   %sFPS: %s%d~n~%sPL: %s%.1f   %sHP: %s%.0f~n~%sVehicle HP: %s%.1f",
			MAIN_TEXT_COLOUR, TDC[Player[targetid][Team]], Player[targetid][NameWithoutTag], MAIN_TEXT_COLOUR, TDC[Player[targetid][Team]],
			GetPlayerPing(targetid), MAIN_TEXT_COLOUR, TDC[Player[targetid][Team]], Player[targetid][FPS], MAIN_TEXT_COLOUR, TDC[Player[targetid][Team]], GetPlayerPacketLoss(targetid), MAIN_TEXT_COLOUR, TDC[Player[targetid][Team]], (Player[targetid][pHealth] + Player[targetid][pArmour]), MAIN_TEXT_COLOUR, TDC[Player[targetid][Team]], vHP / 100);
	}
	PlayerTextDrawSetString(playerid, TargetInfoTD, str);
	PlayerTextDrawShow(playerid, TargetInfoTD);

	KillTimer(TargetInfoTimer[playerid]);
	TargetInfoTimer[playerid] = SetTimerEx("HideTargetInfo", 4000, false, "i", playerid);
//	TargetInfoShown[playerid] = true;

	return 1;
}

forward HideTargetInfo(playerid);
public HideTargetInfo(playerid)
{
	PlayerTextDrawHide(playerid, TargetInfoTD);
  //  TargetInfoShown[playerid] = false;
	return 1;
}

/*  //a bitwise operation always faster though
	#define IsEven(%0) (!(%0 & 1))
*/

stock IsEven(integer)
{
	if(integer % 2 == 0)
		 return 1; // even
	return 0; // odd
}


stock IsSafeGametext(text[])
{
	new cnt = 0;
	for(new i = 0; i < strlen(text); i ++)
	{
		if(text[i] == '~')
			cnt ++;
	}
	if(IsEven(cnt) == 0)
		return 0;
	return 1;
}

stock ClearPlayerChat(playerid)
{
	for(new i = 0; i <= 10; i++) {
	    SendClientMessage(playerid, -1, " ");
	}
}

forward FixVsTextDraw();
public FixVsTextDraw()
{
	new iString[128];

	if(Current == -1)
	{
		new ct[2];
		foreach(new i : Player)
		{
			switch(Player[i][Team])
			{
			    case ATTACKER:
			    {
			        ct[0] ++;
			    }
			    case DEFENDER:
			    {
			        ct[1] ++;
			    }
			}
		}
	    format(iString, sizeof(iString), "  ~r~%d  %sVs  ~b~~h~%d", ct[0], MAIN_TEXT_COLOUR, ct[1]);
	} else {
		if(GameType == TDM)
		{
		    if(OneOnOne == false) format(iString, sizeof(iString), "%sTDM %s(~r~%d%s)", MAIN_TEXT_COLOUR, MAIN_TEXT_COLOUR, Current, MAIN_TEXT_COLOUR);
		}
		else if(GameType == ARENA)
		{
			if(OneOnOne == false) format(iString, sizeof(iString), "%sArena %s(~r~%d%s)", MAIN_TEXT_COLOUR, MAIN_TEXT_COLOUR, Current, MAIN_TEXT_COLOUR);
			else format(iString, sizeof(iString), "%sDuel %s(~r~%d%s)", MAIN_TEXT_COLOUR, MAIN_TEXT_COLOUR, Current, MAIN_TEXT_COLOUR);
	    } else {
	        format(iString, sizeof(iString), "%sBase %s(~r~%d%s)", MAIN_TEXT_COLOUR, MAIN_TEXT_COLOUR, Current, MAIN_TEXT_COLOUR);
	    }
	}

	foreach(new i : Player)
		PlayerTextDrawSetString(i, BaseID_VS, iString);
	return 1;
}

forward OnVoteBase();
public OnVoteBase()
{
	if(Current != -1) return 0;
	if(AllowStartBase == false) return 0;
	if(VoteInProgress == false) return 0;

	new iString[128];
    VotingTime--;
	format(iString, sizeof(iString), "%sRound voting has started~n~Time left: ~r~~h~%d %sseconds", MAIN_TEXT_COLOUR, VotingTime, MAIN_TEXT_COLOUR);
	TextDrawSetString(EN_CheckPoint, iString);
	TextDrawShowForAll(EN_CheckPoint);

    if(VotingTime <= 0)
    {
		VoteInProgress = false;

		new GreaterVotesBaseID;
		for(new i = 0; i < MAX_BASES; i++)
		{
			if(i != GreaterVotesBaseID)
			{
				if(VoteCount[i] > VoteCount[GreaterVotesBaseID])
				{
					GreaterVotesBaseID = i;
				}
			}
		}

		AllowStartBase = false;
		SetTimerEx("OnBaseStart", 2000, false, "i", GreaterVotesBaseID);
		format(iString, sizeof(iString), ""COL_PRIM"Voting has ended. System has started Base: {FFFFFF}%s (ID: %d)", BName[GreaterVotesBaseID], GreaterVotesBaseID);
		SendClientMessageToAll(-1, iString);
		VotingTime = 10;
		TextDrawHideForAll(EN_CheckPoint);
		GameType = BASE;
		foreach(new i : Player)
		{
		    if(CanPlay(i)) {
				TogglePlayerControllableEx(i, false);
				Player[i][ToAddInRound] = true;
				Player[i][HasVoted] = false;
			}
		}

  		return 1;
    }

    SetTimer("OnVoteBase",1000,0);
    return 0;
}

forward OnVoteArena();
public OnVoteArena()
{
	if(Current != -1) return 0;
	if(AllowStartBase == false) return 0;
	if(VoteInProgress == false) return 0;

	new iString[128];
    VotingTime--;
	format(iString, sizeof(iString), "%sRound voting has started~n~Time left: ~r~%d %sseconds", MAIN_TEXT_COLOUR, VotingTime, MAIN_TEXT_COLOUR);
	TextDrawSetString(EN_CheckPoint, iString);
	TextDrawShowForAll(EN_CheckPoint);

    if(VotingTime <= 0)
    {
		VoteInProgress = false;

		new GreaterVotesArenaID;
		for(new i = 0; i < MAX_ARENAS; i++)
		{
			if(i != GreaterVotesArenaID)
			{
				if(VoteCount[i] > VoteCount[GreaterVotesArenaID])
				{
					GreaterVotesArenaID = i;
				}
			}
		}

		AllowStartBase = false;
		SetTimerEx("OnArenaStart", 2000, false, "i", GreaterVotesArenaID);
		format(iString, sizeof(iString), ""COL_PRIM"Voting has ended. System has started Arena: {FFFFFF}%s (ID: %d)", AName[GreaterVotesArenaID], GreaterVotesArenaID);
		SendClientMessageToAll(-1, iString);
		VotingTime = 10;
		TextDrawHideForAll(EN_CheckPoint);
		GameType = ARENA;
		OneOnOne = false;
		foreach(new i : Player)
		{
		    if(CanPlay(i)) {
				TogglePlayerControllableEx(i, false);
				Player[i][ToAddInRound] = true;
				Player[i][HasVoted] = false;
			}
		}

  		return 1;
    }

    SetTimer("OnVoteArena",1000,0);
    return 0;
}



forward OnVoteTDM();
public OnVoteTDM()
{
	if(Current != -1) return 0;
	if(AllowStartBase == false) return 0;
	if(VoteInProgress == false) return 0;

	new iString[128];
    VotingTime--;
	format(iString, sizeof(iString), "%sRound voting has started~n~Time left: ~r~%d %sseconds", MAIN_TEXT_COLOUR, VotingTime, MAIN_TEXT_COLOUR);
	TextDrawSetString(EN_CheckPoint, iString);
	TextDrawShowForAll(EN_CheckPoint);

    if(VotingTime <= 0)
    {
		VoteInProgress = false;

		new GreaterVotesArenaID;
		for(new i = 0; i < MAX_ARENAS; i++)
		{
			if(i != GreaterVotesArenaID)
			{
				if(VoteCount[i] > VoteCount[GreaterVotesArenaID])
				{
					GreaterVotesArenaID = i;
				}
			}
		}

		AllowStartBase = false;
		SetTimerEx("OnArenaStart", 2000, false, "i", GreaterVotesArenaID);
		format(iString, sizeof(iString), ""COL_PRIM"Voting has ended. System has started TDM: {FFFFFF}%s (ID: %d)", AName[GreaterVotesArenaID], GreaterVotesArenaID);
		SendClientMessageToAll(-1, iString);
		VotingTime = 10;
		TextDrawHideForAll(EN_CheckPoint);
		GameType = TDM;
		OneOnOne = false;
		foreach(new i : Player)
		{
		    if(CanPlay(i)) {
				TogglePlayerControllableEx(i, false);
				Player[i][ToAddInRound] = true;
				Player[i][HasVoted] = false;
			}
		}

  		return 1;
    }

    SetTimer("OnVoteTDM",1000,0);
    return 0;
}

#if SKINICONS == 1
forward UpdateAliveForAll();
public UpdateAliveForAll()
{
	if (PlayersAlive[ATTACKER] < 1) {
		TextDrawHideForAll(A1);
		TextDrawHideForAll(A2);
	}
	else if (PlayersAlive[ATTACKER] == 1) {
		TextDrawShowForAll(A1);
		TextDrawHideForAll(A2);
		TextDrawHideForAll(A3);
	}
	else if (PlayersAlive[ATTACKER] == 2) {
		TextDrawShowForAll(A1);
		TextDrawShowForAll(A2);
		TextDrawHideForAll(A3);
		TextDrawHideForAll(A4);
	}
	else if (PlayersAlive[ATTACKER] == 3) {
		TextDrawShowForAll(A1);
		TextDrawShowForAll(A2);
		TextDrawShowForAll(A3);
		TextDrawHideForAll(A4);
		TextDrawHideForAll(A5);
	}
	else if (PlayersAlive[ATTACKER] == 4) {
		TextDrawShowForAll(A1);
		TextDrawShowForAll(A2);
		TextDrawShowForAll(A3);
		TextDrawShowForAll(A4);
		TextDrawHideForAll(A5);
		TextDrawHideForAll(A6);
	}
	else if (PlayersAlive[ATTACKER] == 5) {
		TextDrawShowForAll(A1);
		TextDrawShowForAll(A2);
		TextDrawShowForAll(A3);
		TextDrawShowForAll(A4);
		TextDrawShowForAll(A5);
		TextDrawHideForAll(A6);
	    TextDrawHideForAll(A7);
	}
	else if (PlayersAlive[ATTACKER] == 6) {
		TextDrawShowForAll(A1);
		TextDrawShowForAll(A2);
		TextDrawShowForAll(A3);
		TextDrawShowForAll(A4);
		TextDrawShowForAll(A5);
		TextDrawShowForAll(A6);
	    TextDrawHideForAll(A7);
	    TextDrawHideForAll(A8);
	}
	else if (PlayersAlive[ATTACKER] == 7) {
		TextDrawShowForAll(A1);
		TextDrawShowForAll(A2);
		TextDrawShowForAll(A3);
		TextDrawShowForAll(A4);
		TextDrawShowForAll(A5);
		TextDrawShowForAll(A6);
		TextDrawShowForAll(A7);
	    TextDrawHideForAll(A8);
	    TextDrawHideForAll(A9);
	}
	else if (PlayersAlive[ATTACKER] == 8) {
		TextDrawShowForAll(A1);
		TextDrawShowForAll(A2);
		TextDrawShowForAll(A3);
		TextDrawShowForAll(A4);
		TextDrawShowForAll(A5);
		TextDrawShowForAll(A6);
		TextDrawShowForAll(A7);
		TextDrawShowForAll(A8);
	    TextDrawHideForAll(A9);
	    TextDrawHideForAll(A10);
	}
	else if (PlayersAlive[ATTACKER] == 9) {
		TextDrawShowForAll(A1);
		TextDrawShowForAll(A2);
		TextDrawShowForAll(A3);
		TextDrawShowForAll(A4);
		TextDrawShowForAll(A5);
		TextDrawShowForAll(A6);
		TextDrawShowForAll(A7);
		TextDrawShowForAll(A8);
		TextDrawShowForAll(A9);
	    TextDrawHideForAll(A10);
	}
	else if (PlayersAlive[ATTACKER] > 9) {
		TextDrawShowForAll(A1);
		TextDrawShowForAll(A2);
		TextDrawShowForAll(A3);
		TextDrawShowForAll(A4);
		TextDrawShowForAll(A5);
		TextDrawShowForAll(A6);
		TextDrawShowForAll(A7);
		TextDrawShowForAll(A8);
		TextDrawShowForAll(A9);
	    TextDrawShowForAll(A10);
	}


	if (PlayersAlive[DEFENDER] < 1) {
		TextDrawHideForAll(D1);
		TextDrawHideForAll(D2);
	}
	else if (PlayersAlive[DEFENDER] == 1) {
		TextDrawShowForAll(D1);
		TextDrawHideForAll(D2);
		TextDrawHideForAll(D3);
	}
	else if (PlayersAlive[DEFENDER] == 2) {
		TextDrawShowForAll(D1);
		TextDrawShowForAll(D2);
		TextDrawHideForAll(D3);
		TextDrawHideForAll(D4);
	}
	else if (PlayersAlive[DEFENDER] == 3) {
		TextDrawShowForAll(D1);
		TextDrawShowForAll(D2);
		TextDrawShowForAll(D3);
		TextDrawHideForAll(D4);
		TextDrawHideForAll(D5);
	}
	else if (PlayersAlive[DEFENDER] == 4) {
		TextDrawShowForAll(D1);
		TextDrawShowForAll(D2);
		TextDrawShowForAll(D3);
		TextDrawShowForAll(D4);
		TextDrawHideForAll(D5);
		TextDrawHideForAll(D6);
	}
	else if (PlayersAlive[DEFENDER] == 5) {
		TextDrawShowForAll(D1);
		TextDrawShowForAll(D2);
		TextDrawShowForAll(D3);
		TextDrawShowForAll(D4);
		TextDrawShowForAll(D5);
		TextDrawHideForAll(D6);
		TextDrawHideForAll(D7);
	}
	else if (PlayersAlive[DEFENDER] == 6) {
		TextDrawShowForAll(D1);
		TextDrawShowForAll(D2);
		TextDrawShowForAll(D3);
		TextDrawShowForAll(D4);
		TextDrawShowForAll(D5);
		TextDrawShowForAll(D6);
		TextDrawHideForAll(D7);
		TextDrawHideForAll(D8);
	}
	else if (PlayersAlive[DEFENDER] == 7) {
		TextDrawShowForAll(D1);
		TextDrawShowForAll(D2);
		TextDrawShowForAll(D3);
		TextDrawShowForAll(D4);
		TextDrawShowForAll(D5);
		TextDrawShowForAll(D6);
		TextDrawShowForAll(D7);
		TextDrawHideForAll(D8);
		TextDrawHideForAll(D9);
	}
	else if (PlayersAlive[DEFENDER] == 8) {
		TextDrawShowForAll(D1);
		TextDrawShowForAll(D2);
		TextDrawShowForAll(D3);
		TextDrawShowForAll(D4);
		TextDrawShowForAll(D5);
		TextDrawShowForAll(D6);
		TextDrawShowForAll(D7);
		TextDrawShowForAll(D8);
		TextDrawHideForAll(D9);
		TextDrawHideForAll(D10);
	}
	else if (PlayersAlive[DEFENDER] == 9) {
		TextDrawShowForAll(D1);
		TextDrawShowForAll(D2);
		TextDrawShowForAll(D3);
		TextDrawShowForAll(D4);
		TextDrawShowForAll(D5);
		TextDrawShowForAll(D6);
		TextDrawShowForAll(D7);
		TextDrawShowForAll(D8);
		TextDrawShowForAll(D9);
		TextDrawHideForAll(D10);
	}
	else if (PlayersAlive[DEFENDER] > 9) {
		TextDrawShowForAll(D1);
		TextDrawShowForAll(D2);
		TextDrawShowForAll(D3);
		TextDrawShowForAll(D4);
		TextDrawShowForAll(D5);
		TextDrawShowForAll(D6);
		TextDrawShowForAll(D7);
		TextDrawShowForAll(D8);
		TextDrawShowForAll(D9);
		TextDrawShowForAll(D10);
	}
}

stock UpdateAliveForPlayer(playerid)
{
	if (PlayersAlive[ATTACKER] < 1) {
		TextDrawHideForPlayer(playerid,A1);
		TextDrawHideForPlayer(playerid,A2);
	}
	else if (PlayersAlive[ATTACKER] == 1) {
		TextDrawShowForPlayer(playerid,A1);
		TextDrawHideForPlayer(playerid,A2);
		TextDrawHideForPlayer(playerid,A3);
	}
	else if (PlayersAlive[ATTACKER] == 2) {
		TextDrawShowForPlayer(playerid,A1);
		TextDrawShowForPlayer(playerid,A2);
		TextDrawHideForPlayer(playerid,A3);
		TextDrawHideForPlayer(playerid,A4);
	}
	else if (PlayersAlive[ATTACKER] == 3) {
		TextDrawShowForPlayer(playerid,A1);
		TextDrawShowForPlayer(playerid,A2);
		TextDrawShowForPlayer(playerid,A3);
		TextDrawHideForPlayer(playerid,A4);
		TextDrawHideForPlayer(playerid,A5);
	}
	else if (PlayersAlive[ATTACKER] == 4) {
		TextDrawShowForPlayer(playerid,A1);
		TextDrawShowForPlayer(playerid,A2);
		TextDrawShowForPlayer(playerid,A3);
		TextDrawShowForPlayer(playerid,A4);
		TextDrawHideForPlayer(playerid,A5);
		TextDrawHideForPlayer(playerid,A6);
	}
	else if (PlayersAlive[ATTACKER] == 5) {
		TextDrawShowForPlayer(playerid,A1);
		TextDrawShowForPlayer(playerid,A2);
		TextDrawShowForPlayer(playerid,A3);
		TextDrawShowForPlayer(playerid,A4);
		TextDrawShowForPlayer(playerid,A5);
		TextDrawHideForPlayer(playerid,A6);
	    TextDrawHideForPlayer(playerid,A7);
	}
	else if (PlayersAlive[ATTACKER] == 6) {
		TextDrawShowForPlayer(playerid,A1);
		TextDrawShowForPlayer(playerid,A2);
		TextDrawShowForPlayer(playerid,A3);
		TextDrawShowForPlayer(playerid,A4);
		TextDrawShowForPlayer(playerid,A5);
		TextDrawShowForPlayer(playerid,A6);
	    TextDrawHideForPlayer(playerid,A7);
	    TextDrawHideForPlayer(playerid,A8);
	}
	else if (PlayersAlive[ATTACKER] == 7) {
		TextDrawShowForPlayer(playerid,A1);
		TextDrawShowForPlayer(playerid,A2);
		TextDrawShowForPlayer(playerid,A3);
		TextDrawShowForPlayer(playerid,A4);
		TextDrawShowForPlayer(playerid,A5);
		TextDrawShowForPlayer(playerid,A6);
		TextDrawShowForPlayer(playerid,A7);
	    TextDrawHideForPlayer(playerid,A8);
	    TextDrawHideForPlayer(playerid,A9);
	}
	else if (PlayersAlive[ATTACKER] == 8) {
		TextDrawShowForPlayer(playerid,A1);
		TextDrawShowForPlayer(playerid,A2);
		TextDrawShowForPlayer(playerid,A3);
		TextDrawShowForPlayer(playerid,A4);
		TextDrawShowForPlayer(playerid,A5);
		TextDrawShowForPlayer(playerid,A6);
		TextDrawShowForPlayer(playerid,A7);
	    TextDrawShowForPlayer(playerid,A8);
	    TextDrawHideForPlayer(playerid,A9);
	    TextDrawHideForPlayer(playerid,A10);
	}
	else if (PlayersAlive[ATTACKER] == 9) {
		TextDrawShowForPlayer(playerid,A1);
		TextDrawShowForPlayer(playerid,A2);
		TextDrawShowForPlayer(playerid,A3);
		TextDrawShowForPlayer(playerid,A4);
		TextDrawShowForPlayer(playerid,A5);
		TextDrawShowForPlayer(playerid,A6);
		TextDrawShowForPlayer(playerid,A7);
	    TextDrawShowForPlayer(playerid,A8);
	    TextDrawShowForPlayer(playerid,A9);
	    TextDrawHideForPlayer(playerid,A10);
	}
	else if (PlayersAlive[ATTACKER] > 9) {
		TextDrawShowForPlayer(playerid,A1);
		TextDrawShowForPlayer(playerid,A2);
		TextDrawShowForPlayer(playerid,A3);
		TextDrawShowForPlayer(playerid,A4);
		TextDrawShowForPlayer(playerid,A5);
		TextDrawShowForPlayer(playerid,A6);
		TextDrawShowForPlayer(playerid,A7);
	    TextDrawShowForPlayer(playerid,A8);
	    TextDrawShowForPlayer(playerid,A9);
	    TextDrawShowForPlayer(playerid,A10);
	}


	if (PlayersAlive[DEFENDER] < 1) {
		TextDrawHideForPlayer(playerid,D1);
		TextDrawHideForPlayer(playerid,D2);
	}
	else if (PlayersAlive[DEFENDER] == 1) {
		TextDrawShowForPlayer(playerid,D1);
		TextDrawHideForPlayer(playerid,D2);
		TextDrawHideForPlayer(playerid,D3);
	}
	else if (PlayersAlive[DEFENDER] == 2) {
		TextDrawShowForPlayer(playerid,D1);
		TextDrawShowForPlayer(playerid,D2);
		TextDrawHideForPlayer(playerid,D3);
		TextDrawHideForPlayer(playerid,D4);
	}
	else if (PlayersAlive[DEFENDER] == 3) {
		TextDrawShowForPlayer(playerid,D1);
		TextDrawShowForPlayer(playerid,D2);
		TextDrawShowForPlayer(playerid,D3);
		TextDrawHideForPlayer(playerid,D4);
		TextDrawHideForPlayer(playerid,D5);
	}
	else if (PlayersAlive[DEFENDER] == 4) {
		TextDrawShowForPlayer(playerid,D1);
		TextDrawShowForPlayer(playerid,D2);
		TextDrawShowForPlayer(playerid,D3);
		TextDrawShowForPlayer(playerid,D4);
		TextDrawHideForPlayer(playerid,D5);
		TextDrawHideForPlayer(playerid,D6);
	}
	else if (PlayersAlive[DEFENDER] == 5) {
		TextDrawShowForPlayer(playerid,D1);
		TextDrawShowForPlayer(playerid,D2);
		TextDrawShowForPlayer(playerid,D3);
		TextDrawShowForPlayer(playerid,D4);
		TextDrawShowForPlayer(playerid,D5);
		TextDrawHideForPlayer(playerid,D6);
		TextDrawHideForPlayer(playerid,D7);
	}
	else if (PlayersAlive[DEFENDER] == 6) {
		TextDrawShowForPlayer(playerid,D1);
		TextDrawShowForPlayer(playerid,D2);
		TextDrawShowForPlayer(playerid,D3);
		TextDrawShowForPlayer(playerid,D4);
		TextDrawShowForPlayer(playerid,D5);
		TextDrawShowForPlayer(playerid,D6);
		TextDrawHideForPlayer(playerid,D7);
		TextDrawHideForPlayer(playerid,D8);
	}
	else if (PlayersAlive[DEFENDER] == 7) {
		TextDrawShowForPlayer(playerid,D1);
		TextDrawShowForPlayer(playerid,D2);
		TextDrawShowForPlayer(playerid,D3);
		TextDrawShowForPlayer(playerid,D4);
		TextDrawShowForPlayer(playerid,D5);
		TextDrawShowForPlayer(playerid,D6);
		TextDrawShowForPlayer(playerid,D7);
		TextDrawHideForPlayer(playerid,D8);
		TextDrawHideForPlayer(playerid,D9);
	}
	else if (PlayersAlive[DEFENDER] == 8) {
		TextDrawShowForPlayer(playerid,D1);
		TextDrawShowForPlayer(playerid,D2);
		TextDrawShowForPlayer(playerid,D3);
		TextDrawShowForPlayer(playerid,D4);
		TextDrawShowForPlayer(playerid,D5);
		TextDrawShowForPlayer(playerid,D6);
		TextDrawShowForPlayer(playerid,D7);
		TextDrawShowForPlayer(playerid,D8);
		TextDrawHideForPlayer(playerid,D9);
		TextDrawHideForPlayer(playerid,D10);
	}
	else if (PlayersAlive[DEFENDER] == 9) {
		TextDrawShowForPlayer(playerid,D1);
		TextDrawShowForPlayer(playerid,D2);
		TextDrawShowForPlayer(playerid,D3);
		TextDrawShowForPlayer(playerid,D4);
		TextDrawShowForPlayer(playerid,D5);
		TextDrawShowForPlayer(playerid,D6);
		TextDrawShowForPlayer(playerid,D7);
		TextDrawShowForPlayer(playerid,D8);
		TextDrawShowForPlayer(playerid,D9);
		TextDrawHideForPlayer(playerid,D10);
	}
	else if (PlayersAlive[DEFENDER] > 9) {
		TextDrawShowForPlayer(playerid,D1);
		TextDrawShowForPlayer(playerid,D2);
		TextDrawShowForPlayer(playerid,D3);
		TextDrawShowForPlayer(playerid,D4);
		TextDrawShowForPlayer(playerid,D5);
		TextDrawShowForPlayer(playerid,D6);
		TextDrawShowForPlayer(playerid,D7);
		TextDrawShowForPlayer(playerid,D8);
		TextDrawShowForPlayer(playerid,D9);
		TextDrawShowForPlayer(playerid,D10);
	}
}


stock HideAllForAll()
{
	TextDrawHideForAll(A1);
	TextDrawHideForAll(A2);
	TextDrawHideForAll(A3);
	TextDrawHideForAll(A4);
	TextDrawHideForAll(A5);
	TextDrawHideForAll(A6);
	TextDrawHideForAll(A7);
	TextDrawHideForAll(A8);
	TextDrawHideForAll(A9);
	TextDrawHideForAll(A10);

	TextDrawHideForAll(D1);
	TextDrawHideForAll(D2);
	TextDrawHideForAll(D3);
	TextDrawHideForAll(D4);
	TextDrawHideForAll(D5);
	TextDrawHideForAll(D6);
	TextDrawHideForAll(D7);
	TextDrawHideForAll(D8);
	TextDrawHideForAll(D9);
	TextDrawHideForAll(D10);
}
#endif


forward HideAnnForAll();
public HideAnnForAll()
{
	TextDrawHideForAll(AnnTD);
}


forward hidew0(playerid);
public hidew0(playerid)
{
	DestroyObject(w0[playerid]);
	GotHit[playerid] = 0;
	return 1;
}


stock CanPlay(playerid)
{
    if(noclipdata[playerid][FlyMode] == true)
		return 0;

    if(!(Player[playerid][Team] == ATTACKER || Player[playerid][Team] == DEFENDER))
		return 0; // can not play

	if(CreatingTextO[playerid])
		return 0; // can not play


	return 1; // can play
}

stock IsValidSound(soundid) {
	for(new i=0; i < sizeof(ValidSounds); ++i) {
		if(ValidSounds[i] == soundid) return 1;
	}
	return 0;
}

stock HPArmourBaseID_VS_TD(playerid) {
	PlayerTextDrawDestroy(playerid, HPTextDraw_TD);
	PlayerTextDrawDestroy(playerid, ArmourTextDraw);
	PlayerTextDrawDestroy(playerid, BaseID_VS);
	
	DestroyPlayerProgressBar(playerid, HealthBar);
	DestroyPlayerProgressBar(playerid, ArmourBar);
	
	HealthBar = CreatePlayerProgressBar(playerid, 548.000000, 64.000000, 63.000000, 10.000000, 16711935, 100.000000, BAR_DIRECTION_RIGHT);
	ArmourBar = CreatePlayerProgressBar(playerid, 548.000000, 46.000000, 63.000000, 10.000000, 16711935, 100.000000, BAR_DIRECTION_RIGHT);
	ShowPlayerProgressBar(playerid, HealthBar);
    ShowPlayerProgressBar(playerid, ArmourBar);

	if(Player[playerid][TextPos] == false) {
		HPTextDraw_TD = CreatePlayerTextDraw(playerid,577, 67.7, "_");
		PlayerTextDrawBackgroundColor(playerid, HPTextDraw_TD, MAIN_BACKGROUND_COLOUR);
		PlayerTextDrawFont(playerid, HPTextDraw_TD, 2);
	    PlayerTextDrawLetterSize(playerid, HPTextDraw_TD, 0.1599, 0.6999);
		PlayerTextDrawColor(playerid, HPTextDraw_TD, 16711935);
		PlayerTextDrawSetOutline(playerid, HPTextDraw_TD, 0);
		PlayerTextDrawSetProportional(playerid, HPTextDraw_TD, 1);
		PlayerTextDrawSetShadow(playerid, HPTextDraw_TD,0);
		PlayerTextDrawAlignment(playerid, HPTextDraw_TD, 2);

		ArmourTextDraw = CreatePlayerTextDraw(playerid,577, 45.7, "_");
		PlayerTextDrawBackgroundColor(playerid, ArmourTextDraw, MAIN_BACKGROUND_COLOUR);
		PlayerTextDrawFont(playerid, ArmourTextDraw, 2);
	    PlayerTextDrawLetterSize(playerid, ArmourTextDraw, 0.1599, 0.6999);
		PlayerTextDrawColor(playerid, ArmourTextDraw, 16711935);
		PlayerTextDrawSetOutline(playerid, ArmourTextDraw, 0);
		PlayerTextDrawSetProportional(playerid, ArmourTextDraw, 1);
		PlayerTextDrawSetShadow(playerid, ArmourTextDraw,0);
		PlayerTextDrawAlignment(playerid, ArmourTextDraw, 2);

	    BaseID_VS = CreatePlayerTextDraw(playerid, 548.000000, 25.000000,"_");
		PlayerTextDrawFont(playerid, BaseID_VS, 1);
		PlayerTextDrawLetterSize(playerid, BaseID_VS, 0.26000, 1.500000);
		PlayerTextDrawBackgroundColor(playerid, BaseID_VS,MAIN_BACKGROUND_COLOUR);
		PlayerTextDrawColor(playerid, BaseID_VS,-65281);
		PlayerTextDrawSetOutline(playerid, BaseID_VS,1);
	    PlayerTextDrawSetProportional(playerid, BaseID_VS, 1);
	    PlayerTextDrawSetShadow(playerid, BaseID_VS,0);
	} else {
		HPTextDraw_TD = CreatePlayerTextDraw(playerid,598, 51, "_");
		PlayerTextDrawBackgroundColor(playerid, HPTextDraw_TD, MAIN_BACKGROUND_COLOUR);
		PlayerTextDrawFont(playerid, HPTextDraw_TD, 2);
	    PlayerTextDrawLetterSize(playerid, HPTextDraw_TD, 0.1599, 0.6999);
		PlayerTextDrawColor(playerid, HPTextDraw_TD, 16711935);
		PlayerTextDrawSetOutline(playerid, HPTextDraw_TD, 0);
		PlayerTextDrawSetProportional(playerid, HPTextDraw_TD, 1);
		PlayerTextDrawSetShadow(playerid, HPTextDraw_TD,0);
		PlayerTextDrawAlignment(playerid, HPTextDraw_TD, 2);

		ArmourTextDraw = CreatePlayerTextDraw(playerid,598, 34, "_");
		PlayerTextDrawBackgroundColor(playerid, ArmourTextDraw, MAIN_BACKGROUND_COLOUR);
		PlayerTextDrawFont(playerid, ArmourTextDraw, 2);
	    PlayerTextDrawLetterSize(playerid, ArmourTextDraw, 0.1599, 0.6999);
		PlayerTextDrawColor(playerid, ArmourTextDraw, 16711935);
		PlayerTextDrawSetOutline(playerid, ArmourTextDraw, 0);
		PlayerTextDrawSetProportional(playerid, ArmourTextDraw, 1);
		PlayerTextDrawSetShadow(playerid, ArmourTextDraw,0);
		PlayerTextDrawAlignment(playerid, ArmourTextDraw, 2);

	    BaseID_VS = CreatePlayerTextDraw(playerid, 575.000000, 19.000000,"_");
		PlayerTextDrawFont(playerid, BaseID_VS, 1);
		PlayerTextDrawLetterSize(playerid, BaseID_VS, 0.26000, 1.500000);
		PlayerTextDrawBackgroundColor(playerid, BaseID_VS,MAIN_BACKGROUND_COLOUR);
		PlayerTextDrawColor(playerid, BaseID_VS,-65281);
		PlayerTextDrawSetOutline(playerid, BaseID_VS,1);
	    PlayerTextDrawSetProportional(playerid, BaseID_VS, 1);
	    PlayerTextDrawSetShadow(playerid, BaseID_VS,0);
	}
	return 1;
}

stock DB_Escape(text[]){
	new
		ret[MAX_INI_ENTRY_TEXT * 2],
		ch,
		i,
		j;
	while ((ch = text[i++]) && j < sizeof (ret))
	{
		if (ch == '\'')
		{
			if (j < sizeof (ret) - 2)
			{
				ret[j++] = '\'';
				ret[j++] = '\'';
			}
		}
		else if (j < sizeof (ret))
		{
			ret[j++] = ch;
		}
		else
		{
			j++;
		}
	}
	ret[sizeof (ret) - 1] = '\0';
	return ret;
}



stock SpawnInAntiLag(playerid) {

	new Pos = random(6);
	SetSpawnInfoEx(playerid, 5, Skin[Player[playerid][Team]], AntiLagSpawn[Pos][0]+random(2), AntiLagSpawn[Pos][1]+random(2), AntiLagSpawn[Pos][2]+0.5, AntiLagSpawn[Pos][3], 0, 0, 0, 0, 0, 0);
	Player[playerid][IgnoreSpawn] = true;
	SpawnPlayerEx(playerid);

	//SetPlayerPos(playerid,AntiLagSpawn[Pos][0],AntiLagSpawn[Pos][1],AntiLagSpawn[Pos][2]);
	//SetPlayerFacingAngle(playerid,AntiLagSpawn[Pos][3]);

	SetPlayerInterior(playerid, 	10);
	SetPlayerVirtualWorld(playerid, 1);

	SetHP(playerid,	100.0);
	SetAP(playerid,	100.0);

    GivePlayerWeapon(playerid, SHOTGUN, 9996);
    GivePlayerWeapon(playerid, SNIPER, 	9996);
    GivePlayerWeapon(playerid, M4, 		9996);
    GivePlayerWeapon(playerid, MP5, 	9996);
	GivePlayerWeapon(playerid, DEAGLE, 	9996);

	SetPlayerTeamEx(playerid, 5);
}


stock ESLRules() {
	new iString[256];
	strcat(iString, "~w~~h~Gamemode Rules:-~n~");
	strcat(iString, "~n~~w~~h~| No Cheating, Flaming, Spamming and Racism.");
	strcat(iString, "~n~~w~~h~| No Car/Heli killing or ramming.");
	format(iString, sizeof(iString), "%s~n~~w~~h~| Max Packetloss: ~r~~h~%.2f~w~~h~	|	Max Ping: ~r~~h~%d~w~~h~	|	Min FPS: ~r~~h~%d", iString, Max_Packetloss, Max_Ping, Min_FPS);
	TextDrawSetString(introRules,iString);

	iString = "~n~~n~~n~~w~~h~Starting Commands: /help, /cmds, /acmds, /updates";
	strcat(iString, "~n~~w~~h~| Report bugs and add suggestions in, ~b~~h~sixtytiger.com");
	strcat(iString, "~n~~w~~h~| No complaining/crying about random shit or ~r~~h~DDoSed");
	strcat(iString, "		/eslcmds, /topduels, /votenetcheck");
	strcat(iString, "~n~~r~| No Car/Hali killing.");

	TextDrawSetString(introRules2, iString);
}


forward ShowESLHelpDiag(playerid);
public ShowESLHelpDiag(playerid)
{
	if(!Player[playerid][Playing])
		ESLHelpDialog(playerid);
	return 1;
}

stock ESLHelpDialog(playerid) {

    EslString = "";
	strcat(EslString, ""COL_PRIM"\t\t\t\t\t>> ESL Mode <<");
    strcat(EslString, "\n\n"COL_PRIM"To Enable/Disable the ESL mode, use: {FFFFFF}/eslmode");
    strcat(EslString, "\n"COL_PRIM"ESL Limits: {FFFFFF}Maximum Packetloss: 2.0 | Maximum Ping: 350 | Minimum FPS: 35 "COL_PRIM"** Unchangable");
	strcat(EslString, "\n\n"COL_PRIM"Make sure you have your SAMP opened from the ESL wire and you are using a clean GTA-SA.");
	strcat(EslString, "\n"COL_PRIM"Select your team as Alpha or Beta based on the team that the ESL match-board selected for you.");
	strcat(EslString, "\n\n"COL_PRIM"Useful commands: {FFFFFF}/ready, /voters, /maxplayers, /votekick, /1on1, /votenetcheck");

	ShowPlayerDialog(playerid,DIALOG_ESL_TEAMS,DIALOG_STYLE_MSGBOX," ", EslString, "Alpha","Beta");
}

stock ResetScoresForESL() {
	new iString[180];
    ESLMode = true;

    TeamScore[ATTACKER] = 0;
    TeamScore[DEFENDER] = 0;
    CurrentRound = 0;

    if(OneOnOne == false) TotalRounds = 5;
    else TotalRounds = 19;


	TeamName[ATTACKER] = "Alpha";
	TeamName[ATTACKER_SUB] = "Alpha Sub";
	TeamName[DEFENDER] = "Beta";
	TeamName[DEFENDER_SUB] = "Beta Sub";

	format(iString, sizeof(iString), "~r~%s %s(~r~%d%s)  ~b~~h~%s %s(~b~~h~%d%s)",TeamName[ATTACKER],MAIN_TEXT_COLOUR,TeamScore[ATTACKER],MAIN_TEXT_COLOUR,TeamName[DEFENDER],MAIN_TEXT_COLOUR,TeamScore[DEFENDER],MAIN_TEXT_COLOUR);
    TextDrawSetString(TeamScoreText, iString);

	format(iString, sizeof(iString), "%sRounds ~r~~h~%d~r~/~h~~h~%d", MAIN_TEXT_COLOUR, CurrentRound, TotalRounds);
	TextDrawSetString(RoundsPlayed, iString);

	if(WarMode == false) {
		WarMode = true;
	    format(iString, sizeof iString, "%sWar Mode: ~r~ON", MAIN_TEXT_COLOUR);
		TextDrawSetString(WarModeText, iString);
	}

	TextDrawShowForAll(RoundsPlayed);
	TextDrawShowForAll(TeamScoreText);

	foreach(new i : Player) {
	    for(new j = 0; j < 55; j ++)
			Player[i][WeaponStat][j] = 0;
		Player[i][TotalKills] = 0;
		Player[i][TotalDeaths] = 0;
		Player[i][TotalDamage] = 0;
		Player[i][RoundPlayed] = 0;
	    Player[i][TotalBulletsFired] = 0;
	    Player[i][TotalshotsHit] = 0;

		Player[i][Readied] = false;

		if(Player[i][TextPos] == false) format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDamage ~r~%.0f~n~%sTotal Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[i][RoundKills], MAIN_TEXT_COLOUR, Player[i][RoundDamage], MAIN_TEXT_COLOUR, Player[i][TotalDamage]);
		else format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDmg ~r~%.0f~n~%sT. Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[i][RoundKills], MAIN_TEXT_COLOUR, Player[i][RoundDamage], MAIN_TEXT_COLOUR, Player[i][TotalDamage]);
		PlayerTextDrawSetString(i, RoundKillDmgTDmg, iString);
	}
	ClearPlayerVariables();
}


stock TogglePlayerControllableEx(playerid, bool:Set) {
	if(Set == false) Player[playerid][IsFrozen] = true;
	else Player[playerid][IsFrozen] = false;

	TogglePlayerControllable(playerid, Set);
}

stock GetVehicleNeedFlip(vehicleid) {//return 1 if need, 0 if not
    new Float:Quat[2];
    GetVehicleRotationQuat(vehicleid, Quat[0], Quat[1], Quat[0], Quat[0]);
    return (Quat[1] >= 0.60 || Quat[1] <= -0.60);
}


stock GetWeaponID(weaponname[]) {
    for(new i = 0; i < 55; ++i) {
        if(strfind(WeaponNames[i], weaponname, true) != -1)
        return i;
    }
    return -1;
}

#if PLUGINS == 0
stock sscanf(string[], format[], {Float,_}:...)
{
	#if defined isnull
		if (isnull(string))
	#else
		if (string[0] == 0 || (string[0] == 1 && string[1] == 0))
	#endif
		{
			return format[0];
		}
	#pragma tabsize 4
	new
		formatPos = 0,
		stringPos = 0,
		paramPos = 2,
		paramCount = numargs(),
		delim = ' ';
	while (string[stringPos] && string[stringPos] <= ' ')
	{
		stringPos++;
	}
	while (paramPos < paramCount && string[stringPos])
	{
		switch (format[formatPos++])
		{
			case '\0':
			{
				return 0;
			}
			case 'i', 'd':
			{
				new
					neg = 1,
					num = 0,
					ch = string[stringPos];
				if (ch == '-')
				{
					neg = -1;
					ch = string[++stringPos];
				}
				do
				{
					stringPos++;
					if ('0' <= ch <= '9')
					{
						num = (num * 10) + (ch - '0');
					}
					else
					{
						return -1;
					}
				}
				while ((ch = string[stringPos]) > ' ' && ch != delim);
				setarg(paramPos, 0, num * neg);
			}
			case 'h', 'x':
			{
				new
					num = 0,
					ch = string[stringPos];
				do
				{
					stringPos++;
					switch (ch)
					{
						case 'x', 'X':
						{
							num = 0;
							continue;
						}
						case '0' .. '9':
						{
							num = (num << 4) | (ch - '0');
						}
						case 'a' .. 'f':
						{
							num = (num << 4) | (ch - ('a' - 10));
						}
						case 'A' .. 'F':
						{
							num = (num << 4) | (ch - ('A' - 10));
						}
						default:
						{
							return -1;
						}
					}
				}
				while ((ch = string[stringPos]) > ' ' && ch != delim);
				setarg(paramPos, 0, num);
			}
			case 'c':
			{
				setarg(paramPos, 0, string[stringPos++]);
			}
			case 'f':
			{

				new changestr[256], changepos = 0, strpos = stringPos;
				while(changepos < 16 && string[strpos] && string[strpos] != delim)
				{
					changestr[changepos++] = string[strpos++];
    				}
				changestr[changepos] = '\0';
				setarg(paramPos,0,_:floatstr(changestr));
			}
			case 'p':
			{
				delim = format[formatPos++];
				continue;
			}
			case '\'':
			{
				new
					end = formatPos - 1,
					ch;
				while ((ch = format[++end]) && ch != '\'') {}
				if (!ch)
				{
					return -1;
				}
				format[end] = '\0';
				if ((ch = strfind(string, format[formatPos], false, stringPos)) == -1)
				{
					if (format[end + 1])
					{
						return -1;
					}
					return 0;
				}
				format[end] = '\'';
				stringPos = ch + (end - formatPos);
				formatPos = end + 1;
			}
			case 'u':
			{
				new
					end = stringPos - 1,
					id = 0,
					bool:num = true,
					ch;
				while ((ch = string[++end]) && ch != delim)
				{
					if (num)
					{
						if ('0' <= ch <= '9')
						{
							id = (id * 10) + (ch - '0');
						}
						else
						{
							num = false;
						}
					}
				}
				if (num && IsPlayerConnected(id))
				{
					setarg(paramPos, 0, id);
				}
				else
				{
					#if !defined foreach
						#define foreach(%1,%2) for (new %2 = 0; %2 < MAX_PLAYERS; %2++) if (IsPlayerConnected(%2))
						#define __SSCANF_FOREACH__
					#endif
					string[end] = '\0';
					num = false;
					new
						name[MAX_PLAYER_NAME];
					id = end - stringPos;
					foreach (Player, playerid)
					{
						GetPlayerName(playerid, name, sizeof (name));
						if (!strcmp(name, string[stringPos], true, id))
						{
							setarg(paramPos, 0, playerid);
							num = true;
							break;
						}
					}
					if (!num)
					{
						setarg(paramPos, 0, INVALID_PLAYER_ID);
					}
					string[end] = ch;
					#if defined __SSCANF_FOREACH__
						#undef foreach
						#undef __SSCANF_FOREACH__
					#endif
				}
				stringPos = end;
			}
			case 's', 'z':
			{
				new
					i = 0,
					ch;
				if (format[formatPos])
				{
					while ((ch = string[stringPos++]) && ch != delim)
					{
						setarg(paramPos, i++, ch);
					}
					if (!i)
					{
						return -1;
					}
				}
				else
				{
					while ((ch = string[stringPos++]))
					{
						setarg(paramPos, i++, ch);
					}
				}
				stringPos--;
				setarg(paramPos, i, '\0');
			}
			default:
			{
				continue;
			}
		}
		while (string[stringPos] && string[stringPos] != delim && string[stringPos] > ' ')
		{
			stringPos++;
		}
		while (string[stringPos] && (string[stringPos] == delim || string[stringPos] <= ' '))
		{
			stringPos++;
		}
		paramPos++;
	}
	do
	{
		if ((delim = format[formatPos++]) > ' ')
		{
			if (delim == '\'')
			{
				while ((delim = format[formatPos++]) && delim != '\'') {}
			}
			else if (delim != 'z')
			{
				return delim;
			}
		}
	}
	while (delim > ' ');
	return 0;
}
#endif

stock OnPlayerAmmoUpdate(playerid) {

	if(Player[playerid][Playing] == true) {
	    new weapons;
		new Ammo, TotalShots, Float:accuracy;

		for(new k=2; k < 8; ++k) {
			GetPlayerWeaponData(playerid, k, weapons, Ammo);
			if(Ammo > 10) {
				TotalShots = TotalShots + (9999 - Ammo);
			}
		}

		if(TotalShots == 0) accuracy = 0.0;
		else accuracy = floatmul(100.0, floatdiv(Player[playerid][shotsHit], TotalShots));

		Player[playerid][TotalBulletsFired] = Player[playerid][TotalBulletsFired] + TotalShots;
  		Player[playerid][TotalshotsHit] = Player[playerid][TotalshotsHit] + Player[playerid][shotsHit];
		Player[playerid][Accuracy] = accuracy;
		Player[playerid][TotalAccuracy] += accuracy;
	}

	return 1;
}


stock GetWeaponSlot(weaponid)
{
	new slot;
	switch(weaponid)
	{
		case 0,1: slot = 0;
		case 2 .. 9: slot = 1;
		case 10 .. 15: slot = 10;
		case 16 .. 18, 39: slot = 8;
		case 22 .. 24: slot =2;
		case 25 .. 27: slot = 3;
		case 28, 29, 32: slot = 4;
		case 30, 31: slot = 5;
		case 33, 34: slot = 6;
		case 35 .. 38: slot = 7;
		case 40: slot = 12;
		case 41 .. 43: slot = 9;
		case 44 .. 46: slot = 11;
	}
	return slot;
}

stock ReturnPlayerID(PlayerName[])
{
	new found=0, id;

	foreach(new i : Player) {
		if(strfind(Player[i][Name],PlayerName,true) != -1) {
            found++;
			id = i;
		}
	}

	if(found != 0)
		return id;
	else
		return INVALID_PLAYER_ID;
}

stock ShowTDMWeaponMenu(playerid, team) {
	new iString[512], Title[60];

	switch(team) {
		case ATTACKER: {

		    if(MenuID[playerid] == 1) Title = "{FF0000}Primary Weapon";
		    else if(MenuID[playerid] == 2) Title = "{FF0000}Secondary Weapon";

			format(iString, sizeof(iString), "{FF0000}>> %s\n{FF4444}Desert Eagle\n{FF3333}Shotgun\n{FF4444}Sniper Rifle\n{FF3333}M4\n{FF4444}MP5\n{FF3333}AK-47\n{FF4444}Country Rifle", Title);

		} case DEFENDER: {

		    if(MenuID[playerid] == 1) Title = "{0000FF}Primary Weapon";
		    else if(MenuID[playerid] == 2) Title = "{0000FF}Secondary Weapon";

			format(iString, sizeof(iString), "{0000FF}>> %s\n{4444FF}Desert Eagle\n{3333FF}Shotgun\n{4444FF}Sniper Rifle\n{3333FF}M4\n{4444FF}MP5\n{3333FF}AK-47\n{4444FF}Country Rifle", Title);
		}
	}

	ShowPlayerDialog(playerid,DIALOG_ARENA_GUNS,DIALOG_STYLE_LIST,Title,iString,"Get","Close");

    return 1;
}

stock RemovePlayerWeapon(playerid, weaponid) {
	new plyWeapons[12];
	new plyAmmo[12], armedID;

	for(new slot = 0; slot != 12; slot++)
	{
		new wep, ammo;
		GetPlayerWeaponData(playerid, slot, wep, ammo);

		if(wep != weaponid)
		{
			GetPlayerWeaponData(playerid, slot, plyWeapons[slot], plyAmmo[slot]);
		}
	}

	armedID = GetPlayerWeapon(playerid);

	ResetPlayerWeapons(playerid);
	for(new slot = 0; slot != 12; slot++)
	{
		GivePlayerWeapon(playerid, plyWeapons[slot], plyAmmo[slot]);
	}

	if( armedID != weaponid ) SetPlayerArmedWeapon(playerid,armedID); //give last armedweapon
	else SetPlayerArmedWeapon(playerid,0);//give fist if player armed weapon was knife
}

stock GetCardinalPoint(Float:degree)
{
    // this function return a string that contain the Cardinal point of a heading direction

    new CardinalPoint[20]; //needed string
    // each cardinal point cover 45degree (45 X 8 = 360)
    if(337.5 <= degree <= 360) format(CardinalPoint,sizeof(CardinalPoint),"North");
    else if(0 <= degree <= 22.5) format(CardinalPoint,sizeof(CardinalPoint),"North");
    else if(22.5 <= degree <= 67.5) format(CardinalPoint,sizeof(CardinalPoint),"North East");
    else if(67.5 <= degree <= 112.5) format(CardinalPoint,sizeof(CardinalPoint),"East");
    else if(112.5 <= degree <= 157.5) format(CardinalPoint,sizeof(CardinalPoint),"South East");
    else if(157.5 <= degree <= 202.5) format(CardinalPoint,sizeof(CardinalPoint),"South");
    else if(202.5 <= degree <= 247.5) format(CardinalPoint,sizeof(CardinalPoint),"South West");
    else if(247.5 <= degree <= 292.5) format(CardinalPoint,sizeof(CardinalPoint),"West");
    else if(292.5 <= degree <= 337.5) format(CardinalPoint,sizeof(CardinalPoint),"North West");
    else format(CardinalPoint,sizeof(CardinalPoint),"Error"); // error

    return CardinalPoint;// we return our string
}

stock IsInvalidSkin(id)
{
	switch(id)
	{
	    case 74: return true;
	    case 1: return true;
	    case 2: return true;
	}
	if(id > 299 || id < 0) return true;
	if(id > 264 && id < 273) return true;

	return false;
}


stock SwapTeams()
{
	foreach(new i : Player) {
		if(Player[i][Team] == ATTACKER) Player[i][Team] = DEFENDER;
		else if(Player[i][Team] == ATTACKER_SUB) Player[i][Team] = DEFENDER_SUB;
		else if(Player[i][Team] == DEFENDER) Player[i][Team] = ATTACKER;
        else if(Player[i][Team] == DEFENDER_SUB) Player[i][Team] = ATTACKER_SUB;

		new MyVehicle = -1;
		new Seat;

		if(IsPlayerInAnyVehicle(i)) {
			MyVehicle = GetPlayerVehicleID(i);
			Seat = GetPlayerVehicleSeat(i);
		}

		ColorFix(i);
		SetPlayerSkin(i, Skin[Player[i][Team]]);

		ClearAnimations(i);

		if(MyVehicle != -1) {
		    PutPlayerInVehicle(i, MyVehicle, Seat);

			if(GetPlayerState(i) == PLAYER_STATE_DRIVER) {
				switch(Player[i][Team]) {
					case ATTACKER: ChangeVehicleColor(GetPlayerVehicleID(i), 175, 175);
					case ATTACKER_SUB: ChangeVehicleColor(GetPlayerVehicleID(i), 158, 158);
					case DEFENDER: ChangeVehicleColor(GetPlayerVehicleID(i), 198, 198);
					case DEFENDER_SUB: ChangeVehicleColor(GetPlayerVehicleID(i), 208, 208);
					case REFEREE: ChangeVehicleColor(GetPlayerVehicleID(i), 200, 200);
				}
			}
		}
	}

    for(new i=0; i < SAVE_SLOTS; ++i) {
        if(strlen(SaveVariables[i][pName]) > 2) {
			if(SaveVariables[i][pTeam] == ATTACKER) SaveVariables[i][pTeam] = DEFENDER;
			else if(SaveVariables[i][pTeam] == DEFENDER) SaveVariables[i][pTeam] = ATTACKER;
        }
    }

	new TempScore;
	TempScore = TeamScore[ATTACKER];
	TeamScore[ATTACKER] = TeamScore[DEFENDER];
	TeamScore[DEFENDER] = TempScore;

	new TempName[24], iString[160];
	TempName = TeamName[ATTACKER];
	TeamName[ATTACKER] = TeamName[DEFENDER];
	TeamName[DEFENDER] = TempName;
	TempName = TeamName[ATTACKER_SUB];
	TeamName[ATTACKER_SUB] = TeamName[DEFENDER_SUB];
	TeamName[DEFENDER_SUB] = TempName;



/*	format(iString, sizeof(iString), "~l~~h~%s", TeamName[ATTACKER]);
	TextDrawSetString(AttackerText, iString);

	format(iString, sizeof(iString), "%s Sub", TeamName[ATTACKER]);
	format(TeamName[ATTACKER_SUB], 24, iString);

	format(iString, sizeof(iString), "~l~~h~%s", TeamName[ATTACKER_SUB]);
	TextDrawSetString(AttackerSubText, iString);

	format(iString, sizeof(iString), "~l~~h~%s", TeamName[DEFENDER]);
	TextDrawSetString(DefenderText, iString);

	format(iString, sizeof(iString), "%s Sub", TeamName[DEFENDER]);
	format(TeamName[DEFENDER_SUB], 24, iString);

	format(iString, sizeof(iString), "~l~~h~%s", TeamName[DEFENDER_SUB]);
	TextDrawSetString(DefenderSubText, iString);
*/
	#if INTROTEXT == 1
	format(iString, sizeof(iString), "~r~~h~%s", TeamName[ATTACKER]);
	TextDrawSetString(introAtt, iString);

	format(iString, sizeof(iString), "~b~~h~%s", TeamName[DEFENDER]);
	TextDrawSetString(introDef, iString);
	#endif

	format(iString, sizeof(iString), "~r~%s %s(~r~%d%s)  ~b~~h~%s %s(~b~~h~%d%s)",TeamName[ATTACKER],MAIN_TEXT_COLOUR,TeamScore[ATTACKER],MAIN_TEXT_COLOUR,TeamName[DEFENDER],MAIN_TEXT_COLOUR,TeamScore[DEFENDER],MAIN_TEXT_COLOUR);
    TextDrawSetString(TeamScoreText, iString);

	format(iString, sizeof(iString), "{FFFFFF}Teams are swapped - {FF0033}Attackers: {FFFFFF}%s | {3344FF}Defenders: {FFFFFF}%s", TeamName[ATTACKER], TeamName[DEFENDER]);
	SendClientMessageToAll(-1, iString);
	return 1;
}

forward DoAutoBalance();
public DoAutoBalance() {
    BalanceTeams();
	if(PreMatchResultsShowing == false) AllowStartBase = true;
	SendClientMessageToAll(-1, ""COL_PRIM"Teams have been auto-balanced.");
}

forward DontAutoBalance();
public DontAutoBalance() {
	if(PreMatchResultsShowing == false) AllowStartBase = true;
}

stock BalanceTeams() {

	new TotalAttackers;
	new TotalDefenders;

	foreach(new i : Player){
		if(Player[i][Spawned] == true && Player[i][InDuel] == false && (Player[i][Team] == ATTACKER || Player[i][Team] == DEFENDER)){
			new tid = random(2);
			if (tid == 0){
				Player[i][Team] = DEFENDER;
			    TotalDefenders++;
			} else if (tid == 1) {
		 		Player[i][Team] = ATTACKER;
			    TotalAttackers++;
			}

			ColorFix(i);
			SetPlayerSkin(i, Skin[Player[i][Team]]);

			ClearAnimations(i);
		}
	}

    new Divisor = floatround((TotalDefenders + TotalAttackers) / 2);

	foreach(new i : Player) {
		if(Player[i][InDuel] == false && (Player[i][Team] == ATTACKER || Player[i][Team] == DEFENDER)) {
			new randomnum = random(2);
			switch(randomnum) {
				case 0: {
		    		if(TotalDefenders <= Divisor) {
		       	 		if(Player[i][Team] == ATTACKER) TotalAttackers--;
						Player[i][Team] = DEFENDER;
		        		TotalDefenders++;

					} else if(TotalAttackers <= Divisor) {
		        		if(Player[i][Team] == DEFENDER) TotalDefenders--;
					 	Player[i][Team] = ATTACKER;
						TotalAttackers++;
					}
				} case 1: {
			    	if(TotalAttackers <= Divisor) {
		        		if(Player[i][Team] == DEFENDER) TotalDefenders--;
					 	Player[i][Team] = ATTACKER;
						TotalAttackers++;

					} else if(TotalDefenders <= Divisor) {
		       	 		if(Player[i][Team] == ATTACKER) TotalAttackers--;
						Player[i][Team] = DEFENDER;
		        		TotalDefenders++;
		    		}
				}
			}
			if(TotalDefenders == TotalAttackers) break;

			ColorFix(i);
			SetPlayerSkin(i, Skin[Player[i][Team]]);

			ClearAnimations(i);
		}
	}
	return 1;
}


stock SwitchTeamFix(playerid) {
/*    TextDrawHideForPlayer(playerid, AttackerText);
    TextDrawHideForPlayer(playerid, AttackerSubText);
    TextDrawHideForPlayer(playerid, DefenderText);
    TextDrawHideForPlayer(playerid, DefenderSubText);
	TextDrawHideForPlayer(playerid, AutoAssignText);
    TextDrawHideForPlayer(playerid, RefereeText);

    CancelSelectTextDraw(playerid);
*/
    new iString[160];
	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has switched to: {FFFFFF}%s", Player[playerid][Name], TeamName[Player[playerid][Team]]);
	SendClientMessageToAll(-1, iString);

	if(Player[playerid][TextPos] == false) format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDamage ~r~%.0f~n~%sTotal Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[playerid][RoundKills], MAIN_TEXT_COLOUR, Player[playerid][RoundDamage], MAIN_TEXT_COLOUR, Player[playerid][TotalDamage]);
	else format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDmg ~r~%.0f~n~%sT. Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[playerid][RoundKills], MAIN_TEXT_COLOUR, Player[playerid][RoundDamage], MAIN_TEXT_COLOUR, Player[playerid][TotalDamage]);
	PlayerTextDrawSetString(playerid, RoundKillDmgTDmg, iString);

	ColorFix(playerid);
	SetPlayerSkin(playerid, Skin[Player[playerid][Team]]);
	SetCameraBehindPlayer(playerid);

	if(Current != -1 && TeamHPDamage == true) {
		if(Player[playerid][Team] == ATTACKER || Player[playerid][Team] == ATTACKER_SUB) {
            TextDrawShowForPlayer(playerid, AttackerTeam[0]);
            TextDrawShowForPlayer(playerid, AttackerTeam[1]);
   			TextDrawHideForPlayer(playerid, DefenderTeam[0]);
   			TextDrawHideForPlayer(playerid, DefenderTeam[1]);
		} else if(Player[playerid][Team] == DEFENDER || Player[playerid][Team] == DEFENDER_SUB) {
            TextDrawShowForPlayer(playerid, DefenderTeam[0]);
            TextDrawShowForPlayer(playerid, DefenderTeam[1]);
   			TextDrawHideForPlayer(playerid, AttackerTeam[0]);
   			TextDrawHideForPlayer(playerid, AttackerTeam[1]);
       	} else {
    		TextDrawHideForPlayer(playerid, AttackerTeam[0]);
   			TextDrawHideForPlayer(playerid, AttackerTeam[1]);
   			TextDrawHideForPlayer(playerid, DefenderTeam[0]);
   			TextDrawHideForPlayer(playerid, DefenderTeam[1]);
       	}
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
		switch(Player[playerid][Team]) {
			case ATTACKER: ChangeVehicleColor(GetPlayerVehicleID(playerid), 175, 175);
			case ATTACKER_SUB: ChangeVehicleColor(GetPlayerVehicleID(playerid), 158, 158);
			case DEFENDER: ChangeVehicleColor(GetPlayerVehicleID(playerid), 198, 198);
			case DEFENDER_SUB: ChangeVehicleColor(GetPlayerVehicleID(playerid), 208, 208);
			case REFEREE: ChangeVehicleColor(GetPlayerVehicleID(playerid), 200, 200);
		}
	}
}

stock GetTeamWithLessPlayers()
{
    new attacker, defender, TeamID;
    foreach(new i : Player) {
        if(Player[i][Team] == DEFENDER){
            defender++;
        } else if(Player[i][Team] == ATTACKER) {
    		attacker++;
        }
    }
	TeamID = (defender <= attacker) ? DEFENDER : ATTACKER;
    return TeamID;
}



stock DetermineRandomRound(mode = 0, ignore = 0, type = ARENA)
{
 	new roundid, totaltimes=0;

   	Redo:
   	totaltimes++;
  	if(totaltimes > MAX_BASES * MAX_ARENAS) return -1;
	if(type == ARENA) {
		switch(mode) {
		    case 0: {
				roundid = random(TotalArenas+1); // starts both int/ext
			} case 1: {
		 	    roundid = random(TotalArenas+1);
		 	    if(AInterior[roundid] == 0) goto Redo; // starts only int
			} case 2: {
		 	    roundid = random(TotalArenas+1);
		 	    if(AInterior[roundid] != 0) goto Redo; // starts only ext
			}
		}

	 	for(new i=0; i < MAX_ARENAS; i++) {
	 	    if(roundid == RecentArena[i] && ignore != 1) goto Redo;
	 	}
	    if(!AExist[roundid]) goto Redo;

	} else if(type == BASE) {
		switch(mode) {
		    case 0: {
		        roundid = random(TotalBases+1); // starts both int/ext
			} case 1: {
		 	    roundid = random(TotalBases+1);
		 	    if(BInterior[roundid] == 0) goto Redo; // starts only int
		    } case 2: {
		 	    roundid = random(TotalBases+1);
		 	    if(BInterior[roundid] != 0) goto Redo; // starts only ext
		    }
		}

	 	for(new i=0; i < MAX_BASES; i++) {
	 	    if(roundid == RecentBase[i] && ignore != 1) goto Redo;
	 	}
	 	if(!BExist[roundid]) goto Redo;

	}
	return roundid;
}

stock SetRecentRound(roundid, type) {
	switch(type) {
	    case BASE: {
			for(new i = 0; i < MAX_BASES; i++) {
			    if(RecentBase[i] == -1) {
			        RecentBase[i] = roundid;
			        break;
				}
			}
		} case ARENA,TDM: {
		    for(new i = 0; i < MAX_ARENAS; i++) {
		        if(RecentArena[i] == -1) {
		            RecentArena[i] = roundid;
		            break;
				}
			}
		}
	}
}

stock ShowWepLimit(playerid) {
	new WepTStr[700];

	format(WepTStr, sizeof(WepTStr), "{FF0000}ID\tPrimary Weapon\tSecondary Weapon\tAvailibility\n");
    for(new i=0; i < 10; ++i) {
        new str[100];
        new tabs[7] = "";

		if(GunMenuWeapons[i][1] != 25 && GunMenuWeapons[i][1] != 23) {
		    tabs = "\t";
		}

        if( i % 2 == 0) format(str, sizeof(str), "{FF3333}%d\t%s\t\t\t%s\t\t%s%d\n", i+1, WeaponNames[GunMenuWeapons[i][0]], WeaponNames[GunMenuWeapons[i][1]], tabs, WeaponLimit[i] - TimesPicked[ATTACKER][i]);
        else format(str, sizeof(str), "{FF6666}%d\t%s\t\t\t%s\t\t%s%d\n", i+1, WeaponNames[GunMenuWeapons[i][0]], WeaponNames[GunMenuWeapons[i][1]], tabs, WeaponLimit[i] - TimesPicked[ATTACKER][i]);
        strcat(WepTStr, str);
    }
    ShowPlayerDialog(playerid, DIALOG_WEAPONS_LIMIT, DIALOG_STYLE_LIST, ""COL_PRIM"Weapon limits",WepTStr, "Select", "Exit");
}

stock EnableInterface(playerid) {
	if(IsPlayerInAnyVehicle(playerid)) return 1;

	SelectTextDraw(playerid, 0xFF0000FF);
	TextDrawShowForPlayer(playerid, WeaponLimitTD);
	TextDrawShowForPlayer(playerid, WarModeText);
	TextDrawShowForPlayer(playerid, SettingBox);
	TextDrawShowForPlayer(playerid, LockServerTD);
	TextDrawShowForPlayer(playerid, CloseText);
	PlayerOnInterface[playerid] = true;

	return 1;
}

stock RemovePlayerFromRound(playerid) {
	Player[playerid][Playing] = false;

	if(Current != -1 && Player[playerid][WasInCP] == true) {
	    Player[playerid][WasInCP] = false;
	    PlayersInCP--;
		if(PlayersInCP <= 0) {
		    CurrentCPTime = ConfigCPTime;
		    TextDrawHideForAll(EN_CheckPoint);
		}
	}

	#if ENABLED_TDM == 1
	Player[playerid][InTDM] = false;
	#endif
	Player[playerid][WasInBase] = false;
	Player[playerid][ToAddInRound] = false;
	TogglePlayerControllableEx(playerid, true);
	RemovePlayerMapIcon(playerid, 59);

	DisablePlayerCheckpoint(playerid);
	SetPlayerScore(playerid, 0);
	HideDialog(playerid);

	PlayerTextDrawHide(playerid, AreaCheckTD);
	PlayerTextDrawHide(playerid, AreaCheckBG);

	if(Player[playerid][WeaponPicked] > 0) {
 		TimesPicked[Player[playerid][Team]][Player[playerid][WeaponPicked]-1]--;
 		Player[playerid][WeaponPicked] = 0;
	}

	SpawnPlayerEx(playerid);
//    RadarFix();

#if SKINICONS == 1
	if(ShowIcons == true) {
		SetTimer("UpdateAliveForAll", 2000, false);
	}
#endif

	return 1;
}

stock IsPlayerInArea(playerid, Float:minx, Float:maxx, Float:miny, Float:maxy) {
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    if (x > minx && x < maxx && y > miny && y < maxy) return 1;
    return 0;
}

stock HideDialog(playerid) {
	ShowPlayerDialog(playerid, -1, DIALOG_STYLE_MSGBOX, " ", " ", " ", " ");
}

stock PauseRound() {

	new iString[128];
	iString = "~r~Round Paused";

	foreach(new i : Player)
	{
		PlayerTextDrawSetString(i, FPSPingPacket,iString);
		TextDrawSetString(PauseTD,iString);
		TextDrawShowForAll(PauseTD);
		if(GetPlayerWeapon(i) == WEAPON_PARACHUTE)
			Player[i][ToGiveParachute] = true;
		if(Player[i][Playing] == true)
		{

            if(IsPlayerInAnyVehicle(i))
			{
                GetVehiclePos(GetPlayerVehicleID(i), VehiclePos[i][0], VehiclePos[i][1], VehiclePos[i][2]);
			}
			TogglePlayerControllableEx(i, false);
		}
	}
	for(new g = 0; g < MAX_VEHICLES; g ++)
		GetVehicleVelocity(g, VehicleVelc[g][0], VehicleVelc[g][1], VehicleVelc[g][2]);


	#if ANTICHEAT == 1
	if(AntiCheat) {
		SendClientMessageToAll(-1, "{FFFF00}** "COL_PRIM"Checking all players for 2 PC trick");
	}
	#endif

	RoundPaused = true;

	if(ESLMode == true) {
	    SendClientMessageToAll(-1, ""COL_PRIM"Available public command to unpause the round: {FFFFFF}/voteunpause");
	}

}


new PLAYER_current_team[MAX_PLAYERS];
stock SAMP_SetPlayerTeam(playerid, teamid)
{
	if(ServerAntiLag == true) {
		teamid = ANTILAG_TEAM;
	}

	PLAYER_current_team[playerid] = teamid;
	foreach(new i : Player) {
		SetPlayerTeam(i,PLAYER_current_team[i]);
	}

}

stock ShowEndRoundTextDraw(playerid) {

	TextDrawShowForPlayer( playerid, leftBG	 	); 		TextDrawShowForPlayer( playerid, rightBG    	);
	TextDrawShowForPlayer( playerid, leftUpBG	); 		TextDrawShowForPlayer( playerid, rightUpBG  	);
	TextDrawShowForPlayer( playerid, leftHeader );		TextDrawShowForPlayer( playerid, rightHeader 	);
	TextDrawShowForPlayer( playerid, leftULine	); 		TextDrawShowForPlayer( playerid, rightULine 	);
	TextDrawShowForPlayer( playerid, leftUpText ); 		TextDrawShowForPlayer( playerid, rightUpText 	);
	TextDrawShowForPlayer( playerid, leftText	); 		TextDrawShowForPlayer( playerid, rightText	 	);
 	TextDrawShowForPlayer( playerid, leftTop	);		//TextDrawShowForPlayer( playerid, rightTop      	);
 	TextDrawShowForPlayer( playerid, lowerBG	);		TextDrawShowForPlayer( playerid, lowerULine 	);
 	TextDrawShowForPlayer( playerid, topTextScore);

 	//contents:
    TextDrawShowForPlayer( playerid, leftNames	); 		TextDrawShowForPlayer( playerid, rightNames 	);
    TextDrawShowForPlayer( playerid, leftKills	); 		TextDrawShowForPlayer( playerid, rightKills 	);
    if(MatchEnded == false){
		TextDrawHideForPlayer( playerid, leftDeaths );      TextDrawHideForPlayer( playerid, rightDeaths    );
		TextDrawShowForPlayer( playerid, leftHP		); 		TextDrawShowForPlayer( playerid, rightHP		);
	} else {
		TextDrawHideForPlayer( playerid, leftHP 	);      TextDrawHideForPlayer( playerid, rightHP    	);
		TextDrawShowForPlayer( playerid, leftDeaths	); 		TextDrawShowForPlayer( playerid, rightDeaths	);
	}
	TextDrawShowForPlayer( playerid, leftDmg	); 		TextDrawShowForPlayer( playerid, rightDmg	 	);
    TextDrawShowForPlayer( playerid, leftAcc	); 		TextDrawShowForPlayer( playerid, rightAcc	 	);

	if( MatchEnded == true )
	{
		TextDrawShowForPlayer( playerid, leftPlayed 	);
		TextDrawShowForPlayer( playerid, rightPlayed	);

		TextDrawHideForPlayer( playerid, teamWonHow	);
	}
	else
	{
		TextDrawShowForPlayer( playerid, teamWonHow	);
	}

	for(new i = 0; i < 3; i++) {
		PlayerTextDrawSetString(playerid, DoingDamage[i], "_");
		PlayerTextDrawSetString(playerid, GettingDamaged[i], "_");
	}

	PlayerTextDrawHide(playerid, DeathText[0]);
	PlayerTextDrawHide(playerid, DeathText[1]);

//	TextDrawShowForPlayer(playerid, EN_Attacker);
//	TextDrawShowForPlayer(playerid, EN_Defender);
/*	TextDrawShowForPlayer(playerid, EN_WhoWon);
	TextDrawShowForPlayer(playerid, EN_AttackerTitle);
	TextDrawShowForPlayer(playerid, EN_DefenderTitle);
	TextDrawShowForPlayer(playerid, EN_AttackerList);

    if(MatchEnded == false) TextDrawShowForPlayer(playerid, EN_AttackerKills);
    else {
		TextDrawShowForPlayer(playerid, EN_TAttackerKills);
		TextDrawSetString(EN_AttackerKills, "");
	}

    if(MatchEnded == false)TextDrawShowForPlayer(playerid, EN_AttackerHP);
    else {
		TextDrawShowForPlayer(playerid, EN_TAttackerDeaths);
        TextDrawShowForPlayer(playerid, EN_TAttackerRoundsPlayed);
        TextDrawSetString(EN_AttackerHP, "");
	}

    if(MatchEnded == false)TextDrawShowForPlayer(playerid, EN_AttackerAccuracy);
    else {
		TextDrawShowForPlayer(playerid, EN_TAttackerAccuracy);
		TextDrawSetString(EN_AttackerAccuracy, "");
	}
    if(MatchEnded == false)TextDrawShowForPlayer(playerid, EN_AttackerDamage);
    else {
		TextDrawShowForPlayer(playerid, EN_TAttackerDamage);
        TextDrawSetString(EN_AttackerDamage, "");
	}

    TextDrawShowForPlayer(playerid, EN_DefenderList);

    if(MatchEnded == false) TextDrawShowForPlayer(playerid, EN_DefenderKills);
    else {
		TextDrawShowForPlayer(playerid, EN_TDefenderKills);
		TextDrawSetString(EN_DefenderKills, "");
	}

    if(MatchEnded == false)TextDrawShowForPlayer(playerid, EN_DefenderHP);
    else {
		TextDrawShowForPlayer(playerid, EN_TDefenderDeaths);
		TextDrawShowForPlayer(playerid, EN_TDefenderRoundsPlayed);
		TextDrawSetString(EN_DefenderHP, "");
	}
    if(MatchEnded == false)TextDrawShowForPlayer(playerid, EN_DefenderAccuracy);
    else {
		TextDrawShowForPlayer(playerid, EN_TDefenderAccuracy);
		TextDrawSetString(EN_DefenderAccuracy, "");
	}

    if(MatchEnded == false)TextDrawShowForPlayer(playerid, EN_DefenderDamage);
    else {
		TextDrawShowForPlayer(playerid, EN_TDefenderDamage);
        TextDrawSetString(EN_DefenderDamage, "");
	}

    TextDrawShowForPlayer(playerid, EN_AttackerBox);
    TextDrawShowForPlayer(playerid, EN_DefenderBox);
    TextDrawShowForPlayer(playerid, EN_DefenderTitleBox);
    TextDrawShowForPlayer(playerid, EN_AttackerTitleBox);
//    TextDrawShowForPlayer(playerid, EN_WhoWonBox);
//    TextDrawShowForPlayer(playerid, EN_WhoWonTopBar);
//    TextDrawShowForPlayer(playerid, EN_WhoWonAttBar);
//    TextDrawShowForPlayer(playerid, EN_WhoWonDefBar);
//    TextDrawShowForPlayer(playerid, EN_AttackerTextBox);
//    TextDrawShowForPlayer(playerid, EN_DefenderTextBox);

//	if(AttWin == true) {
//		TextDrawShowForPlayer(playerid, EN_WhoWonAttWinBar);
//		TextDrawHideForPlayer(playerid, EN_WhoWonDefWinBar);
//	} else {
//		TextDrawShowForPlayer(playerid, EN_WhoWonDefWinBar);
//		TextDrawHideForPlayer(playerid, EN_WhoWonAttWinBar);
//	}
*/

	Player[playerid][TextDrawOnScreen] = true;


//	SetPlayerCameraLookAt(playerid, 1660.3087,-2668.6558,16.5469);
//	SetPlayerCameraPos(playerid, 1658.0651,-2668.4104,16.5469);
}

stock HideEndRoundTextDraw(playerid) {


	TextDrawHideForPlayer( playerid, leftBG	 	); 		TextDrawHideForPlayer( playerid, rightBG    	);
	TextDrawHideForPlayer( playerid, leftUpBG	); 		TextDrawHideForPlayer( playerid, rightUpBG  	);
	TextDrawHideForPlayer( playerid, leftHeader );		TextDrawHideForPlayer( playerid, rightHeader 	);
	TextDrawHideForPlayer( playerid, leftULine	); 		TextDrawHideForPlayer( playerid, rightULine 	);
	TextDrawHideForPlayer( playerid, leftUpText ); 		TextDrawHideForPlayer( playerid, rightUpText 	);
	TextDrawHideForPlayer( playerid, leftText	); 		TextDrawHideForPlayer( playerid, rightText	 	);
 	TextDrawHideForPlayer( playerid, leftTop	);		//TextDrawHideForPlayer( playerid, rightTop      	);
 	TextDrawHideForPlayer( playerid, lowerBG	);		TextDrawHideForPlayer( playerid, lowerULine 	);
 	TextDrawHideForPlayer( playerid, topTextScore); 	TextDrawHideForPlayer( playerid, teamWonHow 	);
 	//contents:
    TextDrawHideForPlayer( playerid, leftNames	); 		TextDrawHideForPlayer( playerid, rightNames 	);
    TextDrawHideForPlayer( playerid, leftKills	); 		TextDrawHideForPlayer( playerid, rightKills 	);
    TextDrawHideForPlayer( playerid, leftHP	 	); 		TextDrawHideForPlayer( playerid, rightHP	 	);
    TextDrawHideForPlayer( playerid, leftDeaths); 		TextDrawHideForPlayer( playerid, rightDeaths	);
    TextDrawHideForPlayer( playerid, leftDmg	); 		TextDrawHideForPlayer( playerid, rightDmg	 	);
    TextDrawHideForPlayer( playerid, leftAcc	); 		TextDrawHideForPlayer( playerid, rightAcc	 	);
    TextDrawHideForPlayer( playerid, leftPlayed ); 		TextDrawHideForPlayer( playerid, rightPlayed    );





//	TextDrawHideForPlayer(playerid, EN_Attacker);
//	TextDrawHideForPlayer(playerid, EN_Defender);

/*	TextDrawHideForPlayer(playerid, EN_WhoWon);
	TextDrawHideForPlayer(playerid, EN_AttackerTitle);
	TextDrawHideForPlayer(playerid, EN_DefenderTitle);
	TextDrawHideForPlayer(playerid, EN_AttackerList);
    TextDrawHideForPlayer(playerid, EN_AttackerKills);
    TextDrawHideForPlayer(playerid, EN_AttackerHP);
    TextDrawHideForPlayer(playerid, EN_AttackerAccuracy);
    TextDrawHideForPlayer(playerid, EN_AttackerDamage);
//    TextDrawHideForPlayer(playerid, EN_BaseID);
    TextDrawHideForPlayer(playerid, EN_DefenderList);
    TextDrawHideForPlayer(playerid, EN_DefenderKills);
    TextDrawHideForPlayer(playerid, EN_DefenderHP);
    TextDrawHideForPlayer(playerid, EN_DefenderAccuracy);
    TextDrawHideForPlayer(playerid, EN_DefenderDamage);
    TextDrawHideForPlayer(playerid, EN_AttackerBox);
    TextDrawHideForPlayer(playerid, EN_DefenderBox);
    TextDrawHideForPlayer(playerid, EN_DefenderTitleBox);
    TextDrawHideForPlayer(playerid, EN_AttackerTitleBox);

    TextDrawHideForPlayer(playerid, EN_TAttackerKills);
    TextDrawHideForPlayer(playerid, EN_TAttackerDeaths);
    TextDrawHideForPlayer(playerid, EN_TAttackerRoundsPlayed);
    TextDrawHideForPlayer(playerid, EN_TAttackerAccuracy);
    TextDrawHideForPlayer(playerid, EN_TAttackerDamage);

    TextDrawHideForPlayer(playerid, EN_TDefenderKills);
    TextDrawHideForPlayer(playerid, EN_TDefenderDeaths);
    TextDrawHideForPlayer(playerid, EN_TDefenderRoundsPlayed);
    TextDrawHideForPlayer(playerid, EN_TDefenderAccuracy);
    TextDrawHideForPlayer(playerid, EN_TDefenderDamage);
*/

    Player[playerid][TextDrawOnScreen] = false;


    /*    TextDrawHideForPlayer(playerid, EN_WhoWonBox);
    TextDrawHideForPlayer(playerid, EN_WhoWonTopBar);
    TextDrawHideForPlayer(playerid, EN_WhoWonAttBar);
    TextDrawHideForPlayer(playerid, EN_WhoWonDefBar);
    TextDrawHideForPlayer(playerid, EN_AttackerTextBox);
    TextDrawHideForPlayer(playerid, EN_DefenderTextBox);
	TextDrawHideForPlayer(playerid, EN_WhoWonAttWinBar);
	TextDrawHideForPlayer(playerid, EN_WhoWonDefWinBar);
*/

 //   SetCameraBehindPlayer(playerid);
}

stock GetPlayerHighestScores(array[][rankingEnum], left, right)
{
    new
        tempLeft = left,
        tempRight = right,
        pivot = array[(left + right) / 2][player_Score],
        tempVar
    ;
    while(tempLeft <= tempRight)
    {
        while(array[tempLeft][player_Score] > pivot) tempLeft++;
        while(array[tempRight][player_Score] < pivot) tempRight--;

        if(tempLeft <= tempRight)
        {
            tempVar = array[tempLeft][player_Score], array[tempLeft][player_Score] = array[tempRight][player_Score], array[tempRight][player_Score] = tempVar;
            tempVar = array[tempLeft][player_ID], array[tempLeft][player_ID] = array[tempRight][player_ID], array[tempRight][player_ID] = tempVar;
//			format(tempVarStr, sizeof(tempVarStr), array[tempLeft][player_Name]); format(array[tempLeft][player_Name], MAX_PLAYER_NAME, array[tempRight][player_Name]); format(array[tempRight][player_Name], MAX_PLAYER_NAME, tempVarStr);
            //tempVarStr = array[tempLeft][player_Name], array[tempLeft][player_Name] = array[tempRight][player_Name], array[tempRight][player_Name] = tempVarStr;
            tempVar = array[tempLeft][player_Kills], array[tempLeft][player_Kills] = array[tempRight][player_Kills], array[tempRight][player_Kills] = tempVar;
            tempVar = array[tempLeft][player_Deaths], array[tempLeft][player_Deaths] = array[tempRight][player_Deaths], array[tempRight][player_Deaths] = tempVar;
            tempVar = array[tempLeft][player_Team], array[tempLeft][player_Team] = array[tempRight][player_Team], array[tempRight][player_Team] = tempVar;
            tempLeft++, tempRight--;
        }
    }
    if(left < tempRight) GetPlayerHighestScores(array, left, tempRight);
    if(tempLeft < right) GetPlayerHighestScores(array, tempLeft, right);
}

stock GetPlayerHighestScores2(array[][rankingEnum], names[][MAX_PLAYER_NAME], left, right)
{
    new
        tempLeft = left,
        tempRight = right,
        pivot = array[(left + right) / 2][player_Score],
        tempVar,
		tempVarStr[MAX_PLAYER_NAME]
    ;
    while(tempLeft <= tempRight)
    {
        while(array[tempLeft][player_Score] > pivot) tempLeft++;
        while(array[tempRight][player_Score] < pivot) tempRight--;

        if(tempLeft <= tempRight)
        {
            tempVar = array[tempLeft][player_Score], array[tempLeft][player_Score] = array[tempRight][player_Score], array[tempRight][player_Score] = tempVar;
            tempVar = array[tempLeft][player_ID], array[tempLeft][player_ID] = array[tempRight][player_ID], array[tempRight][player_ID] = tempVar;
            tempVarStr = names[tempLeft], names[tempLeft] = names[tempRight], names[tempRight] = tempVarStr;
            tempVar = array[tempLeft][player_Kills], array[tempLeft][player_Kills] = array[tempRight][player_Kills], array[tempRight][player_Kills] = tempVar;
            tempVar = array[tempLeft][player_Deaths], array[tempLeft][player_Deaths] = array[tempRight][player_Deaths], array[tempRight][player_Deaths] = tempVar;
            tempVar = array[tempLeft][player_Team], array[tempLeft][player_Team] = array[tempRight][player_Team], array[tempRight][player_Team] = tempVar;
            tempVar = array[tempLeft][player_TPlayed], array[tempLeft][player_TPlayed] = array[tempRight][player_TPlayed], array[tempRight][player_TPlayed] = tempVar;
            tempVar = array[tempLeft][player_HP], array[tempLeft][player_HP] = array[tempRight][player_HP], array[tempRight][player_HP] = tempVar;
            tempVar = array[tempLeft][player_Acc], array[tempLeft][player_Acc] = array[tempRight][player_Acc], array[tempRight][player_Acc] = tempVar;
            tempLeft++, tempRight--;
        }
    }
    if(left < tempRight) GetPlayerHighestScores2(array, names, left, tempRight);
    if(tempLeft < right) GetPlayerHighestScores2(array, names, tempLeft, right);


}

stock StorePlayerVariablesMin(playerid) {
    for(new i = 0; i < SAVE_SLOTS; i ++){
	   	if(strlen(SaveVariables[i][pName]) < 2) {
	   	    if(Player[playerid][Playing] == true) SaveVariables[i][pTeam] 	= 	Player[playerid][Team];
	   	    else SaveVariables[i][pTeam]    =   Player[playerid][TempTeam];

	   	    SaveVariables[i][RKills]   	=  	Player[playerid][RoundKills];
			SaveVariables[i][RDeaths]  	= 	Player[playerid][RoundDeaths];
			SaveVariables[i][RDamage] 	= 	Player[playerid][RoundDamage];
			SaveVariables[i][TKills]   	=  	Player[playerid][TotalKills];
			SaveVariables[i][TDeaths]  	= 	Player[playerid][TotalDeaths];
			SaveVariables[i][TDamage] 	= 	Player[playerid][TotalDamage];
			SaveVariables[i][TPlayed]   =   Player[playerid][RoundPlayed];

			OnPlayerAmmoUpdate(playerid);
			SaveVariables[i][iAccuracy] =   floatround(Player[playerid][Accuracy], floatround_round);
			SaveVariables[i][tshotsHit] =   Player[playerid][TotalshotsHit];
			SaveVariables[i][tBulletsShot] = Player[playerid][TotalBulletsFired];

			for(new j = 0; j < 55; j ++)
		 		SaveVariables[i][WeaponStat][j] = Player[playerid][WeaponStat][j];

			SaveVariables[i][gHealth]  =   0;
			SaveVariables[i][gArmour]  =   0;

			SaveVariables[i][RoundID]   =   Current;
			SaveVariables[i][ToBeAdded] =   false;
			SaveVariables[i][CheckScore] = 	true;

			format(SaveVariables[i][pName], 24, Player[playerid][Name]);
			format(SaveVariables[i][pNameWithoutTag], 24, Player[playerid][NameWithoutTag]);

			if(GetPlayerWeapon(playerid) == WEAPON_PARACHUTE)
			    SaveVariables[i][HadParachute] = 1;
			else
			    SaveVariables[i][HadParachute] = 0;

			if(IsPlayerInAnyVehicle(playerid))
			{
			    SaveVariables[i][pVehicleID] = GetPlayerVehicleID(playerid);
			    SaveVariables[i][pSeatID] = GetPlayerVehicleSeat(playerid);
			}
			else
			{
			    SaveVariables[i][pVehicleID] = -1;
			    SaveVariables[i][pSeatID] = -1;
			}

			break;
		} else continue;
	}
	return 1;
}
/*
stock LoadPlayerVariablesMin(playerid) {

    for(new i = 0; i < SAVE_SLOTS; i ++) {
		if( strlen( SaveVariables[i][pName] ) > 2 && strcmp( SaveVariables[i][pName], Player[playerid][Name], true ) == 0) {

//		    Player[playerid][Team] = SaveVariables[i][pTeam];

//    		Player[playerid][RoundKills] 	= 	SaveVariables[i][RKills];
//			Player[playerid][RoundDeaths] 	= 	SaveVariables[i][RDeaths];
//			Player[playerid][RoundDamage] 	= 	SaveVariables[i][RDamage];

			Player[playerid][TotalKills] 	= 	Player[playerid][TotalKills]	+   SaveVariables[i][TKills];
			Player[playerid][TotalDeaths] 	= 	Player[playerid][TotalDeaths] 	+ 	SaveVariables[i][TDeaths];
			Player[playerid][TotalDamage] 	= 	Player[playerid][TotalDamage] 	+ 	SaveVariables[i][TDamage];

			ResetSaveVariables(i);

			return 1;
		} else continue;
	}

	return 1;
}

*/

stock StorePlayerVariables(playerid) {
	new iString[128];
	for(new i = 0; i < SAVE_SLOTS; i ++){
	   	if(strlen(SaveVariables[i][pName]) < 2){
			format(SaveVariables[i][pName], 24, Player[playerid][Name]);
			format(SaveVariables[i][pNameWithoutTag], 24, Player[playerid][NameWithoutTag]);

	       	GetPlayerPos(playerid, SaveVariables[i][pCoords][0],SaveVariables[i][pCoords][1],SaveVariables[i][pCoords][2]);
	 		GetPlayerFacingAngle(playerid, SaveVariables[i][pCoords][3]);

			if(Player[i][ToAddInRound] == false) {
				GetHP(playerid, SaveVariables[i][gHealth]);
				GetAP(playerid, SaveVariables[i][gArmour]);
			} else {
			    SaveVariables[i][gArmour] = 100.0;
			    SaveVariables[i][gHealth] = 100.0;
			}

	   	    if(Player[playerid][Playing] == true) SaveVariables[i][pTeam] 	= 	Player[playerid][Team];
	   	    else SaveVariables[i][pTeam]    =   Player[playerid][TempTeam];

	        SaveVariables[i][pInterior] = 	GetPlayerInterior(playerid);
	        SaveVariables[i][pVWorld] 	= 	GetPlayerVirtualWorld(playerid);

			SaveVariables[i][RKills]   	=  	Player[playerid][RoundKills];
			SaveVariables[i][RDeaths]  	= 	Player[playerid][RoundDeaths];
			SaveVariables[i][RDamage] 	= 	Player[playerid][RoundDamage];
			SaveVariables[i][TKills]   	=  	Player[playerid][TotalKills];
			SaveVariables[i][TDeaths]  	= 	Player[playerid][TotalDeaths];
			SaveVariables[i][TDamage] 	= 	Player[playerid][TotalDamage];
			SaveVariables[i][TPlayed]   =   Player[playerid][RoundPlayed];
			OnPlayerAmmoUpdate(playerid);
			SaveVariables[i][iAccuracy] =  floatround(Player[playerid][Accuracy], floatround_round);
			SaveVariables[i][tshotsHit] =   Player[playerid][TotalshotsHit];
			SaveVariables[i][tBulletsShot] = Player[playerid][TotalBulletsFired];

			for(new j = 0; j < 55; j ++)
				 SaveVariables[i][WeaponStat][j] = Player[playerid][WeaponStat][j];

			SaveVariables[i][WeaponsPicked] = Player[playerid][WeaponPicked];
			if(Player[playerid][WeaponPicked] > 0){
		 		TimesPicked[Player[playerid][Team]][SaveVariables[i][WeaponsPicked]-1]--;
		 		Player[playerid][WeaponPicked] = 0;
			}

			SaveVariables[i][RoundID]   =   Current;
			SaveVariables[i][ToBeAdded] =   true;
			SaveVariables[i][CheckScore] = 	true;

			if(GetPlayerWeapon(playerid) == WEAPON_PARACHUTE)
			    SaveVariables[i][HadParachute] = 1;
			else
			    SaveVariables[i][HadParachute] = 0;

			if(IsPlayerInAnyVehicle(playerid))
			{
			    SaveVariables[i][pVehicleID] = GetPlayerVehicleID(playerid);
			    SaveVariables[i][pSeatID] = GetPlayerVehicleSeat(playerid);
			}
			else
			{
			    SaveVariables[i][pVehicleID] = -1;
			    SaveVariables[i][pSeatID] = -1;
			}

			if(Player[playerid][ToAddInRound] == true || (RoundMints == ConfigRoundTime-1 && RoundSeconds > 30)) SaveVariables[i][WasCrashedInStart] = true;

			if(ESLMode == true) SaveVariables[i][PauseWait] = true;

	        format(iString,sizeof(iString),"{FFFFFF}%s's "COL_PRIM"variables saved.", Player[playerid][Name]);
	    	SendClientMessageToAll(-1, iString);
	    	break;
        } else continue;
	}
}

forward ReshowCPForPlayer(playerid);
public ReshowCPForPlayer(playerid)
{
    SetPlayerCheckpoint(playerid, BCPSpawn[Current][0], BCPSpawn[Current][1], BCPSpawn[Current][2], 2);
	GangZoneShowForPlayer(playerid, CPZone, 0xFF000044);
	SendClientMessage(playerid, -1, ""COL_PRIM"If you still have problems with reaching CP and its gangzone, try {FFFFFF}/fixcp");
	return 1;
}

stock LoadPlayerVariables(playerid)
{
 	new iString[160];

	for(new i = 0; i < SAVE_SLOTS; i ++)
	{
		if( strlen( SaveVariables[i][pName] ) > 2 && strcmp( SaveVariables[i][pName], Player[playerid][Name], true ) == 0 )
		{
			if(SaveVariables[i][RoundID] != Current || Current == -1)
			{

				Player[playerid][TotalKills] 		= 	SaveVariables[i][TKills];
				Player[playerid][TotalDeaths] 		= 	SaveVariables[i][TDeaths];
				Player[playerid][TotalDamage] 		= 	SaveVariables[i][TDamage];
                Player[playerid][RoundPlayed] 		= 	SaveVariables[i][TPlayed];
                Player[playerid][Accuracy]      	=   SaveVariables[i][iAccuracy];
			 	Player[playerid][TotalshotsHit]		=	SaveVariables[i][tshotsHit];
			 	Player[playerid][TotalBulletsFired] = 	SaveVariables[i][tBulletsShot];

			 	for(new j = 0; j < 55; j ++)
    				Player[playerid][WeaponStat][j] = SaveVariables[i][WeaponStat][j];

                ResetSaveVariables(i);

				format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has spawned as: {FFFFFF}%s", Player[playerid][Name], TeamName[Player[playerid][Team]]);
				SendClientMessageToAll(-1, iString);

				if(Player[playerid][TextPos] == false) format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDamage ~r~%.0f~n~%sTotal Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[playerid][RoundKills], MAIN_TEXT_COLOUR, Player[playerid][RoundDamage], MAIN_TEXT_COLOUR, Player[playerid][TotalDamage]);
				else format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDmg ~r~%.0f~n~%sT. Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[playerid][RoundKills], MAIN_TEXT_COLOUR, Player[playerid][RoundDamage], MAIN_TEXT_COLOUR, Player[playerid][TotalDamage]);
				PlayerTextDrawSetString(playerid, RoundKillDmgTDmg, iString);

				return 1;
			}
			else if(SaveVariables[i][ToBeAdded] == false)
			{
				Player[playerid][TotalKills] 		= 	SaveVariables[i][TKills];
				Player[playerid][TotalDeaths] 		= 	SaveVariables[i][TDeaths];
				Player[playerid][TotalDamage] 		= 	SaveVariables[i][TDamage];
				Player[playerid][RoundPlayed] 		= 	SaveVariables[i][TPlayed];
				Player[playerid][Accuracy]      	=   SaveVariables[i][iAccuracy];
			 	Player[playerid][TotalshotsHit]		=	SaveVariables[i][tshotsHit];
			 	Player[playerid][TotalBulletsFired] = 	SaveVariables[i][tBulletsShot];
				Player[playerid][RoundKills]        =   SaveVariables[i][RKills];
				Player[playerid][RoundDeaths]       =	SaveVariables[i][RDeaths];
				Player[playerid][RoundDamage]       =	SaveVariables[i][RDamage];

                for(new j = 0; j < 55; j ++)
    				Player[playerid][WeaponStat][j] = SaveVariables[i][WeaponStat][j];


				Player[playerid][WasInBase]         =   true;

                ResetSaveVariables(i);

				format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has spawned as: {FFFFFF}%s", Player[playerid][Name], TeamName[Player[playerid][Team]]);
				SendClientMessageToAll(-1, iString);

				if(Player[playerid][TextPos] == false) format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDamage ~r~%.0f~n~%sTotal Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[playerid][RoundKills], MAIN_TEXT_COLOUR, Player[playerid][RoundDamage], MAIN_TEXT_COLOUR, Player[playerid][TotalDamage]);
				else format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDmg ~r~%.0f~n~%sT. Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[playerid][RoundKills], MAIN_TEXT_COLOUR, Player[playerid][RoundDamage], MAIN_TEXT_COLOUR, Player[playerid][TotalDamage]);
				PlayerTextDrawSetString(playerid, RoundKillDmgTDmg, iString);

				return 1;
			}

			Player[playerid][Playing] = true;
			Player[playerid][WasInBase] = true;

	        Player[playerid][Team] = SaveVariables[i][pTeam];
			SetHP(playerid, SaveVariables[i][gHealth]);
			SetAP(playerid, SaveVariables[i][gArmour]);



			Player[playerid][RoundKills] 	= 	SaveVariables[i][RKills];
			Player[playerid][RoundDeaths] 	= 	SaveVariables[i][RDeaths];
			Player[playerid][RoundDamage] 	= 	SaveVariables[i][RDamage];
			Player[playerid][TotalKills] 	= 	SaveVariables[i][TKills];
			Player[playerid][TotalDeaths] 	= 	SaveVariables[i][TDeaths];
			Player[playerid][TotalDamage] 	= 	SaveVariables[i][TDamage];
			Player[playerid][RoundPlayed] 	= 	SaveVariables[i][TPlayed];
			Player[playerid][Accuracy]      =   SaveVariables[i][iAccuracy];
		 	Player[playerid][TotalshotsHit]	=	SaveVariables[i][tshotsHit];
		 	Player[playerid][TotalBulletsFired] = SaveVariables[i][tBulletsShot];

		 	for(new j = 0; j < 55; j ++)
				Player[playerid][WeaponStat][j] = SaveVariables[i][WeaponStat][j];

            if(SaveVariables[i][WasCrashedInStart] == false)
			{
				SetPlayerPos(playerid, SaveVariables[i][pCoords][0], SaveVariables[i][pCoords][1], SaveVariables[i][pCoords][2]);
				SetPlayerFacingAngle(playerid, SaveVariables[i][pCoords][3]);
				SetPlayerInterior(playerid, SaveVariables[i][pInterior]);
				SetPlayerVirtualWorld(playerid, SaveVariables[i][pVWorld]);
			}
			else if(Current != -1)
			{
			    if(GameType == BASE) {
					switch(Player[playerid][Team]) {
					    case ATTACKER: SetPlayerPos(playerid, BAttackerSpawn[Current][0] + random(6), BAttackerSpawn[Current][1] + random(6), BAttackerSpawn[Current][2]);
						case DEFENDER: SetPlayerPos(playerid, BDefenderSpawn[Current][0] + random(6), BDefenderSpawn[Current][1] + random(6), BDefenderSpawn[Current][2]);
				    }
				    SetPlayerInterior(playerid, BInterior[Current]);
				} else if(GameType == ARENA || GameType == TDM) {
					switch(Player[playerid][Team]) {
					    case ATTACKER: {
							if(OneOnOne == false) SetPlayerPos(playerid, AAttackerSpawn[Current][0] + random(6), AAttackerSpawn[Current][1] + random(6), AAttackerSpawn[Current][2]);
							else {
								SetPlayerPos(playerid, DuelASpawn[Current][0] + random(2), DuelASpawn[Current][1] + random(2), DuelASpawn[Current][2]);
								SetPlayerFacingAngle(playerid, DuelASpawn[Current][3]);
							}
						} case DEFENDER: {
					 		if(OneOnOne == false) SetPlayerPos(playerid, ADefenderSpawn[Current][0] + random(6), ADefenderSpawn[Current][1] + random(6), ADefenderSpawn[Current][2]);
					 		else {
							 	SetPlayerPos(playerid, DuelBSpawn[Current][0] + random(2), DuelBSpawn[Current][1] + random(2), DuelBSpawn[Current][2]);
								SetPlayerFacingAngle(playerid, DuelBSpawn[Current][3]);
							}
						}
					}
				    if(OneOnOne == false) SetPlayerInterior(playerid, AInterior[Current]);
				    else SetPlayerInterior(playerid, DuelInterior[Current]);
				}
				SetPlayerVirtualWorld(playerid, 2);
			}

			ColorFix(playerid);
			SetPlayerSkin(playerid, Skin[Player[playerid][Team]]);
			SAMP_SetPlayerTeam(playerid, Player[playerid][Team]);

   			RadarFix();

	        if(GameType == BASE)
			{
				if(SaveVariables[i][WeaponsPicked] > -1)
				{
					//OnDialogResponse(playerid, DIALOG_WEAPONS_TYPE, 1, SaveVariables[i][WeaponsPicked], "");
					new listitem = SaveVariables[i][WeaponsPicked];
                    if(listitem != 0)
					{
						if((Player[playerid][Team] == ATTACKER && TimesPicked[ATTACKER][listitem-1] >= WeaponLimit[listitem-1]) || (Player[playerid][Team] == DEFENDER && TimesPicked[DEFENDER][listitem-1] >= WeaponLimit[listitem-1]))
						{
			                ShowPlayerWeaponMenu(playerid, Player[playerid][Team]);
			                SendErrorMessage(playerid,"This Weapon Set Is Currently Full.");
			                SetTimerEx("ReshowCPForPlayer", 1000, false, "i", playerid);
							return 1;
				        }
					}

					if(!listitem)
					{
					    ShowPlayerWeaponMenu(playerid, Player[playerid][Team]);
					    SetTimerEx("ReshowCPForPlayer", 1000, false, "i", playerid);
						return 1;
					}
					else
					{
					    GivePlayerWeapon(playerid, GunMenuWeapons[listitem-1][0], 9999);
					    GivePlayerWeapon(playerid, GunMenuWeapons[listitem-1][1], 9999);
					    if(IsPlayerInAnyVehicle(playerid))
							SetPlayerArmedWeapon(playerid, 0);
					    switch(GunMenuWeapons[listitem-1][0])
					    {
					        case WEAPON_DEAGLE:
					        {
					            format(Player[playerid][PlayerTypeByWeapon], 32, "Deagler");
					        }
					        case WEAPON_SHOTGSPA:
					        {
		                        format(Player[playerid][PlayerTypeByWeapon], 32, "Spasser");
					        }
					        case WEAPON_M4:
					        {
		                        format(Player[playerid][PlayerTypeByWeapon], 32, "M4~er");
					        }
					        case WEAPON_SNIPER:
					        {
		                        format(Player[playerid][PlayerTypeByWeapon], 32, "Sniper");
					        }
					        case WEAPON_AK47:
					        {
		                        format(Player[playerid][PlayerTypeByWeapon], 32, "AK~er");
							}
							default:
							{
		                        switch(GunMenuWeapons[listitem-1][1])
							    {
				                    case WEAPON_DEAGLE:
							        {
							            format(Player[playerid][PlayerTypeByWeapon], 32, "Deagler");
							        }
							        case WEAPON_SHOTGSPA:
							        {
				                        format(Player[playerid][PlayerTypeByWeapon], 32, "Spasser");
							        }
							        case WEAPON_M4:
							        {
				                        format(Player[playerid][PlayerTypeByWeapon], 32, "M4~er");
							        }
							        case WEAPON_SNIPER:
							        {
				                        format(Player[playerid][PlayerTypeByWeapon], 32, "Sniper");
							        }
							        case WEAPON_AK47:
							        {
				                        format(Player[playerid][PlayerTypeByWeapon], 32, "AK~er");
									}
									default:
									{
				                        format(Player[playerid][PlayerTypeByWeapon], 32, "Un-recognised");
									}
							    }
							}
					    }
					    if(GiveKnife)
			    			GivePlayerWeapon(playerid, WEAPON_KNIFE, 9999);

					    format(iString, sizeof(iString), "%s%s{FFFFFF} has selected (%s%s{FFFFFF} and %s%s{FFFFFF}).", TextColor[Player[playerid][Team]], Player[playerid][Name], TextColor[Player[playerid][Team]], WeaponNames[GunMenuWeapons[listitem-1][0]], TextColor[Player[playerid][Team]], WeaponNames[GunMenuWeapons[listitem-1][1]]);
					}

		            TimesPicked[Player[playerid][Team]][listitem-1]++;
		            Player[playerid][WeaponPicked] = listitem;

			        switch(Player[playerid][Team])
					{
						case ATTACKER:
						{
							foreach(new j : Player)
							{
		                		if(Player[j][Team] == ATTACKER)
									SendClientMessage(j, -1, iString);
							}
						}
						case DEFENDER:
						{

						    foreach(new j : Player)
							{
		                		if(Player[j][Team] == DEFENDER)
									SendClientMessage(j, -1, iString);
							}
						}
		            }

			        if(RoundPaused == true)
						TogglePlayerControllableEx(playerid, false);
			        else
						TogglePlayerControllableEx(playerid, true);
				}
				else
				{
				    ShowPlayerWeaponMenu(playerid, Player[playerid][Team]);
                }

                if(SaveVariables[i][HadParachute] == 1)
				{
				    GivePlayerWeapon(playerid, WEAPON_PARACHUTE, 1);
				    SetPlayerArmedWeapon(playerid, WEAPON_PARACHUTE);
				}
				else
					SetPlayerArmedWeapon(playerid, 0);

				if(SaveVariables[i][pVehicleID] != -1)
				{
				    SetTimerEx("RespawnInVehicleAfterComeBack", 500, false, "ddd", playerid, SaveVariables[i][pVehicleID], SaveVariables[i][pSeatID]);
				}

				//ShowPlayerWeaponMenu(playerid, Player[playerid][Team]);
				SetPlayerCheckpoint(playerid, BCPSpawn[Current][0], BCPSpawn[Current][1], BCPSpawn[Current][2], 2);
				GangZoneShowForPlayer(playerid, CPZone, 0xFF000044);
				SetTimerEx("ReshowCPForPlayer", 1000, false, "i", playerid);
			}
			else if(GameType == ARENA || GameType == TDM )
			{
				if(OneOnOne == false) GivePlayerArenaWeapons(playerid);
				else {
				    if(Current != -1) {
						GivePlayerWeapon(playerid, DuelWeapons[Current][0], 9999);
						GivePlayerWeapon(playerid, DuelWeapons[Current][1], 9999);
					}
				}
			}


			if(TeamHPDamage == true) {
				switch(Player[playerid][Team]) {
				    case ATTACKER: {
						TextDrawShowForPlayer(playerid, AttackerTeam[0]);
						TextDrawShowForPlayer(playerid, AttackerTeam[1]);
					} case DEFENDER: {
						TextDrawShowForPlayer(playerid, DefenderTeam[0]);
						TextDrawShowForPlayer(playerid, DefenderTeam[1]);
		            }
				}
			}

			if(RoundPaused == true) {
				TogglePlayerControllableEx(playerid, false);
				iString = "~r~Round Paused";
				PlayerTextDrawSetString(playerid, FPSPingPacket, iString);
				TextDrawSetString(PauseTD, iString);
				TextDrawShowForAll(PauseTD);
			}


	        format(iString,sizeof(iString),""COL_PRIM"Re-added player {FFFFFF}%s. "COL_PRIM"Variables successfully loaded.", Player[playerid][Name]);
	    	SendClientMessageToAll(-1, iString);

			#if SKINICONS == 1
            if(ShowIcons == true) {
		    	SetTimer("UpdateAliveForAll", 2000, false);
			}
			#endif

			if(Player[playerid][TextPos] == false) format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDamage ~r~%.0f~n~%sTotal Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[playerid][RoundKills], MAIN_TEXT_COLOUR, Player[playerid][RoundDamage], MAIN_TEXT_COLOUR, Player[playerid][TotalDamage]);
			else format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDmg ~r~%.0f~n~%sT. Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[playerid][RoundKills], MAIN_TEXT_COLOUR, Player[playerid][RoundDamage], MAIN_TEXT_COLOUR, Player[playerid][TotalDamage]);
			PlayerTextDrawSetString(playerid, RoundKillDmgTDmg, iString);

			foreach(new x : Player) {
			    OnPlayerStreamIn(playerid, x);
			    OnPlayerStreamIn(x, playerid);
			}

			SaveVariables[i][PauseWait] = false;


			if(ESLMode == true && RoundUnpausing == false && RoundPaused == true) {
			    new bool:unpause = true;
				for(new j=0; j < SAVE_SLOTS; ++j) {
				    if(SaveVariables[j][PauseWait] == true && strlen( SaveVariables[j][pName] ) > 2) {
				        unpause = false;
				    }
				}
				if(unpause) {
					PauseCountdown = 4;
					UnpauseRound();
				}
				TimedOutPlayers--;

			    new attackers, defenders;
				foreach(new x : Player) {
				    if(Player[x][Playing] == true) {
					    if(Player[x][Team] == ATTACKER) attackers++;
					    else if(Player[x][Team] == DEFENDER) defenders++;
					}
				}

				if(attackers == defenders) {
					PauseCountdown = 4;
					UnpauseRound();
				}


				if(TimedOutPlayers <= 0) {
					PauseCountdown = 4;
					UnpauseRound();
				}

			}

			StyleTextDrawFix(playerid);

			ResetSaveVariables(i);

	    	return 1;
		}
	}

	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has spawned as: {FFFFFF}%s", Player[playerid][Name], TeamName[Player[playerid][Team]]);
	SendClientMessageToAll(-1, iString);

	return 1;
}

forward RespawnInVehicleAfterComeBack(playerid, vehicleid, seatid);
public RespawnInVehicleAfterComeBack(playerid, vehicleid, seatid)
{
    new ct = 0;
	foreach(new k : Player)
	{
		if(GetPlayerVehicleID(k) == vehicleid && GetPlayerVehicleSeat(k) == seatid)
	    	ct ++;
	}
    if(ct == 0)
    {
        PutPlayerInVehicle(playerid, vehicleid, seatid);
	}
	return 1;
}

stock ResetSaveVariables(i) {

    SaveVariables[i][pCoords][0] = 0.0;
	SaveVariables[i][pCoords][1] = 0.0;
	SaveVariables[i][pCoords][2] = 0.0;
	SaveVariables[i][pCoords][3] = 0.0;

	format(SaveVariables[i][pName], 24, "");

	SaveVariables[i][gHealth] = 0.0;
	SaveVariables[i][gArmour] = 0.0;
	SaveVariables[i][pInterior] = 0;
	SaveVariables[i][pVWorld] = 0;
    SaveVariables[i][pTeam] = 0;
    SaveVariables[i][RKills] = 0;
	SaveVariables[i][RDeaths] = 0;
    SaveVariables[i][RDamage] = 0;
    SaveVariables[i][TKills] = 0;
    SaveVariables[i][TDeaths] = 0;
    SaveVariables[i][TDamage] = 0;
    SaveVariables[i][RoundID] = -1;
    for(new j = 0; j < 55; j ++)
    	SaveVariables[i][WeaponStat][j] = 0;

    SaveVariables[i][WasCrashedInStart] = false;
    SaveVariables[i][ToBeAdded] = false;
    SaveVariables[i][CheckScore] = false;
    SaveVariables[i][PauseWait] = false;
    SaveVariables[i][pVehicleID] = -1;
    SaveVariables[i][pSeatID] = -1;
    SaveVariables[i][HadParachute] = 0;

}

stock ClearPlayerVariables()
{
	for(new i = 0; i < SAVE_SLOTS; i ++) {
		ResetSaveVariables(i);
	}
}

stock IsTeamTheSame(team1, team2)
{
	if(team1 == team2)
	    return true;
	else if((team1 == DEFENDER || team2 == DEFENDER) && (team1 == DEFENDER_SUB || team2 == DEFENDER_SUB))
		return true;
	else if((team1 == ATTACKER || team2 == ATTACKER) && (team1 == ATTACKER_SUB || team2 == ATTACKER_SUB))
		return true;
	else
	    return false;
}

stock SpecWeapons(playerid) {

    new WeaponString[256];
	new WeaponID2, Ammo2, weaponsfound;

	format(WeaponString, sizeof WeaponString, "   %sWeapons~n~~n~", MAIN_TEXT_COLOUR);
	for(new i = 0; i < 13; i++){
	    if(i == 0 || i == 1){
	   		GetPlayerWeaponData(playerid,i,WeaponID2,Ammo2);
	   		if(Ammo2 > 1){
			    Ammo2 = 1;
			}
	    } else {
	   		GetPlayerWeaponData(playerid,i,WeaponID2,Ammo2);
		}

		if(WeaponID2 > 0 && Ammo2 > 0) {
		    if(Ammo2 > 60000) {
		        Ammo2 = 1;
	        }

            weaponsfound++;
            if(weaponsfound <= 6) {
				format(WeaponString,sizeof(WeaponString),"%s%s%s ~r~~h~%d~n~", WeaponString, MAIN_TEXT_COLOUR, WeaponNames[WeaponID2], Ammo2);
			}
		}
	}

	if(!weaponsfound) {
		format(WeaponString, sizeof(WeaponString),"%s%sFist", WeaponString, MAIN_TEXT_COLOUR);
	}

	return WeaponString;

}

stock RemoveClanTagFromName(playerid) {
    new start, end, string[MAX_PLAYER_NAME];
    format(string, MAX_PLAYER_NAME, "%s", Player[playerid][Name]);
    start = strfind(string, "[", true);
    end = strfind(string, "]", true);
    if (start >= end){
		return string;
    }else{
        strdel(string, start, end + 1);
        return string;
    }
}

stock ColorFix(playerid) {
	if(Player[playerid][Playing] == true) {

	    switch(Player[playerid][Team]) {
	        case ATTACKER: SetPlayerColor(playerid, ATTACKER_PLAYING);
	        case DEFENDER: SetPlayerColor(playerid, DEFENDER_PLAYING);
	        case REFEREE: SetPlayerColor(playerid, REFEREE_COLOR);
		}

		new team = Player[playerid][Team];
		if(TeamHasLeader[team] == true && TeamLeader[team] == playerid)
		    PlayerLeadTeam(playerid, true, false);
	} else {
	    switch(Player[playerid][Team]) {
	        case ATTACKER: SetPlayerColor(playerid, ATTACKER_NOT_PLAYING);
	        case DEFENDER: SetPlayerColor(playerid, DEFENDER_NOT_PLAYING);
	        case REFEREE: SetPlayerColor(playerid, REFEREE_COLOR);
	        case ATTACKER_SUB: SetPlayerColor(playerid, ATTACKER_SUB_COLOR);
	        case DEFENDER_SUB: SetPlayerColor(playerid, DEFENDER_SUB_COLOR);
		}
	}
}

stock RadarFix() {
    foreach(new i : Player) {
		foreach(new x : Player) {
/*			if(Player[i][Team] == ATTACKER_SUB || Player[i][Team] == DEFENDER_SUB) {
			    SetPlayerMarkerForPlayer(x,i,GetPlayerColor(i) & 0xFFFFFF00);
			    return 1;
			}
*/
		    if(Player[i][Playing] == true && Player[x][Playing] == true) {
		        if(Player[i][Team] != Player[x][Team]) {
					SetPlayerMarkerForPlayer(x,i, GetPlayerColor(i) & 0xFFFFFF00);
	            } else {
					SetPlayerMarkerForPlayer(x, i, GetPlayerColor(i) | 0x00000055);
				}
			} else if(Player[i][Playing] == true && Player[x][Playing] == false) {
				if(Player[i][Team] != Player[x][Team]) {
					SetPlayerMarkerForPlayer(x,i, GetPlayerColor(i) & 0xFFFFFF00);
	            } else {
					SetPlayerMarkerForPlayer(x, i, GetPlayerColor(i) | 0x00000055);
				}
			}
		}
    }
	switch(GameType)
	{
	    case BASE:
	    {
	        GangZoneShowForAll(CPZone, 0xFF000044);
	    }
	    case ARENA:
	    {
	        GangZoneShowForAll(ArenaZone,0x95000099);
	    }
	}
    return 1;
}



stock ClearChat() {
	for(new i = 0; i <= 10; i++) {
	    SendClientMessageToAll(-1, " ");
	}
}

stock ClearChatForPlayer(playerid) {
	for(new i = 0; i <= 10; i++) {
	    SendClientMessage(playerid, -1, " ");
	}
}

stock GetVehicleModelID(vehiclename[])
{
	for(new i = 0; i < 211; i++){
        if(strfind(aVehicleNames[i], vehiclename, true) != -1)
        return i + 400;
    } return -1;
}

stock ClearKillList() {
	for(new i = 0; i < 5; i++) {
	    SendDeathMessage(255, 50, 255);
	}
}

stock DestroyAllVehicles() {
	for(new i = 0; i < MAX_VEHICLES; i++)
	{
	    if(i == thetrain)
	        continue;
 //       Delete3DTextLabel(Vehicle3DText[i]);
	    DestroyVehicle(i);
	}

/*	foreach(new i : Player) {
	    if(Player[i][LastVehicle] != -1) {
            Delete3DTextLabel(Vehicle3DText[Player[i][LastVehicle]]);
            Player[i][LastVehicle] = -1;
		}
	}
*/
}

SyncPlayer(playerid)
{
	if(RoundPaused == true && Player[playerid][Playing]) return 1;
	if(Player[playerid][Syncing] == true) return 1;
	if(AllowStartBase == false) return 1;
	if(IsPlayerInAnyVehicle(playerid)) return 1;
	if(Player[playerid][IsAFK] == true || Player[playerid][IsFrozen] == true) return 1;
	//if(Player[playerid][IsFreezed] == true) return 1;

	Player[playerid][Syncing] = true;
	SetTimerEx("SyncInProgress", 1000, false, "i", playerid);

	new bool:IsPlayerSpecing[MAX_PLAYERS] = false;
	foreach(new i : Player) {
	    if(Player[i][Spectating] == true && Player[i][IsSpectatingID] == playerid) {
	        IsPlayerSpecing[i] = true;
		}
	}

	new Float:HP[2], Float:Pos[4], Int, VirtualWorld, CurrWep;
	GetHP(playerid, HP[0]);
	GetAP(playerid, HP[1]);

	CurrWep = GetPlayerWeapon(playerid);

	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	GetPlayerFacingAngle(playerid, Pos[3]);

	Int = GetPlayerInterior(playerid);
	VirtualWorld = GetPlayerVirtualWorld(playerid);

	new Weapons[13][2];
	for(new i = 0; i < 13; i++) {
	    GetPlayerWeaponData(playerid, i, Weapons[i][0], Weapons[i][1]);
	}

	ClearAnimations(playerid);

	SetSpawnInfoEx(playerid, GetPlayerTeam(playerid), Skin[Player[playerid][Team]], Pos[0], Pos[1], Pos[2]-0.4, Pos[3], 0, 0, 0, 0, 0, 0);

	Player[playerid][IgnoreSpawn] = true;
	SpawnPlayerEx(playerid);

	SetHP(playerid, HP[0]);
	SetAP(playerid, HP[1]);

	SetPlayerInterior(playerid, Int);
	SetPlayerVirtualWorld(playerid, VirtualWorld);

	for(new i = 0; i < 13; i++) {
	    GivePlayerWeapon(playerid, Weapons[i][0], Weapons[i][1]);
	}

	SetPlayerArmedWeapon(playerid, CurrWep);

	foreach(new i : Player) {
	    if(IsPlayerSpecing[i] == true) {
	        SetTimerEx("ReSpectatePlayer", 1000, false, "ii", i, playerid);
		}

//		OnPlayerStreamIn(playerid, i);
//		OnPlayerStreamIn(i, playerid);

	}

	return 1;
}



stock SpawnPlayerEx(playerid) {
	if(Player[playerid][Spawned] == true) {
	    StyleTextDrawFix(playerid);
		if(IsPlayerInAnyVehicle(playerid)) RemovePlayerFromVehicle(playerid);
		SetPlayerPos(playerid, 0, 0, 0);
	 	SpawnPlayer(playerid);
	}
	return 1;
}


stock HexToInt(string[])
{
  if (string[0]==0) return 0;
  new i;
  new cur=1;
  new res=0;
  for (i=strlen(string);i>0;i--) {
    if (string[i-1]<58) res=res+cur*(string[i-1]-48); else res=res+cur*(string[i-1]-65+10);
    cur=cur*16;
  }
  return res;
}


stock IsNumeric(string[]){
    for (new i = 0, j = strlen(string); i < j; i++){
    	if (string[i] > '9' || string[i] < '0') return 0;
    }
    return 1;
}

/*
stock strmatch(const sStr1[], const sStr2[]) {
	return (strcmp(sStr1, sStr2, true) == 0) && (strlen(sStr2) == strlen(sStr1)) ? true : false;
}
*/

forward Float:GetPlayerPacketLoss(playerid);
public Float:GetPlayerPacketLoss(playerid) {

    /*new stats[401], stringstats[70];
    GetPlayerNetworkStats(playerid, stats, sizeof(stats));
    new len = strfind(stats, "Packetloss: ");
    new Float:packetloss = 0.0;
    if(len != -1) {
        strmid(stringstats, stats, len, strlen(stats));
        new len2 = strfind(stringstats, "%");
        if(len != -1) {
            strdel(stats, 0, strlen(stats));
            strmid(stats, stringstats, len2-3, len2);
            packetloss = floatstr(stats);
        }
    }*/

    return NetStats_PacketLossPercent(playerid);
}

stock GetPlayerFPS(playerid) {
	new drunk2 = GetPlayerDrunkLevel(playerid);
	if(drunk2 < 100){
	    SetPlayerDrunkLevel(playerid,2000);
	}else{
	    if(Player[playerid][DLlast] != drunk2){
	        new fps = Player[playerid][DLlast] - drunk2;
	        if((fps > 0) )// && (fps < 200))
   				Player[playerid][FPS] = fps;
			Player[playerid][DLlast] = drunk2;
		}
	}
}


/*
stock pProfile(playerid) {
	new String[128];
	format(String, sizeof(String), "attackdefend/users/%s.ini", Player[playerid][Name]);
	printf("pProfile: %s", String);
	return String;
}
*/

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(newkeys == 160 && (GetPlayerWeapon(playerid) == 0 || GetPlayerWeapon(playerid) == 1) && !IsPlayerInAnyVehicle(playerid)){
		SyncPlayer(playerid);
		return 1;
	}


	if(Player[playerid][TextDrawOnScreen] == true && PRESSED(4)) {
	    HideEndRoundTextDraw(playerid);
//	    ClearChatForPlayer(playerid);
		if(Player[playerid][InDM] == false && Player[playerid][Playing] == false) SetPlayerVirtualWorld(playerid, 0);
	}


	if(IsPlayerInAnyVehicle(playerid) && PRESSED(KEY_FIRE) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
 		AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
		return 1;
	}

	if(Player[playerid][SpectatingRound] != -1) {
	    new iString[256];
	    switch(Player[playerid][SpectatingType]) {
	        case BASE: {
	            if(newkeys == 4) {
				    new searching;
				    for(new i = Player[playerid][SpectatingRound]+1; i <= TotalBases+1; i++) {
						if(searching > 1) {
							break;
						}
				    	if(i == TotalBases+1) {
							i = 0;
				            searching++;
						}
						if(BExist[i] == true) {
						    Player[playerid][SpectatingRound] = i;
					        SetPlayerInterior(playerid, BInterior[i]);
							SetPlayerCameraLookAt(playerid,BCPSpawn[i][0],BCPSpawn[i][1],BCPSpawn[i][2]);
					   		SetPlayerCameraPos(playerid,BCPSpawn[i][0]+100,BCPSpawn[i][1],BCPSpawn[i][2]+80);
							SetPlayerPos(playerid, BCPSpawn[i][0], BCPSpawn[i][1], BCPSpawn[i][2]);
							format(iString, sizeof(iString), "%sBase ~n~%s%s (ID: ~r~~h~%d%s)", MAIN_TEXT_COLOUR, MAIN_TEXT_COLOUR, BName[i], i, MAIN_TEXT_COLOUR);
							PlayerTextDrawSetString(playerid, TD_RoundSpec, iString);
						 	break;
						}
					}
				} else if(newkeys == 128) {
				    new searching;
					for(new i = Player[playerid][SpectatingRound]-1; i >= 0; i--) {
						if(searching > 1) {
						    break;
						}
						if(i == 0) {
							i = TotalBases+1;
				            searching++;
						}

						if(BExist[i] == true) {
						    Player[playerid][SpectatingRound] = i;
					        SetPlayerInterior(playerid, BInterior[i]);
							SetPlayerCameraLookAt(playerid,BCPSpawn[i][0],BCPSpawn[i][1],BCPSpawn[i][2]);
					   		SetPlayerCameraPos(playerid,BCPSpawn[i][0]+100,BCPSpawn[i][1],BCPSpawn[i][2]+80);
							SetPlayerPos(playerid, BCPSpawn[i][0], BCPSpawn[i][1], BCPSpawn[i][2]);

							format(iString, sizeof(iString), "%sBase ~n~%s%s (ID: ~r~~h~%d%s)", MAIN_TEXT_COLOUR, MAIN_TEXT_COLOUR, BName[i], i, MAIN_TEXT_COLOUR);
							PlayerTextDrawSetString(playerid, TD_RoundSpec, iString);
						 	break;
						}
					}
				}
	        } case ARENA,TDM: {
	            if(newkeys == 4) {
				    new searching;
				    for(new i = Player[playerid][SpectatingRound]+1; i <= TotalArenas+1; i++) {
						if(searching > 1) {
							break;
						}
				    	if(i == TotalArenas+1) {
							i = 0;
				            searching++;
						}
						if(AExist[i] == true) {
						    Player[playerid][SpectatingRound] = i;
							SetPlayerCameraLookAt(playerid,ACPSpawn[Player[playerid][SpectatingRound]][0],ACPSpawn[Player[playerid][SpectatingRound]][1],ACPSpawn[Player[playerid][SpectatingRound]][2]);
					   		SetPlayerCameraPos(playerid,ACPSpawn[Player[playerid][SpectatingRound]][0]+100,ACPSpawn[Player[playerid][SpectatingRound]][1],ACPSpawn[Player[playerid][SpectatingRound]][2]+80);
							SetPlayerPos(playerid, ACPSpawn[Player[playerid][SpectatingRound]][0], ACPSpawn[Player[playerid][SpectatingRound]][1], ACPSpawn[Player[playerid][SpectatingRound]][2]);
							SetPlayerInterior(playerid, AInterior[Player[playerid][SpectatingRound]]);

							if( GameType == ARENA ) format(iString, sizeof(iString), "%sArena ~n~%s%s (ID: ~r~~h~%d%s)", MAIN_TEXT_COLOUR, MAIN_TEXT_COLOUR, AName[Player[playerid][SpectatingRound]], Player[playerid][SpectatingRound], MAIN_TEXT_COLOUR);
							else if( GameType == TDM ) format(iString, sizeof(iString), "%sTDM ~n~%s%s (ID: ~r~~h~%d%s)", MAIN_TEXT_COLOUR, MAIN_TEXT_COLOUR, AName[Player[playerid][SpectatingRound]], Player[playerid][SpectatingRound], MAIN_TEXT_COLOUR);
							PlayerTextDrawSetString(playerid, TD_RoundSpec, iString);
						 	break;
						}
					}
				} else if(newkeys == 128) {
				    new searching;
					for(new i = Player[playerid][SpectatingRound]-1; i >= 0; i--) {
						if(searching > 1) {
						    break;
						}
						if(i == 0) {
							i = TotalArenas+1;
				            searching++;
						}

						if(AExist[i] == true) {
						    Player[playerid][SpectatingRound] = i;
							SetPlayerCameraLookAt(playerid,ACPSpawn[Player[playerid][SpectatingRound]][0],ACPSpawn[Player[playerid][SpectatingRound]][1],ACPSpawn[Player[playerid][SpectatingRound]][2]);
					   		SetPlayerCameraPos(playerid,ACPSpawn[Player[playerid][SpectatingRound]][0]+100,ACPSpawn[Player[playerid][SpectatingRound]][1],ACPSpawn[Player[playerid][SpectatingRound]][2]+80);
							SetPlayerPos(playerid, ACPSpawn[Player[playerid][SpectatingRound]][0], ACPSpawn[Player[playerid][SpectatingRound]][1], ACPSpawn[Player[playerid][SpectatingRound]][2]);
							SetPlayerInterior(playerid, AInterior[Player[playerid][SpectatingRound]]);

							format(iString, sizeof(iString), "%sArena ~n~%s%s (ID: ~r~~h~%d%s)", MAIN_TEXT_COLOUR, MAIN_TEXT_COLOUR, AName[Player[playerid][SpectatingRound]], Player[playerid][SpectatingRound], MAIN_TEXT_COLOUR);
							PlayerTextDrawSetString(playerid, TD_RoundSpec, iString);
						 	break;
						}
					}
				}

			} case DUEL: {
	            if(newkeys == 4) {
				    new searching;
				    for(new i = Player[playerid][SpectatingRound]+1; i <= TotalDuels+1; i++) {
						if(searching > 1) {
							break;
						}
				    	if(i == TotalDuels+1) {
							i = 0;
				            searching++;
						}
						if(DuelExists[i] == true) {
						    Player[playerid][SpectatingRound] = i;
							SetPlayerCameraLookAt(playerid,DuelCamera[i][0],DuelCamera[i][1],DuelCamera[i][2]);
					   		SetPlayerCameraPos(playerid,DuelCamera[i][0]+100,DuelCamera[i][1],DuelCamera[i][2]+80);
							SetPlayerPos(playerid, DuelCamera[i][0], DuelCamera[i][1], DuelCamera[i][2]);
							SetPlayerInterior(playerid, DuelInterior[i]);

							format(iString, sizeof(iString), "%sDuel ~n~%s%s (ID: ~r~~h~%d%s)", MAIN_TEXT_COLOUR, MAIN_TEXT_COLOUR, DuelName[i], i, MAIN_TEXT_COLOUR);
							PlayerTextDrawSetString(playerid, TD_RoundSpec, iString);
						 	break;
						}
					}
				} else if(newkeys == 128) {
				    new searching;
					for(new i = Player[playerid][SpectatingRound]-1; i >= 0; i--) {
						if(searching > 1) {
						    break;
						}
						if(i == 0) {
							i = TotalDuels+1;
				            searching++;
						}

						if(DuelExists[i] == true) {
						    Player[playerid][SpectatingRound] = i;
							SetPlayerCameraLookAt(playerid,DuelCamera[i][0],DuelCamera[i][1],DuelCamera[i][2]);
					   		SetPlayerCameraPos(playerid,DuelCamera[i][0]+100,DuelCamera[i][1],DuelCamera[i][2]+80);
							SetPlayerPos(playerid, DuelCamera[i][0], DuelCamera[i][1], DuelCamera[i][2]);
							SetPlayerInterior(playerid, DuelInterior[i]);

							format(iString, sizeof(iString), "%sDuel ~n~%s%s (ID: ~r~~h~%d%s)", MAIN_TEXT_COLOUR, MAIN_TEXT_COLOUR, DuelName[i], i, MAIN_TEXT_COLOUR);
							PlayerTextDrawSetString(playerid, TD_RoundSpec, iString);
						 	break;
						}
					}
				}

			}
		}
		if(newkeys == 32) {
		    switch(Player[playerid][SpectatingType]) {
				case BASE: format(iString, sizeof(iString), ""COL_PRIM"Spectating Base: {FFFFFF}%s (ID: %d)", BName[Player[playerid][SpectatingRound]], Player[playerid][SpectatingRound]);
				case ARENA: format(iString, sizeof(iString), ""COL_PRIM"Spectating Arena: {FFFFFF}%s (ID: %d)", AName[Player[playerid][SpectatingRound]], Player[playerid][SpectatingRound]);
				case DUEL: format(iString, sizeof(iString), ""COL_PRIM"Spectating Duel: {FFFFFF}%s (ID: %d)", DuelName[Player[playerid][SpectatingRound]], Player[playerid][SpectatingRound]);
			}
		    SendClientMessage(playerid, -1, iString);
			SetCameraBehindPlayer(playerid);
		    Player[playerid][SpectatingRound] = -1;
		    PlayerTextDrawSetString(playerid, TD_RoundSpec, "_");
		    Player[playerid][Spectating] = false;
		}

		return 1;
	}




	if(Player[playerid][Spectating] == true && noclipdata[playerid][FlyMode] == false) {
		if(newkeys == 4) {
            Player[playerid][CalledByPlayer] = true;

			if(Current != -1 && (Player[playerid][Team] == ATTACKER || Player[playerid][Team] == ATTACKER_SUB || Player[playerid][Team] == DEFENDER || Player[playerid][Team] == DEFENDER_SUB)) {
				SpectateNextTeamPlayer(playerid);
			} else {
			    SpectateNextPlayer(playerid);
			}
		} else if(newkeys == 128) {
            Player[playerid][CalledByPlayer] = true;

			if(Current != -1 && (Player[playerid][Team] == ATTACKER || Player[playerid][Team] == ATTACKER_SUB || Player[playerid][Team] == DEFENDER || Player[playerid][Team] == DEFENDER_SUB)) {
				SpectatePreviousTeamPlayer(playerid);
			} else {
			    SpectatePreviousPlayer(playerid);
			}
		}
	}

	if(Current == -1) {
		if(PRESSED(KEY_YES) && Player[playerid][Level] > 1) {
			EnableInterface(playerid);
			return 1;

		} else if(PRESSED(KEY_YES) && ESLMode == true && AllowStartBase == true && Player[playerid][Readied] == false) {
			if(Player[playerid][Team] == ATTACKER || Player[playerid][Team] == DEFENDER) {

				Player[playerid][Readied] = true;

				new playersReady = 0;
				new attackers, defenders, iString[180];

				foreach(new i : Player) {
				    if(Player[i][Team] == ATTACKER || Player[i][Team] == DEFENDER) {
						if(Player[i][Readied] == true) {
				            playersReady++;
						}

						if(Player[i][Team] == DEFENDER) {
					        defenders++;
						} else if(Player[i][Team] == ATTACKER) {
						    attackers++;
						}
					} else {
					    Player[i][Readied] = false;
					}
				}

				if(OneOnOne == false) {
					format(iString, sizeof(iString), "%s%s {FFFFFF}is set to ready mode {FFFFFF}.: %d / %d | {FF4444}%s{FFFFFF}: %d - {3388FF}%s{FFFFFF}: %d :.",TextColor[Player[playerid][Team]], Player[playerid][Name], playersReady, MaxESLPlayers, TeamName[ATTACKER], attackers, TeamName[DEFENDER], defenders);
				} else {
					format(iString, sizeof(iString), "%s%s {FFFFFF}is set to ready mode {FFFFFF}.: %d / %d | {FF4444}%s{FFFFFF}: %d - {3388FF}%s{FFFFFF}: %d :.",TextColor[Player[playerid][Team]], Player[playerid][Name], playersReady, (attackers + defenders), TeamName[ATTACKER], attackers, TeamName[DEFENDER], defenders);
				}
				SendClientMessageToAll(-1, iString);

				if(playersReady >= MaxESLPlayers && attackers == defenders && OneOnOne == false) {
					if(CurrentRound != (TotalRounds - 1)) {
					    new BaseID = DetermineRandomRound(2, 0, BASE);

						if(BaseID == -1) {
						    for(new i = 0; i < MAX_BASES; i++) {
								RecentBase[i] = -1;
							}
							BasesPlayed = 0;
							BaseID = DetermineRandomRound(2, 0, BASE);
						}

						AllowStartBase = false;
						SetTimerEx("OnBaseStart", 4000, false, "i", BaseID);
		                Current = BaseID;

						format(iString, sizeof(iString), "{FFFFFF}System "COL_PRIM"has randomly started Base: {FFFFFF}%s (ID: %d)", BName[BaseID], BaseID);
						SendClientMessageToAll(-1, iString);

						GameType = BASE;
					} else {
						new ArenaID = 1;
		                Current = ArenaID;

						AllowStartBase = false; // Make sure other player or you yourself is not able to start base on top of another base.
						SetTimerEx("OnArenaStart", 4000, false, "i", ArenaID);

						format(iString, sizeof(iString), "{FFFFFF}System "COL_PRIM"has started Arena: {FFFFFF}%s (ID: %d)", AName[ArenaID], ArenaID);
						SendClientMessageToAll(-1, iString);

						GameType = ARENA;
					}

					foreach(new i : Player) {
					    if(CanPlay(i)) {
							TogglePlayerControllableEx(i, false);
							Player[i][ToAddInRound] = true;
						}
					}
				} else if(playersReady == (attackers+defenders) && attackers == defenders && OneOnOne == true) {
					new ArenaID = 1;
		   			Current = ArenaID;

					AllowStartBase = false; // Make sure other player or you yourself is not able to start base on top of another base.
					SetTimerEx("OnArenaStart", 4000, false, "i", ArenaID);

					format(iString, sizeof(iString), "{FFFFFF}System "COL_PRIM"has started Duel: {FFFFFF}%s (ID: %d)", DuelName[ArenaID], ArenaID);
					SendClientMessageToAll(-1, iString);

					GameType = ARENA;

					foreach(new i : Player) {
					    if(CanPlay(i)) {
							TogglePlayerControllableEx(i, false);
							Player[i][ToAddInRound] = true;
						}
					}
				}
			} else {
			    return SendErrorMessage(playerid,"You need to be part of either Alpha or Beta team.");
			}
			return 1;

		} else if(PRESSED(131072)) {
		    ShowEndRoundTextDraw(playerid);
		    return 1;
		}
	} /*else if(Current != -1 && PRESSED(262144) && Player[playerid][Level] > 1) {
		EnableInterface(playerid);
		return 1;
	}*/


	if(Current != -1 && Player[playerid][Playing] == true)
	{
		if(Player[playerid][Level] > 0)
	    {
			if(PRESSED(65536))
			{
		    	new iString[160];
				if(RoundPaused == false)
				{
    	//			if(ESLMode == true) return SendErrorMessage(playerid,"Can't use when ESL mode is enabled.");
				    if(RoundUnpausing == true) return SendErrorMessage(playerid,"Round is unpausing, please wait.");

					PausePressed = true;
					SetTimer("PausedIsPressed", 4000, false);

				    PauseRound();

					format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has paused the current round.", Player[playerid][Name]);
					SendClientMessageToAll(-1, iString);
					return 1;
				}
				else
				{
    		//		if(ESLMode == true) return SendErrorMessage(playerid,"Can't use when ESL mode is enabled.");
					if(PausePressed == true) return SendErrorMessage(playerid,"Please Wait.");
					if(RoundUnpausing == true) return 1;

					PauseCountdown = 4;
				    UnpauseRound();

					format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has unpaused the current round.", Player[playerid][Name]);
					SendClientMessageToAll(-1, iString);
					return 1;
				}
			}
		}
		else
		{
            if(PRESSED(65536) && RoundPaused == false)
            {
			    if((GetTickCount() - Player[playerid][lastChat]) < 10000)
				{
					SendErrorMessage(playerid,"Please wait.");
					return 0;
				}
				foreach(new i : Player)
				    PlayerPlaySound(i, 1133, 0.0, 0.0, 0.0);
				Player[playerid][lastChat] = GetTickCount();
				SendClientMessageToAll(-1, sprintf("{FFFFFF}%s "COL_PRIM"is asking for a pause!", Player[playerid][Name]));
			}
			if(PRESSED(65536) && RoundPaused == true)
            {
			    if((GetTickCount() - Player[playerid][lastChat]) < 10000)
				{
					SendErrorMessage(playerid,"Please wait.");
					return 0;
				}
				foreach(new i : Player)
				    PlayerPlaySound(i, 1133, 0.0, 0.0, 0.0);
				Player[playerid][lastChat] = GetTickCount();
				SendClientMessageToAll(-1, sprintf("{FFFFFF}%s "COL_PRIM"is asking for an unpause!", Player[playerid][Name]));
			}
		}

        if(PRESSED(262144) && AllowStartBase == true && Player[playerid][Playing] == true)
        {
            if(IsPlayerInAnyVehicle(playerid))
                return 1;

            if((GetTickCount() - Player[playerid][LastAskLeader]) < 10000)
			{
				SendErrorMessage(playerid,"Please wait.");
				return 0;
			}
            new team = Player[playerid][Team];
			if(TeamHasLeader[team] != true)
            {
                PlayerLeadTeam(playerid, false, true);
           	}
           	else
           	{
           	    if(TeamLeader[team] == playerid) // off
      	    	{
                    PlayerNoLeadTeam(playerid);
           	    }
           	    else
           	    	SendErrorMessage(playerid, "Your team already has a leader!");
           	}
           	Player[playerid][LastAskLeader] = GetTickCount();
        }

		if(PRESSED(131072) && AllowStartBase == true && Player[playerid][Playing] == true)
		{
		    if(Player[playerid][Team] == ATTACKER && TeamHelp[ATTACKER] == false) {
                new iString[160];
				foreach(new i : Player) {
				    if((Player[i][Playing] == true || GetPlayerState(i) == PLAYER_STATE_SPECTATING) && i != playerid && Player[i][Team] == ATTACKER) {
						format(iString, sizeof(iString), "{BEFFBB}[HELP] {FFFFFF}%s {BEFFBB}has requested for backup! .:Distance %.0f feet:.", Player[playerid][Name], GetDistanceBetweenPlayers(i, playerid));
					    SendClientMessage(i, -1, iString);
					    PlayerPlaySound(i,1137,0.0,0.0,0.0);
					}
				}
				TeamHelp[ATTACKER] = true;
				Player[playerid][AskingForHelp] = true;
				SetPlayerColor(playerid, ATTACKER_ASKING_HELP);

				SendClientMessage(playerid, -1, "{BEFFBB}[HELP] {FFFFFF}You have requested for backup.");
				Player[playerid][AskingForHelpTimer] = SetTimerEx("AttackerAskingHelp", 7000, 0, "i", playerid);

			} else if(Player[playerid][Team] == DEFENDER && TeamHelp[DEFENDER] == false) {
                new iString[160];
				foreach(new i : Player) {
				    if((Player[i][Playing] == true || GetPlayerState(i) == PLAYER_STATE_SPECTATING) && i != playerid && Player[i][Team] == DEFENDER) {
				    	format(iString, sizeof(iString), "{BEFFBB}[HELP] {FFFFFF}%s {BEFFBB}has requested for backup! .:Distance %.0f feet:.", Player[playerid][Name], GetDistanceBetweenPlayers(i, playerid));
					    SendClientMessage(i, -1, iString);
					    PlayerPlaySound(i,1137,0.0,0.0,0.0);
					}
				}
				TeamHelp[DEFENDER] = true;
				Player[playerid][AskingForHelp] = true;
				SetPlayerColor(playerid, DEFENDER_ASKING_HELP);

				SendClientMessage(playerid, -1, "{BEFFBB}[HELP] {FFFFFF}You have requested for backup.");
				Player[playerid][AskingForHelpTimer] = SetTimerEx("DefenderAskingHelp", 7000, 0, "i", playerid);

			}

			RadarFix();
		}
	}
	if(PRESSED(KEY_ANALOG_DOWN))
	{
	    if(ShortCuts == true) {
		    if(GetTickCount() < Player[playerid][lastChat]) {
				SendErrorMessage(playerid,"Please wait.");
				return 0;
			}
			Player[playerid][lastChat] = GetTickCount() + 5000;
		    OnPlayerText(playerid, sprintf("! [Shortcut]: %s", PlayerShortcut[playerid][Shortcut1]));
		} else return 0;
	}
	if(PRESSED(KEY_ANALOG_LEFT))
	{
	    if(ShortCuts == true) {
		    if(GetTickCount() < Player[playerid][lastChat]) {
				SendErrorMessage(playerid,"Please wait.");
				return 0;
			}
			Player[playerid][lastChat] = GetTickCount() + 5000;
		    OnPlayerText(playerid, sprintf("! [Shortcut]: %s", PlayerShortcut[playerid][Shortcut2]));
		} else return 0;
	}
	if(PRESSED(KEY_ANALOG_RIGHT))
	{
	    if(ShortCuts == true) {
		    if(GetTickCount() < Player[playerid][lastChat]) {
				SendErrorMessage(playerid,"Please wait.");
				return 0;
			}
			Player[playerid][lastChat] = GetTickCount() + 5000;
		    OnPlayerText(playerid, sprintf("! [Shortcut]: %s", PlayerShortcut[playerid][Shortcut3]));
		} else return 0;
	}
	if(PRESSED(KEY_ANALOG_UP))
	{
	    if(ShortCuts == true) {
		    if(GetTickCount() < Player[playerid][lastChat]) {
				SendErrorMessage(playerid,"Please wait.");
				return 0;
			}
			Player[playerid][lastChat] = GetTickCount() + 5000;
		    OnPlayerText(playerid, sprintf("! [Shortcut]: %s", PlayerShortcut[playerid][Shortcut4]));
		} else return 0;
	}
	return 1;
}




//------------------------------------------------------------------------------
// Script update per second And Forward Scripts
//------------------------------------------------------------------------------
// When a function is called from a timer you always have to 'forward' first and then 'public'


forward OnScriptUpdate();
public OnScriptUpdate()
{
	if(DidSomeoneTimeout)
	{
	    DidSomeoneTimeout = false;
	    RecountPlayersOnCP();
	}
	new iString[256];
	//new Alive[2];

	TeamHP[ATTACKER] = 0;
	TeamHP[DEFENDER] = 0;
	PlayersAlive[ATTACKER] = 0;
	PlayersAlive[DEFENDER] = 0;

	new
	    playerScores[MAX_PLAYERS][rankingEnum],
	    index,
	    p
	;

	ReadyText[0] = sprintf("%sPlayers To Ready:", MAIN_TEXT_COLOUR);
	ReadyText[1] = "";
	new PlayersToReady;

    if(RoundPaused == true && ESLMode == true && RoundUnpausing == false) ESLPauseTime--;

    foreach(new i : Player)
	{
        #if XMAS == 1
		if(GetPlayerWeapon(i) == WEAPON_SNIPER)
		{
		    cmd_removehat(i, "_");
		}
		else
			GiveChristmasHat(i, 1);
		#endif

		iString = "";

		new ammo;
		GetPlayerWeaponData(i, 0, ammo, ammo);

		if(ammo == 1000) { // aimbot detector
		    AddAimbotBan(i);
		}

		//if(ServerAntiLag == true) SetPlayerTeam(i, ANTILAG_TEAM);

		Player[i][PauseCount]++;
	    GetPlayerFPS(i);

//		new iString[200];

		GetHP(i, Player[i][pHealth]);
		GetAP(i, Player[i][pArmour]);

		if(Player[i][PROT_HPAutoRefilled] == false)
		{
			if(FallProtection == false)
			{
				format(iString, sizeof(iString), "%s%.0f", MAIN_TEXT_COLOUR, Player[i][pHealth]);
				PlayerTextDrawSetString(i, HPTextDraw_TD, iString);
			}
			else
			{
				if(Player[i][Playing] == true)
					PlayerTextDrawSetString(i, HPTextDraw_TD, sprintf("%sFall Prot.", MAIN_TEXT_COLOUR));
				else
				{
					format(iString, sizeof(iString), "%s%.0f", MAIN_TEXT_COLOUR, Player[i][pHealth]);
			    	PlayerTextDrawSetString(i, HPTextDraw_TD, iString);
				}
			}
		}
		else
		{
            PlayerTextDrawSetString(i, HPTextDraw_TD, sprintf("%sPROT. HP refilled", MAIN_TEXT_COLOUR));
		}

		if(Player[i][pArmour] > 0) {
			format(iString, sizeof(iString), "%s~h~~h~%.0f", MAIN_TEXT_COLOUR, Player[i][pArmour]);
			PlayerTextDrawSetString(i, ArmourTextDraw, iString);
		} else {
		    PlayerTextDrawSetString(i, ArmourTextDraw, "_");
		}

		new pPing = GetPlayerPing(i);
		new Float:pPacket = GetPlayerPacketLoss(i);

		if(RoundPaused == false) {
			format(iString,sizeof(iString),"%sFPS ~r~%d			%sPing ~r~%d			%sPacketLoss ~r~%.1f%%", MAIN_TEXT_COLOUR, Player[i][FPS], MAIN_TEXT_COLOUR, pPing, MAIN_TEXT_COLOUR, pPacket);
            PlayerTextDrawSetString(i, FPSPingPacket,iString);
            TextDrawHideForAll(PauseTD);

		} else if(RoundPaused == true && ESLMode == true && RoundUnpausing == false) {

			format(iString,sizeof(iString),"%sRound Paused (~r~%d:%02d%s)", MAIN_TEXT_COLOUR, (ESLPauseTime < 60 ? 0 : 1), ESLPauseTime % 60, MAIN_TEXT_COLOUR);
            PlayerTextDrawSetString(i, FPSPingPacket,iString);
            TextDrawSetString(PauseTD,iString);
			TextDrawShowForAll(PauseTD);

			if(ESLPauseTime <= 0) {
                PauseCountdown = 4;
				UnpauseRound();
			}
		}



		if(PlayersInCP > 0 && Current != -1 && RoundPaused == false) PlayerPlaySound(i,1056,0.0,0.0,0.0);

		if(ESLMode == true && Current == -1) {
			if(Player[i][Readied] == false && (Player[i][Team] == ATTACKER || Player[i][Team] == DEFENDER)) {
				PlayersToReady++;

				if(PlayersToReady <= 5) {
					format(ReadyText[0], 256, "%s~n~%s~h~~h~%s", ReadyText[0], TDC[Player[i][Team]], Player[i][NameWithoutTag]);
				} else if(PlayersToReady <= 10) {
				    format(ReadyText[1], 256, "%s%s~h~~h~%s~n~", ReadyText[1], TDC[Player[i][Team]], Player[i][NameWithoutTag]);
				}
			}
		}


		if(Player[i][Spectating] == true && Player[i][IsSpectatingID] != INVALID_PLAYER_ID) {
			new specid = Player[i][IsSpectatingID];
/*			new Float:Angle; GetPlayerFacingAngle(specid, Angle);

			format(iString,sizeof(iString),"~l~%s ~r~%d~n~~l~(~l~%.0f~l~)  (~r~~h~%.0f~l~)~n~~l~Ping ~r~%d ~l~FPS ~r~%d~n~~l~Packet-Loss ~r~%.1f", Player[specid][Name], specid, Player[specid][pArmour], Player[specid][pHealth], GetPlayerPing(specid), Player[specid][FPS], GetPlayerPacketLoss(specid));
			PlayerTextDrawSetString(i, SpecText[1], iString);
		    PlayerTextDrawShow(i,SpecText[1]);

			format(iString,sizeof(iString),"~l~R-Dmg ~r~%.0f  ~l~T-Dmg ~r~%.0f~n~~l~Facing ~r~%s~n~~l~%s", Player[specid][RoundDamage], Player[specid][TotalDamage], GetCardinalPoint(Angle), SpecWeapons(specid));
			PlayerTextDrawSetString(i, SpecText[1], iString);
		    PlayerTextDrawShow(i,SpecText[1]);
*/
			format(iString, sizeof(iString),"%s%s ~r~~h~%d~n~~n~%s(%.0f) (~r~~h~%.0f%s)~n~FPS: ~r~~h~%d %sPing: ~r~~h~%d~n~%sPacket-Loss: ~r~~h~%.1f~n~%sKills: ~r~~h~%d~n~%sDamage: ~r~~h~%.0f~n~%sTotal Dmg: ~r~~h~%.0f",
				MAIN_TEXT_COLOUR, Player[specid][Name], specid, MAIN_TEXT_COLOUR, Player[specid][pArmour], Player[specid][pHealth], MAIN_TEXT_COLOUR, Player[specid][FPS], MAIN_TEXT_COLOUR, GetPlayerPing(specid), MAIN_TEXT_COLOUR, GetPlayerPacketLoss(specid), MAIN_TEXT_COLOUR, Player[specid][RoundKills], MAIN_TEXT_COLOUR, Player[specid][RoundDamage], MAIN_TEXT_COLOUR, Player[specid][TotalDamage]);
			PlayerTextDrawSetString(i, SpecText[1], iString);
			PlayerTextDrawSetString(i, SpecText[3], SpecWeapons(specid));

		}


		/*if(Current == -1) {
			switch(Player[i][Team]) {
			    case ATTACKER: {
					Alive[ATTACKER-1]++;
				} case DEFENDER: {
					Alive[DEFENDER-1]++;
				}
			}
	    	format(iString, sizeof(iString), "  ~r~%d  ~l~Vs  ~b~~h~%d", Alive[ATTACKER-1], Alive[DEFENDER-1]);
			PlayerTextDrawSetString(i, BaseID_VS, iString);
		}*/


		if(Player[i][WasInBase] == true && TeamHPDamage == true) {
			playerScores[index][player_Score] = floatround(Player[i][RoundDamage], floatround_round);
	        playerScores[index++][player_ID] = i;
	        p++;
		}

		if(IsPlayerInAnyVehicle(i)) {
			Update3DTextLabelText(PingFPS[i], 0x00FF00FF, "");
		} else {
//	        new Float:Angle; GetPlayerFacingAngle(i, Angle);
//			format(iString, sizeof(iString), "%s%s\n%sPing: {FFFFFF}%i\n%sFPS: {FFFFFF}%i",TextColor[Player[i][Team]],GetCardinalPoint(Angle),TextColor[Player[i][Team]], pPing, TextColor[Player[i][Team]], Player[i][FPS]);

//plin3dtext
//			format(iString, sizeof(iString), "\n%sPing: {FFFFFF}%i\n%sFPS: {FFFFFF}%i",TextColor[Player[i][Team]], pPing, TextColor[Player[i][Team]], Player[i][FPS]);
			format(iString, sizeof(iString), "%sPL: {FFFFFF}%.1f%%\n%sPing: {FFFFFF}%i\n%sFPS: {FFFFFF}%i", TextColor[Player[i][Team]], pPacket, TextColor[Player[i][Team]], pPing, TextColor[Player[i][Team]], Player[i][FPS]);
//plin3dtext

			Update3DTextLabelText(PingFPS[i], 0x00FF00FF, iString);
			//Attach3DTextLabelToPlayer(PingFPS[i], i, 0.0, 0.0, -0.745);
		}

		if(Player[i][InDuel] == true && Player[i][NetCheck] == 1)
		{
			if(Player[i][FPS] < Min_FPS && Player[i][FPS] != 0 && Player[i][PauseCount] < 5  && Player[i][FPSCheck] == 1) {
			    Player[i][FPSKick]++;
			    format(iString,sizeof(iString),"{CCCCCC}Low FPS! Warning %d/7", Player[i][FPSKick]);
			    SendClientMessage(i, -1, iString);

				if (Player[i][FPSKick] == 7) {
			        format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has been kicked from the server .: {FFFFFF}Low FPS | %d/%d "COL_PRIM":.", Player[i][Name], Player[i][FPS], Min_FPS);
			        SendClientMessageToAll(-1, iString);
					SetTimerEx("OnPlayerKicked", 500, false, "i", i);

			    } else if (Player[i][FPSKick] > 7) {
			        Player[i][FPSKick] = 0;
				}

			} else  {
			    Player[i][FPSKick] = 0;
			}


			if(pPacket >= Max_Packetloss && Player[i][FakePacketRenovation] == false && Player[i][PLCheck] == 1){
			    Player[i][PacketKick]++;
			    format(iString,sizeof(iString),"{CCCCCC}High PL! Warning %d/15", Player[i][PacketKick]);
			    SendClientMessage(i, -1, iString);

			    if(Player[i][PacketKick] == 15) {
			        format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has been kicked from the server .: {FFFFFF}High PacketLoss | %.2f/%.2f "COL_PRIM":.", Player[i][Name], pPacket, Max_Packetloss);
			        SendClientMessageToAll(-1, iString);
					SetTimerEx("OnPlayerKicked", 500, false, "i", i);

			    } else if(Player[i][PacketKick] > 15) {
			        Player[i][PacketKick] = 0;
				}
			} else  {
			    Player[i][PacketKick] = 0;
			}

			if(pPing >= Max_Ping && Player[i][PingCheck] == 1){
			    Player[i][PingKick]++;
			    format(iString,sizeof(iString),"{CCCCCC}High Ping! Warning %d/10", Player[i][PingKick]);
			    SendClientMessage(i, -1, iString);

			    if(Player[i][PingKick] == 10) {
			        format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has been kicked from the server .: {FFFFFF}High Ping | %d/%d "COL_PRIM":.", Player[i][Name], pPing, Max_Ping);
			        SendClientMessageToAll(-1, iString);
					SetTimerEx("OnPlayerKicked", 500, false, "i", i);

			    } else if(Player[i][PingKick] > 10) {
			        Player[i][PingKick] = 0;
				}
			} else {
			    Player[i][PingKick] = 0;
			}
		}

		if(Player[i][Playing] == true) {
   			if(GameType == ARENA || GameType == TDM) {
			    if(OneOnOne == false) {
					if(IsPlayerInArea(i,AMin[Current][0], AMax[Current][0], AMin[Current][1], AMax[Current][1]) != 1 && Player[i][PauseCount] < 2) {

						if(RoundPaused == false) Player[i][OutOfArena]--;

					    format(iString, sizeof(iString), "%sStay in Arena. (~r~%d%s)", MAIN_TEXT_COLOUR, Player[i][OutOfArena], MAIN_TEXT_COLOUR);
					    PlayerTextDrawSetString(i, AreaCheckTD, iString);

						PlayerTextDrawShow(i, AreaCheckTD);
					    PlayerTextDrawShow(i, AreaCheckBG);

						if(Player[i][OutOfArena] <= 0) {
		                    RemovePlayerFromRound(i);
							new Float: hp, Float: arm;
							GetHP( i, hp );
							GetAP( i, arm );
						    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has been removed for not staying in Arena. {FFFFFF}.: (%0.1f | %0.1f) :.", Player[i][Name], hp, arm);
						    SendClientMessageToAll(-1, iString);

							Player[i][OutOfArena] = 5;

			    			PlayerTextDrawHide(i, AreaCheckTD);
					    	PlayerTextDrawHide(i, AreaCheckBG);
						}
					} else {
					    Player[i][OutOfArena] = 5;
					    PlayerTextDrawHide(i, AreaCheckTD);
					    PlayerTextDrawHide(i, AreaCheckBG);
					}
				} else {
					if(IsPlayerInArea(i,DuelMin[Current][0], DuelMax[Current][0], DuelMin[Current][1], DuelMax[Current][1]) != 1 && Player[i][PauseCount] < 2) {

						if(RoundPaused == false) Player[i][OutOfArena]--;

					    format(iString, sizeof(iString), "%sStay in Duel Arena. (~r~%d%s)", MAIN_TEXT_COLOUR, Player[i][OutOfArena], MAIN_TEXT_COLOUR);
					    PlayerTextDrawSetString(i, AreaCheckTD, iString);

						PlayerTextDrawShow(i, AreaCheckTD);
					    PlayerTextDrawShow(i, AreaCheckBG);

						if(Player[i][OutOfArena] <= 0) {
		                    RemovePlayerFromRound(i);

						    format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has been removed for not staying in the duel area.", Player[i][Name]);
						    SendClientMessageToAll(-1, iString);

							Player[i][OutOfArena] = 5;

			    			PlayerTextDrawHide(i, AreaCheckTD);
					    	PlayerTextDrawHide(i, AreaCheckBG);
						}
					} else {
					    Player[i][OutOfArena] = 5;
					    PlayerTextDrawHide(i, AreaCheckTD);
					    PlayerTextDrawHide(i, AreaCheckBG);
					}
				}
			}

		    switch(Player[i][Team]) {
		        case ATTACKER: {
				    TeamHP[ATTACKER] = TeamHP[ATTACKER] + (Player[i][pHealth] + Player[i][pArmour]);
				    PlayersAlive[ATTACKER]++;
				} case DEFENDER: {
				    TeamHP[DEFENDER] = TeamHP[DEFENDER] + (Player[i][pHealth] + Player[i][pArmour]);
				    PlayersAlive[DEFENDER]++;
				}
			}

	        SetPlayerScore(i, floatround(Player[i][pHealth] + Player[i][pArmour]));
			ResetPlayerMoney(i);
			GivePlayerMoney(i, -floatround(Player[i][pHealth] + Player[i][pArmour]));



	   		if(Player[i][NetCheck] == 1) {
				if(Player[i][FPS] < Min_FPS && Player[i][FPS] != 0 && Player[i][PauseCount] < 5 && Player[i][FPSCheck] == 1) {
				    Player[i][FPSKick]++;
			    	format(iString,sizeof(iString),"{CCCCCC}Low FPS! Warning %d/7", Player[i][FPSKick]); //will help to know when you cross limit
			    	SendClientMessage(i, -1, iString);

					if (Player[i][FPSKick] == 7) {
				        format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has been kicked from the server .: {FFFFFF}Low FPS | %d/%d "COL_PRIM":.", Player[i][Name], Player[i][FPS], Min_FPS);
				        SendClientMessageToAll(-1, iString);
						SetTimerEx("OnPlayerKicked", 500, false, "i", i);
				    } else if (Player[i][FPSKick] > 7) {
				        Player[i][FPSKick] = 0;
					}

				} else  {
				    Player[i][FPSKick] = 0;
				}


				if(pPacket >= Max_Packetloss && Player[i][FakePacketRenovation] == false && Player[i][PLCheck] == 1){
				    Player[i][PacketKick]++;
			    	format(iString,sizeof(iString),"{CCCCCC}High PL! Warning %d/15", Player[i][PacketKick]); //will help to know when you cross limit
			    	SendClientMessage(i, -1, iString);

				    if(Player[i][PacketKick] == 15) {
				        format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has been kicked from the server .: {FFFFFF}High PacketLoss | %.2f/%.2f "COL_PRIM":.", Player[i][Name], pPacket, Max_Packetloss);
				        SendClientMessageToAll(-1, iString);
						SetTimerEx("OnPlayerKicked", 500, false, "i", i);
				    } else if(Player[i][PacketKick] > 30) {
				        Player[i][PacketKick] = 0;
					}
				} else  {
				    Player[i][PacketKick] = 0;
				}

				if(pPing >= Max_Ping && Player[i][PingCheck] == 1){
					Player[i][PingKick]++;
			    	format(iString,sizeof(iString),"{CCCCCC}High Ping! Warning %d/10", Player[i][PingKick]); //will help to know when you cross limit
			    	SendClientMessage(i, -1, iString);

				    if(Player[i][PingKick] == 10) {
				        format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has been kicked from the server .: {FFFFFF}High Ping | %d/%d "COL_PRIM":.", Player[i][Name], pPing, Max_Ping);
				        SendClientMessageToAll(-1, iString);
						SetTimerEx("OnPlayerKicked", 500, false, "i", i);
				    } else if(Player[i][PingKick] > 10) {
				        Player[i][PingKick] = 0;
					}
				} else {
				    Player[i][PingKick] = 0;
				}
			}
		}

		// Target info
	//	if(ToggleTargetInfo == true) ShowTargetInfo(i, GetPlayerTargetPlayer(i));

		// ---

		if(TakeDmgCD[0][i] > 0){
			TakeDmgCD[0][i]++;
			if(TakeDmgCD[0][i] == 5) {
				//HPLost[i][gLastHit[0][i]] = 0;
				DamageDone[0][i] = 0;
				gLastHit[0][i] = -1;
				PlayerTextDrawSetString(i, DoingDamage[0], "_");
				TakeDmgCD[0][i] = 0;
			}
		} if(TakeDmgCD[1][i] > 0) {
			TakeDmgCD[1][i]++;
			if(TakeDmgCD[1][i] == 5) {
				//HPLost[i][gLastHit[1][i]] = 0;
				DamageDone[1][i] = 0;
				gLastHit[1][i] = -1;
                PlayerTextDrawSetString(i, DoingDamage[1], "_");
				TakeDmgCD[1][i] = 0;
			}
		} if(TakeDmgCD[2][i] > 0) {
			TakeDmgCD[2][i]++;
			if(TakeDmgCD[2][i] == 5) {
				//HPLost[i][gLastHit[2][i]] = 0;
				DamageDone[2][i] = 0;
                PlayerTextDrawSetString(i, DoingDamage[2], "_");
				gLastHit[2][i] = -1;
				TakeDmgCD[2][i] = 0;
			}
		} if(TakeDmgCD[3][i] > 0) {
			TakeDmgCD[3][i]++;
			if(TakeDmgCD[3][i] == 5) {
				//HPLost[i][gLastHit[3][i]] = 0;
				DamageDone[3][i] = 0;
				gLastHit[3][i] = -1;
                PlayerTextDrawSetString(i, GettingDamaged[0], "_");
                DmgLabelStr[0][i] = "";
	 			format(iString, sizeof(iString), "%s\n%s\n%s", DmgLabelStr[0][i], DmgLabelStr[1][i], DmgLabelStr[2][i]);
	   			Update3DTextLabelText(DmgLabel[i], -1, iString);
				TakeDmgCD[3][i] = 0;
			}
		}
		if(TakeDmgCD[4][i] > 0) {
			TakeDmgCD[4][i]++;
			if(TakeDmgCD[4][i] == 5) {
				//HPLost[i][gLastHit[4][i]] = 0;
				DamageDone[4][i] = 0;
				gLastHit[4][i] = -1;
                PlayerTextDrawSetString(i, GettingDamaged[1], "_");
                DmgLabelStr[1][i] = "";
	 			format(iString, sizeof(iString), "%s\n%s\n%s", DmgLabelStr[0][i], DmgLabelStr[1][i], DmgLabelStr[2][i]);
	   			Update3DTextLabelText(DmgLabel[i], -1, iString);
				TakeDmgCD[4][i] = 0;
			}
		}
		if(TakeDmgCD[5][i] > 0) {
			TakeDmgCD[5][i]++;
			if(TakeDmgCD[5][i] == 5) {
				//HPLost[i][gLastHit[5][i]] = 0;
				DamageDone[5][i] = 0;
				gLastHit[5][i] = -1;
                PlayerTextDrawSetString(i, GettingDamaged[2], "_");
                DmgLabelStr[2][i] = "";
	 			format(iString, sizeof(iString), "%s\n%s\n%s", DmgLabelStr[0][i], DmgLabelStr[1][i], DmgLabelStr[2][i]);
	   			Update3DTextLabelText(DmgLabel[i], -1, iString);
				TakeDmgCD[5][i] = 0;
			}
		}
	}

//	new iString[256];

	if(Current == -1) {
		if(ESLMode == true) {
		    TextDrawSetString(Ready[0], ReadyText[0]);
		    TextDrawSetString(Ready[1], ReadyText[1]);
		}
	}

	if(BaseStarted == true) {
		if(TeamHPDamage == true) {
			GetPlayerHighestScores(playerScores, 0, index -1 );
			new AttOnline, DefOnline;


//			new string[5];
//			new iValue = 250;
//			valstr(string,iValue); // string is now "250"

			ScoreString[0] = "";
			ScoreString[1] = "";
			ScoreString[2] = "";
			ScoreString[3] = "";

			for(new i = 0; i != p; ++i) {
				if(IsPlayerConnected(playerScores[i][player_ID])) {

					if(Player[playerScores[i][player_ID]][Team] == ATTACKER) {
					    AttOnline++;
					    if(Player[playerScores[i][player_ID]][Playing] == false && Player[playerScores[i][player_ID]][RoundDeaths] > 0) {
					    	if(AttOnline <= 3) format(ScoreString[0], 256, "%s%s| %s ~r~~h~Dead %s- ~r~%d~n~", ScoreString[0], MAIN_TEXT_COLOUR, Player[playerScores[i][player_ID]][NameWithoutTag], MAIN_TEXT_COLOUR, playerScores[i][player_Score]);
							else if(AttOnline <= 6) format(ScoreString[1], 256, "%s%s| %s ~r~~h~Dead %s- ~r~%d~n~", ScoreString[1], MAIN_TEXT_COLOUR, Player[playerScores[i][player_ID]][NameWithoutTag], MAIN_TEXT_COLOUR, playerScores[i][player_Score]);
						} else if(Player[playerScores[i][player_ID]][Playing] == true) {
						    if(AttOnline <= 3) format(ScoreString[0], 256, "%s%s| %s ~r~~h~%.0f %s- ~r~%d~n~", ScoreString[0], MAIN_TEXT_COLOUR, Player[playerScores[i][player_ID]][NameWithoutTag], ( (Player[playerScores[i][player_ID]][RoundDeaths] > 0 && Player[i][Playing] == false) ? 0.0 : (Player[playerScores[i][player_ID]][pHealth] + Player[playerScores[i][player_ID]][pArmour])), MAIN_TEXT_COLOUR, playerScores[i][player_Score]);
							else if(AttOnline <= 6) format(ScoreString[1], 256, "%s%s| %s ~r~~h~%.0f %s- ~r~%d~n~", ScoreString[1], MAIN_TEXT_COLOUR, Player[playerScores[i][player_ID]][NameWithoutTag], ( (Player[playerScores[i][player_ID]][RoundDeaths] > 0 && Player[i][Playing] == false) ? 0.0 : (Player[playerScores[i][player_ID]][pHealth] + Player[playerScores[i][player_ID]][pArmour])), MAIN_TEXT_COLOUR, playerScores[i][player_Score]);
						}
					} else if(Player[playerScores[i][player_ID]][Team] == DEFENDER) {
					    DefOnline++;

					    if(Player[playerScores[i][player_ID]][Playing] == false && Player[playerScores[i][player_ID]][RoundDeaths] > 0) {
					        if(DefOnline <= 3) format(ScoreString[2], 256, "%s%s| %s ~b~~h~Dead %s- ~b~~h~%d~n~", ScoreString[2], MAIN_TEXT_COLOUR, Player[playerScores[i][player_ID]][NameWithoutTag], MAIN_TEXT_COLOUR, playerScores[i][player_Score]);
							else if(DefOnline <= 6) format(ScoreString[3], 256, "%s%s| %s ~b~~h~Dead %s- ~b~~h~%d~n~", ScoreString[3], MAIN_TEXT_COLOUR, Player[playerScores[i][player_ID]][NameWithoutTag], MAIN_TEXT_COLOUR, playerScores[i][player_Score]);
    				    } else if(Player[playerScores[i][player_ID]][Playing] == true) {
					    	if(DefOnline <= 3) format(ScoreString[2], 256, "%s%s| %s ~b~~h~%.0f %s- ~b~~h~%d~n~", ScoreString[2], MAIN_TEXT_COLOUR, Player[playerScores[i][player_ID]][NameWithoutTag], ( (Player[playerScores[i][player_ID]][RoundDeaths] > 0 && Player[i][Playing] == false) ? 0.0 : (Player[playerScores[i][player_ID]][pHealth] + Player[playerScores[i][player_ID]][pArmour])), MAIN_TEXT_COLOUR, playerScores[i][player_Score]);
							else if(DefOnline <= 6) format(ScoreString[3], 256, "%s%s| %s ~b~~h~%.0f %s- ~b~~h~%d~n~", ScoreString[3], MAIN_TEXT_COLOUR, Player[playerScores[i][player_ID]][NameWithoutTag], ( (Player[playerScores[i][player_ID]][RoundDeaths] > 0 && Player[i][Playing] == false) ? 0.0 : (Player[playerScores[i][player_ID]][pHealth] + Player[playerScores[i][player_ID]][pArmour])), MAIN_TEXT_COLOUR, playerScores[i][player_Score]);
						}
					}
				}
			}

			TextDrawSetString(AttackerTeam[0], ScoreString[0]);
			TextDrawSetString(AttackerTeam[1], ScoreString[1]);
			TextDrawSetString(DefenderTeam[0], ScoreString[2]);
			TextDrawSetString(DefenderTeam[1], ScoreString[3]);
			TextDrawSetString(AttackerTeam[2], ScoreString[0]);
			TextDrawSetString(AttackerTeam[3], ScoreString[1]);
			TextDrawSetString(DefenderTeam[2], ScoreString[2]);
			TextDrawSetString(DefenderTeam[3], ScoreString[3]);
		}

		if(RoundPaused == false)
		{
			if(PlayersInCP > 0)
			{
			    CurrentCPTime--;

			    iString = "";
			    new Float:HP, Float:AP;
				format(iString, sizeof iString, "%sPlayers In CP", MAIN_TEXT_COLOUR);
				foreach(new i : Player) {
				    if(Player[i][WasInCP] == true) {
				        GetHP(i, HP);
				        GetAP(i, AP);
				        format(iString, sizeof(iString), "%s~n~~r~~h~- %s%s (%.0f)", iString, MAIN_TEXT_COLOUR, Player[i][Name], (HP+AP));
					}
				}
				TextDrawSetString(EN_CheckPoint, iString);

		    	if(CurrentCPTime == 0)
					return EndRound(0); // Attackers Win
			}


		    RoundSeconds--;
		    if(RoundSeconds <= 0) {
		        RoundSeconds = 59;
		        RoundMints--;
				if(RoundMints < 0) return EndRound(1); // Defenders Win
			}

			if(PlayersAlive[ATTACKER] < 1) return EndRound(2); // Defenders Win
			else if(PlayersAlive[DEFENDER] < 1) return EndRound(3); // Attackers Win

		    ElapsedTime++;
		}

/*
			if(PlayersInCP == 0) format(iString,sizeof(iString),"~r~%s  ~r~~h~%d   ~l~(~r~~h~%.0f~l~)			   	            ~l~%d:%02d			   	            ~b~~h~%s  ~b~~h~%d   ~l~(~b~~h~%.0f~l~)~n~",TeamName[ATTACKER],PlayersAlive[ATTACKER],TeamHP[ATTACKER],RoundMints,RoundSeconds,TeamName[DEFENDER],PlayersAlive[DEFENDER],TeamHP[DEFENDER]);
			else format(iString,sizeof(iString),"~r~%s  ~r~~h~%d   ~l~(~r~~h~%.0f~l~)			   	            ~l~%d:%02d / ~r~%d		   	            ~b~~h~%s  ~b~~h~%d   ~l~(~b~~h~%.0f~l~)~n~",TeamName[ATTACKER],PlayersAlive[ATTACKER],TeamHP[ATTACKER],RoundMints,RoundSeconds,CurrentCPTime, TeamName[DEFENDER],PlayersAlive[DEFENDER],TeamHP[DEFENDER]);
			TextDrawSetString(RoundStats, iString);
*/

		new iString2[256];
		if(PlayersInCP == 0)
		{
			format( iString, sizeof(iString),"~w~%d:%02d", RoundMints,	RoundSeconds );
			format(iString2,sizeof(iString2),"~r~~h~%s  ~r~~h~~h~%d   ~w~(~r~~h~~h~%.0f~w~)			   	            ~w~%d:%02d			   	            ~b~~h~%s  ~b~~h~~h~%d   ~w~(~b~~h~~h~%.0f~w~)~n~",TeamName[ATTACKER],PlayersAlive[ATTACKER],TeamHP[ATTACKER],RoundMints,RoundSeconds,TeamName[DEFENDER],PlayersAlive[DEFENDER],TeamHP[DEFENDER]);
		}
		else
		{
			format( iString, sizeof(iString), "~w~%d:%02d / ~r~~h~%d", RoundMints,	RoundSeconds, CurrentCPTime );
			format(iString2,sizeof(iString2),"~r~~h~%s  ~r~~h~~h~%d   ~w~(~r~~h~~h~%.0f~w~)			   	            ~w~%d:%02d / ~r~~h~%d		   	            ~b~~h~%s  ~b~~h~~h~%d   ~w~(~b~~h~~h~%.0f~w~)~n~",TeamName[ATTACKER],PlayersAlive[ATTACKER],TeamHP[ATTACKER],RoundMints,RoundSeconds,CurrentCPTime, TeamName[DEFENDER],PlayersAlive[DEFENDER],TeamHP[DEFENDER]);
		}
		TextDrawSetString(timerCenterTD , iString);
		TextDrawSetString(RoundStats, iString2);

		format( iString, 64, "~w~%d__(%0.0f)", PlayersAlive[ATTACKER], TeamHP[ATTACKER] );
		TextDrawSetString( leftTeamData, iString );

		format( iString, 64, "~w~(%0.0f)__%d", TeamHP[DEFENDER], PlayersAlive[DEFENDER] );
		TextDrawSetString( rightTeamData, iString );

		format( iString, sizeof(iString), "~r~~h~~h~%s \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ~b~~h~~h~%s", TeamName[ATTACKER], TeamName[DEFENDER] );
		TextDrawSetString( centerTeamNames , iString );

		TextDrawColor( leftRedBG , 0xDE000066 );
		TextDrawColor( rightBlueBG , 0x3344FF66 );
		foreach(new i:Player)
		{
			if(Player[i][Style] == 1)
			{
			    TextDrawShowForPlayer(i, leftRedBG);
			    TextDrawShowForPlayer(i, rightBlueBG);
			}
		}

	} else if(ArenaStarted == true) {

	    #if ENABLED_TDM == 1
	    if( GameType == TDM ) goto skipped;
	    #endif

		if(TeamHPDamage == true) {
			GetPlayerHighestScores(playerScores, 0, index -1 );
			new AttOnline, DefOnline;

			ScoreString[0] = "";
			ScoreString[1] = "";
			ScoreString[2] = "";
			ScoreString[3] = "";

			for(new i = 0; i != p; ++i) {
				if(IsPlayerConnected(playerScores[i][player_ID])) {

					if(Player[playerScores[i][player_ID]][Team] == ATTACKER) {
					    AttOnline++;
					    if(Player[playerScores[i][player_ID]][RoundDeaths] > 0) {
					    	if(AttOnline <= 3) format(ScoreString[0], 256, "%s%s| %s ~r~~h~Dead %s- ~r~%d~n~", ScoreString[0], MAIN_TEXT_COLOUR, Player[playerScores[i][player_ID]][NameWithoutTag], MAIN_TEXT_COLOUR, playerScores[i][player_Score]);
							else if(AttOnline <= 6) format(ScoreString[1], 256, "%s%s| %s ~r~~h~Dead %s- ~r~%d~n~", ScoreString[1], MAIN_TEXT_COLOUR, Player[playerScores[i][player_ID]][NameWithoutTag], MAIN_TEXT_COLOUR, playerScores[i][player_Score]);
						} else {
						    if(AttOnline <= 3) format(ScoreString[0], 256, "%s%s| %s ~r~~h~%.0f %s- ~r~%d~n~", ScoreString[0], MAIN_TEXT_COLOUR, Player[playerScores[i][player_ID]][NameWithoutTag], ( (Player[playerScores[i][player_ID]][RoundDeaths] > 0 && Player[i][Playing] == false) ? 0.0 : (Player[playerScores[i][player_ID]][pHealth] + Player[playerScores[i][player_ID]][pArmour])), MAIN_TEXT_COLOUR, playerScores[i][player_Score]);
							else if(AttOnline <= 6) format(ScoreString[1], 256, "%s%s| %s ~r~~h~%.0f %s- ~r~%d~n~", ScoreString[1], MAIN_TEXT_COLOUR, Player[playerScores[i][player_ID]][NameWithoutTag], ( (Player[playerScores[i][player_ID]][RoundDeaths] > 0 && Player[i][Playing] == false) ? 0.0 : (Player[playerScores[i][player_ID]][pHealth] + Player[playerScores[i][player_ID]][pArmour])), MAIN_TEXT_COLOUR, playerScores[i][player_Score]);
						}
					} else if(Player[playerScores[i][player_ID]][Team] == DEFENDER) {
					    DefOnline++;

					    if(Player[playerScores[i][player_ID]][RoundDeaths] > 0) {
					        if(DefOnline <= 3) format(ScoreString[2], 256, "%s%s| %s ~b~~h~Dead %s- ~b~~h~%d~n~", ScoreString[2], MAIN_TEXT_COLOUR, Player[playerScores[i][player_ID]][NameWithoutTag], MAIN_TEXT_COLOUR, playerScores[i][player_Score]);
							else if(DefOnline <= 6) format(ScoreString[3], 256, "%s%s| %s ~b~~h~Dead %s- ~b~~h~%d~n~", ScoreString[3], MAIN_TEXT_COLOUR, Player[playerScores[i][player_ID]][NameWithoutTag], MAIN_TEXT_COLOUR, playerScores[i][player_Score]);
    				    } else {
					    	if(DefOnline <= 3) format(ScoreString[2], 256, "%s%s| %s ~b~~h~%.0f %s- ~b~~h~%d~n~", ScoreString[2], MAIN_TEXT_COLOUR, Player[playerScores[i][player_ID]][NameWithoutTag], ( (Player[playerScores[i][player_ID]][RoundDeaths] > 0 && Player[i][Playing] == false) ? 0.0 : (Player[playerScores[i][player_ID]][pHealth] + Player[playerScores[i][player_ID]][pArmour])), MAIN_TEXT_COLOUR, playerScores[i][player_Score]);
							else if(DefOnline <= 6) format(ScoreString[3], 256, "%s%s| %s ~b~~h~%.0f %s- ~b~~h~%d~n~", ScoreString[3], MAIN_TEXT_COLOUR, Player[playerScores[i][player_ID]][NameWithoutTag], ( (Player[playerScores[i][player_ID]][RoundDeaths] > 0 && Player[i][Playing] == false) ? 0.0 : (Player[playerScores[i][player_ID]][pHealth] + Player[playerScores[i][player_ID]][pArmour])), MAIN_TEXT_COLOUR, playerScores[i][player_Score]);
						}
					}
				}
			}

			TextDrawSetString(AttackerTeam[0], ScoreString[0]);
			TextDrawSetString(AttackerTeam[1], ScoreString[1]);
			TextDrawSetString(DefenderTeam[0], ScoreString[2]);
			TextDrawSetString(DefenderTeam[1], ScoreString[3]);
			TextDrawSetString(AttackerTeam[2], ScoreString[0]);
			TextDrawSetString(AttackerTeam[3], ScoreString[1]);
			TextDrawSetString(DefenderTeam[2], ScoreString[2]);
			TextDrawSetString(DefenderTeam[3], ScoreString[3]);
		}
		//======================================================================

		if( GameType == TDM )
		{
			#if ENABLED_TDM == 1
			skipped:
		    if( Current != -1 )
		    {
				if(RoundPaused == false) {
				    RoundSeconds--;
				    if(RoundSeconds <= 0) {
				        RoundSeconds = 59;
				        RoundMints--;
						if(RoundMints < 0) {
						    if(TeamTDMKills[ATTACKER] > TeamTDMKills[DEFENDER]) EndRound(3); // attackers
							else if(TeamTDMKills[DEFENDER] > TeamTDMKills[ATTACKER]) EndRound(2); // defenders
							else if(TeamTDMKills[ATTACKER] == TeamTDMKills[DEFENDER]) EndRound(4); // No one win
							return 1;
						}
					}

		            ElapsedTime++;
				    //BUG_TDM

					//if(PlayersAlive[ATTACKER] < 1) return EndRound(2); // Defenders Win
					//else if(PlayersAlive[DEFENDER] < 1) return EndRound(3); // Attackers Win


					if(TeamTDMKills[ATTACKER] >= MaxTDMKills) return EndRound(3); // Attackers Win
					else if(TeamTDMKills[DEFENDER] >= MaxTDMKills) return EndRound(2); // defenders Win
				}

				format( iString, sizeof(iString),"~w~%d:%02d", RoundMints,	RoundSeconds );
				TextDrawSetString(timerCenterTD , iString);

				format( iString, 64, "~w~%d__(Kills: %d / %d)", PlayersAlive[ATTACKER], TeamTDMKills[ATTACKER], MaxTDMKills );
				TextDrawSetString( leftTeamData, iString );

				format( iString, 64, "~w~%d__(Kills: %d /  %d)", PlayersAlive[DEFENDER], TeamTDMKills[DEFENDER], MaxTDMKills );
				TextDrawSetString( rightTeamData, iString );

				format( iString, sizeof(iString), "~r~~h~~h~%s \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ~b~~h~~h~%s", TeamName[ATTACKER], TeamName[DEFENDER] );
				TextDrawSetString( centerTeamNames , iString );

				TextDrawColor( leftRedBG , 0xDE000066 );
				TextDrawColor( rightBlueBG , 0x3344FF66 );
				foreach(new i:Player)
				{
					if(Player[i][Style] == 1)
					{
					    TextDrawShowForPlayer(i, leftRedBG);
					    TextDrawShowForPlayer(i, rightBlueBG);
					}
				}

				/*==== had to do this because i couldnt figure out a
						quick work around 	==================================*/
				if( PlayersAlive[ATTACKER] < 1 )
				{
					LowPlayers[ATTACKER]++;
					if( LowPlayers[ATTACKER] >= 3 )
						EndRound(2); // Defenders Win
				}
				else
					LowPlayers[ATTACKER] = 0;

				if( PlayersAlive[DEFENDER] < 1 )
				{
					LowPlayers[DEFENDER]++;
					if( LowPlayers[DEFENDER] >= 3 )
						EndRound(3); // Attackers Win
				}
				else
					LowPlayers[DEFENDER] = 0;
				//==============================================================
			}
			#endif
		}
		else if( GameType == ARENA )
		{
			if(RoundPaused == false) {
			    RoundSeconds--;
			    if(RoundSeconds <= 0) {
			        RoundSeconds = 59;
			        RoundMints--;
					if(RoundMints < 0) {
					    if(TeamHP[ATTACKER] < TeamHP[DEFENDER]) EndRound(2);
						else if(TeamHP[DEFENDER] < TeamHP[ATTACKER]) EndRound(3);
						else if(floatround(TeamHP[ATTACKER]) == floatround(TeamHP[DEFENDER])) EndRound(4); // No one win
						return 1;
					}
				}

				if(PlayersAlive[ATTACKER] < 1) return EndRound(2); // Defenders Win
				else if(PlayersAlive[DEFENDER] < 1) return EndRound(3); // Attackers Win

	            ElapsedTime++;
			}

			format(iString,sizeof(iString),"~r~%s  ~r~~h~%d   ~w~(~r~~h~%.0f~w~)			   	            ~w~%d:%02d			   	            ~b~~h~%s  ~b~~h~%d   ~w~(~b~~h~%.0f~w~)~n~",TeamName[ATTACKER],PlayersAlive[ATTACKER],TeamHP[ATTACKER],RoundMints,RoundSeconds,TeamName[DEFENDER],PlayersAlive[DEFENDER],TeamHP[DEFENDER]);
	        TextDrawSetString(RoundStats, iString);

			format( iString, sizeof(iString),"~w~%d:%02d", RoundMints,	RoundSeconds );
			TextDrawSetString(timerCenterTD , iString);

			format( iString, 64, "~w~%d__(%0.0f)", PlayersAlive[ATTACKER], TeamHP[ATTACKER] );
			TextDrawSetString( leftTeamData, iString );

			format( iString, 64, "~w~(%0.0f)__%d", TeamHP[DEFENDER], PlayersAlive[DEFENDER] );
			TextDrawSetString( rightTeamData, iString );

			format( iString, sizeof(iString), "~r~~h~~h~%s \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ~b~~h~~h~%s", TeamName[ATTACKER], TeamName[DEFENDER] );
			TextDrawSetString( centerTeamNames , iString );

			TextDrawColor( leftRedBG , 0xDE000066 );
			TextDrawColor( rightBlueBG , 0x3344FF66 );
			foreach(new i:Player)
			{
				if(Player[i][Style] == 1)
				{
				    TextDrawShowForPlayer(i, leftRedBG);
				    TextDrawShowForPlayer(i, rightBlueBG);
				}
			}
		}
	}

//	printf("OnScriptUpdating...");

	return 1;
}



forward SyncInProgress(playerid);
public SyncInProgress(playerid) {
	Player[playerid][Syncing] = false;
}

forward PausedIsPressed();
public PausedIsPressed() {
	PausePressed = false;
}

forward UnpauseRound();
public UnpauseRound()
{
	RoundUnpausing = true;
	PauseCountdown--;

	foreach(new i : Player)
	{
		new iString[160];
		format(iString, sizeof(iString), "~g~Round Unpausing ~r~%d", PauseCountdown);
		PlayerTextDrawSetString(i, FPSPingPacket, iString);
		TextDrawSetString(PauseTD, iString);
		TextDrawShowForAll(PauseTD);

        PlayerPlaySound(i,1056,0.0,0.0,0.0);

		if(PauseCountdown <= 0)
		{
		    RoundPaused = false;
		    RoundUnpausing = false;
			if(Player[i][Playing] == true)
			{
				TogglePlayerControllableEx(i, true);
				if(!Player[i][ToGiveParachute])
					SetPlayerArmedWeapon(i, 0);
				else
				{
				    GivePlayerWeapon(i, WEAPON_PARACHUTE, 1);
				    SetPlayerArmedWeapon(i, WEAPON_PARACHUTE);
				    Player[i][ToGiveParachute] = false;
				}
			}
			Player[i][VoteToUnpause] = false;

			if(ESLMode)
			{
			    for(new j=0; j < SAVE_SLOTS; ++j)
				{
			        SaveVariables[j][PauseWait] = false;
			    }
			}

			ESLPauseTime = 120;

			VehiclePos[i][0] = 0.0;
			VehiclePos[i][1] = 0.0;
			VehiclePos[i][2] = 0.0;

		}
	}

	if(PauseCountdown <= 0)
	{
	    RecountPlayersOnCP();
	    for(new g = 0; g < MAX_VEHICLES; g ++)
			SetVehicleVelocity(g, VehicleVelc[g][0], VehicleVelc[g][1], VehicleVelc[g][2]);
	}



	if(PauseCountdown > 0) UnpauseTimer = SetTimer("UnpauseRound", 1000, 0);


	return 1;
}

forward AttackerAskingHelp(playerid);
public AttackerAskingHelp(playerid) {
	TeamHelp[ATTACKER] = false;
    Player[playerid][AskingForHelp] = false;
    new team = Player[playerid][Team];
	if(TeamHasLeader[team] == true && TeamLeader[team] == playerid)
	    PlayerLeadTeam(playerid, true, false);
	else
	{
		ColorFix(playerid);
		RadarFix();
	}
	return 1;
}

forward DefenderAskingHelp(playerid);
public DefenderAskingHelp(playerid) {
	TeamHelp[DEFENDER] = false;
	Player[playerid][AskingForHelp] = false;
	new team = Player[playerid][Team];
	if(TeamHasLeader[team] == true && TeamLeader[team] == playerid)
	    PlayerLeadTeam(playerid, true, false);
	else
	{
		ColorFix(playerid);
		RadarFix();
	}
	return 1;
}

forward OnPlayerKicked(playerid);
public OnPlayerKicked(playerid) {
	Player[playerid][IsKicked] = true;
	Kick(playerid);
	return 1;
}

forward VotekickExpire();
public VotekickExpire() {

	new str[128];
	format(str, sizeof(str), "{FFFFFF}The votekick on "COL_PRIM"%s{FFFFFF} has expired.", Player[VoteKickedPlayer][Name]);
	SendClientMessageToAll(-1, str);
	VoteKickedPlayer = -1;
	VotesForVotekick = 0;

	foreach(new i : Player) {
		Player[i][Votekick] = -1;
	}

	return 1;
}


forward PlayerDeathIcon(playerid);
public PlayerDeathIcon(playerid) {
	foreach(new i : Player) {
		RemovePlayerMapIcon(i, Player[playerid][DeathIcon]);
	}
}

forward ReSpectatePlayer(playerid, specid);
public ReSpectatePlayer(playerid, specid) {
	return SpectatePlayer(playerid, specid);
}

forward HideHpTextForAtt();
public HideHpTextForAtt() {
	TextDrawSetString(TeamHpLose[0], " ");
	TextDrawSetString(AttHpLose, " ");
	TempDamage[ATTACKER] = 0;
	return 1;
}

forward HideHpTextForDef();
public HideHpTextForDef() {
	TextDrawSetString(TeamHpLose[1], " ");
	TextDrawSetString(DefHpLose, " ");
	TempDamage[DEFENDER] = 0;
	return 1;
}

forward DeathMessageF(killerid, playerid);
public DeathMessageF(killerid, playerid) {
	PlayerTextDrawHide(killerid, DeathText[0]);
	PlayerTextDrawHide(playerid, DeathText[1]);
	return 1;
}

forward SwapBothTeams();
public SwapBothTeams() {
    SwapTeams();
	if(PreMatchResultsShowing == false) AllowStartBase = true;
	return 1;
}

stock GetPlayerAKA(playerid) {
	/*new File:f = fopen("aka.ini", io_readwrite);
	if(f) {
		new fstring[256], IP[MAX_PLAYER_NAME];
		GetPlayerIp(playerid, IP, sizeof(IP));

		while(fread(f, fstring, sizeof(fstring))) {
		    new idx = strfind(fstring, "=", true);
		    if(idx != -1) {
		        new key[128];
		        //new value[1024];
                AKAString = "";
				strmid(key, fstring, 0, idx);
				if(!strcmp(key, IP, true)) {
				    strmid(AKAString, fstring, idx+1, strlen(fstring)-2);
				    return AKAString;
				}
		    }
		}
		if(!dini_Isset("aka.ini", IP)) {
		    dini_Set("aka.ini", IP, Player[playerid][Name]);
		}
	}

    AKAString = "";*/
    new IP[MAX_PLAYER_NAME];
    GetPlayerIp(playerid, IP, sizeof(IP));
    new string[128];
    format(string, sizeof(string), "SELECT `Names` FROM `AKAs` WHERE `IP` = '%s'", IP);
	new DBResult:dbres = db_query(sqliteconnection, string);

	AKAString = "";
	if(db_num_rows(dbres) > 0) {
		db_get_field_assoc(dbres, "Names", AKAString, sizeof(AKAString));
	} else {
		format(string, sizeof(string), "INSERT INTO `AKAs` (`IP`, `Names`) VALUES ('%s', '%s')", IP, "");
		db_free_result(db_query(sqliteconnection, string));
	}

	//strcat(AKAString, ",");
	//strcat(AKAString, Player[playerid][Name]);

	db_free_result(dbres);
	return AKAString;
}



stock MatchAKA(playerid) {
//	new value[1024];
    AKAString = "";
	AKAString = GetPlayerAKA(playerid);

	new idx;
	do {
		idx = strfind(AKAString, ",", true, idx == 0 ? 0 : idx+1);
		new compare[MAX_PLAYER_NAME];
		new idx2 = strfind(AKAString, ",", true, idx+1);
		strmid(compare, AKAString, idx+1, (idx2 == -1 ? strlen(AKAString) : idx2) );

		if(!strcmp(compare, Player[playerid][Name], true) && strlen(Player[playerid][Name]) > 0 && strlen(compare) > 0) {
		    return 1;
		}

	} while(idx != -1);
	return 0;
}



forward OnPlayerReplace(ToAddID, ToReplaceID, playerid);
public OnPlayerReplace(ToAddID, ToReplaceID, playerid) {
    new Float:Pos[4], Float:HP[2], iString[180];

	GetPlayerPos(ToReplaceID, Pos[0], Pos[1], Pos[2]);
	GetPlayerFacingAngle(ToReplaceID, Pos[3]);

	GetHP(ToReplaceID, HP[0]);
	GetAP(ToReplaceID, HP[1]);

	new Weapons[13], Ammo[13];
	for(new i = 0; i < 13; i++){
		GetPlayerWeaponData(ToReplaceID, i, Weapons[i], Ammo[i]);
	}



	Player[ToAddID][Playing] = true;
	Player[ToAddID][WasInBase] = true;

    Player[ToAddID][Team] = Player[ToReplaceID][Team];
	SetHP(ToAddID, HP[0]);
	SetAP(ToAddID, HP[1]);

	SetPlayerPos(ToAddID, Pos[0], Pos[1], Pos[2]+1);
	SetPlayerFacingAngle(ToAddID, Pos[3]);
	SetPlayerInterior(ToAddID, GetPlayerInterior(ToReplaceID));
	SetPlayerVirtualWorld(ToAddID, GetPlayerVirtualWorld(ToReplaceID));

	SetPlayerSkin(ToAddID, Skin[Player[ToAddID][Team]]);
	SAMP_SetPlayerTeam(ToAddID, Player[ToAddID][Team]);

	ColorFix(ToAddID);


	for(new i = 0; i < 13; i++) {
		GivePlayerWeapon(ToAddID, Weapons[i], Ammo[i]);
    }

	if(Player[ToReplaceID][WeaponPicked] > 0) {
 		Player[ToAddID][WeaponPicked] = Player[ToReplaceID][WeaponPicked];
 		Player[ToReplaceID][WeaponPicked] = 0;
	}

	RemovePlayerFromRound(ToReplaceID);

    if(GameType == BASE) {
//			ShowPlayerWeaponMenu(ToAddID, Player[ToAddID][Team]);
		SetPlayerCheckpoint(ToAddID, BCPSpawn[Current][0], BCPSpawn[Current][1], BCPSpawn[Current][2], 2);
		GangZoneShowForPlayer(ToAddID, CPZone, 0xFF000044);
	} //else if(GameType == ARENA) GivePlayerArenaWeapons(ToAddID);


	if(TeamHPDamage == true) {
		switch(Player[ToAddID][Team]) {
		    case ATTACKER: {
				TextDrawShowForPlayer(ToAddID, AttackerTeam[0]);
				TextDrawShowForPlayer(ToAddID, AttackerTeam[1]);
			} case DEFENDER: {
				TextDrawShowForPlayer(ToAddID, DefenderTeam[0]);
				TextDrawShowForPlayer(ToAddID, DefenderTeam[1]);
            }
		}
	}

	if(RoundPaused == true) {
		TogglePlayerControllableEx(ToAddID, false);
		iString = "~r~Round Paused";
		PlayerTextDrawSetString(ToAddID, FPSPingPacket, iString);
		TextDrawSetString(PauseTD, iString);
		TextDrawShowForAll(PauseTD);
	}

    format(iString,sizeof(iString),"{FFFFFF}%s "COL_PRIM"has replaced {FFFFFF}%s "COL_PRIM"by {FFFFFF}%s", Player[playerid][Name], Player[ToReplaceID][Name], Player[ToAddID][Name]);
	SendClientMessageToAll(-1, iString);

	//format(iString, sizeof(iString), "~n~~n~~l~Kills ~r~%d~n~~l~Damage ~r~%.0f~n~~l~Total Dmg ~r~%.0f", Player[ToAddID][RoundKills], Player[ToAddID][RoundDamage], Player[ToAddID][TotalDamage]);
	//PlayerTextDrawSetString(ToAddID, RoundKillDmgTDmg[ToAddID], iString);

	if(Player[ToAddID][TextPos] == false) format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDamage ~r~%.0f~n~%sTotal Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[ToAddID][RoundKills], MAIN_TEXT_COLOUR, Player[ToAddID][RoundDamage], MAIN_TEXT_COLOUR, Player[ToAddID][TotalDamage]);
	else format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDmg ~r~%.0f~n~%sT. Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[ToAddID][RoundKills], MAIN_TEXT_COLOUR, Player[ToAddID][RoundDamage], MAIN_TEXT_COLOUR, Player[ToAddID][TotalDamage]);
	PlayerTextDrawSetString(ToAddID, RoundKillDmgTDmg, iString);

    RadarFix();
    return 1;
}

forward OnPlayerInGameReplace(ToAddID, i, playerid);
public OnPlayerInGameReplace(ToAddID, i, playerid) {
	Player[ToAddID][Playing] = true;
	Player[ToAddID][WasInBase] = true;

    Player[ToAddID][Team] = SaveVariables[i][pTeam];
	SetHP(ToAddID, SaveVariables[i][gHealth]);
	SetAP(ToAddID, SaveVariables[i][gArmour]);



    if(SaveVariables[i][WasCrashedInStart] == false) {
		SetPlayerPos(ToAddID, SaveVariables[i][pCoords][0], SaveVariables[i][pCoords][1], SaveVariables[i][pCoords][2]+1);
		SetPlayerFacingAngle(ToAddID, SaveVariables[i][pCoords][3]);
		SetPlayerInterior(ToAddID, SaveVariables[i][pInterior]);
		SetPlayerVirtualWorld(ToAddID, SaveVariables[i][pVWorld]);
	} else if(Current != -1) {
	    if(GameType == BASE) {
			switch(Player[ToAddID][Team]) {
			    case ATTACKER: SetPlayerPos(ToAddID, BAttackerSpawn[Current][0] + random(6), BAttackerSpawn[Current][1] + random(6), BAttackerSpawn[Current][2]+0.5);
				case DEFENDER: SetPlayerPos(ToAddID, BDefenderSpawn[Current][0] + random(6), BDefenderSpawn[Current][1] + random(6), BDefenderSpawn[Current][2]+0.5);
		    }
		    SetPlayerInterior(ToAddID, BInterior[Current]);
		} else if(GameType == ARENA || GameType == TDM) {
			switch(Player[ToAddID][Team]) {
			    case ATTACKER: SetPlayerPos(ToAddID, AAttackerSpawn[Current][0] + random(6), AAttackerSpawn[Current][1] + random(6), AAttackerSpawn[Current][2]+0.5);
				case DEFENDER: SetPlayerPos(ToAddID, ADefenderSpawn[Current][0] + random(6), ADefenderSpawn[Current][1] + random(6), ADefenderSpawn[Current][2]+0.5);
			}
		    SetPlayerInterior(ToAddID, AInterior[Current]);
		}
		SetPlayerVirtualWorld(ToAddID, 2);
	}

	SetPlayerSkin(ToAddID, Skin[Player[ToAddID][Team]]);
	SAMP_SetPlayerTeam(ToAddID, Player[ToAddID][Team]);

	ColorFix(ToAddID);


    if(GameType == BASE) {
		ShowPlayerWeaponMenu(ToAddID, Player[ToAddID][Team]);
		SetPlayerCheckpoint(ToAddID, BCPSpawn[Current][0], BCPSpawn[Current][1], BCPSpawn[Current][2], 2);
		GangZoneShowForPlayer(ToAddID, CPZone, 0xFF000044);
	} else if(GameType == ARENA || GameType == TDM) GivePlayerArenaWeapons(ToAddID);


	if(TeamHPDamage == true) {
		switch(Player[ToAddID][Team]) {
		    case ATTACKER: {
				TextDrawShowForPlayer(ToAddID, AttackerTeam[0]);
				TextDrawShowForPlayer(ToAddID, AttackerTeam[1]);
			} case DEFENDER: {
				TextDrawShowForPlayer(ToAddID, DefenderTeam[0]);
				TextDrawShowForPlayer(ToAddID, DefenderTeam[1]);
            }
		}
	}

    SaveVariables[i][ToBeAdded] = false;

	new iString[180];

	if(RoundPaused == true) {
		TogglePlayerControllableEx(ToAddID, false);
		iString = "~r~Round Paused";
		PlayerTextDrawSetString(ToAddID, FPSPingPacket, iString);
		TextDrawSetString(PauseTD, iString);
		TextDrawShowForAll(PauseTD);
	}


    format(iString,sizeof(iString),"{FFFFFF}%s "COL_PRIM"has replaced {FFFFFF}%s "COL_PRIM"by {FFFFFF}%s", Player[playerid][Name], SaveVariables[i][pName], Player[ToAddID][Name]);
	SendClientMessageToAll(-1, iString);

	if(Player[ToAddID][TextPos] == false) format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDamage ~r~%.0f~n~%sTotal Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[ToAddID][RoundKills], MAIN_TEXT_COLOUR, Player[ToAddID][RoundDamage], MAIN_TEXT_COLOUR, Player[ToAddID][TotalDamage]);
	else format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDmg ~r~%.0f~n~%sT. Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[ToAddID][RoundKills], MAIN_TEXT_COLOUR, Player[ToAddID][RoundDamage], MAIN_TEXT_COLOUR, Player[ToAddID][TotalDamage]);
	PlayerTextDrawSetString(ToAddID, RoundKillDmgTDmg, iString);

    RadarFix();

#if SKINICONS == 1
    if(ShowIcons == true) {
		SetTimer("UpdateAliveForAll", 2000, false);
	}
#endif
    return 1;
}




//------------------------------------------------------------------------------
// Arena System
//------------------------------------------------------------------------------

forward OnArenaStart(ArenaID);
public OnArenaStart(ArenaID)
{
    DeleteAllGraffs();
    ClearKillList(); // Clears the kill-list.
    DestroyAllVehicles(); // Destroys (removes) all the spawned vehicles
	Current = ArenaID; // Current will be the ID of the base that we just started. We do this so that we can use this ID later on (e.g. check /car command for the use).
    //ClearPlayerVariables(); // Clears all saved variables for the crashed players.
    ClearKillList(); // Clears the kill-list.
    ServerLastPlayed = Current;
    ServerLastPlayedType = 0;

	ElapsedTime = 0;

	#if ENABLED_TDM == 1
	if( GameType == TDM ) ServerLastPlayedType = 2;
	TeamTDMKills[ATTACKER] = 0;
	TeamTDMKills[DEFENDER] = 0;
	LowPlayers[ATTACKER] = 0;
	LowPlayers[DEFENDER] = 0;
	#endif

    SetRecentRound(ArenaID, ARENA);

    TextDrawSetString(Ready[0], "_");
    TextDrawSetString(Ready[1], "_");


	if(ArenasPlayed >= MAX_ARENAS) {
	    for(new i = 0; i < MAX_ARENAS; i++) {
			RecentArena[i] = -1;
		}
		ArenasPlayed = 0;
	}

    new iString[160];
	if(OneOnOne == false)
	{
		if( GameType == TDM ) format(iString, sizeof(iString), "%sTDM %s(~r~%d%s)", MAIN_TEXT_COLOUR, MAIN_TEXT_COLOUR, Current, MAIN_TEXT_COLOUR);
		else if( GameType == ARENA ) format(iString, sizeof(iString), "%sArena %s(~r~%d%s)", MAIN_TEXT_COLOUR, MAIN_TEXT_COLOUR, Current, MAIN_TEXT_COLOUR);
	}else format(iString, sizeof(iString), "%sDuel %s(~r~%d%s)", MAIN_TEXT_COLOUR, MAIN_TEXT_COLOUR, Current, MAIN_TEXT_COLOUR);

	for(new i = 0; i < MAX_ARENAS; i++)
	{
		VoteCount[i] = 0;
	}

	foreach(new i : Player) {


	    Player[i][LastVehicle] = -1;
	    Player[i][Readied] = false;

		//PlayerTextDrawShow(i, RoundText);

		if(Player[i][Style] == 0) PlayerTextDrawShow(i, RoundText);
		else ShowRoundStats(i);
		TextDrawSetString( leftTeamData, "_");
		TextDrawSetString( rightTeamData, "_");
		TextDrawSetString( centerTeamNames, "_");
		TextDrawSetString( timerCenterTD, "_");

	    if(Player[i][ToAddInRound] == true) {
            HideEndRoundTextDraw(i);

			if(Player[i][Spectating] == true) StopSpectate(i);

			if(Player[i][InDM] == true) { //Make sure to remove player from DM, otherwise the player will have Player[playerid][Playing] = true and Player[playerid][InDM] = true, so you are saying that the player is both in Base and in DM.
			    Player[i][InDM] = false;
    			Player[i][DMReadd] = 0;
			}

			Player[i][AntiLag] = false;
			Player[i][InHeadShot] = false;

	        SetPlayerVirtualWorld(i, 2); //Set player virtual world to something different that that for lobby and DM so that they don't collide with each other. e.g. You shouldn't be able to see players in lobby or DM while you are in base.
			TogglePlayerControllableEx(i, false); //Pause players.

			if(OneOnOne == false) {
				SetPlayerInterior(i, AInterior[Current]);
				SetPlayerCameraLookAt(i,ACPSpawn[Current][0],ACPSpawn[Current][1],ACPSpawn[Current][2]);
				#if GTA_V_INTRO == 1

					SetPlayerCameraPos(i,ACPSpawn[Current][0],ACPSpawn[Current][1],ACPSpawn[Current][2]+15);
					Player[i][Camera_PosX] =	ACPSpawn[Current][0];
					Player[i][Camera_PosY] =	ACPSpawn[Current][1];
					Player[i][Camera_PosZ] = 	ACPSpawn[Current][2]+25;
					if( Player[i][Team] == ATTACKER )
					{
						SetPlayerPos( i, AAttackerSpawn[Current][0], AAttackerSpawn[Current][0], AAttackerSpawn[Current][0] + 0.25 );
					}
					else if( Player[i][Team] == DEFENDER )
					{
						SetPlayerPos( i, ADefenderSpawn[Current][0], ADefenderSpawn[Current][0], ADefenderSpawn[Current][0] + 0.25 );
					}

				#else
					SetPlayerCameraPos(i,ACPSpawn[Current][0]+100,ACPSpawn[Current][1],ACPSpawn[Current][2]+80);
					SetPlayerPos(i, ACPSpawn[Current][0], ACPSpawn[Current][1], ACPSpawn[Current][2]);
				#endif

			} else {
				SetPlayerCameraLookAt(i,DuelCamera[Current][0],DuelCamera[Current][1],DuelCamera[Current][2]);
		   		SetPlayerCameraPos(i,DuelCamera[Current][0]+100,DuelCamera[Current][1],DuelCamera[Current][2]+80);
				SetPlayerPos(i, DuelCamera[Current][0], DuelCamera[Current][1], DuelCamera[Current][2]);
				SetPlayerInterior(i, DuelInterior[Current]);
			}
		}
		PlayerTextDrawSetString(i, BaseID_VS, iString);
	}

	if(OneOnOne == false) {
		ArenaZone = GangZoneCreate(AMin[Current][0],AMin[Current][1],AMax[Current][0],AMax[Current][1]);
		if( GameType == TDM ) format(iString, sizeof(iString), "mapname TDM: %d", Current); //Will change the map name in samp.exe to your base id (e.g. Base: 4)
		else if( GameType == ARENA ) format(iString, sizeof(iString), "mapname Arena: %d", Current);
		SendRconCommand(iString);
	} else {
	    ArenaZone = GangZoneCreate(DuelMin[Current][0],DuelMin[Current][1],DuelMax[Current][0],DuelMax[Current][1]);
		format(iString, sizeof(iString), "mapname Duel: %d", Current); //Will change the map name in samp.exe to your base id (e.g. Base: 4)
		SendRconCommand(iString);
	}

	GangZoneShowForAll(ArenaZone,0x95000099);

	#if GTA_V_INTRO == 1
		if( AInterior[Current] == 0 ) ViewTimer = 8;
		else ViewTimer = 4;
	#else
		ViewTimer = 4;
	#endif
	ViewArenaForPlayers();

	format(iString, sizeof(iString), "%s: %d - %s: %d", TeamName[ATTACKER], TeamScore[ATTACKER], TeamName[DEFENDER], TeamScore[DEFENDER]);
	SetGameModeText(iString);

	if( WarMode == true )
	{
	    MatchRoundsStarted++;
	    if( MatchRoundsStarted > 100 ) MatchRoundsStarted = 1;
		MatchRoundsRecord[ MatchRoundsStarted - 1 ][ round__type ] = 1;
		MatchRoundsRecord[ MatchRoundsStarted - 1 ][ round__ID ] = ArenaID;
		MatchRoundsRecord[ MatchRoundsStarted - 1 ][ round__completed ] = false;
	}
    return 1;
}

forward ViewArenaForPlayers();
public ViewArenaForPlayers()
{

	if(ViewTimer == 0) {
	    SpawnPlayersInArena();
	    ResetTeamLeaders();
	    return 1;
	}

	foreach(new i : Player) {
	    if(Player[i][ToAddInRound] == true) {
	        PlayerPlaySound(i,1056,0.0,0.0,0.0);
			if(OneOnOne == false) {

			#if GTA_V_INTRO == 1

				if( AInterior[Current] == 0 )
				{
				    //exterior
					switch(ViewTimer)
					{
					    case 8,7,6:
					    {   //make it go upside
					    	SetPlayerCameraLookAt( i, Player[i][Camera_PosX], Player[i][Camera_PosY], Player[i][Camera_PosZ] );
					        Player[i][Camera_PosZ] += 30.0;
							SetPlayerCameraPos( i, Player[i][Camera_PosX], Player[i][Camera_PosY], Player[i][Camera_PosZ] );
					    }
					    case 5:
					    {   //move
							new Float:x,Float:y,Float:z;
							x = Player[i][Camera_PosX]; y = Player[i][Camera_PosY]; z = Player[i][Camera_PosZ];
							if( Player[i][Team] == ATTACKER )
							{
								Player[i][Camera_PosX] = AAttackerSpawn[Current][0];
								Player[i][Camera_PosY] = AAttackerSpawn[Current][1];
								Player[i][Camera_PosZ] = AAttackerSpawn[Current][2] + 0.5;
							}
							else if( Player[i][Team] == DEFENDER )
							{
								Player[i][Camera_PosX] = ADefenderSpawn[Current][0];
								Player[i][Camera_PosY] = ADefenderSpawn[Current][1];
								Player[i][Camera_PosZ] = ADefenderSpawn[Current][2] + 0.5;
							}
							SetPlayerPos( i, Player[i][Camera_PosX], Player[i][Camera_PosY], Player[i][Camera_PosZ] );
							InterpolateCameraPos( i, x, y, z, Player[i][Camera_PosX], Player[i][Camera_PosY], Player[i][Camera_PosZ] + (30.0 * 3), 2500, CAMERA_MOVE );
					    }
					    case 3,2:
					    {   //make it go downward
							SetPlayerCameraPos( i, Player[i][Camera_PosX], Player[i][Camera_PosY], Player[i][Camera_PosZ] + (20.0 * ViewTimer) );
							SetPlayerCameraLookAt( i, Player[i][Camera_PosX], Player[i][Camera_PosY], Player[i][Camera_PosZ] );
					    }
					    case 1:
					    {   //make it go downward
							SetPlayerCameraPos( i, Player[i][Camera_PosX], Player[i][Camera_PosY], Player[i][Camera_PosZ] + (10.0 * ViewTimer) );
							SetPlayerCameraLookAt( i, Player[i][Camera_PosX], Player[i][Camera_PosY], Player[i][Camera_PosZ] );
					    }
					    default:{ }
					}
			    }
			    else // interior
			    {
					switch(ViewTimer) {
					    case 4: {
							SetPlayerCameraLookAt(i,ACPSpawn[Current][0],ACPSpawn[Current][1],ACPSpawn[Current][2]);
			    	   		SetPlayerCameraPos(i,ACPSpawn[Current][0],ACPSpawn[Current][1]+100,ACPSpawn[Current][2]+80);
		    			} case 3: {
		         			InterpolateCameraPos(i,ACPSpawn[Current][0],ACPSpawn[Current][1]+100,ACPSpawn[Current][2]+80, ACPSpawn[Current][0]-100,ACPSpawn[Current][1],ACPSpawn[Current][2]+80, 1000, CAMERA_MOVE);
		                    InterpolateCameraLookAt(i,ACPSpawn[Current][0],ACPSpawn[Current][1],ACPSpawn[Current][2], ACPSpawn[Current][0],ACPSpawn[Current][1],ACPSpawn[Current][2], 1000, CAMERA_MOVE);
				   		} case 2: {
			    	   		InterpolateCameraPos(i,ACPSpawn[Current][0]-100,ACPSpawn[Current][1],ACPSpawn[Current][2]+80, ACPSpawn[Current][0],ACPSpawn[Current][1]-100,ACPSpawn[Current][2]+80, 1000, CAMERA_MOVE);
		                    InterpolateCameraLookAt(i,ACPSpawn[Current][0],ACPSpawn[Current][1],ACPSpawn[Current][2], ACPSpawn[Current][0],ACPSpawn[Current][1],ACPSpawn[Current][2], 1000, CAMERA_MOVE);
						} case 1: {
							InterpolateCameraPos(i,ACPSpawn[Current][0],ACPSpawn[Current][1]-100,ACPSpawn[Current][2]+80,ACPSpawn[Current][0]+100,ACPSpawn[Current][1],ACPSpawn[Current][2]+80, 1000, CAMERA_MOVE);
		                    InterpolateCameraLookAt(i,ACPSpawn[Current][0],ACPSpawn[Current][1],ACPSpawn[Current][2], ACPSpawn[Current][0],ACPSpawn[Current][1],ACPSpawn[Current][2], 1000, CAMERA_MOVE);
						}
					}
			    }


			#else
		        switch(ViewTimer) {
				    case 4: {
						SetPlayerCameraLookAt(i,ACPSpawn[Current][0],ACPSpawn[Current][1],ACPSpawn[Current][2]);
		    	   		SetPlayerCameraPos(i,ACPSpawn[Current][0],ACPSpawn[Current][1]+100,ACPSpawn[Current][2]+80);
	    			} case 3: {
	         			InterpolateCameraPos(i,ACPSpawn[Current][0],ACPSpawn[Current][1]+100,ACPSpawn[Current][2]+80, ACPSpawn[Current][0]-100,ACPSpawn[Current][1],ACPSpawn[Current][2]+80, 1000, CAMERA_MOVE);
	                    InterpolateCameraLookAt(i,ACPSpawn[Current][0],ACPSpawn[Current][1],ACPSpawn[Current][2], ACPSpawn[Current][0],ACPSpawn[Current][1],ACPSpawn[Current][2], 1000, CAMERA_MOVE);
			   		} case 2: {
		    	   		InterpolateCameraPos(i,ACPSpawn[Current][0]-100,ACPSpawn[Current][1],ACPSpawn[Current][2]+80, ACPSpawn[Current][0],ACPSpawn[Current][1]-100,ACPSpawn[Current][2]+80, 1000, CAMERA_MOVE);
	                    InterpolateCameraLookAt(i,ACPSpawn[Current][0],ACPSpawn[Current][1],ACPSpawn[Current][2], ACPSpawn[Current][0],ACPSpawn[Current][1],ACPSpawn[Current][2], 1000, CAMERA_MOVE);
					} case 1: {
						InterpolateCameraPos(i,ACPSpawn[Current][0],ACPSpawn[Current][1]-100,ACPSpawn[Current][2]+80,ACPSpawn[Current][0]+100,ACPSpawn[Current][1],ACPSpawn[Current][2]+80, 1000, CAMERA_MOVE);
	                    InterpolateCameraLookAt(i,ACPSpawn[Current][0],ACPSpawn[Current][1],ACPSpawn[Current][2], ACPSpawn[Current][0],ACPSpawn[Current][1],ACPSpawn[Current][2], 1000, CAMERA_MOVE);
					}
				}
			#endif

			} else {
		        switch(ViewTimer) {
				    case 4: {
						SetPlayerCameraLookAt(i,DuelCamera[Current][0],DuelCamera[Current][1],DuelCamera[Current][2]);
		    	   		SetPlayerCameraPos(i,DuelCamera[Current][0],DuelCamera[Current][1]+100,DuelCamera[Current][2]+80);
	    			} case 3: {
	         			InterpolateCameraPos(i,DuelCamera[Current][0],DuelCamera[Current][1]+100,DuelCamera[Current][2]+80, DuelCamera[Current][0]-100,DuelCamera[Current][1],DuelCamera[Current][2]+80, 1000, CAMERA_MOVE);
	                    InterpolateCameraLookAt(i,DuelCamera[Current][0],DuelCamera[Current][1],DuelCamera[Current][2], DuelCamera[Current][0],DuelCamera[Current][1],DuelCamera[Current][2], 1000, CAMERA_MOVE);
			   		} case 2: {
		    	   		InterpolateCameraPos(i,DuelCamera[Current][0]-100,DuelCamera[Current][1],DuelCamera[Current][2]+80, DuelCamera[Current][0],DuelCamera[Current][1]-100,DuelCamera[Current][2]+80, 1000, CAMERA_MOVE);
	                    InterpolateCameraLookAt(i,DuelCamera[Current][0],DuelCamera[Current][1],DuelCamera[Current][2], DuelCamera[Current][0],DuelCamera[Current][1],DuelCamera[Current][2], 1000, CAMERA_MOVE);
					} case 1: {
						InterpolateCameraPos(i,DuelCamera[Current][0],DuelCamera[Current][1]-100,DuelCamera[Current][2]+80,DuelCamera[Current][0]+100,DuelCamera[Current][1],DuelCamera[Current][2]+80, 1000, CAMERA_MOVE);
	                    InterpolateCameraLookAt(i,DuelCamera[Current][0],DuelCamera[Current][1],DuelCamera[Current][2], DuelCamera[Current][0],DuelCamera[Current][1],DuelCamera[Current][2], 1000, CAMERA_MOVE);
					}
				}
			}
			new iString[140];
			if(OneOnOne == false) {
				if( GameType == TDM ) format(iString,sizeof(iString),"~w~TDM starting in ~r~~h~%d ~w~seconds", ViewTimer);
				else if( GameType == ARENA ) format(iString,sizeof(iString),"~w~Arena starting in ~r~~h~%d ~w~seconds", ViewTimer);
			} else {
			    format(iString,sizeof(iString),"~w~Duel starting in ~r~~h~%d ~w~seconds", ViewTimer);
			}
			//PlayerTextDrawSetString(i, RoundText, iString);
			TextDrawSetString( centerTeamNames, iString);
		}
	}
	ViewTimer--;

	return SetTimer("ViewArenaForPlayers", 1000, false);
}

SpawnPlayersInArena()
{
	foreach(new i : Player) {
        PlayerTextDrawHide(i, RoundText);

	    if(Player[i][ToAddInRound] == true) {
	    	#if XMAS == 1
	        StopAudioStreamForPlayer(i);
			#endif
	        if(Player[i][Spectating] == true) StopSpectate(i);

	        Player[i][Playing] = true;
	        Player[i][WasInBase] = true;

			Player[i][RoundKills] = 0;
			Player[i][RoundDeaths] = 0;
			Player[i][RoundDamage] = 0;
			Player[i][shotsHit] = 0;

			PlayerPlaySound(i, 1057, 0, 0, 0);


	        SetPlayerVirtualWorld(i, 2);
	        if(OneOnOne == false) SetPlayerInterior(i, AInterior[Current]);
			else SetPlayerInterior(i, DuelInterior[Current]);

			SetAP(i, RoundAR);
			SetHP(i, RoundHP);

			switch(Player[i][Team]) {
			    case ATTACKER: {
			        if(OneOnOne == false) {
				        if(AInterior[Current] == 0) SetSpawnInfoEx(i, Player[i][Team], Skin[Player[i][Team]], AAttackerSpawn[Current][0] + random(6), AAttackerSpawn[Current][1] + random(6), AAttackerSpawn[Current][2]+0.5, 0, 0, 0, 0, 0, 0, 0);
						else SetSpawnInfoEx(i, Player[i][Team], Skin[Player[i][Team]], AAttackerSpawn[Current][0] + random(2), AAttackerSpawn[Current][1] + random(2), AAttackerSpawn[Current][2]+0.5, 0, 0, 0, 0, 0, 0, 0);
					} else {
					    SetSpawnInfoEx(i, Player[i][Team], Skin[Player[i][Team]], DuelASpawn[Current][0] + random(2), DuelASpawn[Current][1] + random(2), DuelASpawn[Current][2]+0.5, DuelASpawn[Current][3], 0, 0, 0, 0, 0, 0);
					}

			        SetPlayerColor(i, ATTACKER_PLAYING);
			        SpawnPlayerEx(i);
                    SAMP_SetPlayerTeam(i, 1);
                    if(TeamHPDamage == true) {
						TextDrawShowForPlayer(i, AttackerTeam[0]);
						TextDrawShowForPlayer(i, AttackerTeam[1]);
					}
				} case DEFENDER: {
				    if(OneOnOne == false) {
				        if(AInterior[Current] == 0) SetSpawnInfoEx(i, Player[i][Team], Skin[Player[i][Team]], ADefenderSpawn[Current][0] + random(6), ADefenderSpawn[Current][1] + random(6), ADefenderSpawn[Current][2]+0.5, 0, 0, 0, 0, 0, 0, 0);
				        else SetSpawnInfoEx(i, Player[i][Team], Skin[Player[i][Team]], ADefenderSpawn[Current][0] + random(2), ADefenderSpawn[Current][1] + random(2), ADefenderSpawn[Current][2]+0.5, 0, 0, 0, 0, 0, 0, 0);
					} else {
                        SetSpawnInfoEx(i, Player[i][Team], Skin[Player[i][Team]], DuelBSpawn[Current][0] + random(2), DuelBSpawn[Current][1] + random(2), DuelBSpawn[Current][2]+0.5, DuelBSpawn[Current][3], 0, 0, 0, 0, 0, 0);
					}

					SetPlayerColor(i, DEFENDER_PLAYING);
					SpawnPlayerEx(i);
					SAMP_SetPlayerTeam(i, 2);
			        if(TeamHPDamage == true) {
						TextDrawShowForPlayer(i, DefenderTeam[0]);
						TextDrawShowForPlayer(i, DefenderTeam[1]);
					}
				}
			}


            SetCameraBehindPlayer(i);
			if(RoundPaused == false) TogglePlayerControllableEx(i, true);
			else TogglePlayerControllableEx(i, false);
            Player[i][ToAddInRound] = false;
			GivePlayerArenaWeapons(i);

			new iString[160];
			if(Player[i][TextPos] == false) format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDamage ~r~%.0f~n~%sTotal Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[i][RoundKills], MAIN_TEXT_COLOUR, Player[i][RoundDamage], MAIN_TEXT_COLOUR, Player[i][TotalDamage]);
			else format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDmg ~r~%.0f~n~%sT. Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[i][RoundKills], MAIN_TEXT_COLOUR, Player[i][RoundDamage], MAIN_TEXT_COLOUR, Player[i][TotalDamage]);
			PlayerTextDrawSetString(i, RoundKillDmgTDmg, iString);
		}

		switch(Player[i][Team]) {
			case ATTACKER_SUB: {
                if(TeamHPDamage == true) {
					TextDrawShowForPlayer(i, AttackerTeam[0]);
					TextDrawShowForPlayer(i, AttackerTeam[1]);
				}
			} case DEFENDER_SUB: {
		        if(TeamHPDamage == true) {
					TextDrawShowForPlayer(i, DefenderTeam[0]);
					TextDrawShowForPlayer(i, DefenderTeam[1]);
				}
			}
		}
	}

	ClearChat();

	RoundMints = ConfigRoundTime;
	#if ENABLED_TDM == 1
	if( GameType == TDM )
	    RoundMints = DEFAULT_TDM_TIME;
	#endif
	RoundSeconds = 0;

    foreach(new i:Player)
    {
		if(Player[i][Style] == 0) TextDrawShowForPlayer(i, RoundStats);
		else ShowRoundStats(i);
	}

#if SKINICONS == 1
    if(ShowIcons == true) {
		SetTimer("UpdateAliveForAll", 2000, false);
	}
#endif

	AllowStartBase = true;
	ArenaStarted = true;
	FallProtection = true;
	RadarFix();
}

forward AddPlayerToArena(playerid);
public AddPlayerToArena(playerid)
{
	if(Player[playerid][Spectating] == true) {
		StopSpectate(playerid);
		SetTimerEx("AddPlayerToArena", 500, false, "i", playerid);
		return 1;
	}

    PlayerTextDrawHide(playerid, RoundText);

#if SKINICONS == 1
    if(ShowIcons == true) {
	    SetTimer("UpdateAliveForAll", 2000, false);
	}
#endif

    #if XMAS == 1
    StopAudioStreamForPlayer(playerid);
    #endif

	if(Player[playerid][InDM] == true) { //Make sure to remove player from DM, otherwise the player will have Player[playerid][Playing] = true and Player[playerid][InDM] = true, so you are saying that the player is both in Base and in DM.
	    Player[playerid][InDM] = false;
		Player[playerid][DMReadd] = 0;
	}
	Player[playerid][AntiLag] = false;
	Player[playerid][InHeadShot] = false;

	if(Player[playerid][LastVehicle] != -1) {
		DestroyVehicle(Player[playerid][LastVehicle]);
		Player[playerid][LastVehicle] = -1;
	}

    Player[playerid][Playing] = true;
    Player[playerid][WasInBase] = true;
    Player[playerid][ToAddInRound] = false;
	Player[playerid][RoundKills] = 0;
	Player[playerid][RoundDeaths] = 0;
	Player[playerid][RoundDamage] = 0;
	Player[playerid][shotsHit] = 0;

	PlayerPlaySound(playerid, 1057, 0, 0, 0);
	SetCameraBehindPlayer(playerid);

	SetAP(playerid, RoundAR);
	SetHP(playerid, RoundHP);



	SetPlayerVirtualWorld(playerid, 2);
	if(OneOnOne == false) {
		SetPlayerInterior(playerid, AInterior[Current]);
	} else {
	    SetPlayerInterior(playerid, DuelInterior[Current]);
	}

	switch(Player[playerid][Team]) {
	    case ATTACKER: {
	        if(OneOnOne == false) {
	        	SetSpawnInfoEx(playerid, Player[playerid][Team], Skin[Player[playerid][Team]], AAttackerSpawn[Current][0] + random(2), AAttackerSpawn[Current][1] + random(2), AAttackerSpawn[Current][2]+0.5, 0, 0, 0, 0, 0, 0, 0);
				SetPlayerMapIcon(playerid, 59, AAttackerSpawn[Current][0], AAttackerSpawn[Current][1], AAttackerSpawn[Current][2], 59, 0, MAPICON_GLOBAL);
			} else {
	        	SetSpawnInfoEx(playerid, Player[playerid][Team], Skin[Player[playerid][Team]], DuelASpawn[Current][0] + random(2), DuelASpawn[Current][1] + random(2), DuelASpawn[Current][2]+0.5, DuelASpawn[Current][3], 0, 0, 0, 0, 0, 0);
			}

			SpawnPlayerEx(playerid);
	        SetPlayerColor(playerid, ATTACKER_PLAYING);

            SAMP_SetPlayerTeam(playerid, 1);
            if(TeamHPDamage == true) {
	           	TextDrawShowForPlayer(playerid, AttackerTeam[0]);
				TextDrawShowForPlayer(playerid, AttackerTeam[1]);
				TextDrawHideForPlayer(playerid, DefenderTeam[0]);
				TextDrawHideForPlayer(playerid, DefenderTeam[1]);
			}
		} case DEFENDER: {
		    if(OneOnOne == false) {
	        	SetSpawnInfoEx(playerid, Player[playerid][Team], Skin[Player[playerid][Team]], ADefenderSpawn[Current][0] + random(2), ADefenderSpawn[Current][1] + random(2), ADefenderSpawn[Current][2]+0.5, 0, 0, 0, 0, 0, 0, 0);
			} else {
	        	SetSpawnInfoEx(playerid, Player[playerid][Team], Skin[Player[playerid][Team]], DuelBSpawn[Current][0] + random(2), DuelBSpawn[Current][1] + random(2), DuelBSpawn[Current][2]+0.5, 0, 0, 0, 0, 0, 0, 0);
                SetPlayerFacingAngle(playerid, DuelBSpawn[Current][3]);
			}

			SpawnPlayerEx(playerid);
	        SetPlayerColor(playerid, DEFENDER_PLAYING);
	        SAMP_SetPlayerTeam(playerid, 2);
	        if(TeamHPDamage == true) {
				TextDrawShowForPlayer(playerid, DefenderTeam[0]);
				TextDrawShowForPlayer(playerid, DefenderTeam[1]);
	           	TextDrawHideForPlayer(playerid, AttackerTeam[0]);
				TextDrawHideForPlayer(playerid, AttackerTeam[1]);
			}
		} case REFEREE: {
	        SetSpawnInfoEx(playerid, Player[playerid][Team], Skin[Player[playerid][Team]], ACPSpawn[Current][0] + random(2), ACPSpawn[Current][1] + random(2), ACPSpawn[Current][2]+0.5, 0, 0, 0, 0, 0, 0, 0);
			SpawnPlayerEx(playerid);
	        SetPlayerColor(playerid, REFEREE_COLOR);
	        SAMP_SetPlayerTeam(playerid, 3);
		}
	}

	GivePlayerArenaWeapons(playerid);

	if(RoundPaused == false) TogglePlayerControllableEx(playerid, true);
	else TogglePlayerControllableEx(playerid, false);


	new iString[160];
	if(Player[playerid][TextPos] == false) format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDamage ~r~%.0f~n~%sTotal Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[playerid][RoundKills], MAIN_TEXT_COLOUR, Player[playerid][RoundDamage], MAIN_TEXT_COLOUR, Player[playerid][TotalDamage]);
	else format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDmg ~r~%.0f~n~%sT. Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[playerid][RoundKills], MAIN_TEXT_COLOUR, Player[playerid][RoundDamage], MAIN_TEXT_COLOUR, Player[playerid][TotalDamage]);
	PlayerTextDrawSetString(playerid, RoundKillDmgTDmg, iString);

	RadarFix();
	return 1;
}

GivePlayerArenaWeapons(playerid)
{
	ResetPlayerWeapons(playerid);

	if( GameType == ARENA )
	{
		if(Player[playerid][Team] != REFEREE) {
			if(OneOnOne == false) {
				MenuID[playerid] = 1;
				ShowTDMWeaponMenu(playerid, Player[playerid][Team]);
			} else {
			    if(Current != -1) {
					GivePlayerWeapon(playerid, DuelWeapons[Current][0], 9999);
					GivePlayerWeapon(playerid, DuelWeapons[Current][1], 9999);
				}
			}
		}
	}
	#if ENABLED_TDM == 1
	else if( GameType == TDM )
	{
	    GivePlayerWeapon( playerid, DEAGLE ,9999);
	    GivePlayerWeapon( playerid, M4 , 	9999);
	    GivePlayerWeapon( playerid, MP5, 	9999 );
	    GivePlayerWeapon( playerid, SHOTGUN,9999 );
	    GivePlayerWeapon( playerid, SNIPER, 9999 );
	    SetPlayerArmedWeapon( playerid, 0 );
	}
	#endif
	return 1;
}

//------------------------------------------------------------------------------
// Base System
//------------------------------------------------------------------------------

forward OnBaseStart(BaseID);
public OnBaseStart(BaseID)
{
	DeleteAllGraffs();
    ClearKillList(); // Clears the kill-list.
    DestroyAllVehicles(); // Destroys (removes) all the spawned vehicles
	Current = BaseID; // Current will be the ID of the base that we just started. We do this so that we can use this ID later on (e.g. check /car command for the use).
    //ClearPlayerVariables(); // Clears all saved variables for the crashed players.
    ClearKillList(); // Clears the kill-list.
    ServerLastPlayed = Current;
    ServerLastPlayedType = 1;

	PlayersInCP = 0;
 	ElapsedTime = 0;
	CurrentCPTime = ConfigCPTime;
    SetRecentRound(BaseID, BASE);

    TextDrawSetString(Ready[0], "_");
    TextDrawSetString(Ready[1], "_");

	if(BasesPlayed >= MAX_BASES) {
	    for(new i = 0; i < MAX_BASES; i++) {
			RecentBase[i] = -1;
		}
		BasesPlayed = 0;
	}

 	for( new i; i < 10; i ++ ) { // Reset the number of times a weapon is picked for each team.
        TimesPicked[ATTACKER][i] = 0;
        TimesPicked[DEFENDER][i] = 0;
    }

    new iString[160];
	format(iString, sizeof(iString), "%sBase %s(~r~%d%s)", MAIN_TEXT_COLOUR, MAIN_TEXT_COLOUR, Current, MAIN_TEXT_COLOUR);

	for(new i = 0; i < MAX_BASES; i++)
	{
		VoteCount[i] = 0;
	}

	foreach(new i : Player) {
		Player[i][LastVehicle] = -1;

		if(Player[i][Style] == 0) PlayerTextDrawShow(i, RoundText);
		else ShowRoundStats(i);
		TextDrawSetString( leftTeamData, "_");
		TextDrawSetString( rightTeamData, "_");
		TextDrawSetString( centerTeamNames, "_");
		TextDrawSetString( timerCenterTD, "_");

		Player[i][WasInCP] = false;
  		Player[i][Readied] = false;


	    if(Player[i][ToAddInRound] == true) {

			if(Player[i][Team] != ATTACKER && Player[i][Team] != DEFENDER && Player[i][Team] != REFEREE)
			{
			    Player[i][ToAddInRound] = false;
			    continue;
	        }
            HideEndRoundTextDraw(i);

			if(Player[i][Spectating] == true) StopSpectate(i);
			if(Player[i][InDM] == true) { // Make sure to remove player from DM, otherwise the player will have Player[playerid][Playing] = true and Player[playerid][InDM] = true, so you are saying that the player is both in Base and in DM.
			    Player[i][InDM] = false;
    			Player[i][DMReadd] = 0;
			}
			Player[i][AntiLag] = false;
			Player[i][InHeadShot] = false;

			Player[i][Playing] = true;

	        SetPlayerVirtualWorld(i, 2); // Set player virtual world to something different that that for lobby and DM so that they don't collide with each other. e.g. You shouldn't be able to see players in lobby or DM while you are in base.
	        SetPlayerInterior(i, BInterior[Current]);
			TogglePlayerControllableEx(i, false); //Pause players.
			SetPlayerCameraLookAt(i,BCPSpawn[Current][0],BCPSpawn[Current][1],BCPSpawn[Current][2]);

	   		#if GTA_V_INTRO == 1
	   			SetPlayerCameraPos(i,BCPSpawn[Current][0],BCPSpawn[Current][1],BCPSpawn[Current][2]+15);
	   			Player[i][Camera_PosX] =	BCPSpawn[Current][0];
	   			Player[i][Camera_PosY] =	BCPSpawn[Current][1];
	   			Player[i][Camera_PosZ] = 	BCPSpawn[Current][2] + 15;
	   			if( Player[i][Team] == ATTACKER )
				{
					SetPlayerPos( i, BAttackerSpawn[Current][0], BAttackerSpawn[Current][0], BAttackerSpawn[Current][0] + 0.25 );
				}
				else if( Player[i][Team] == DEFENDER )
				{
					SetPlayerPos( i, BDefenderSpawn[Current][0], BDefenderSpawn[Current][0], BDefenderSpawn[Current][0] + 0.25 );
				}
			#else
				SetPlayerCameraPos(i,BCPSpawn[Current][0]+100,BCPSpawn[Current][1],BCPSpawn[Current][2]+80);
				SetPlayerPos(i, BCPSpawn[Current][0]+10, BCPSpawn[Current][1]+10, BCPSpawn[Current][2]);
			#endif
			SetPlayerCheckpoint(i, BCPSpawn[Current][0], BCPSpawn[Current][1], BCPSpawn[Current][2], 2); // Set checkpoint location and size.
		}

		PlayerTextDrawSetString(i, BaseID_VS, iString);
	}

	CPZone = GangZoneCreate(BCPSpawn[Current][0]-50, BCPSpawn[Current][1]-50, BCPSpawn[Current][0]+50, BCPSpawn[Current][1]+50);
	GangZoneShowForAll(CPZone, 0xFF000044);

	#if GTA_V_INTRO == 1
		if( BInterior[Current] == 0 ) ViewTimer = 8;
		else ViewTimer = 4;
	#else
		ViewTimer = 4;
	#endif
	ViewBaseForPlayers();


	format(iString, sizeof(iString), "mapname Base: %d", Current); //Will change the map name in samp.exe to your base id (e.g. Base: 4)
	SendRconCommand(iString);




	format(iString, sizeof(iString), "%s: %d - %s: %d", TeamName[ATTACKER], TeamScore[ATTACKER], TeamName[DEFENDER], TeamScore[DEFENDER]);
	SetGameModeText(iString);

	if( WarMode == true )
	{
	    MatchRoundsStarted++;
	    if( MatchRoundsStarted > 100 ) MatchRoundsStarted = 1;
		MatchRoundsRecord[ MatchRoundsStarted - 1 ][ round__type ] = 0;
		MatchRoundsRecord[ MatchRoundsStarted - 1 ][ round__ID ] = BaseID;
		MatchRoundsRecord[ MatchRoundsStarted - 1 ][ round__completed ] = false;
	}
    return 1;
}


forward ViewBaseForPlayers();
public ViewBaseForPlayers()
{
	if(ViewTimer == 0) {
	    SpawnPlayersInBase();
	    ResetTeamLeaders();
	    return 1;
	}

	foreach(new i : Player) {
		if(Player[i][ToAddInRound] == true) {

		    #if GTA_V_INTRO == 1

			if( BInterior[Current] == 0 )
			{
				switch(ViewTimer)
				{
				    case 8,7,6:
				    {   //make it go upside
				    	SetPlayerCameraLookAt( i, Player[i][Camera_PosX], Player[i][Camera_PosY], Player[i][Camera_PosZ] );
				        Player[i][Camera_PosZ] += 30.0;
						SetPlayerCameraPos( i, Player[i][Camera_PosX], Player[i][Camera_PosY], Player[i][Camera_PosZ] );
				    }
				    case 5:
				    {   //move
						new Float:x,Float:y,Float:z;
						x = Player[i][Camera_PosX]; y = Player[i][Camera_PosY]; z = Player[i][Camera_PosZ];
						if( Player[i][Team] == ATTACKER )
						{
							Player[i][Camera_PosX] = BAttackerSpawn[Current][0];
							Player[i][Camera_PosY] = BAttackerSpawn[Current][1];
							Player[i][Camera_PosZ] = BAttackerSpawn[Current][2] + 0.5;
						}
						else if( Player[i][Team] == DEFENDER )
						{
							Player[i][Camera_PosX] = BDefenderSpawn[Current][0];
							Player[i][Camera_PosY] = BDefenderSpawn[Current][1];
							Player[i][Camera_PosZ] = BDefenderSpawn[Current][2] + 0.5;
						}
						SetPlayerPos( i, Player[i][Camera_PosX], Player[i][Camera_PosY], Player[i][Camera_PosZ] );
						InterpolateCameraPos( i, x, y, z, Player[i][Camera_PosX], Player[i][Camera_PosY], Player[i][Camera_PosZ] + (30.0 * 3), 2500, CAMERA_MOVE );
				    }
				    case 3,2:
				    {   //make it go downward
						SetPlayerCameraPos( i, Player[i][Camera_PosX], Player[i][Camera_PosY], Player[i][Camera_PosZ] + (20.0 * ViewTimer) );
						SetPlayerCameraLookAt( i, Player[i][Camera_PosX], Player[i][Camera_PosY], Player[i][Camera_PosZ] );
				    }
				    case 1:
				    {   //make it go downward
						SetPlayerCameraPos( i, Player[i][Camera_PosX], Player[i][Camera_PosY], Player[i][Camera_PosZ] + (10.0 * ViewTimer) );
						SetPlayerCameraLookAt( i, Player[i][Camera_PosX], Player[i][Camera_PosY], Player[i][Camera_PosZ] );
				    }
				    default:{ }
				}
		    }
		    else
		    {
		        PlayerPlaySound(i,1056,0.0,0.0,0.0);

				switch(ViewTimer) {
				    case 4: {
						SetPlayerCameraLookAt(i,BCPSpawn[Current][0],BCPSpawn[Current][1],BCPSpawn[Current][2]);
		    	   		SetPlayerCameraPos(i,BCPSpawn[Current][0],BCPSpawn[Current][1]+100,BCPSpawn[Current][2]+80);
	    			} case 3: {
	         			InterpolateCameraPos(i,BCPSpawn[Current][0],BCPSpawn[Current][1]+100,BCPSpawn[Current][2]+80, BCPSpawn[Current][0]-100,BCPSpawn[Current][1],BCPSpawn[Current][2]+80, 1000, CAMERA_MOVE);
	                    InterpolateCameraLookAt(i,BCPSpawn[Current][0],BCPSpawn[Current][1],BCPSpawn[Current][2], BCPSpawn[Current][0],BCPSpawn[Current][1],BCPSpawn[Current][2], 1000, CAMERA_MOVE);
			   		} case 2: {
		    	   		InterpolateCameraPos(i,BCPSpawn[Current][0]-100,BCPSpawn[Current][1],BCPSpawn[Current][2]+80, BCPSpawn[Current][0],BCPSpawn[Current][1]-100,BCPSpawn[Current][2]+80, 1000, CAMERA_MOVE);
	                    InterpolateCameraLookAt(i,BCPSpawn[Current][0],BCPSpawn[Current][1],BCPSpawn[Current][2], BCPSpawn[Current][0],BCPSpawn[Current][1],BCPSpawn[Current][2], 1000, CAMERA_MOVE);
					} case 1: {
						InterpolateCameraPos(i,BCPSpawn[Current][0],BCPSpawn[Current][1]-100,BCPSpawn[Current][2]+80,BCPSpawn[Current][0]+100,BCPSpawn[Current][1],BCPSpawn[Current][2]+80, 1000, CAMERA_MOVE);
	                    InterpolateCameraLookAt(i,BCPSpawn[Current][0],BCPSpawn[Current][1],BCPSpawn[Current][2], BCPSpawn[Current][0],BCPSpawn[Current][1],BCPSpawn[Current][2], 1000, CAMERA_MOVE);
					}
				}
			}


		    #else
	        PlayerPlaySound(i,1056,0.0,0.0,0.0);

			switch(ViewTimer) {
			    case 4: {
					SetPlayerCameraLookAt(i,BCPSpawn[Current][0],BCPSpawn[Current][1],BCPSpawn[Current][2]);
	    	   		SetPlayerCameraPos(i,BCPSpawn[Current][0],BCPSpawn[Current][1]+100,BCPSpawn[Current][2]+80);
    			} case 3: {
         			InterpolateCameraPos(i,BCPSpawn[Current][0],BCPSpawn[Current][1]+100,BCPSpawn[Current][2]+80, BCPSpawn[Current][0]-100,BCPSpawn[Current][1],BCPSpawn[Current][2]+80, 1000, CAMERA_MOVE);
                    InterpolateCameraLookAt(i,BCPSpawn[Current][0],BCPSpawn[Current][1],BCPSpawn[Current][2], BCPSpawn[Current][0],BCPSpawn[Current][1],BCPSpawn[Current][2], 1000, CAMERA_MOVE);
		   		} case 2: {
	    	   		InterpolateCameraPos(i,BCPSpawn[Current][0]-100,BCPSpawn[Current][1],BCPSpawn[Current][2]+80, BCPSpawn[Current][0],BCPSpawn[Current][1]-100,BCPSpawn[Current][2]+80, 1000, CAMERA_MOVE);
                    InterpolateCameraLookAt(i,BCPSpawn[Current][0],BCPSpawn[Current][1],BCPSpawn[Current][2], BCPSpawn[Current][0],BCPSpawn[Current][1],BCPSpawn[Current][2], 1000, CAMERA_MOVE);
				} case 1: {
					InterpolateCameraPos(i,BCPSpawn[Current][0],BCPSpawn[Current][1]-100,BCPSpawn[Current][2]+80,BCPSpawn[Current][0]+100,BCPSpawn[Current][1],BCPSpawn[Current][2]+80, 1000, CAMERA_MOVE);
                    InterpolateCameraLookAt(i,BCPSpawn[Current][0],BCPSpawn[Current][1],BCPSpawn[Current][2], BCPSpawn[Current][0],BCPSpawn[Current][1],BCPSpawn[Current][2], 1000, CAMERA_MOVE);
				}
			}
			#endif

			new iString[140];
			format(iString,sizeof(iString),"~w~Base starting in ~r~~h~%d ~w~seconds", ViewTimer);
			//PlayerTextDrawSetString(i, RoundText, iString);
			TextDrawSetString( centerTeamNames, iString);
		}
	}

	ViewTimer--;

	return SetTimer("ViewBaseForPlayers", 1000, false);
}


SpawnPlayersInBase()
{
	foreach(new i : Player) {
        PlayerTextDrawHide(i, RoundText);

	    if(Player[i][ToAddInRound] == true)
		{
	        #if XMAS == 1
	        StopAudioStreamForPlayer(i);
			#endif
			if(Player[i][InDM] == true)
			{ //Make sure to remove player from DM, otherwise the player will have Player[playerid][Playing] = true and Player[playerid][InDM] = true, so you are saying that the player is both in Base and in DM.
			    Player[i][InDM] = false;
    			Player[i][DMReadd] = 0;
			}
			Player[i][AntiLag] = false;
			Player[i][InHeadShot] = false;

            if(Player[i][Spectating] == true) StopSpectate(i);

	        Player[i][Playing] = true;
	        Player[i][WasInBase] = true;
			Player[i][RoundKills] = 0;
			Player[i][RoundDeaths] = 0;
			Player[i][RoundDamage] = 0;
			Player[i][shotsHit] = 0;

			PlayerPlaySound(i, 1057, 0, 0, 0);
			SetCameraBehindPlayer(i);

			SetAP(i, RoundAR);
			SetHP(i, RoundHP);

	        SetPlayerVirtualWorld(i, 2); //Set player virtual world to something different that that for lobby and DM so that they don't collide with each other. e.g. You shouldn't be able to see players in lobby or DM while you are in base.
	        SetPlayerInterior(i, BInterior[Current]);

			switch(Player[i][Team]) {
			    case ATTACKER: {
			        if(BInterior[Current] == 0) SetSpawnInfoEx(i, Player[i][Team], Skin[Player[i][Team]], BAttackerSpawn[Current][0] + random(6), BAttackerSpawn[Current][1] + random(6), BAttackerSpawn[Current][2]+0.5, 0, 0, 0, 0, 0, 0, 0);
					else SetSpawnInfoEx(i, Player[i][Team], Skin[Player[i][Team]], BAttackerSpawn[Current][0] + random(2), BAttackerSpawn[Current][1] + random(2), BAttackerSpawn[Current][2]+0.5, 0, 0, 0, 0, 0, 0, 0);

					SetPlayerCheckpoint(i, BCPSpawn[Current][0], BCPSpawn[Current][1], BCPSpawn[Current][2], 2);
				    SetPlayerColor(i, ATTACKER_PLAYING);
				    SpawnPlayerEx(i);
           			SetPlayerMapIcon(i, 59, BAttackerSpawn[Current][0], BAttackerSpawn[Current][1], BAttackerSpawn[Current][2], 59, 0, MAPICON_GLOBAL);
                    SAMP_SetPlayerTeam(i, ATTACKER);
                    if(TeamHPDamage == true) {
						TextDrawShowForPlayer(i, AttackerTeam[0]);
						TextDrawShowForPlayer(i, AttackerTeam[1]);
					}
				} case DEFENDER: {
			        if(BInterior[Current] == 0) SetSpawnInfoEx(i, Player[i][Team], Skin[Player[i][Team]], BDefenderSpawn[Current][0] + random(6), BDefenderSpawn[Current][1] + random(6), BDefenderSpawn[Current][2]+0.5, 0, 0, 0, 0, 0, 0, 0);
					else  SetSpawnInfoEx(i, Player[i][Team], Skin[Player[i][Team]], BDefenderSpawn[Current][0] + random(2), BDefenderSpawn[Current][1] + random(2), BDefenderSpawn[Current][2]+0.5, 0, 0, 0, 0, 0, 0, 0);
					Player[i][IgnoreSpawn] = true;
					SetPlayerCheckpoint(i, BCPSpawn[Current][0], BCPSpawn[Current][1], BCPSpawn[Current][2], 2);
					SetPlayerColor(i, DEFENDER_PLAYING);
					SpawnPlayerEx(i);
			        SAMP_SetPlayerTeam(i, DEFENDER);
			        if(TeamHPDamage == true) {
						TextDrawShowForPlayer(i, DefenderTeam[0]);
						TextDrawShowForPlayer(i, DefenderTeam[1]);
					}
				}/* case REFEREE: {
			        SetSpawnInfoEx(i, Player[i][Team], Skin[Player[i][Team]], BCPSpawn[Current][0] + random(6), BCPSpawn[Current][1] + random(6), BCPSpawn[Current][2]+0.5, 0, 0, 0, 0, 0, 0, 0);
					Player[i][IgnoreSpawn] = true;
					SpawnPlayerEx(i);
					SetPlayerCheckpoint(i, BCPSpawn[Current][0], BCPSpawn[Current][1], BCPSpawn[Current][2], 2);
			        SetPlayerColor(i, REFEREE_COLOR);
			        SAMP_SetPlayerTeam(i, REFEREE);
				}*/
			}



			if(RoundPaused == false) TogglePlayerControllableEx(i, true);
			else TogglePlayerControllableEx(i, false);
			Player[i][ToAddInRound] = false;

			ShowPlayerWeaponMenu(i, Player[i][Team]);

			new iString[160];
			if(Player[i][TextPos] == false) format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDamage ~r~%.0f~n~%sTotal Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[i][RoundKills], MAIN_TEXT_COLOUR, Player[i][RoundDamage], MAIN_TEXT_COLOUR, Player[i][TotalDamage]);
			else format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDmg ~r~%.0f~n~%sT. Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[i][RoundKills], MAIN_TEXT_COLOUR, Player[i][RoundDamage], MAIN_TEXT_COLOUR, Player[i][TotalDamage]);
			PlayerTextDrawSetString(i, RoundKillDmgTDmg, iString);
		}

		switch(Player[i][Team]) {
			case ATTACKER_SUB: {
                if(TeamHPDamage == true) {
					TextDrawShowForPlayer(i, AttackerTeam[0]);
					TextDrawShowForPlayer(i, AttackerTeam[1]);
				}
			} case DEFENDER_SUB: {
		        if(TeamHPDamage == true) {
					TextDrawShowForPlayer(i, DefenderTeam[0]);
					TextDrawShowForPlayer(i, DefenderTeam[1]);
				}
			}
		}

/*		foreach(new x : Player) {
		    OnPlayerStreamIn(x, i);
		    OnPlayerStreamIn(i, x);
		}
*/
	}

	ClearChat();



	RoundMints = ConfigRoundTime;
	RoundSeconds = 0;

	foreach(new i:Player)
	{
		if(Player[i][Style] == 0) TextDrawShowForPlayer(i, RoundStats);
		else ShowRoundStats(i);
	}

#if SKINICONS == 1
	if(ShowIcons == true) {
		SetTimer("UpdateAliveForAll", 2000, false);
	}
#endif

	AllowStartBase = true;
	BaseStarted = true;
    FallProtection = true;
	RadarFix();
    return 1;
}

forward AddPlayerToBase(playerid);
public AddPlayerToBase(playerid)
{
	if(Player[playerid][Spectating] == true) {
		StopSpectate(playerid);
		SetTimerEx("AddPlayerToBase", 500, false, "i", playerid);
		return 1;
	}

    PlayerTextDrawHide(playerid, RoundText);

#if SKINICONS == 1
	if(ShowIcons == true) {
		SetTimer("UpdateAliveForAll", 2000, false);
	}
#endif

    #if XMAS == 1
    StopAudioStreamForPlayer(playerid);
	#endif

	if(Player[playerid][InDM] == true) { //Make sure to remove player from DM, otherwise the player will have Player[playerid][Playing] = true and Player[playerid][InDM] = true, so you are saying that the player is both in Base and in DM.
	    Player[playerid][InDM] = false;
		Player[playerid][DMReadd] = 0;
	}
	Player[playerid][AntiLag] = false;
	Player[playerid][InHeadShot] = false;
	if(Player[playerid][LastVehicle] != -1) {
		DestroyVehicle(Player[playerid][LastVehicle]);
//		Delete3DTextLabel(Vehicle3DText[Player[playerid][LastVehicle]]);
		Player[playerid][LastVehicle] = -1;
	}

	if(Player[playerid][WasInBase] == false) {
		Player[playerid][RoundKills] = 0;
		Player[playerid][RoundDeaths] = 0;
		Player[playerid][RoundDamage] = 0;
	    Player[playerid][shotsHit] = 0;
	}

    Player[playerid][Playing] = true;
    Player[playerid][WasInBase] = true;

	PlayerPlaySound(playerid, 1057, 0, 0, 0);
	SetCameraBehindPlayer(playerid);

	SetAP(playerid, RoundAR);
	SetHP(playerid, RoundHP);

    Player[playerid][ReaddOrAddTickCount] = GetTickCount();

    SetPlayerVirtualWorld(playerid, 2); //Set player virtual world to something different that that for lobby and DM so that they don't collide with each other. e.g. You shouldn't be able to see players in lobby or DM while you are in base.
    SetPlayerInterior(playerid, BInterior[Current]);

	switch(Player[playerid][Team]) {
	    case ATTACKER: {
	        SetSpawnInfoEx(playerid, Player[playerid][Team], Skin[Player[playerid][Team]], BAttackerSpawn[Current][0] + random(2), BAttackerSpawn[Current][1] + random(2), BAttackerSpawn[Current][2]+0.5, 0, 0, 0, 0, 0, 0, 0);
//			Player[playerid][IgnoreSpawn] = true;
			SpawnPlayerEx(playerid);
			SetPlayerCheckpoint(playerid, BCPSpawn[Current][0], BCPSpawn[Current][1], BCPSpawn[Current][2], 2);
	        SetPlayerColor(playerid, ATTACKER_PLAYING);
   			SetPlayerMapIcon(playerid, 59, BAttackerSpawn[Current][0], BAttackerSpawn[Current][1], BAttackerSpawn[Current][2], 59, 0, MAPICON_GLOBAL);
            SAMP_SetPlayerTeam(playerid, ATTACKER);
            if(TeamHPDamage == true) {
				TextDrawShowForPlayer(playerid, AttackerTeam[0]);
				TextDrawShowForPlayer(playerid, AttackerTeam[1]);
				TextDrawHideForPlayer(playerid, DefenderTeam[0]);
				TextDrawHideForPlayer(playerid, DefenderTeam[1]);
			}
		} case DEFENDER: {
	        SetSpawnInfoEx(playerid, Player[playerid][Team], Skin[Player[playerid][Team]], BDefenderSpawn[Current][0] + random(2), BDefenderSpawn[Current][1] + random(2), BDefenderSpawn[Current][2]+0.5, 0, 0, 0, 0, 0, 0, 0);
//			Player[playerid][IgnoreSpawn] = true;
			SpawnPlayerEx(playerid);
			SetPlayerCheckpoint(playerid, BCPSpawn[Current][0], BCPSpawn[Current][1], BCPSpawn[Current][2], 2);
	        SetPlayerColor(playerid, DEFENDER_PLAYING);
	        SAMP_SetPlayerTeam(playerid, DEFENDER);
	        if(TeamHPDamage == true) {
				TextDrawShowForPlayer(playerid, DefenderTeam[0]);
				TextDrawShowForPlayer(playerid, DefenderTeam[1]);
				TextDrawHideForPlayer(playerid, AttackerTeam[0]);
				TextDrawHideForPlayer(playerid, AttackerTeam[1]);
			}
		} case REFEREE: {
	        SetSpawnInfoEx(playerid, Player[playerid][Team], Skin[Player[playerid][Team]], BCPSpawn[Current][0] + random(2), BCPSpawn[Current][1] + random(2), BCPSpawn[Current][2]+0.5, 0, 0, 0, 0, 0, 0, 0);
//			Player[playerid][IgnoreSpawn] = true;
			SpawnPlayerEx(playerid);
			SetPlayerCheckpoint(playerid, BCPSpawn[Current][0], BCPSpawn[Current][1], BCPSpawn[Current][2], 2);
	        SetPlayerColor(playerid, REFEREE_COLOR);
	        SAMP_SetPlayerTeam(playerid, REFEREE);
		}
	}

	if(RoundPaused == false) TogglePlayerControllableEx(playerid, true);
	else TogglePlayerControllableEx(playerid, false);

    Player[playerid][ToAddInRound] = false;

	ShowPlayerWeaponMenu(playerid, Player[playerid][Team]);

	new iString[160];
	if(Player[playerid][TextPos] == false) format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDamage ~r~%.0f~n~%sTotal Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[playerid][RoundKills], MAIN_TEXT_COLOUR, Player[playerid][RoundDamage], MAIN_TEXT_COLOUR, Player[playerid][TotalDamage]);
	else format(iString, sizeof(iString), "~n~~n~%sKills ~r~%d~n~%sDmg ~r~%.0f~n~%sT. Dmg ~r~%.0f", MAIN_TEXT_COLOUR, Player[playerid][RoundKills], MAIN_TEXT_COLOUR, Player[playerid][RoundDamage], MAIN_TEXT_COLOUR, Player[playerid][TotalDamage]);
	PlayerTextDrawSetString(playerid, RoundKillDmgTDmg, iString);

/*	foreach(new i : Player) {
	    OnPlayerStreamIn(i, playerid);
	    OnPlayerStreamIn(playerid, i);
	} */

	RadarFix();
	return 1;
}

ShowPlayerWeaponMenu(playerid, team)
{
	TogglePlayerControllableEx(playerid, false);

	ResetPlayerWeapons(playerid);

	Player[playerid][OnGunmenu] = true;

	if(Player[playerid][WeaponPicked] > 0){
 		TimesPicked[Player[playerid][Team]][Player[playerid][WeaponPicked]-1]--;
 		Player[playerid][WeaponPicked] = 0;
	}

	new WepTStr[700];
	switch(team) {
	    case ATTACKER: {
	        format(WepTStr, sizeof(WepTStr), "{FFFFFF}ID\tPrimary Weapon\tSecondary Weapon\tAvailibility\n");
	        for(new i=0; i < 10; ++i) {
	            new str[100];
	            new tabs[7] = "";

				if(GunMenuWeapons[i][1] != 25 && GunMenuWeapons[i][1] != 23) {
				    tabs = "\t";
				}

	            if( i % 2 == 0) format(str, sizeof(str), "{FFFFFF}%d{FF0000}\t%s\t\t\t%s\t\t%s%d\n", i+1, WeaponNames[GunMenuWeapons[i][0]], WeaponNames[GunMenuWeapons[i][1]], tabs, WeaponLimit[i] - TimesPicked[ATTACKER][i]);
	            else format(str, sizeof(str), "{FFFFFF}%d{FF4444}\t%s\t\t\t%s\t\t%s%d\n", i+1, WeaponNames[GunMenuWeapons[i][0]], WeaponNames[GunMenuWeapons[i][1]], tabs, WeaponLimit[i] - TimesPicked[ATTACKER][i]);
	            strcat(WepTStr, str);
	        }

 			ShowPlayerDialog(playerid, DIALOG_WEAPONS_TYPE, DIALOG_STYLE_LIST, "{FFFFFF}Select your weapon set:",WepTStr, "Select", "");
		} case DEFENDER: {

		    format(WepTStr, sizeof(WepTStr), "{FFFFFF}ID\tPrimary Weapon\tSecondary Weapon\tAvailibility\n");
	        for(new i=0; i < 10; ++i) {
	            new str[100];
	            new tabs[7] = "";

				if(GunMenuWeapons[i][1] != 25 && GunMenuWeapons[i][1] != 23) {
				    tabs = "\t";
				}

	            if( i % 2 == 0) format(str, sizeof(str), "{FFFFFF}%d{3344FF}\t%s\t\t\t%s\t\t%s%d\n", i+1, WeaponNames[GunMenuWeapons[i][0]], WeaponNames[GunMenuWeapons[i][1]], tabs, WeaponLimit[i] - TimesPicked[DEFENDER][i]);
	            else format(str, sizeof(str), "{FFFFFF}%d{3377FF}\t%s\t\t\t%s\t\t%s%d\n", i+1, WeaponNames[GunMenuWeapons[i][0]], WeaponNames[GunMenuWeapons[i][1]], tabs, WeaponLimit[i] - TimesPicked[DEFENDER][i]);
	            strcat(WepTStr, str);
	        }
			ShowPlayerDialog(playerid, DIALOG_WEAPONS_TYPE, DIALOG_STYLE_LIST, "{FFFFFF}Select your weapon set:",WepTStr, "Select", "");
		} case REFEREE: {
			TogglePlayerControllableEx(playerid, true);
		}
	}

//	if(!IsPlayerInAnyVehicle(playerid)) SetPlayerVirtualWorld(playerid, playerid+100);
}

new bool:AlreadyEndingRound = false;

forward NotEndingRound();
public NotEndingRound()
{
    AlreadyEndingRound = false;
    return 1;
}

EndRound(WinID) //WinID: 0 = CP, 1 = RoundTime, 2 = NoAttackersLeft, 3 = NoDefendersLeft
{
	if(AlreadyEndingRound == true)
	    return 0;
	    
    AlreadyEndingRound = true;

	switch(GameType) {
	    case BASE: {
			BaseStarted = false;
			BasesPlayed++;
	    } case ARENA,TDM: {
			ArenaStarted = false;
			ArenasPlayed++;
	    }
	}


	if( WarMode == true )
	{
		if( MatchRoundsRecord[ MatchRoundsStarted - 1 ][ round__ID ] == Current )
		{
		    MatchRoundsRecord[ MatchRoundsStarted - 1 ][ round__completed ] = true;
		}
	}
	#if MATCH_SYNC == 1
	MATCHSYNC_UpdateAllPlayers(WHEN_ROUND_END);
	#endif

    ElapsedTime = 0;
    PlayersInCP = 0;
    MatchEnded = false;
	FallProtection = false;

    RoundPaused = false;
    RoundUnpausing = false;
	TimedOutPlayers = 0;
	ESLPauseTime = 120;

	PlayersAlive[ATTACKER] = 0;
	PlayersAlive[DEFENDER] = 0;

    GangZoneDestroy(CPZone);
	GangZoneDestroy(ArenaZone);

    TimedOutPlayers = 0;

	new iString[256], TopString[3][128];

	foreach(new i:Player)
	{
		if(Player[i][Style] == 0) TextDrawHideForPlayer(i, RoundStats);
		else HideRoundStats(i);
	}
	TextDrawHideForAll(EN_CheckPoint);

#if SKINICONS == 1
	if(ShowIcons == true) {
	    HideAllForAll();
	}
#endif

	#if STATS == 1 && MYSQL == 1    //esl
	new whowon = -1;
	#endif

	if(WinID == 0 || WinID == 3) {
		format(iString, sizeof(iString), "~n~~r~~h~%s ~w~Won The Round", TeamName[ATTACKER]);
		if(WarMode == true) TeamScore[ATTACKER]++;
        #if STATS == 1 && MYSQL == 1    //esl
		whowon = ATTACKER;
		#endif
	} else if(WinID == 1 || WinID == 2) {
		format(iString, sizeof(iString), "~n~~b~~h~%s ~w~Won The Round", TeamName[DEFENDER]);
		if(WarMode == true) TeamScore[DEFENDER]++;
        #if STATS == 1 && MYSQL == 1    //esl
		whowon = DEFENDER;
		#endif
 	} else if(WinID == 4) {
 	    #if ENABLED_TDM == 1
 	    if( GameType == TDM ) iString = "~n~~w~Tie, ~g~~h~~h~Same Kills";
 	    else iString = "~n~~w~No One Won, Same Team HPs";
		#else
		iString = "~n~~w~No One Won, Same Team HPs";
 	    #endif
	}
//	TextDrawSetString(EN_WhoWon, iString); // ROUND_REMOVED
	TextDrawSetString(topTextScore, iString);

	format(iString, sizeof(iString), "~r~%s %s(~r~%d%s)  ~b~~h~%s %s(~b~~h~%d%s)",TeamName[ATTACKER],MAIN_TEXT_COLOUR,TeamScore[ATTACKER],MAIN_TEXT_COLOUR,TeamName[DEFENDER],MAIN_TEXT_COLOUR,TeamScore[DEFENDER],MAIN_TEXT_COLOUR);
    TextDrawSetString(TeamScoreText, iString);

	if(WarMode == true) {
		CurrentRound++;
		format(iString, sizeof(iString), "%sRounds ~r~~h~%d~r~/~h~~h~%d", MAIN_TEXT_COLOUR, CurrentRound, TotalRounds);
		TextDrawSetString(RoundsPlayed, iString);
	}

	// ROUND_REMOVED
/*	iString = "~l~Name\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tKill\t\t\t\t\tHP\t\t\t\t\tAcc\t\t\t\t\tDmg";
	TextDrawSetString(EN_AttackerTitle, iString);

	iString = "~l~Name\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tKill\t\t\t\t\tHP\t\t\t\t\tAcc\t\t\t\t\tDmg";
	TextDrawSetString(EN_DefenderTitle, iString);
*/
	// replaced by leftText, rightText
	iString = "~l~Name\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tKill\t\t\t\tHP\t\t\t\tAcc\t\t\tDmg";
	TextDrawSetString(leftText, iString);
	TextDrawSetString(rightText, iString);

	SendRconCommand("mapname Lobby");
	SetGameModeText(GM_NAME);


	new
	    playerScores[MAX_PLAYERS][rankingEnum],
	    index,
	    p,
	    names[MAX_PLAYERS][MAX_PLAYER_NAME]
	;

	new Float: ahpleft,
		Float: dhpleft,
	    aalive, dalive
	;


	foreach(new i : Player) if(Player[i][Spawned] == true) {
		if(Player[i][WasInBase] == true) {
		    if(Player[i][Playing] == true) {
				OnPlayerAmmoUpdate(i);
				new Float:HP[2];
				GetHP(i, HP[0]);
				GetAP(i, HP[1]);

				if(Player[i][Team] == ATTACKER) {
					ahpleft = ahpleft + (HP[0] + HP[1]);
					aalive++;
				} else if(Player[i][Team] == DEFENDER) {
					dhpleft = dhpleft + (HP[0] + HP[1]);
					dalive++;
				}

    			PlayerNoLeadTeam(i);
			}

			playerScores[index][player_Score] = floatround(Player[i][RoundDamage], floatround_round);
			if(Player[i][Playing] == true) playerScores[index][player_Team] = Player[i][Team];
			else playerScores[index][player_Team] = Player[i][TempTeam];
			playerScores[index][player_Kills] = Player[i][RoundKills];
			playerScores[index][player_Deaths] = Player[i][RoundDeaths];
			playerScores[index][player_HP] = floatround(Player[i][pHealth] + Player[i][pArmour], floatround_round);
			playerScores[index][player_Acc] = floatround(Player[i][Accuracy], floatround_round);

			//playerScores[index][player_TPlayed] = Player[i][RoundPlayed];
			//format(playerScores[index][player_Name], MAX_PLAYER_NAME, Player[i][NameWithoutTag]);

			if(ESLMode == false) format(names[index], MAX_PLAYER_NAME, Player[i][NameWithoutTag]);
			else format(names[index], MAX_PLAYER_NAME, Player[i][Name]);

			playerScores[index++][player_ID] = i;
		    p++;

		    Player[i][RoundPlayed]++;
		}

		VehiclePos[i][0] = 0.0;
		VehiclePos[i][1] = 0.0;
		VehiclePos[i][2] = 0.0;

		new bool:TempPlaying = false;
		if(Player[i][Playing] == true) TempPlaying = true;

		Player[i][Playing] = false;
		Player[i][WasInCP] = false;
		Player[i][ToAddInRound] = false;
		Player[i][VoteToUnpause] = false;
		if(Player[i][Spectating] == true) StopSpectate(i);
		Player[i][WasInBase] = false;
		Player[i][WeaponPicked] = 0;
		Player[i][TimesSpawned] = 0;
		Player[i][VoteToAddID] = -1;
		Player[i][VoteToNetCheck] = -1;
		Player[i][Votekick] = -1;
		RemovePlayerMapIcon(i, 59);

		TextDrawHideForPlayer(i, AttackerTeam[0]);
		TextDrawHideForPlayer(i, AttackerTeam[1]);
		TextDrawHideForPlayer(i, DefenderTeam[0]);
		TextDrawHideForPlayer(i, DefenderTeam[1]);
		TextDrawHideForPlayer(i, AttackerTeam[2]);
		TextDrawHideForPlayer(i, AttackerTeam[3]);
		TextDrawHideForPlayer(i, DefenderTeam[2]);
		TextDrawHideForPlayer(i, DefenderTeam[3]);

	    PlayerTextDrawHide(i, AreaCheckTD);
	    PlayerTextDrawHide(i, AreaCheckBG);

		if(Player[i][InDuel] == false) {
			SetHP(i, 100);
			SetAP(i, 100);
		}


//		ColorFix(i);

        if(TempPlaying == true) {
//			SetPlayerVirtualWorld(i, i);
//			SetSpawnInfoEx(i, GetPlayerTeam(i), Skin[Player[i][Team]], MainSpawn[0]+random(5),MainSpawn[1]+random(5),MainSpawn[2]+1, MainSpawn[3], 0, 0, 0, 0, 0, 0);
//			SetPlayerInterior(i,MainInterior);
//			Player[i][IgnoreSpawn] = true;
			SpawnPlayerEx(i);

		    PlayerTextDrawHide(i, DeathText[0]);
			PlayerTextDrawHide(i, DeathText[1]);


		}

		if(Player[i][InDuel] == false) ShowEndRoundTextDraw(i);
		DisablePlayerCheckpoint(i);
		SetPlayerScore(i, 0);
		HideDialog(i);

	}






	for(new i=0; i < SAVE_SLOTS; ++i) {
		if(strlen(SaveVariables[i][pName]) > 2 && Current == SaveVariables[i][RoundID] && SaveVariables[i][CheckScore] == true) {
	    	playerScores[index][player_Score] = floatround(SaveVariables[i][RDamage], floatround_round);
	    	playerScores[index][player_Team] = SaveVariables[i][pTeam];
	    	playerScores[index][player_Kills] = SaveVariables[i][RKills];
	    	playerScores[index][player_Deaths] = SaveVariables[i][RDeaths];
			playerScores[index][player_HP] = floatround(SaveVariables[i][gHealth] + SaveVariables[i][gArmour], floatround_round);
			playerScores[index][player_Acc] = SaveVariables[i][iAccuracy];
//			playerScores[index][player_TPlayed] = SaveVariables[i][TPlayed];

			if(ESLMode == false) format(names[index], MAX_PLAYER_NAME, SaveVariables[i][pNameWithoutTag]);
			else format(names[index], MAX_PLAYER_NAME, SaveVariables[i][pName]);

	   	    SaveVariables[i][RKills]   	=  	0;
			SaveVariables[i][RDeaths]  	= 	0;
			SaveVariables[i][RDamage] 	= 	0;

			SaveVariables[i][RoundID]   =   -1;
//			SaveVariables[i][TPlayed]++;
            SaveVariables[i][CheckScore] = false;

			index++;
			p++;
		}
	}

	Current = -1;

	GetPlayerHighestScores2(playerScores, names, 0, index-1);


	new topkill, topkillID = -1,
		Float: topDmg, topDmgID = -1,
		topAcc, topAccID = -1
	;

	for(new i = 0; i != p; ++i) {

	    if( playerScores[i][player_Kills] > topkill && playerScores[i][player_Kills] > 0 )
	    {
            topkill = playerScores[i][player_Kills];
            topkillID = i;
	    }
	    if( playerScores[i][player_Score] > topDmg && playerScores[i][player_Score] > 0  )
	    {
            topDmg = playerScores[i][player_Score];
            topDmgID = i;
	    }
	    if( playerScores[i][player_Acc] > topAcc && playerScores[i][player_Acc] > 0  )
	    {
            topAcc = playerScores[i][player_Acc];
            topAccID = i;
	    }

	    if(playerScores[i][player_Team] == ATTACKER || playerScores[i][player_Team] == ATTACKER_SUB) {
	        format(AttList, sizeof(AttList), "%s~w~%s~n~", AttList, names[i]);
		    format(AttKills, sizeof(AttKills), "%s~w~%d~n~", AttKills, playerScores[i][player_Kills]);
		    if(playerScores[i][player_Deaths] > 0) {
				format(AttDeaths, sizeof(AttDeaths), "%s~w~Dead~n~", AttDeaths);
			} else {
				format(AttDeaths, sizeof(AttDeaths), "%s~w~%d~n~", AttDeaths, playerScores[i][player_HP]);
//				ahpleft += playerScores[i][player_HP];
//				aalive++;
			}
	        format(AttDamage, sizeof(AttDamage), "%s~w~%d~n~", AttDamage, playerScores[i][player_Score]);
            format(AttAcc, sizeof(AttAcc), "%s~w~%d%%~n~", AttAcc, playerScores[i][player_Acc]);

		} else if(playerScores[i][player_Team] == DEFENDER || playerScores[i][player_Team] == DEFENDER_SUB) {
	        format(DefList, sizeof(DefList), "%s~w~%s~n~", DefList, names[i]);
	        format(DefKills, sizeof(DefKills), "%s~w~%d~n~", DefKills, playerScores[i][player_Kills]);
	        if(playerScores[i][player_Deaths] > 0) {
				format(DefDeaths, sizeof(DefDeaths), "%s~w~Dead~n~", DefDeaths);
			} else {
				format(DefDeaths, sizeof(DefDeaths), "%s~w~%d~n~", DefDeaths, playerScores[i][player_HP]);
//				dhpleft += playerScores[i][player_HP];
//				dalive++;
			}

	        format(DefDamage, sizeof(DefDamage), "%s~w~%d~n~", DefDamage, playerScores[i][player_Score]);
	        format(DefAcc, sizeof(DefAcc), "%s~w~%d%%~n~", DefAcc, playerScores[i][player_Acc]);

		}


    	#if STATS == 1 && MYSQL == 1
		if(ESLMode == true && OneOnOne == false) {
		    new EscapedName[MAX_PLAYER_NAME];
		    sql_escape_string(sqlconnection, names[i], EscapedName);
		    format(iString, sizeof(iString), "SELECT `Damage` FROM `VERSUS Stats` WHERE `Name` = '%s'", EscapedName);
		    sql_query(sqlconnection, iString, QUERY_THREADED | QUERY_CACHED, "OnVERSUSStatsUpdate", "rdddds", playerScores[i][player_Kills], playerScores[i][player_Deaths], playerScores[i][player_Score], (whowon == playerScores[i][player_Team] ? 1 : 0), EscapedName);
		} else if(ESLMode == true && OneOnOne == true) {
		    new EscapedName[MAX_PLAYER_NAME];
		    sql_escape_string(sqlconnection, names[i], EscapedName);
			format(iString, sizeof(iString), "SELECT `Damage` FROM `Duel Stats` WHERE `Name` = '%s'", EscapedName);
            sql_query(sqlconnection, iString, QUERY_THREADED | QUERY_CACHED, "OnDuelStatsUpdate", "rdddds", playerScores[i][player_Kills], playerScores[i][player_Deaths], playerScores[i][player_Score], (whowon == playerScores[i][player_Team] ? 1 : 0), EscapedName);
		}
		#endif


		if(i == 0) format(TopString[0], 128, "%s1st         -         %s   	({FFFFFF}%d%s)", TextColor[playerScores[i][player_Team]], names[i], playerScores[i][player_Score], TextColor[playerScores[i][player_Team]]);
		else if(i == 1) format(TopString[1], 128, "%s2nd         -         %s   	({FFFFFF}%d%s)", TextColor[playerScores[i][player_Team]], names[i], playerScores[i][player_Score], TextColor[playerScores[i][player_Team]]);
		else if(i == 2) format(TopString[2], 128, "%s3rd         -         %s   	({FFFFFF}%d%s)", TextColor[playerScores[i][player_Team]], names[i], playerScores[i][player_Score], TextColor[playerScores[i][player_Team]]);

	}

	iString = "";

	if( topkillID >= 0 ) format( iString, sizeof(iString) , "~w~~h~Most Kills: %s~h~~h~%s ~w~~h~%d_____", TDC[playerScores[topkillID][player_Team]], names[topkillID] , topkill  );
	else format( iString, sizeof(iString) , "~w~~h~Most Kills: None_____" );
	if( topDmgID >= 0 ) format( iString, sizeof(iString) , "%s~w~~h~Most Dmg: %s~h~~h~%s ~w~~h~%.0f_____", iString, TDC[playerScores[topDmgID][player_Team]], names[topDmgID] , topDmg  );
	else format( iString, sizeof(iString) , "%s~w~~h~Most Dmg: None_____", iString );
    if( topAccID >= 0 ) format( iString, sizeof(iString) , "%s~w~~h~Top Acc: %s~h~~h~%s ~w~~h~%d%%", iString, TDC[playerScores[topAccID][player_Team]], names[topAccID] , topAcc  );
	else format( iString, sizeof(iString) , "%s~w~~h~Top Acc: None", iString );
	TextDrawSetString( leftTop, iString );

/*	if( topAccID >= 0 ) format( iString, sizeof(iString) , "Top Acc: %s (%d)", names[topAccID] , topAcc  );
	else format( iString, sizeof(iString) , "Top Acc: None" );
	TextDrawSetString( rightTop, iString );
*/
    iString = "";

    switch( WinID )
	{
	    case 0: format( iString, sizeof(iString), "~r~~h~~h~Attackers ~w~has held the ~b~~h~~h~Checkpoint");
	    case 3: format( iString, sizeof(iString), "~r~~h~~h~~h~Attackers ~w~won by ~r~~h~%.0f hp ~w~and ~r~~h~~h~%d players alive" , ahpleft, aalive);
	    case 1, 2: format( iString, sizeof(iString), "~b~~h~~h~~h~Defenders ~w~won by ~b~~h~%.0f hp ~w~and ~b~~h~~h~%d players alive" ,dhpleft, dalive);
	}

    #if ENABLED_TDM == 1
	if( GameType == TDM )
	{
	    switch( WinID )
		{
		    case 0: format( iString, sizeof(iString), "~w~Ok No idea why we here");
		    case 3: format( iString, sizeof(iString), "~r~~h~~h~~h~Attackers ~w~won with ~r~~h~~h~%d kills" , TeamTDMKills[ATTACKER]);
		    case 1, 2: format( iString, sizeof(iString), "~b~~h~~h~~h~Defenders ~w~won with ~b~~h~~h~%d kills" ,TeamTDMKills[DEFENDER]);
		}
		TeamTDMKills[ATTACKER] = 0;
		TeamTDMKills[DEFENDER] = 0;
	}

	#endif
	TextDrawSetString( teamWonHow, iString);

/* // ROUND_REMOVED
	TextDrawSetString(EN_AttackerList, AttList);
	TextDrawSetString(EN_AttackerKills, AttKills);
	TextDrawSetString(EN_AttackerHP, AttDeaths);
	TextDrawSetString(EN_AttackerAccuracy, AttAcc);
	TextDrawSetString(EN_AttackerDamage, AttDamage);
	TextDrawSetString(EN_DefenderList, DefList);
	TextDrawSetString(EN_DefenderKills, DefKills);
	TextDrawSetString(EN_DefenderHP, DefDeaths);
	TextDrawSetString(EN_DefenderAccuracy, DefAcc);
	TextDrawSetString(EN_DefenderDamage, DefDamage);
*/
//
	TextDrawSetString(leftNames, AttList);
	TextDrawSetString(leftKills, AttKills);
	TextDrawSetString(leftHP, AttDeaths);
	TextDrawSetString(leftAcc, AttAcc);
	TextDrawSetString(leftDmg, AttDamage);

	TextDrawSetString(rightNames, DefList);
	TextDrawSetString(rightKills, DefKills);
	TextDrawSetString(rightHP, DefDeaths);
	TextDrawSetString(rightAcc, DefAcc);
	TextDrawSetString(rightDmg, DefDamage);
//

	SendClientMessageToAll(-1, " ");
	SendClientMessageToAll(-1, " ");
	SendClientMessageToAll(-1, " ");
	SendClientMessageToAll(-1, " ");
    SendClientMessageToAll(-1, " ");
	SendClientMessageToAll(-1, " ");
	SendClientMessageToAll(-1, "{FFFFFF}---------------------------------------------------------------");
//	SendClientMessageToAll(-1, "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{FFFFFF}Top Players");
    SendClientMessageToAll(-1, "{FFFFFF}Top Stooopids:");
	SendClientMessageToAll(-1, TopString[0]);
	SendClientMessageToAll(-1, TopString[1]);
	SendClientMessageToAll(-1, TopString[2]);
//	SendClientMessageToAll(-1, " ");
	SendClientMessageToAll(-1, "{FFFFFF}---------------------------------------------------------------");


	if(ESLMode == true && OneOnOne == false) {
	    if((TeamScore[ATTACKER] == 3 || TeamScore[DEFENDER] == 3) && CurrentRound != TotalRounds) {
	        PreMatchResultsShowing = true;
			SetTimer("PreMatchResults", 5000, 0);
			SendClientMessageToAll(-1, ""COL_PRIM"Preparing Pre-Match Results..");
			SendClientMessageToAll(-1, ""COL_PRIM"If you missed the results screen by hiding the current textdraws, type {FFFFFF}/showagain");
            SendClientMessageToAll(-1, ""COL_PRIM"Type {FFFFFF}/weaponstats "COL_PRIM"to see a list of players weapon statistics.");
		}
	} else if(ESLMode == true && OneOnOne == true) {
	    if((TeamScore[ATTACKER] == 10 || TeamScore[DEFENDER] == 10) && CurrentRound != TotalRounds) {
	        PreMatchResultsShowing = true;
			SetTimer("PreMatchResults", 5000, 0);
			SendClientMessageToAll(-1, ""COL_PRIM"Preparing Pre-Match Results..");
			SendClientMessageToAll(-1, ""COL_PRIM"If you missed the results screen by hiding the current textdraws, type {FFFFFF}/showagain");
            SendClientMessageToAll(-1, ""COL_PRIM"Type {FFFFFF}/weaponstats "COL_PRIM"to see a list of players weapon statistics.");
		}
	}

	AllowStartBase = false;

	if(WarMode == true) {
    	SetTimer("SwapBothTeams",2500,0);
	}

	if(WarMode == false) {
		if(AutoBal == true) {
			SetTimer("DoAutoBalance",2500,0);
		} else {
			SetTimer("DontAutoBalance",2500,0);
		}
	}


	if(CurrentRound >= TotalRounds && CurrentRound != 0) {
		SetTimer("WarEnded", 5000, 0);
		SendClientMessageToAll(-1, ""COL_PRIM"Preparing End Match Results..");
		SendClientMessageToAll(-1, ""COL_PRIM"If you missed the results screen by hiding the current textdraws, type {FFFFFF}/showagain");
        SendClientMessageToAll(-1, ""COL_PRIM"Type {FFFFFF}/weaponstats "COL_PRIM"to see a list of players weapon statistics.");
	}



	TextDrawSetString(AttackerTeam[0], "_");
	TextDrawSetString(AttackerTeam[1], "_");
	TextDrawSetString(DefenderTeam[0], "_");
	TextDrawSetString(DefenderTeam[1], "_");
	TextDrawSetString(AttackerTeam[2], "_");
	TextDrawSetString(AttackerTeam[3], "_");
	TextDrawSetString(DefenderTeam[2], "_");
	TextDrawSetString(DefenderTeam[3], "_");

	AttList = "";
	AttKills = "";
	AttDeaths = "";
	AttDamage = "";
	AttAcc = "";
	DefList = "";
	DefKills = "";
	DefDeaths = "";
	DefDamage = "";
	DefAcc = "";

    ResetTeamLeaders();
    LoadGraffs();
    
    SetTimer("NotEndingRound", 3000, false);
	return 1;
}

forward PreMatchResults();
public PreMatchResults()
{
    ClearKillList(); // Clears the kill-list.

    MatchEnded = true;

	new iString[256], TopString[3][128];

	#if STATS == 1 && MYSQL == 1    //esl
	new whowon = -1;
	#endif

    if(TeamScore[ATTACKER] > TeamScore[DEFENDER]) {
 		format(iString, sizeof(iString),"%sPre-Match Results~n~~r~%s %sWon The Match~n~~r~%s ~h~%d		~b~~h~%s ~h~%d", MAIN_TEXT_COLOUR, TeamName[ATTACKER], MAIN_TEXT_COLOUR, TeamName[ATTACKER], TeamScore[ATTACKER], TeamName[DEFENDER], TeamScore[DEFENDER]);
		#if STATS == 1 && MYSQL == 1    //esl
		whowon = ATTACKER;
		#endif
	} else if(TeamScore[DEFENDER] > TeamScore[ATTACKER]) {
	    format(iString,sizeof(iString),"%sPre-Match Results~n~~b~~h~%s %sWon The Match~n~~b~~h~%s ~h~%d		~r~%s ~h~%d", MAIN_TEXT_COLOUR, TeamName[DEFENDER], MAIN_TEXT_COLOUR, TeamName[DEFENDER], TeamScore[DEFENDER], TeamName[ATTACKER], TeamScore[ATTACKER]);
		#if STATS == 1 && MYSQL == 1    //esl
		whowon = DEFENDER;
		#endif
	} else {
	    format(iString,sizeof(iString),"%sPre-Match Results~n~%sNo One Won The Match~n~~r~%s ~h~%d		~b~~h~%s ~h~%d", MAIN_TEXT_COLOUR, MAIN_TEXT_COLOUR, TeamName[ATTACKER], TeamScore[ATTACKER], TeamName[DEFENDER], TeamScore[DEFENDER]);
	}
	//TextDrawSetString(EN_WhoWon, iString);
	TextDrawSetString(topTextScore, iString);

/*  // ROUND_REMOVED
	iString = "~l~Name\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tK\t\t\t\tD\t\t\t\tP\t\t\t\tAcc\t\t\t\t\tDmg";
	TextDrawSetString(EN_AttackerTitle, iString);

	iString = "~l~Name\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tK\t\t\t\tD\t\t\t\tP\t\t\t\tAcc\t\t\t\t\tDmg";
	TextDrawSetString(EN_DefenderTitle, iString);
*/
	iString = "~l~Name\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tKill\t\t\t\tHP\t\t\t\tAcc\t\t\tDmg";
	TextDrawSetString(leftText, iString);
	TextDrawSetString(rightText, iString);

	new
	    playerScores[MAX_PLAYERS][rankingEnum],
	    index,
	    p,
	    names[MAX_PLAYERS][MAX_PLAYER_NAME]

	;


	foreach(new i : Player) {
		if(Player[i][TotalDamage] > 0) {
			playerScores[index][player_Score] = floatround(Player[i][TotalDamage], floatround_round);
			playerScores[index][player_Team] = Player[i][Team];
			playerScores[index][player_Kills] = Player[i][TotalKills];
			playerScores[index][player_Deaths] = Player[i][TotalDeaths];
			playerScores[index][player_TPlayed] = Player[i][RoundPlayed];
			playerScores[index][player_HP] = floatround(Player[i][pHealth] + Player[i][pArmour], floatround_round);

			new Float:nTotalAccuracy;
			if(Player[i][TotalBulletsFired] == 0) nTotalAccuracy = 0.0;
			else nTotalAccuracy = floatmul(100.0, floatdiv(Player[i][TotalshotsHit], Player[i][TotalBulletsFired]));
			playerScores[index][player_Acc] = floatround(nTotalAccuracy, floatround_round);

			if(ESLMode == false) format(names[index], MAX_PLAYER_NAME, Player[i][NameWithoutTag]);
			else format(names[index], MAX_PLAYER_NAME, Player[i][Name]);

		    playerScores[index++][player_ID] = i;
		    p++;
		}
		if(Player[i][Spectating] == true) StopSpectate(i);

		ShowEndRoundTextDraw(i);
		if(Player[i][InDM] == false) SetPlayerVirtualWorld(i, i);

	}
	for(new i=0; i < SAVE_SLOTS; ++i) {
		if(strlen(SaveVariables[i][pName]) > 2 && SaveVariables[i][TDamage] > 0) {
	    	playerScores[index][player_Score] = floatround(SaveVariables[i][TDamage], floatround_round);
	    	playerScores[index][player_Team] = SaveVariables[i][pTeam];
	    	playerScores[index][player_Kills] = SaveVariables[i][TKills];
	    	playerScores[index][player_Deaths] = SaveVariables[i][TDeaths];
	    	playerScores[index][player_TPlayed] = SaveVariables[i][TPlayed];
	    	playerScores[index][player_HP] = floatround(SaveVariables[i][gHealth] + SaveVariables[i][gArmour], floatround_round);

			new Float:nTotalAccuracy;
			if(SaveVariables[i][tBulletsShot] == 0) nTotalAccuracy = 0.0;
			else nTotalAccuracy = floatmul(100.0, floatdiv(SaveVariables[i][tshotsHit], SaveVariables[i][tBulletsShot]));
			playerScores[index][player_Acc] = floatround(nTotalAccuracy, floatround_round);

			if(ESLMode == false) format(names[index], MAX_PLAYER_NAME, SaveVariables[i][pNameWithoutTag]);
			else format(names[index], MAX_PLAYER_NAME, SaveVariables[i][pName]);

			index++;
			p++;
		}
	}

	GetPlayerHighestScores2(playerScores, names, 0, index-1);

	new topkill, topkillID = -1,
		Float: topDmg, topDmgID = -1,
		topAcc, topAccID = -1
	;

	for(new i = 0; i != p; ++i) {

		if( playerScores[i][player_Kills] > topkill && playerScores[i][player_Kills] > 0 )
	    {
            topkill = playerScores[i][player_Kills];
            topkillID = i;
	    }
	    if( playerScores[i][player_Score] > topDmg && playerScores[i][player_Score] > 0  )
	    {
            topDmg = playerScores[i][player_Score];
            topDmgID = i;
	    }
	    if( playerScores[i][player_Acc] > topAcc && playerScores[i][player_Acc] > 0  )
	    {
            topAcc = playerScores[i][player_Acc];
            topAccID = i;
	    }

	    if(playerScores[i][player_Team] == ATTACKER) {
	        format(AttList, sizeof(AttList), "%s~w~%s~n~", AttList, names[i]);
		    format(AttKills, sizeof(AttKills), "%s~w~%d~n~", AttKills, playerScores[i][player_Kills]);
	        format(AttDeaths, sizeof(AttDeaths), "%s~w~%d~n~", AttDeaths, playerScores[i][player_Deaths]);
	        format(AttPlayed, sizeof(AttPlayed), "%s~w~%d~n~", AttPlayed, playerScores[i][player_TPlayed]);
	        format(AttDamage, sizeof(AttDamage), "%s~w~%d~n~", AttDamage, playerScores[i][player_Score]);
	        format(AttAcc, sizeof(AttAcc), "%s~w~%d%%~n~", AttAcc, playerScores[i][player_Acc]);
		} else if(playerScores[i][player_Team] == DEFENDER) {
	        format(DefList, sizeof(DefList), "%s~w~%s~n~", DefList, names[i]);
	        format(DefKills, sizeof(DefKills), "%s~w~%d~n~", DefKills, playerScores[i][player_Kills]);
	        format(DefDeaths, sizeof(DefDeaths), "%s~w~%d~n~", DefDeaths, playerScores[i][player_Deaths]);
	        format(DefPlayed, sizeof(DefPlayed), "%s~w~%d~n~", DefPlayed, playerScores[i][player_TPlayed]);
	        format(DefDamage, sizeof(DefDamage), "%s~w~%d~n~", DefDamage, playerScores[i][player_Score]);
	        format(DefAcc, sizeof(DefAcc), "%s~w~%d%%~n~", DefAcc, playerScores[i][player_Acc]);
		}

		#if STATS == 1 && MYSQL == 1
		if(ESLMode == true && OneOnOne == false) {
		    new EscapedName[MAX_PLAYER_NAME];
		    sql_escape_string(sqlconnection, names[i], EscapedName);
		    format(iString, sizeof(iString), "UPDATE `VERSUS Stats` SET `Matches Played` = `Matches Played` + 1, `Matches Won` = `Matches Won` + %d, `Matches Lost` = `Matches Lost` + %d WHERE `Name` = '%s'", (whowon == playerScores[i][player_Team] ? 1 : 0), (whowon != playerScores[i][player_Team] ? 1 : 0), EscapedName);
			sql_query(sqlconnection, iString, QUERY_THREADED);
		} else if (ESLMode == true && OneOnOne == true) {
		    new EscapedName[MAX_PLAYER_NAME];
		    sql_escape_string(sqlconnection, names[i], EscapedName);
		    format(iString, sizeof(iString), "UPDATE `Duel Stats` SET `Duels Played` = `Duels Played` + 1, `Duels Won` = `Duels Won` + %d, `Duels Lost` = `Duels Lost` + %d WHERE `Name` = '%s'", (whowon == playerScores[i][player_Team] ? 1 : 0), (whowon != playerScores[i][player_Team] ? 1 : 0), EscapedName);
	        sql_query(sqlconnection, iString, QUERY_THREADED);
		}
		#endif

		if(i == 0) format(TopString[0], 128, "%s1st         -         %s   	({FFFFFF}%d%s)", TextColor[playerScores[i][player_Team]], names[i], playerScores[i][player_Score], TextColor[playerScores[i][player_Team]]);
		else if(i == 1) format(TopString[1], 128, "%s2nd         -         %s   	({FFFFFF}%d%s)", TextColor[playerScores[i][player_Team]], names[i], playerScores[i][player_Score], TextColor[playerScores[i][player_Team]]);
		else if(i == 2) format(TopString[2], 128, "%s3rd         -         %s   	({FFFFFF}%d%s)", TextColor[playerScores[i][player_Team]], names[i], playerScores[i][player_Score], TextColor[playerScores[i][player_Team]]);
	}

	iString = "";
/*	if( topAccID >= 0 ) format( iString, sizeof(iString) , "Most Kills: %s (%d)~n~", names[topkillID] , topkill  );
	else format( iString, sizeof(iString) , "Most Kills: None~n~" );
	if( topDmgID >= 0 ) format( iString, sizeof(iString) , "%sMost Dmg: %s (%.0f)", iString, names[topDmgID] , topDmg  );
	else format( iString, sizeof(iString) , "%sMost Dmg: None", iString );
	TextDrawSetString( leftTop, iString );
*/

	if( topAccID >= 0 ) format( iString, sizeof(iString) , "~w~~h~Most Kills: %s~h~~h~%s ~w~~h~%d_____", TDC[playerScores[topkillID][player_Team]], names[topkillID] , topkill  );
	else format( iString, sizeof(iString) , "~w~~h~Most Kills: None_____" );
	if( topDmgID >= 0 ) format( iString, sizeof(iString) , "%s~w~~h~Most Dmg: %s~h~~h~%s ~w~~h~%.0f_____", iString, TDC[playerScores[topDmgID][player_Team]], names[topDmgID] , topDmg  );
	else format( iString, sizeof(iString) , "%s~w~~h~Most Dmg: None_____", iString );
    if( topAccID >= 0 ) format( iString, sizeof(iString) , "%s~w~~h~Top Acc: %s~h~~h~%s ~w~~h~%d%%", iString, TDC[playerScores[topAccID][player_Team]], names[topAccID] , topAcc  );
	else format( iString, sizeof(iString) , "%s~w~~h~Top Acc: None", iString );
	TextDrawSetString( leftTop, iString );

/*	if( topAccID >= 0 ) format( iString, sizeof(iString) , "Top Acc: %s (%d)", names[topAccID] , topAcc  );
	else format( iString, sizeof(iString) , "Top Acc: None" );
	TextDrawSetString( rightTop, iString );
*/

/* // ROUND_REMOVED
	TextDrawSetString(EN_AttackerList, AttList);
	TextDrawSetString(EN_TAttackerKills, AttKills);
	TextDrawSetString(EN_TAttackerDeaths, AttDeaths);
	TextDrawSetString(EN_TAttackerRoundsPlayed, AttPlayed);
	TextDrawSetString(EN_TAttackerAccuracy, AttAcc);
	TextDrawSetString(EN_TAttackerDamage, AttDamage);


	TextDrawSetString(EN_DefenderList, DefList);
	TextDrawSetString(EN_TDefenderKills, DefKills);
	TextDrawSetString(EN_TDefenderDeaths, DefDeaths);
	TextDrawSetString(EN_TDefenderRoundsPlayed, DefPlayed);
	TextDrawSetString(EN_TDefenderAccuracy, DefAcc);
	TextDrawSetString(EN_TDefenderDamage, DefDamage);
*/
//
	TextDrawSetString(leftPlayed, AttPlayed );

	TextDrawSetString(leftNames, AttList);
	TextDrawSetString(leftKills, AttKills);
	TextDrawSetString(leftHP, AttDeaths);
	TextDrawSetString(leftAcc, AttAcc);
	TextDrawSetString(leftDmg, AttDamage);

	TextDrawSetString(rightNames, DefList);
	TextDrawSetString(rightKills, DefKills);
	TextDrawSetString(rightHP, DefDeaths);
	TextDrawSetString(rightAcc, DefAcc);
	TextDrawSetString(rightDmg, DefDamage);

	TextDrawSetString(rightPlayed, DefPlayed );
//


	SendClientMessageToAll(-1, " ");
	SendClientMessageToAll(-1, " ");
	SendClientMessageToAll(-1, " ");
	SendClientMessageToAll(-1, " ");
    SendClientMessageToAll(-1, " ");
	SendClientMessageToAll(-1, " ");
	SendClientMessageToAll(-1, "{FFFFFF}---------------------------------------------------------------");
    SendClientMessageToAll(-1, "{FFFFFF}Top Stooopids:");
	SendClientMessageToAll(-1, TopString[0]);
	SendClientMessageToAll(-1, TopString[1]);
	SendClientMessageToAll(-1, TopString[2]);
	SendClientMessageToAll(-1, "{FFFFFF}---------------------------------------------------------------");


	AttList = "";
	AttKills = "";
	AttDeaths = "";
	AttPlayed = "";
	AttAcc = "";
	AttDamage = "";

	DefList = "";
	DefKills = "";
	DefDeaths = "";
	DefPlayed = "";
	DefAcc = "";
	DefDamage = "";

	PreMatchResultsShowing = false;
    AllowStartBase = true;

	#if STATS == 1 && MYSQL == 1
		LoadESLStats();
	#endif

	return 1;
}

forward WarEnded();
public WarEnded()
{
	#if MATCH_SYNC == 1
	//MATCHSYNC_UpdateAllPlayers(WHEN_MATCH_END);
	MATCHSYNC_InsertMatchStats();
	#endif

    ClearKillList(); // Clears the kill-list.

	new iString[256], TopString[3][128];

    if(TeamScore[ATTACKER] > TeamScore[DEFENDER]) {
 		format(iString, sizeof(iString),"~r~%s ~w~Won The Match~n~~r~%s ~h~%d		~b~~h~%s ~h~%d", TeamName[ATTACKER], TeamName[ATTACKER], TeamScore[ATTACKER], TeamName[DEFENDER], TeamScore[DEFENDER]);
	} else if(TeamScore[DEFENDER] > TeamScore[ATTACKER]) {
	    format(iString,sizeof(iString),"~b~~h~%s ~w~Won The Match~n~~b~~h~%s ~h~%d		~r~%s ~h~%d", TeamName[DEFENDER], TeamName[DEFENDER], TeamScore[DEFENDER], TeamName[ATTACKER], TeamScore[ATTACKER]);
	} else {
	    format(iString,sizeof(iString),"~w~No One Won The Match~n~~r~%s ~h~%d		~b~~h~%s ~h~%d", TeamName[ATTACKER], TeamScore[ATTACKER], TeamName[DEFENDER], TeamScore[DEFENDER]);
	}
//	TextDrawSetString(EN_WhoWon, iString);
    TextDrawSetString(topTextScore, iString);

	MatchEnded = true;

	SetWeaponStatsString();

	if(ESLMode == false) {
		CurrentRound = 0;
		format(iString, sizeof(iString), "SELECT * FROM Configs WHERE Option = 'Total Rounds'");
	    new DBResult:res = db_query(sqliteconnection, iString);

		db_get_field_assoc(res, "Value", iString, sizeof(iString));
		TotalRounds = strval(iString);
		db_free_result(res);

		format(iString, sizeof(iString), "%sRounds ~r~~h~%d~r~/~h~~h~%d", MAIN_TEXT_COLOUR, CurrentRound, TotalRounds);
		TextDrawSetString(RoundsPlayed, iString);

	    WarMode = false;

	    TextDrawHideForAll(RoundsPlayed);
	    TextDrawHideForAll(TeamScoreText);

		iString = sprintf("%sWar Mode: ~r~OFF", MAIN_TEXT_COLOUR);
		TextDrawSetString(WarModeText, iString);
	}

//	iString = "password 0";
//	ServerLocked = false;
//	PermLocked = false;
	SendRconCommand(iString);

/*  // ROUND_REMOVED
	iString = "~l~Name\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tK\t\t\t\tD\t\t\t\tP\t\t\t\tAcc\t\t\t\t\tDmg";
	TextDrawSetString(EN_AttackerTitle, iString);

	iString = "~l~Name\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tK\t\t\t\tD\t\t\t\tP\t\t\t\tAcc\t\t\t\t\tDmg";
	TextDrawSetString(EN_DefenderTitle, iString);
*/

	iString = "~l~Name\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tK\t\t\tD\t\t\tP\t\t\tAcc\t\t\tDmg";	TextDrawSetString(leftText, iString);
	iString = "~l~Name\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t K\t\t\tD\t\t\tP\t\t\tAcc\t\t\tDmg";
	TextDrawSetString(rightText, iString);

	new
	    playerScores[MAX_PLAYERS][rankingEnum],
	    index,
	    p,
	    names[MAX_PLAYERS][MAX_PLAYER_NAME]
	;


	foreach(new i : Player) {
		if(Player[i][TotalDamage] > 0) {
			playerScores[index][player_Score] = floatround(Player[i][TotalDamage], floatround_round);
			playerScores[index][player_Team] = Player[i][Team];
			playerScores[index][player_Kills] = Player[i][TotalKills];
			playerScores[index][player_Deaths] = Player[i][TotalDeaths];
			playerScores[index][player_TPlayed] = Player[i][RoundPlayed];
			playerScores[index][player_HP] = floatround(Player[i][pHealth] + Player[i][pArmour], floatround_round);

			new Float:nTotalAccuracy;
			if(Player[i][TotalBulletsFired] == 0) nTotalAccuracy = 0.0;
			else nTotalAccuracy = floatmul(100.0, floatdiv(Player[i][TotalshotsHit], Player[i][TotalBulletsFired]));
			playerScores[index][player_Acc] = floatround(nTotalAccuracy, floatround_round);

			if(ESLMode == false) format(names[index], MAX_PLAYER_NAME, Player[i][NameWithoutTag]);
			else format(names[index], MAX_PLAYER_NAME, Player[i][Name]);

		    playerScores[index++][player_ID] = i;
		    p++;
		}
		if(Player[i][Spectating] == true) StopSpectate(i);

		if(Player[i][InDuel] == false) ShowEndRoundTextDraw(i);
		if(Player[i][InDuel] == false) SetPlayerVirtualWorld(i, i);

	}
	for(new i=0; i < SAVE_SLOTS; ++i) {
		if(strlen(SaveVariables[i][pName]) > 2 && SaveVariables[i][TDamage] > 0) {
	    	playerScores[index][player_Score] = floatround(SaveVariables[i][TDamage], floatround_round);
	    	playerScores[index][player_Team] = SaveVariables[i][pTeam];
	    	playerScores[index][player_Kills] = SaveVariables[i][TKills];
	    	playerScores[index][player_Deaths] = SaveVariables[i][TDeaths];
	    	playerScores[index][player_TPlayed] = SaveVariables[i][TPlayed];
	    	playerScores[index][player_HP] = floatround(SaveVariables[i][gHealth] + SaveVariables[i][gArmour], floatround_round);

			new Float:nTotalAccuracy;
			if(SaveVariables[i][tBulletsShot] == 0) nTotalAccuracy = 0.0;
			else nTotalAccuracy = floatmul(100.0, floatdiv(SaveVariables[i][tshotsHit], SaveVariables[i][tBulletsShot]));
			playerScores[index][player_Acc] = floatround(nTotalAccuracy, floatround_round);

	    	if(ESLMode == false) format(names[index], MAX_PLAYER_NAME, SaveVariables[i][pNameWithoutTag]);
	    	else format(names[index], MAX_PLAYER_NAME, SaveVariables[i][pName]);

	   	    SaveVariables[i][RKills]   	=  	0;
			SaveVariables[i][RDeaths]  	= 	0;
			SaveVariables[i][RDamage] 	= 	0;

			SaveVariables[i][RoundID]   =   -1;
			index++;
			p++;
		}
	}

	GetPlayerHighestScores2(playerScores, names, 0, index-1);

//	new AttList[256], AttKills[180], AttDeaths[180], AttDamage[180], DefList[256], DefKills[180], DefDeaths[180], DefDamage[180];

	new topkill, topkillID = -1,
		Float: topDmg, topDmgID = -1,
		topAcc, topAccID = -1
	;

	for(new i = 0; i != p; ++i) {

		if( playerScores[i][player_Kills] > topkill && playerScores[i][player_Kills] > 0 )
	    {
            topkill = playerScores[i][player_Kills];
            topkillID = i;
	    }
	    if( playerScores[i][player_Score] > topDmg && playerScores[i][player_Score] > 0  )
	    {
            topDmg = playerScores[i][player_Score];
            topDmgID = i;
	    }
	    if( playerScores[i][player_Acc] > topAcc && playerScores[i][player_Acc] > 0  )
	    {
            topAcc = playerScores[i][player_Acc];
            topAccID = i;
	    }

	    if(playerScores[i][player_Team] == ATTACKER || playerScores[i][player_Team] == ATTACKER_SUB) {
	        format(AttList, sizeof(AttList), "%s~w~%s~n~", AttList, names[i]);
		    format(AttKills, sizeof(AttKills), "%s~w~%d~n~", AttKills, playerScores[i][player_Kills]);
	        format(AttDeaths, sizeof(AttDeaths), "%s~w~%d~n~", AttDeaths, playerScores[i][player_Deaths]);
	        format(AttPlayed, sizeof(AttPlayed), "%s~w~%d~n~", AttPlayed, playerScores[i][player_TPlayed]);
	        format(AttDamage, sizeof(AttDamage), "%s~w~%d~n~", AttDamage, playerScores[i][player_Score]);
	        format(AttAcc, sizeof(AttAcc), "%s~w~%d%%~n~", AttAcc, playerScores[i][player_Acc]);


		} else if(playerScores[i][player_Team] == DEFENDER || playerScores[i][player_Team] == DEFENDER_SUB) {
	        format(DefList, sizeof(DefList), "%s~w~%s~n~", DefList, names[i]);
	        format(DefKills, sizeof(DefKills), "%s~w~%d~n~", DefKills, playerScores[i][player_Kills]);
	        format(DefDeaths, sizeof(DefDeaths), "%s~w~%d~n~", DefDeaths, playerScores[i][player_Deaths]);
	        format(DefPlayed, sizeof(DefPlayed), "%s~w~%d~n~", DefPlayed, playerScores[i][player_TPlayed]);
	        format(DefDamage, sizeof(DefDamage), "%s~w~%d~n~", DefDamage, playerScores[i][player_Score]);
	        format(DefAcc, sizeof(DefAcc), "%s~w~%d%%~n~", DefAcc, playerScores[i][player_Acc]);



		}
		if(i == 0) format(TopString[0], 128, "%s1st         -         %s   	({FFFFFF}%d%s)", TextColor[playerScores[i][player_Team]], names[i], playerScores[i][player_Score], TextColor[playerScores[i][player_Team]]);
		else if(i == 1) format(TopString[1], 128, "%s2nd         -         %s   	({FFFFFF}%d%s)", TextColor[playerScores[i][player_Team]], names[i], playerScores[i][player_Score], TextColor[playerScores[i][player_Team]]);
		else if(i == 2) format(TopString[2], 128, "%s3rd         -         %s   	({FFFFFF}%d%s)", TextColor[playerScores[i][player_Team]], names[i], playerScores[i][player_Score], TextColor[playerScores[i][player_Team]]);



	}


	iString = "";

	if( topAccID >= 0 ) format( iString, sizeof(iString) , "~w~~h~Most Kills: %s~h~~h~%s ~w~~h~%d_____", TDC[playerScores[topkillID][player_Team]], names[topkillID] , topkill  );
	else format( iString, sizeof(iString) , "~w~~h~Most Kills: None_____" );
	if( topDmgID >= 0 ) format( iString, sizeof(iString) , "%s~w~~h~Most Dmg: %s~h~~h~%s ~w~~h~%.0f_____", iString, TDC[playerScores[topDmgID][player_Team]], names[topDmgID] , topDmg  );
	else format( iString, sizeof(iString) , "%s~w~~h~Most Dmg: None_____", iString );
    if( topAccID >= 0 ) format( iString, sizeof(iString) , "%s~w~~h~Top Acc: %s~h~~h~%s ~w~~h~%d%%", iString, TDC[playerScores[topAccID][player_Team]], names[topAccID] , topAcc  );
	else format( iString, sizeof(iString) , "%s~w~~h~Top Acc: None", iString );
	TextDrawSetString( leftTop, iString );

/*	if( topAccID >= 0 ) format( iString, sizeof(iString) , "Most Kills: %s (%d)~n~", names[topkillID] , topkill  );
	else format( iString, sizeof(iString) , "Most Kills: None~n~" );
	if( topDmgID >= 0 ) format( iString, sizeof(iString) , "%sMost Dmg: %s (%.0f)", iString, names[topDmgID] , topDmg  );
	else format( iString, sizeof(iString) , "%sMost Dmg: None", iString );
	TextDrawSetString( leftTop, iString );

	if( topAccID >= 0 ) format( iString, sizeof(iString) , "Top Acc: %s (%d)", names[topAccID] , topAcc  );
	else format( iString, sizeof(iString) , "Top Acc: None" );
	TextDrawSetString( rightTop, iString );
*/

/* // ROUND_REMOVED
	TextDrawSetString(EN_AttackerList, AttList);
	TextDrawSetString(EN_TAttackerKills, AttKills);
	TextDrawSetString(EN_TAttackerDeaths, AttDeaths);
	TextDrawSetString(EN_TAttackerRoundsPlayed, AttPlayed);
	TextDrawSetString(EN_TAttackerAccuracy, AttAcc);
	TextDrawSetString(EN_TAttackerDamage, AttDamage);


	TextDrawSetString(EN_DefenderList, DefList);
	TextDrawSetString(EN_TDefenderKills, DefKills);
	TextDrawSetString(EN_TDefenderDeaths, DefDeaths);
	TextDrawSetString(EN_TDefenderRoundsPlayed, DefPlayed);
	TextDrawSetString(EN_TDefenderAccuracy, DefAcc);
	TextDrawSetString(EN_TDefenderDamage, DefDamage);
*/
//
	TextDrawSetString(leftPlayed, AttPlayed );

	TextDrawSetString(leftNames, AttList);
	TextDrawSetString(leftKills, AttKills);
	//TextDrawSetString(leftHP, AttDeaths);
	TextDrawSetString(leftDeaths, AttDeaths);
	TextDrawSetString(leftAcc, AttAcc);
	TextDrawSetString(leftDmg, AttDamage);

	TextDrawSetString(rightNames, DefList);
	TextDrawSetString(rightKills, DefKills);
	//TextDrawSetString(rightHP, DefDeaths);
	TextDrawSetString(rightDeaths, DefDeaths);
	TextDrawSetString(rightAcc, DefAcc);
	TextDrawSetString(rightDmg, DefDamage);

	TextDrawSetString(rightPlayed, DefPlayed );
//



	SendClientMessageToAll(-1, " ");
	SendClientMessageToAll(-1, " ");
	SendClientMessageToAll(-1, " ");
	SendClientMessageToAll(-1, " ");
    SendClientMessageToAll(-1, " ");
	SendClientMessageToAll(-1, " ");
	SendClientMessageToAll(-1, "{FFFFFF}---------------------------------------------------------------");
//	SendClientMessageToAll(-1, "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{FFFFFF}Top Players");
    SendClientMessageToAll(-1, "{FFFFFF}Top Stooopids:");
	SendClientMessageToAll(-1, TopString[0]);
	SendClientMessageToAll(-1, TopString[1]);
	SendClientMessageToAll(-1, TopString[2]);
//	SendClientMessageToAll(-1, " ");
	SendClientMessageToAll(-1, "{FFFFFF}---------------------------------------------------------------");


    SetWeaponStatsString();

	if(ESLMode == false) {
		TeamName[ATTACKER] = "Alpha";
		TeamName[ATTACKER_SUB] = "Alpha Sub";
		TeamName[DEFENDER] = "Beta";
		TeamName[DEFENDER_SUB] = "Beta Sub";

	    TeamScore[ATTACKER] = 0;
	    TeamScore[DEFENDER] = 0;

		format(iString, sizeof(iString), "~r~%s %s(~r~%d%s)  ~b~~h~%s %s(~b~~h~%d%s)",TeamName[ATTACKER],MAIN_TEXT_COLOUR,TeamScore[ATTACKER],MAIN_TEXT_COLOUR,TeamName[DEFENDER],MAIN_TEXT_COLOUR,TeamScore[DEFENDER],MAIN_TEXT_COLOUR);
	    TextDrawSetString(TeamScoreText, iString);


		foreach(new i : Player) {
		    //for(new j = 0; j < 55; j ++)
			//	Player[i][WeaponStat][j] = 0;
			Player[i][TotalKills] = 0;
			Player[i][TotalDeaths] = 0;
			Player[i][TotalDamage] = 0;
			Player[i][RoundPlayed] = 0;
		    Player[i][TotalBulletsFired] = 0;
		    Player[i][TotalshotsHit] = 0;
		}

		ClearPlayerVariables();
	} else {
        ResetScoresForESL();
	}

	AttList = "";
	AttKills = "";
	AttDeaths = "";
	AttPlayed = "";
	AttAcc = "";
	AttDamage = "";

	DefList = "";
	DefKills = "";
	DefDeaths = "";
	DefPlayed = "";
	DefAcc = "";
	DefDamage = "";

	#if ANTICHEAT == 1
		if(ESLMode == false) {
			AntiCheat = false;
			TextDrawHideForAll(ACText);
			new newhostname[128];
			format(newhostname, sizeof(newhostname), "hostname %s", hostname);
			SendRconCommand(newhostname);

			KillTimer(ACTimer);
		    AC_Toggle(false);
		    PermAC = false;
		}
	#endif

	#if INTROTEXT == 1
	format(iString, sizeof(iString), "~r~~h~%s", TeamName[ATTACKER]);
	TextDrawSetString(introAtt, iString);

	format(iString, sizeof(iString), "~b~~h~%s", TeamName[DEFENDER]);
	TextDrawSetString(introDef, iString);
	#endif

	#if STATS == 1 && MYSQL == 1
		LoadESLStats();
	#endif

	return 1;
}

SpectatePlayer(playerid, specid) {
	if(Player[playerid][InDM] == true) {
	    Player[playerid][InDM] = false;
    	Player[playerid][DMReadd] = 0;
	}
	Player[playerid][AntiLag] = false;
	Player[playerid][InHeadShot] = false;
	HideTargetInfo(playerid);

	new OldSpecID = -1;

	if(Player[playerid][BeingSpeced] == true) {
		foreach(new i : Player) {
		    if(Player[i][Spectating] == true && Player[i][IsSpectatingID] == playerid) {
				StopSpectate(i);
			}
		}
	} else if (Player[playerid][Spectating] == true && specid != Player[playerid][IsSpectatingID]) {
	    OldSpecID = Player[playerid][IsSpectatingID];
	}



	//if(TeamHPDamage == false)
	//{
	// spectation info tds
	new iString[256],Float:aArmour, Float:aHealth;
	GetHP(specid, aHealth);
	GetAP(specid, aArmour);

	format(iString, sizeof(iString),"%s%s ~r~~h~%d~n~~n~%s(%.0f) (~r~~h~%.0f%s)~n~FPS: ~r~~h~%d %sPing: ~r~~h~%d~n~%sPacket-Loss: ~r~~h~%.1f~n~%sKills: ~r~~h~%d~n~%sDamage: ~r~~h~%.0f~n~%sTotal Dmg: ~r~~h~%.0f",
		MAIN_TEXT_COLOUR, Player[specid][Name], specid, MAIN_TEXT_COLOUR, Player[specid][pArmour], Player[specid][pHealth], MAIN_TEXT_COLOUR, Player[specid][FPS], MAIN_TEXT_COLOUR, GetPlayerPing(specid), MAIN_TEXT_COLOUR, GetPlayerPacketLoss(specid), MAIN_TEXT_COLOUR, Player[specid][RoundKills], MAIN_TEXT_COLOUR, Player[specid][RoundDamage], MAIN_TEXT_COLOUR, Player[specid][TotalDamage]);
	PlayerTextDrawSetString(playerid, SpecText[1], iString);
	PlayerTextDrawSetString(playerid, SpecText[3], SpecWeapons(specid));

 	for(new i; i < 4; i++) {
		PlayerTextDrawShow(playerid, SpecText[i]);
	}
	if(Player[playerid][Team] == ATTACKER || Player[playerid][Team] == ATTACKER_SUB)
	{
		TextDrawShowForPlayer(playerid, DefenderTeam[2]);
		TextDrawShowForPlayer(playerid, DefenderTeam[3]);
		TextDrawShowForPlayer(playerid, AttackerTeam[0]);
		TextDrawShowForPlayer(playerid, AttackerTeam[1]);
	}
	else if(Player[playerid][Team] == DEFENDER || Player[playerid][Team] == DEFENDER_SUB)
	{
		TextDrawShowForPlayer(playerid, AttackerTeam[2]);
		TextDrawShowForPlayer(playerid, AttackerTeam[3]);
		TextDrawShowForPlayer(playerid, DefenderTeam[0]);
		TextDrawShowForPlayer(playerid, DefenderTeam[1]);
	}

	/*}
	else
	{
		if(Player[playerid][Team] == ATTACKER || Player[playerid][Team] == ATTACKER_SUB) {
			TextDrawShowForPlayer(playerid, DefenderTeam[2]);
			TextDrawShowForPlayer(playerid, DefenderTeam[3]);
			TextDrawShowForPlayer(playerid, AttackerTeam[0]);
			TextDrawShowForPlayer(playerid, AttackerTeam[1]);
		} else if(Player[playerid][Team] == DEFENDER || Player[playerid][Team] == DEFENDER_SUB) {
			TextDrawShowForPlayer(playerid, AttackerTeam[2]);
			TextDrawShowForPlayer(playerid, AttackerTeam[3]);
			TextDrawShowForPlayer(playerid, DefenderTeam[0]);
			TextDrawShowForPlayer(playerid, DefenderTeam[1]);
		}
	}*/

	Player[playerid][IsSpectatingID] = specid;
	Player[playerid][Spectating] = true;
	Player[specid][BeingSpeced] = true;

	PlayerTextDrawHide(playerid, RoundKillDmgTDmg);
	PlayerTextDrawHide(playerid, ArmourTextDraw);
	PlayerTextDrawHide(playerid, HPTextDraw_TD);
	HidePlayerProgressBar(playerid, HealthBar);
	HidePlayerProgressBar(playerid, ArmourBar);


	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(specid));
	SetPlayerInterior(playerid, GetPlayerInterior(specid));

    TogglePlayerSpectating(playerid, 1);

	if(IsPlayerInAnyVehicle(specid)) {
	    PlayerSpectateVehicle(playerid, GetPlayerVehicleID(specid));
	} else {
		PlayerSpectatePlayer(playerid, specid);
	}

 	if(Player[specid][Playing] == true && GameType == 0 && Current != -1) {
	    SetPlayerCheckpoint(playerid, BCPSpawn[Current][0], BCPSpawn[Current][1], BCPSpawn[Current][2],2);
	}


	new WhoSpecing[2][256], SpecingMe;
	format(WhoSpecing[0], 100, "%sSPECTATOR~n~~n~", MAIN_TEXT_COLOUR);

	if(OldSpecID != -1) {
	    foreach(new i : Player) {
	        if(Player[i][Spectating] == true && Player[i][IsSpectatingID] == OldSpecID) {
				SpecingMe++;

				if(SpecingMe <= 6) {
		        	format(WhoSpecing[0], 256, "%s%s%s ~r~~h~%d~n~", WhoSpecing[0], MAIN_TEXT_COLOUR, Player[i][NameWithoutTag], i);
				} else if (SpecingMe <= 12) {
				    format(WhoSpecing[1], 256, "%s%s%s ~r~~h~%d~n~", WhoSpecing[1], MAIN_TEXT_COLOUR, Player[i][NameWithoutTag], i);
				}
			}
		}
		if(SpecingMe > 0) {
			PlayerTextDrawSetString(OldSpecID, WhoSpec[0], WhoSpecing[0]);
			PlayerTextDrawSetString(OldSpecID, WhoSpec[1], WhoSpecing[1]);
	 		//PlayerTextDrawShow(OldSpecID, WhoSpec[2]);
			//PlayerTextDrawShow(OldSpecID, WhoSpec[3]);

			foreach(new i : Player) {
			    if(Player[i][Spectating] == true && Player[i][IsSpectatingID] == OldSpecID && i != OldSpecID) {
					PlayerTextDrawSetString(i, WhoSpec[0], WhoSpecing[0]);
					PlayerTextDrawSetString(i, WhoSpec[1], WhoSpecing[1]);
 					//PlayerTextDrawShow(i, WhoSpec[2]);
					//PlayerTextDrawShow(i, WhoSpec[3]);
				}
			}
		} else {
			PlayerTextDrawSetString(OldSpecID, WhoSpec[0], " ");
			PlayerTextDrawSetString(OldSpecID, WhoSpec[1], " ");
	 		//PlayerTextDrawHide(OldSpecID, WhoSpec[2]);
			//PlayerTextDrawHide(OldSpecID, WhoSpec[3]);
			Player[OldSpecID][BeingSpeced] = false;
		}
	}

	SpecingMe = 0;
    format(WhoSpecing[0], 100, "%sSPECTATOR~n~~n~", MAIN_TEXT_COLOUR);
    WhoSpecing[1] = "";

	foreach(new i : Player) {
//	    if(i != playerid) {
//		    OnPlayerStreamIn(playerid, i);
//		    OnPlayerStreamIn(i, playerid);
//		}

	    if(Player[i][Spectating] == true && Player[i][IsSpectatingID] == specid) {
			SpecingMe++;

			if(SpecingMe <= 5) {
	        	format(WhoSpecing[0], 256, "%s%s%s ~r~~h~%d~n~", WhoSpecing[0], MAIN_TEXT_COLOUR, Player[i][NameWithoutTag], i);
			} else if (SpecingMe <= 10) {
			    format(WhoSpecing[1], 256, "%s%s%s ~r~~h~%d~n~", WhoSpecing[1], MAIN_TEXT_COLOUR, Player[i][NameWithoutTag], i);
			}
		}
	}
	if(SpecingMe > 0) {
		PlayerTextDrawSetString(specid, WhoSpec[0], WhoSpecing[0]);
		PlayerTextDrawSetString(specid, WhoSpec[1], WhoSpecing[1]);
		//PlayerTextDrawShow(specid, WhoSpec[2]);
		//PlayerTextDrawShow(specid, WhoSpec[3]);

		foreach(new i : Player) {
		    if(Player[i][Spectating] == true && Player[i][IsSpectatingID] == specid && i != specid) {
				PlayerTextDrawSetString(i, WhoSpec[0], WhoSpecing[0]);
				PlayerTextDrawSetString(i, WhoSpec[1], WhoSpecing[1]);
				//PlayerTextDrawShow(i, WhoSpec[2]);
				//PlayerTextDrawShow(i, WhoSpec[3]);
			}
		}
	} else {
		PlayerTextDrawSetString(specid, WhoSpec[0], " ");
		PlayerTextDrawSetString(specid, WhoSpec[1], " ");
		//PlayerTextDrawHide(specid, WhoSpec[2]);
		//PlayerTextDrawHide(specid, WhoSpec[3]);

		Player[specid][BeingSpeced] = false;
	}


	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(specid));
	SetPlayerInterior(playerid, GetPlayerInterior(specid));

    TogglePlayerSpectating(playerid, 1);

	if(IsPlayerInAnyVehicle(specid)) {
	    PlayerSpectateVehicle(playerid, GetPlayerVehicleID(specid));
	} else {
		PlayerSpectatePlayer(playerid, specid);
	}

 	if(Player[specid][Playing] == true && GameType == 0 && Current != -1) {
	    SetPlayerCheckpoint(playerid, BCPSpawn[Current][0], BCPSpawn[Current][1], BCPSpawn[Current][2],2);
	}

	RadarFix();
    return 1;
}

StopSpectate(playerid) {

	if(Player[playerid][SpectatingRound] != -1) {
	    Player[playerid][SpectatingRound] = -1;
	    PlayerTextDrawSetString(playerid, TD_RoundSpec, "_");
	    Player[playerid][Spectating] = false;
		SetSpawnInfoEx(playerid, GetPlayerTeam(playerid), Skin[Player[playerid][Team]], MainSpawn[0]+random(5),MainSpawn[1]+random(5),MainSpawn[2]+2, MainSpawn[3], 0, 0, 0, 0, 0, 0);
		SetPlayerInterior(playerid,MainInterior);
		Player[playerid][IgnoreSpawn] = true;
		SpawnPlayerEx(playerid);
		return 1;
	}

 	if(Player[playerid][BeingSpeced] == true) {
		foreach(new i : Player) {
			if(Player[i][Spectating] == true && Player[i][IsSpectatingID] == playerid) {
			    StopSpectate(i);
			}
		}
	}

	new specid = Player[playerid][IsSpectatingID];

	CancelFlyMode(playerid);

	Player[playerid][Spectating] = false;
	Player[playerid][IsSpectatingID] = -1;
	Player[playerid][BeingSpeced] = false;

//	PlayerTextDrawHide(playerid, SpecText[0]);
//	PlayerTextDrawHide(playerid, SpecText[1]);

	for(new i; i < 4; i++) {
		PlayerTextDrawHide(playerid, SpecText[i]);
	}

	TextDrawHideForPlayer(playerid, AttackerTeam[2]);
	TextDrawHideForPlayer(playerid, AttackerTeam[3]);
	TextDrawHideForPlayer(playerid, DefenderTeam[2]);
	TextDrawHideForPlayer(playerid, DefenderTeam[3]);

	PlayerTextDrawSetString(playerid, WhoSpec[0], " ");
	PlayerTextDrawSetString(playerid, WhoSpec[1], " ");
	//PlayerTextDrawHide(playerid, WhoSpec[2]);
	//PlayerTextDrawHide(playerid, WhoSpec[3]);

	PlayerTextDrawShow(playerid, RoundKillDmgTDmg);
	PlayerTextDrawShow(playerid, ArmourTextDraw);
	PlayerTextDrawShow(playerid, HPTextDraw_TD);
	ShowPlayerProgressBar(playerid, HealthBar);
	ShowPlayerProgressBar(playerid, ArmourBar);

    TogglePlayerSpectating(playerid, 0);

	SetPlayerPos(playerid, MainSpawn[0]+random(5), MainSpawn[1]+random(5), MainSpawn[2]+2);
	SetPlayerFacingAngle(playerid, MainSpawn[3]);
	SetPlayerInterior(playerid, MainInterior);
	SetPlayerVirtualWorld(playerid, 0);
	SetCameraBehindPlayer(playerid);


	if(specid != -1) {
		new WhoSpecing[2][254], SpecingMe = 0;
	    format(WhoSpecing[0], 100, "%sSPECTATOR~n~~n~", MAIN_TEXT_COLOUR);

		foreach(new i : Player) {
		    if(Player[i][Spectating] == true && Player[i][IsSpectatingID] == specid) {
				SpecingMe++;

				if(SpecingMe <= 5) {
		        	format(WhoSpecing[0], 256, "%s%s%s ~r~~h~%d~n~", WhoSpecing[0], MAIN_TEXT_COLOUR, Player[i][NameWithoutTag], i);
				} else if (SpecingMe <= 10) {
				    format(WhoSpecing[1], 256, "%s%s%s ~r~~h~%d~n~", WhoSpecing[1], MAIN_TEXT_COLOUR, Player[i][NameWithoutTag], i);
				}
			}
		}
		if(SpecingMe > 0) {
			PlayerTextDrawSetString(specid, WhoSpec[0], WhoSpecing[0]);
			PlayerTextDrawSetString(specid, WhoSpec[1], WhoSpecing[1]);
			//PlayerTextDrawShow(specid, WhoSpec[2]);
			//PlayerTextDrawShow(specid, WhoSpec[3]);

			foreach(new i : Player) {
			    if(Player[i][Spectating] == true && Player[i][IsSpectatingID] == specid && i != specid) {
					PlayerTextDrawSetString(i, WhoSpec[0], WhoSpecing[0]);
					PlayerTextDrawSetString(i, WhoSpec[1], WhoSpecing[1]);
					//PlayerTextDrawShow(i, WhoSpec[2]);
					//PlayerTextDrawShow(i, WhoSpec[3]);
				}
			}
		} else {
			PlayerTextDrawSetString(specid, WhoSpec[0], " ");
			PlayerTextDrawSetString(specid, WhoSpec[1], " ");
			//PlayerTextDrawHide(specid, WhoSpec[2]);
			//PlayerTextDrawHide(specid, WhoSpec[3]);
			Player[specid][BeingSpeced] = false;
		}
	}

	return 1;
}



stock SpectateNextTeamPlayer(playerid){
	new PAvailable = 0;

	foreach(new i : Player) {
	    if(Player[playerid][Team] == ATTACKER || Player[playerid][Team] == ATTACKER_SUB) {
	        if(Player[i][Team] == ATTACKER && i != playerid && Player[i][Playing] == true) PAvailable++;
		} else if(Player[playerid][Team] == DEFENDER || Player[playerid][Team] == DEFENDER_SUB) {
		    if(Player[i][Team] == DEFENDER && i != playerid && Player[i][Playing] == true) PAvailable++;
		}
	}

	if(PAvailable < 2 && Player[playerid][CalledByPlayer] == true){
		Player[playerid][CalledByPlayer] = false;
  		return 1;
	} else if(PAvailable < 1) {
	    StopSpectate(playerid);
		return 1;
	} else {
        Player[playerid][CalledByPlayer] = false;
	    new searching;
	    for(new i = Player[playerid][IsSpectatingID]+1; i <= HighestID+1; i++){
			if(searching > 1) {
				break;
			}
	    	if(i == HighestID+1) {
				i = 0;
	            searching++;
			}

			if(IsPlayerConnected(i) && i != playerid && Player[i][Playing] == true && Player[i][Team] != NON && GetPlayerState(i) != PLAYER_STATE_WASTED && IsTeamTheSame(Player[i][Team], Player[playerid][Team])) {
				SpectatePlayer(playerid, i);
			 	if(Player[i][Playing] == true && GameType == 0 && Current != -1) {
    				SetPlayerCheckpoint(playerid, BCPSpawn[Current][0], BCPSpawn[Current][1], BCPSpawn[Current][2],2);
				}
			 	break;
			}
		}
	}
	return 1;
}

stock SpectatePreviousTeamPlayer(playerid) {
	new PAvailable = 0;

	foreach(new i : Player) {
	    if(Player[playerid][Team] == ATTACKER || Player[playerid][Team] == ATTACKER_SUB) {
	        if(Player[i][Team] == ATTACKER && i != playerid && Player[i][Playing] == true) PAvailable++;
		} else if(Player[playerid][Team] == DEFENDER || Player[playerid][Team] == DEFENDER_SUB) {
		    if(Player[i][Team] == DEFENDER && i != playerid && Player[i][Playing] == true) PAvailable++;
		}
	}

	if(PAvailable < 2 && Player[playerid][CalledByPlayer] == true){
		Player[playerid][CalledByPlayer] = false;
  		return 1;
	} else if(PAvailable < 1) {
	    StopSpectate(playerid);
		return 1;
	} else {
        Player[playerid][CalledByPlayer] = false;
	    new searching;
		for(new i = Player[playerid][IsSpectatingID]-1; i >= -1; i--) {
			if(searching > 1) {
			    break;
			}
			if(i < 0) {
				i = HighestID+1;
	            searching++;
			}

			if(IsPlayerConnected(i) && i != playerid && Player[i][Spectating] == false && Player[i][Playing] == true && Player[i][Team] != NON && GetPlayerState(i) != PLAYER_STATE_WASTED && IsTeamTheSame(Player[i][Team], Player[playerid][Team])) {
				SpectatePlayer(playerid, i);
			 	if(Player[i][Playing] == true && GameType == 0 && Current != -1) {
    				SetPlayerCheckpoint(playerid, BCPSpawn[Current][0], BCPSpawn[Current][1], BCPSpawn[Current][2],2);
				}
				break;
			}
		}
	}
	return 1;
}

stock SpectateNextPlayer(playerid){
	new PAvailable = 0;

	foreach(new i : Player) {
	    if(Player[i][Team] != NON && Player[i][Spectating] == false) PAvailable++;
	}

	if(PAvailable < 2 && Player[playerid][CalledByPlayer] == true){
		Player[playerid][CalledByPlayer] = false;
  		return 1;
	} else if(PAvailable < 1) {
	    StopSpectate(playerid);
		return 1;
	} else {
        Player[playerid][CalledByPlayer] = false;
	    new searching;
	    for(new i = Player[playerid][IsSpectatingID]+1; i <= HighestID+1; i++){
			if(searching > 1) {
				break;
			}
	    	if(i == HighestID+1) {
				i = 0;
	            searching++;
			}

			if(IsPlayerConnected(i) && i != playerid && Player[i][Spectating] == false && Player[i][Team] != NON && GetPlayerState(i) != PLAYER_STATE_WASTED ) {
				SpectatePlayer(playerid, i);
			 	break;
			}
		}
	}
	return 1;
}

stock SpectatePreviousPlayer(playerid) {
	new PAvailable = 0;

	foreach(new i : Player){
	    if(Player[i][Team] != NON && Player[i][Spectating] == false) PAvailable++;
	}

	if(PAvailable < 2 && Player[playerid][CalledByPlayer] == true){
		Player[playerid][CalledByPlayer] = false;
  		return 1;
	} else if(PAvailable < 1) {
	    StopSpectate(playerid);
		return 1;
	} else {
        Player[playerid][CalledByPlayer] = false;
	    new searching;
		for(new i = Player[playerid][IsSpectatingID]-1; i >= -1; i--) {
			if(searching > 1) {
			    break;
			}
			if(i < 0) {
				i = HighestID+1;
	            searching++;
			}

        	if(IsPlayerConnected(i) && i != playerid && Player[i][Spectating] == false && Player[i][Team] != NON && GetPlayerState(i) != PLAYER_STATE_WASTED) {
				SpectatePlayer(playerid, i);
				break;
			}
		}
	}
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
    ShowPlayerDialog(playerid, PLAYERCLICK_DIALOG, DIALOG_STYLE_LIST, sprintf("Clicked ID: %d", clickedplayerid), "Getinfo\nSpec\nAdd\nRemove\nReadd\nGunmenu\nGo\nGet\nSlap\nMute\nUnmute\nKick\nBan", "Select", "Cancel");
	LastClickedPlayer[playerid] = clickedplayerid;
	return 1;
}



#if ANTICHEAT == 1

public OnUsingAnotherPC(playerid)
{
    new str2[128], name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
    format(str2, sizeof(str2), ""COL_PRIM"** Whitetiger's AC: {FFFFFF}%s"COL_PRIM" might be using the 2 PC trick.", name);
    SendClientMessageToAll(-1, str2);

    return 1;
}

public OnACUpdated(playerid) {

//    printf("OnACUpdated(%d): %d %d %d", playerid, AC_Running(playerid), AC_HasTrainer(playerid), AC_ASI(playerid));

    if(!IsPlayerConnected(playerid)) return 1;
	if(Player[playerid][IsGettingKicked] == true) return 1;
    if(AllowStartBase == false) return 1;

	new iString[400];

	if(!AC_Running(playerid)) {
	    if(Player[playerid][ACKick] >= 1) {
			format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has been kicked for not running the Anti-Cheat.", Player[playerid][Name]);
			SendClientMessageToAll(-1, iString);

			SendClientMessage(playerid, -1, "{FFFFFF}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		    SendClientMessage(playerid, -1, ""COL_PRIM"You can get the Anti-Cheat from: {FFFFFF}http://sixtytiger.com/tiger/ac_files/");
	        SendClientMessage(playerid, -1, "{FFFFFF}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");

	        Player[playerid][IsGettingKicked] = true;
			SetTimerEx("KickForAC", 1000, false, "i", playerid);

			iString = "";
			strcat(iString, "{FFFFFF}>>{FF3333}Anti-Cheat{FFFFFF}<<\n\nYou were kicked for not running the Whitetiger's Anti-Cheat.\n\nDownload Link: "COL_PRIM"http://sixtytiger.com/tiger/ac_files/");
			strcat(iString, "{FFFFFF}\n\nInstall and run the AC, wait for it to say \"You are ready to play now.\"\nMake sure it is up to date (Latest Version).");

			ShowPlayerDialog(playerid,DIALOG_ANTICHEAT,DIALOG_STYLE_MSGBOX,"{FF0000}Anti-Cheat", iString,"OK","");

			Player[playerid][ACKick] = 0;

	        printf("Player: %s (%d) has been kicked for not running the Anti-Cheat.", Player[playerid][Name], playerid);
		} else {
			Player[playerid][ACKick]++;

			format(iString,sizeof(iString),"{CCCCCC}AC is off %d/2", Player[playerid][ACKick]);
   			SendClientMessage(playerid, -1, iString);

   			format(iString, sizeof(iString), ""COL_PRIM"Warning: {FFFFFF}%s's"COL_PRIM" AC is off.", Player[playerid][Name]);
   			SendClientMessageToAll(-1, iString);
		}

		return 1;

	} else if(AC_HasTrainer(playerid)) {
		format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has been kicked for running trainers.", Player[playerid][Name]);
		SendClientMessageToAll(-1, iString);

        SendClientMessage(playerid, -1, "{FFFFFF}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		SendClientMessage(playerid, -1, ""COL_PRIM"If you are using {FFFFFF}AutoHotkey "COL_PRIM"please remove it.");
        SendClientMessage(playerid, -1, ""COL_PRIM"Once you're sure that you are using the original files, please {FFFFFF}RESTART "COL_PRIM"the Anti-Cheat.");
        SendClientMessage(playerid, -1, "{FFFFFF}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");

        Player[playerid][IsGettingKicked] = true;
		SetTimerEx("KickForAC", 1000, false, "i", playerid);

		printf("Player: %s (%d) has been kicked for running trainers.", Player[playerid][Name], playerid);

		return 1;

	} else if(AC_ASI(playerid)) {
		format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has been kicked for using .ASI scripts.", Player[playerid][Name]);
		SendClientMessageToAll(-1, iString);

        SendClientMessage(playerid, -1, "{FFFFFF}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
        SendClientMessage(playerid, -1, ""COL_PRIM"Once you're sure that you are using the original files, please {FFFFFF}RESTART "COL_PRIM"the Anti-Cheat.");
        SendClientMessage(playerid, -1, "{FFFFFF}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");

        Player[playerid][IsGettingKicked] = true;
		SetTimerEx("KickForAC", 1000, false, "i", playerid);

        printf("Player: %s (%d) has been kicked for using .ASI", Player[playerid][Name], playerid);

		return 1;
	} else {
	    Player[playerid][ACKick] = 0;
	}

	return 1;
}

public OnACFileModified(playerid, file[]) {
	if(!IsPlayerConnected(playerid)) return 1;
    if(Player[playerid][IsGettingKicked] == true) return 1;
    if(AllowStartBase == false) return 1;

	new iString[400];
	format(iString, sizeof(iString), "{FFFFFF}%s "COL_PRIM"has been kicked for using modified: {FFFFFF}%s", Player[playerid][Name], file);
	SendClientMessageToAll(-1, iString);

	SendClientMessage(playerid, -1, "{FFFFFF}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	format(iString, sizeof(iString), ""COL_PRIM"Once you replaced your modified {FFFFFF}%s "COL_PRIM"by the original one, please {FFFFFF}RESTART "COL_PRIM"the Anti-Cheat.", file);
	SendClientMessage(playerid, -1, iString);
    SendClientMessage(playerid, -1, ""COL_PRIM"You can get original files from: {FFFFFF}http://sixtytiger.com/tiger/ac_files/unmodded_files/");
    SendClientMessage(playerid, -1, "{FFFFFF}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");

	iString = "";
	strcat(iString, "{FFFFFF}You are either kicked for running mods that are not allowed or your Anti-Cheat is not ready yet.\nIf your Anti-Cheat didn't say \"You are ready to play now\" then please wait for it.");
	strcat(iString, "\n\nDownload Link for AC:\n\nhttp://sixtytiger.com/tiger/ac_files/\n\n Install and run the AC, wait for it to say \"You are ready to play now.\"\nMake sure its up to date (Latest Version).");
    ShowPlayerDialog(playerid,DIALOG_ANTICHEAT,DIALOG_STYLE_MSGBOX,"{FF0000}Anti-Cheat", iString,"OK","");

    printf("Player: %s (%d) has been kicked for using modified %s", Player[playerid][Name], playerid, file);

    Player[playerid][IsGettingKicked] = true;
	SetTimerEx("KickForAC", 1000, false, "i", playerid);

	return 1;
}

public OnACToggled(bool:set) {
    AntiCheat = set;

    //new newhostname[128];

    if(set) {
		//format(newhostname, sizeof(newhostname), "hostname %s [AC]", hostname);
		AC_GetAllInfo();
	} //else {
	    //format(newhostname, sizeof(newhostname), "hostname %s", hostname);
	//}
	//SendRconCommand(newhostname);
}

forward OnACStart();
public OnACStart() {
	AC_Toggle(true);
	TextDrawSetString(ACText, sprintf("%sAC v2: ~g~      ON", MAIN_TEXT_COLOUR));
	//printf("AC is on.");
}


forward KickForAC(playerid);
public KickForAC(playerid) {
    Player[playerid][IsKicked] = true;
	Kick(playerid);
	return 1;
}

#endif

#if MYSQL == 1

forward CheckRegistered(Result:result, playerid);
public CheckRegistered(Result:result, playerid) {
	if(sql_num_rows(result) > 0) {
		if(Player[playerid][IsGettingKicked] == false) {
			ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD,"{FFFFFF}Login Dialog","{FFFFFF}Type your password below to log in:","Login","Leave");
		}
	} else {
		if(Player[playerid][IsGettingKicked] == false) {
			ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD,"{FFFFFF}Registration Dialog","{FFFFFF}Type your password below to register:","Register","Leave");
		}
	}
}

forward OnPlayerLogin(Result:result, playerid);
public OnPlayerLogin(Result:result, playerid) {

	if(!IsPlayerConnected(playerid)) return 1;

	if(!sql_num_rows(result)) {
	    SendErrorMessage(playerid,"Wrong Password. Please try again.");
  		ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD,"{FFFFFF}Login Dialog","{FFFFFF}Type your password below to log in:","Login","Leave");
		return 1;
	}
	Player[playerid][Level] = sql_get_field_assoc_int(result, "Level");
	Player[playerid][Weather] = sql_get_field_assoc_int(result, "Weather");
	Player[playerid][Time] = sql_get_field_assoc_int(result, "Time");
	Player[playerid][ChatChannel] = sql_get_field_assoc_int(result, "ChatChannel");
	Player[playerid][NetCheck] = sql_get_field_assoc_int(result, "NetCheck");
	Player[playerid][TextPos] = (sql_get_field_assoc_int(result, "Widescreen") == 0 ? false : true);
	Player[playerid][HitSound] = sql_get_field_assoc_int(result, "HitSound");
	Player[playerid][GetHitSound] = sql_get_field_assoc_int(result, "GetHitSound");


	Player[playerid][Logged] = true;

 /*   ClearPlayerChat(playerid);

	new iString[180];
    SendClientMessage(playerid,-1, "You have successfully logged in.");
	format(iString, sizeof(iString), "Level: %d | Weather: %d | Time: %d | Chat Channel: %d | Net Check: %d | HitSound: %d | Get HitSound: %d", Player[playerid][Level], Player[playerid][Weather], Player[playerid][Time], Player[playerid][ChatChannel], Player[playerid][NetCheck], Player[playerid][HitSound], Player[playerid][GetHitSound]);
    SendClientMessage(playerid, -1, iString);
*/
	#if INTROTEXT == 0
	if(ESLMode == false)
		SetTimerEx("SpawnConnectedPlayer", 250, 0, "dd", playerid, 0);
	else
	{
		SetTimerEx("ShowESLHelpDiag", 2000, false, "i", playerid);
	}
	//SpawnConnectedPlayer(playerid, 0);
	#else
    OnPlayerRequestClass(playerid, 0);
	#endif
	return 1;

}


forward OnPlayerRegistered(Result:result, playerid, pw[]);
public OnPlayerRegistered(Result:result, playerid, pw[]) {

	new iString[128];
    format(iString, sizeof(iString), ""COL_PRIM"You have been successfully registered. Password: {FFFFFF}%s", pw);
	SendClientMessage(playerid, -1, iString);
//	SendClientMessage(playerid, -1, "Level: 0 | Weather: 0 | Time: 12 | Chat Channel: -1 | Net Check: 1 | HitSound: 17802 | Get HitSound: 1131");
}


#else

LoginPlayer(playerid, DBResult:res) {

    new iString[256];

    // Load level
    db_get_field_assoc(res, "Level", iString, sizeof(iString));
    Player[playerid][Level] = strval(iString);

	// Load Weather
	db_get_field_assoc(res, "Weather", iString, sizeof(iString));
	Player[playerid][Weather] = strval(iString);

	// Load time
	db_get_field_assoc(res, "Time", iString, sizeof(iString));
	Player[playerid][Time] = strval(iString);

	// Load ChatChannel
	db_get_field_assoc(res, "ChatChannel", iString, sizeof(iString));
	Player[playerid][ChatChannel] = strval(iString);

	// Load NetCheck
	db_get_field_assoc(res, "NetCheck", iString, sizeof(iString));
	Player[playerid][NetCheck] = strval(iString);

	// Load WideScreen
	db_get_field_assoc(res, "Widescreen", iString, sizeof(iString));
	Player[playerid][TextPos] = (strval(iString) == 0 ? false : true);

	// Load HitSound
	db_get_field_assoc(res, "HitSound", iString, sizeof(iString));
	Player[playerid][HitSound] = strval(iString);

	// Load GetHitSound
	db_get_field_assoc(res, "GetHitSound", iString, sizeof(iString));
	Player[playerid][GetHitSound] = strval(iString);

	// Load Radio ID
	db_get_field_assoc(res, "RadID", iString, sizeof(iString));
	Player[playerid][RadioID] = strval(iString);

	// Load Duels won
	db_get_field_assoc(res, "DWon", iString, sizeof(iString));
	Player[playerid][DuelsWon] = strval(iString);

	// Load Duels Lost
	db_get_field_assoc(res, "DLost", iString, sizeof(iString));
	Player[playerid][DuelsLost] = strval(iString);

	// Load ShowSpecs
	db_get_field_assoc(res, "ShowSpecs", iString, sizeof(iString));
	Player[playerid][ShowSpecs] = (strval(iString) == 0 ? false : true);

	
	// Load Style
	db_get_field_assoc(res, "Style", iString, sizeof(iString));
	Player[playerid][Style] = strval(iString);
	
	
	print("Loading Style");
	// Load Fighting Style
	db_get_field_assoc(res, "FightStyle", iString, sizeof(iString));
	print("Read data from result of field Style");
	Player[playerid][FightStyle] = strval(iString);
	print("Set it to Player Style var");
	SetPlayerFightingStyle(playerid, Player[playerid][FightStyle]);
	
	print("Loading DeathMessages");
	// Load Death Messages
	db_get_field_assoc(res, "DeathMessage", iString, sizeof(iString));
	print("Read data from result of field DeathMessage");
	format(DeathMessageStr[playerid], 64, "%s", iString);
	printf("Done formattinhg | Size: %d | Data: %s", strlen(iString), iString);

	// Get current IP address
	new IP[MAX_PLAYER_NAME];
	GetPlayerIp(playerid, IP, sizeof(IP));

	// Update players table with new IP address for auto login if they reconnect.
	format(iString, sizeof(iString), "UPDATE `Players` SET `IP` = '%s' WHERE `Name` = '%s'", IP, Player[playerid][Name]);
	db_free_result(db_query(sqliteconnection, iString));


    Player[playerid][Logged] = true;

   	if(Player[playerid][RadioID] == 1) PlayAudioStreamForPlayer(playerid, link1);
   	if(Player[playerid][RadioID] == 2) PlayAudioStreamForPlayer(playerid, link2);
   	if(Player[playerid][RadioID] == 3) PlayAudioStreamForPlayer(playerid, link3);
   	if(Player[playerid][RadioID] == 4) PlayAudioStreamForPlayer(playerid, link4);
   	if(Player[playerid][RadioID] == 5) PlayAudioStreamForPlayer(playerid, link5);
   	if(Player[playerid][RadioID] == 6) PlayAudioStreamForPlayer(playerid, link6);
   	if(Player[playerid][RadioID] == 7) PlayAudioStreamForPlayer(playerid, link7);
   	if(Player[playerid][RadioID] == 8) PlayAudioStreamForPlayer(playerid, link8);
   	if(Player[playerid][RadioID] == 9) PlayAudioStreamForPlayer(playerid, link9);
   	if(Player[playerid][RadioID] == 10) PlayAudioStreamForPlayer(playerid, link10);

	#if INTROTEXT == 0
	if(ESLMode == false) {
		SetTimerEx("SpawnConnectedPlayer", 250, 0, "dd", playerid, 0);
	}
	else
	{
		SetTimerEx("ShowESLHelpDiag", 2000, false, "i", playerid);
	}
	//SpawnConnectedPlayer(playerid, 0);
	#else
    //OnPlayerRequestClass(playerid, 0);
	#endif
}

#endif

#if XMAS == 1

#define MAX_SNOW_OBJECTS    3
#define SNOW_UPDATE_INTERVAL     850

#define MAX_SLOTS MAX_PLAYERS

#define ploop(%0)			for(new %0 = 0; %0 < MAX_SLOTS; %0++) if(IsPlayerConnected(%0))
#define CB:%0(%1)           forward %0(%1); public %0(%1)

new bool:snowOn[MAX_SLOTS char],
	snowObject[MAX_SLOTS][MAX_SNOW_OBJECTS],
	updateTimer[MAX_SLOTS char]
;

Snow_OnDisconnect(playerid)
{
	if(snowOn{playerid})
	{
	    for(new i = 0; i < MAX_SNOW_OBJECTS; i++) DestroyDynamicObject(snowObject[playerid][i]);
		snowOn{playerid} = false;
		KillTimer(updateTimer{playerid});
	}
	return 1;
}

PlayRandomXmasSong(playerid)
{
	new i = random(4);
	switch(i)
	{
	    case 0:
	    {
	        PlayAudioStreamForPlayer(playerid, "http://mp3.ecsmedia.pl/track/music/00/00/04/40/65351932/1/6_30.mp3");
	    }
	    case 1:
	    {
            PlayAudioStreamForPlayer(playerid, "http://a.tumblr.com/tumblr_lvt3rdshTe1r7b27vo1.mp3");
	    }
	    case 2:
	    {
            PlayAudioStreamForPlayer(playerid, "http://www.panicstream.com/streams/temp/xmas/ultimate/1-02%20-%20Jingle%20Bell%20Rock.mp3");
	    }
	    case 3:
	    {
            PlayAudioStreamForPlayer(playerid, "http://www.turnbacktogod.com/wp-content/uploads/2008/12/rockin-around-the-christmas-tree.mp3");
	    }
	}
	return 1;
}

CB:UpdateSnow(playerid)
{
	if(!snowOn{playerid}) return 0;
	new Float:pPos[3];
	GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
	for(new i = 0; i < MAX_SNOW_OBJECTS; i++) SetDynamicObjectPos(snowObject[playerid][i], pPos[0] + random(25), pPos[1] + random(25), pPos[2] - 5 + random(10));
	return 1;
}

stock CreateSnow(playerid)
{
	if(snowOn{playerid}) return 0;
	new Float:pPos[3];
	GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
	for(new i = 0; i < MAX_SNOW_OBJECTS; i++) snowObject[playerid][i] = CreateDynamicObject(18864, pPos[0] + random(25), pPos[1] + random (25), pPos[2] - 5 + random(10), random(280), random(280), 0, -1, -1, playerid);
	snowOn{playerid} = true;
	updateTimer{playerid} = SetTimerEx("UpdateSnow", SNOW_UPDATE_INTERVAL, true, "i", playerid);
	return 1;
}

stock DeleteSnow(playerid)
{
	if(!snowOn{playerid}) return 0;
	for(new i = 0; i < MAX_SNOW_OBJECTS; i++) DestroyDynamicObject(snowObject[playerid][i]);
	KillTimer(updateTimer{playerid});
	snowOn{playerid} = false;
	return 1;
}

CMD:snow(playerid, params[])
{
	if(snowOn{playerid})
	{
	    DeleteSnow(playerid);
	    SendClientMessage(playerid, -1, "It's not snowing anymore now.");
	}
	else
	{
	    CreateSnow(playerid);
	    SendClientMessage(playerid, -1, "Let it snow, let it snow, let it snow!");
	}
	return 1;
}


/////////////////////////////////////

#define MAX_XMASTREES 20

enum XmasTrees
{
	XmasTreeX,
    Float:XmasX,
    Float:XmasY,
    Float:XmasZ,
    XmasObject1,
    XmasObject2,
    XmasObject3,
    XmasObject4,
    XmasObject5,
    XmasObject6,
    XmasObject7,
    XmasObject8,
    XmasObject9,
    XmasObject10

};
new Treepos[MAX_XMASTREES][XmasTrees];

stock CreateChristmasTree(number, Float:X, Float:Y, Float:Z)
{
	switch(number)
	{
	    case 1:
	    {
			CreateObject(3472,X+0.28564453,Y+0.23718262,Z+27.00000000,0.00000000,0.00000000,230.48021);
			CreateObject(664,X+0.20312500,Y+0.01171875,Z+-3.00000000,0.00000000,0.00000000,0.00000000);
			CreateObject(3472,X+0.45312500,Y+0.51562500,Z+4.00000000,0.00000000,0.00000000,69.7851562);
			CreateObject(3472,X+0.65136719,Y+1.84570312,Z+17.00000000,0.00000000,0.00000000,41.863403);
			CreateObject(7666,X+0.34130859,Y+0.16845703,Z+45.00000000,0.00000000,0.00000000,298.12524);
			CreateObject(7666,X+0.34082031,Y+0.16796875,Z+45.00000000,0.00000000,0.00000000,27.850342);
			CreateObject(3472,X+0.45312500,Y+0.51562500,Z+12.00000000,0.00000000,0.00000000,350.02441);
			CreateObject(3472,X+0.45312500,Y+0.51562500,Z+7.00000000,0.00000000,0.00000000,30.0805664);
			CreateObject(3472,X+0.45312500,Y+0.51562500,Z+22.00000000,0.00000000,0.00000000,230.47119);
			CreateObject(1262,X+0.15039062,Y+0.57128906,Z+29.45285416,0.00000000,0.00000000,162.90527);
		}
		case 2:
		{
			for(new i = 0; i < sizeof(Treepos); i++)
		    {
		        if(Treepos[i][XmasTreeX] == 0)
		        {
		            Treepos[i][XmasTreeX]=1;
		            Treepos[i][XmasX]=X;
		            Treepos[i][XmasY]=Y;
		            Treepos[i][XmasZ]=Z;
		            Treepos[i][XmasObject1] = CreateObject(19076, X, Y, Z-1.0,0,0,300);
		            Treepos[i][XmasObject2] = CreateObject(19054, X, Y+1.0, Z-0.4,0,0,300);
		            Treepos[i][XmasObject3] = CreateObject(19058, X+1.0, Y, Z-0.4,0,0,300);
		            Treepos[i][XmasObject4] = CreateObject(19056, X, Y-1.0, Z-0.4,0,0,300);
		            Treepos[i][XmasObject5] = CreateObject(19057, X-1.0, Y, Z-0.4,0,0,300);
		            Treepos[i][XmasObject6] = CreateObject(19058, X-1.5, Y+1.5, Z-1.0,0,0,300);
		            Treepos[i][XmasObject7] = CreateObject(19055, X+1.5, Y-1.5, Z-1.0,0,0,300);
		            Treepos[i][XmasObject8] = CreateObject(19057, X+1.5, Y+1.5, Z-1.0,0,0,300);
		            Treepos[i][XmasObject9] = CreateObject(19054, X-1.5, Y-1.5, Z-1.0,0,0,300);
		            Treepos[i][XmasObject10] = CreateObject(3526, X, Y, Z-1.0,0,0,300);
		        }
		    }
		}
		case 3:
		{
			CreateObject(19076, X, Y, Z,   0.00, 0.00, 0.00);
			CreateObject(19054, X+0.37, Y+2.38, Z,   0.00, 0.00, 0.00);
			CreateObject(19055, X-1.18, Y-1.18, Z,   0.00, 0.00, 0.00);
			CreateObject(19056, X+1.94, Y-1.34, Z,   0.00, 0.00, 0.00);
			CreateObject(19057, X+1.67, Y+1.52, Z,   0.00, 0.00, 0.00);
		}
	}
}

stock CreateChristmasLights(Float:x, Float:y, Float:z)
{
	CreateObject(3472, x,y,z,0,0,300);
	CreateObject(3472, x,y,z+4,0,0,300);
}

stock GiveChristmasHat(playerid,number)
{
	switch(number)
	{
		case 1:
		{
		    if(IsPlayerAttachedObjectSlotUsed(playerid,1))
				RemovePlayerAttachedObject(playerid,1);
		    SetPlayerAttachedObject(playerid, 1, 19065, 15, -0.025, -0.04, 0.23, 0, 0, 270, 2, 2, 2);
		}
		case 2:
		{
			if(IsPlayerAttachedObjectSlotUsed(playerid,1))
				RemovePlayerAttachedObject(playerid,1);
			SetPlayerAttachedObject(playerid, 1, 19065, 2, 0.120000, 0.040000, -0.003500, 0, 100, 100, 1.4, 1.4, 1.4);
		}
	}
}

CMD:xmascmds(playerid, params[])
{
	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Xmas Commands", "/xmasmusic - /stopxmasmusic - /snow", "OK", "");
	return 1;
}


CMD:removehat(playerid, params[])
{
    if(IsPlayerAttachedObjectSlotUsed(playerid,1))
		RemovePlayerAttachedObject(playerid,1);
	return 1;
}


CMD:xmasmusic(playerid, params[])
{
	PlayRandomXmasSong(playerid);
	return 1;
}

CMD:stopxmasmusic(playerid, params[])
{
	StopAudioStreamForPlayer(playerid);
	return 1;
}

CreateXmasObjects()
{
    //------------SF christmas trees---------
	CreateChristmasTree(2,-1549.0511,585.0486,7.1797);
	CreateChristmasTree(1,-1548.4778,646.2723,7.1875);
	CreateChristmasTree(2,-1568.5579,828.9424,7.1875);
	CreateChristmasTree(1,-1991.4308,89.8115,27.6799);
	CreateChristmasTree(2,-1992.0767,205.6595,27.6875);
	CreateChristmasTree(1,-2633.8052,607.2700,14.4531);
	CreateChristmasTree(2,-2675.2756,607.2688,14.4545);
	CreateChristmasTree(1,-2600.0955,1384.2037,7.1607);
	CreateChristmasTree(2,-2608.5371,1348.2877,7.1953);

	//----------------------SF big christmas tree with objects around-------------------
	CreateObject(664,-2707.30761719,376.57815552,3.96888542,0.00000000,0.00000000,44.00000000);
	CreateObject(664,-2706.46826172,375.02407837,3.96923542,0.00000000,0.00000000,349.99475098);
	CreateObject(664,-2707.12426758,379.04116821,3.96928978,0.00000000,0.00000000,97.99145508);
	CreateObject(2486,-2708.43017578,373.17453003,4.97945309,0.00000000,0.00000000,354.00000000);
	CreateObject(2485,-2709.13354492,374.46206665,4.97945309,0.00000000,0.00000000,0.00000000);
	CreateObject(2484,-2707.38378906,372.33828735,4.80856562,0.00000000,0.00000000,0.00000000);
	CreateObject(2454,-2702.79663086,375.01049805,3.97252083,0.00000000,0.00000000,0.00000000);
	CreateObject(2454,-2702.54785156,377.06506348,3.96868849,0.00000000,0.00000000,89.99548340);
	CreateObject(2454,-2709.84130859,378.29168701,3.96876383,0.00000000,0.00000000,205.99450684);
	CreateObject(14870,-2706.71582031,373.61630249,11.54687119,0.00000000,0.00000000,0.00000000);
	CreateObject(14870,-2704.56494141,373.26446533,24.75610924,0.00000000,0.00000000,296.00000000);
	CreateObject(14870,-2705.25488281,373.35855103,15.12049675,0.00000000,0.00000000,17.99914551);
	CreateObject(14870,-2706.72265625,364.66778564,24.47894669,0.00000000,0.00000000,215.99560547);
	CreateObject(14870,-2707.57861328,381.17886353,19.09156799,0.00000000,0.00000000,155.99121094);
	CreateObject(14870,-2704.77075195,377.04089355,20.49364662,0.00000000,0.00000000,155.98937988);
	CreateObject(3877,-2707.77490234,373.80313110,16.76913071,271.00000000,0.00000000,152.00000000);
	CreateObject(3877,-2708.58154297,379.04061890,15.68122482,270.99975586,0.00000000,107.99584961);
	CreateObject(3877,-2707.08251953,381.24850464,16.50436783,270.99426270,0.00000000,21.99560547);
	CreateObject(3877,-2704.91479492,376.21548462,17.06835556,270.99426270,0.00000000,291.99462891);
	CreateObject(3877,-2704.30419922,374.74246216,15.31949806,270.99426270,0.00000000,235.99462891);
	CreateObject(3877,-2706.62670898,373.60058594,19.21698761,270.99426270,0.00000000,181.99182129);
	CreateObject(3877,-2706.60522461,373.59677124,25.51964188,270.99426270,0.00000000,181.98852539);
	CreateObject(3877,-2708.80078125,376.48785400,25.34601974,270.99426270,0.00000000,143.98852539);
	CreateObject(3877,-2708.76245117,380.32965088,22.49613190,270.99426270,0.00000000,49.98681641);
	CreateObject(3877,-2705.79125977,379.82800293,20.90824699,270.99426270,0.00000000,283.98229980);
	CreateObject(3534,-2714.23632812,378.60433960,15.30849075,0.00000000,0.00000000,0.00000000);
	CreateObject(3534,-2707.74877930,375.39852905,16.67776489,0.00000000,0.00000000,0.00000000);
	CreateObject(3534,-2704.40332031,378.12808228,11.28053474,0.00000000,0.00000000,0.00000000);
	CreateObject(3534,-2708.10400391,381.10507202,12.84053516,0.00000000,0.00000000,0.00000000);
	CreateObject(3534,-2707.80346680,375.45501709,14.76138401,0.00000000,0.00000000,0.00000000);
	CreateObject(3534,-2708.46166992,378.18728638,12.28053474,0.00000000,0.00000000,0.00000000);
	CreateObject(3472,-2707.83056641,373.84539795,18.48528862,0.00000000,0.00000000,0.00000000);
	CreateObject(3472,-2707.92895508,375.27389526,15.86812496,0.00000000,0.00000000,0.00000000);
	CreateObject(3472,-2708.50781250,378.51614380,17.39788818,0.00000000,0.00000000,0.00000000);
	CreateObject(3472,-2706.96020508,381.26565552,24.25031090,13.00000000,194.00000000,314.00000000);
	CreateObject(3472,-2705.07421875,376.74777222,30.69754219,12.99682617,193.99658203,257.99475098);
	CreateObject(3534,-2713.55468750,363.66510010,21.78607178,0.00000000,0.00000000,0.00000000);
	CreateObject(3534,-2705.38818359,358.29653931,20.97453690,0.00000000,0.00000000,0.00000000);
	CreateObject(3534,-2693.00292969,367.05838013,19.85726357,0.00000000,0.00000000,0.00000000);
	CreateObject(3534,-2702.90283203,383.85583496,20.11940193,0.00000000,0.00000000,0.00000000);
	CreateObject(3534,-2699.66821289,383.50790405,15.66015148,0.00000000,0.00000000,0.00000000);
	CreateObject(3534,-2698.00952148,380.52221680,16.66557312,0.00000000,0.00000000,0.00000000);
	CreateObject(3534,-2701.49658203,375.21389771,17.21406555,0.00000000,0.00000000,0.00000000);
	CreateObject(3534,-2713.64453125,370.86132812,18.92479324,0.00000000,0.00000000,0.00000000);
	CreateObject(3472,-2708.59521484,379.13803101,30.03047752,13.00000000,194.00000000,0.00000000);
	CreateObject(3472,-2708.01733398,375.67639160,25.94305611,12.99682617,193.99658203,96.00000000);
	CreateObject(3534,-2720.61157227,384.60675049,22.78135681,0.00000000,0.00000000,0.00000000);
	CreateObject(3534,-2715.02368164,385.54934692,20.23530579,0.00000000,0.00000000,0.00000000);
	CreateObject(3534,-2718.37109375,377.79827881,19.75296783,0.00000000,0.00000000,0.00000000);
	CreateObject(3534,-2725.89916992,375.05877686,21.18688011,0.00000000,0.00000000,0.00000000);
	CreateObject(3534,-2698.17187500,373.01635742,15.73170090,0.00000000,0.00000000,0.00000000);
	CreateObject(3534,-2701.84106445,368.41925049,17.12574768,0.00000000,0.00000000,0.00000000);
	CreateObject(3472,-2705.81225586,373.45687866,22.08354568,0.00000000,0.00000000,0.00000000);
	CreateObject(3472,-2709.46386719,374.91137695,25.64812851,13.00000000,194.00000000,68.00000000);
	CreateObject(3472,-2708.39379883,381.06442261,21.48554802,0.00000000,0.00000000,0.00000000);
	CreateObject(3472,-2705.72656250,379.36645508,23.78524208,13.00000000,194.00000000,216.00000000);
	CreateObject(3472,-2705.59863281,373.21707153,24.72511101,12.99682617,193.99658203,183.99670410);
	CreateObject(3472,-2708.55273438,378.83599854,27.33802032,12.99682617,193.99108887,77.99353027);
	CreateObject(3472,-2707.00610352,381.25921631,28.51313019,12.99682617,193.99108887,283.99194336);
	CreateObject(3534,-2704.69604492,384.71276855,16.07434654,0.00000000,0.00000000,0.00000000);
	CreateObject(3534,-2708.01049805,365.46545410,20.03053093,0.00000000,0.00000000,0.00000000);
	CreateObject(3534,-2699.31030273,365.08697510,21.65671539,0.00000000,0.00000000,0.00000000);
	CreateObject(3534,-2711.09155273,367.46783447,25.64758110,0.00000000,0.00000000,0.00000000);
	CreateObject(3472,-2708.09887695,373.47668457,32.40806961,12.99682617,193.99658203,103.99987793);
	CreateObject(3472,-2705.20361328,373.34951782,32.51392365,12.99682617,193.99108887,155.99658203);
	CreateObject(3472,-2701.80981445,378.32183838,26.66471672,12.99682617,193.99108887,229.99487305);
	CreateObject(3038,-2706.46289062,373.57168579,10.39013863,99.00000000,0.00000000,48.00000000);
	CreateObject(3038,-2704.14379883,375.65164185,7.62436914,98.99783325,0.00000000,165.99926758);
	CreateObject(3038,-2705.21508789,377.54974365,11.81369305,98.99780273,0.00000000,183.99792480);
	CreateObject(3038,-2705.92187500,380.75765991,11.07896423,98.99780273,0.00000000,189.99353027);
	CreateObject(3038,-2708.19018555,381.09298706,7.86560822,98.99780273,0.00000000,223.99206543);
	CreateObject(3038,-2708.62670898,379.36236572,7.49907446,98.99780273,0.00000000,179.98925781);
	CreateObject(3038,-2708.48266602,377.44958496,13.01852798,98.99780273,0.00000000,179.98901367);
	CreateObject(3038,-2706.24975586,373.53408813,7.27033615,98.99780273,0.00000000,179.98901367);
	CreateObject(970,-2710.69140625,371.59402466,3.94076157,0.00000000,0.00000000,314.00000000);
	CreateObject(970,-2706.46606445,370.02069092,3.93623304,0.00000000,0.00000000,359.99475098);
	CreateObject(970,-2701.73046875,371.75238037,3.94078469,0.00000000,0.00000000,43.99450684);
	CreateObject(970,-2701.80297852,380.86795044,3.92647910,0.00000000,0.00000000,137.98925781);
	CreateObject(970,-2703.66650391,376.11059570,4.60033703,275.00000000,0.00000000,87.98449707);
	CreateObject(970,-2706.29931641,382.41464233,3.91866851,0.00000000,0.00000000,179.98376465);
	CreateObject(970,-2710.92382812,380.47610474,3.91866851,0.00000000,0.00000000,223.98352051);
	CreateObject(970,-2712.72534180,376.12063599,3.92792559,0.00000000,0.00000000,269.97827148);
	CreateObject(3877,-2712.58178711,378.66693115,5.03292847,0.00000000,0.00000000,0.00000000);
	CreateObject(3877,-2712.51611328,373.55255127,5.05479240,0.00000000,0.00000000,0.00000000);
	CreateObject(3877,-2708.97583008,370.20312500,5.04991341,0.00000000,0.00000000,0.00000000);
	CreateObject(3877,-2703.76489258,370.20312500,5.04991341,0.00000000,0.00000000,0.00000000);
	CreateObject(3877,-2700.09375000,373.60821533,5.04971313,0.00000000,0.00000000,0.00000000);
	CreateObject(3877,-2700.02294922,379.27618408,5.04073906,0.00000000,0.00000000,0.00000000);
	CreateObject(3877,-2703.79223633,382.11779785,5.03292847,0.00000000,0.00000000,0.00000000);
	CreateObject(3877,-2708.85937500,382.00000000,5.03292847,0.00000000,0.00000000,0.00000000);
	CreateObject(2124,-2703.68579102,376.19537354,5.58674717,0.00000000,0.00000000,178.00000000);
	CreateObject(1472,-2703.39843750,376.12493896,3.99562263,0.00000000,0.00000000,90.00000000);
	CreateObject(1577,-2703.58471680,378.94894409,4.16833305,0.00000000,0.00000000,0.00000000);
	CreateObject(2710,-2702.46582031,376.82360840,5.10903502,0.00000000,0.00000000,0.00000000);
	CreateObject(2057,-2704.42260742,379.12969971,5.14990664,0.00000000,0.00000000,336.00000000);
	CreateObject(2035,-2702.76123047,375.29367065,5.01246452,0.00000000,0.00000000,0.00000000);
	CreateObject(1654,-2703.45800781,378.24755859,5.53104591,0.00000000,0.00000000,0.00000000);
	CreateObject(1579,-2702.21606445,374.08361816,4.37533331,0.00000000,0.00000000,0.00000000);
	CreateObject(3522,-2699.57617188,376.09201050,3.45473099,0.00000000,0.00000000,0.00000000);
	CreateObject(2057,-2703.59228516,374.04187012,5.14990664,0.00000000,0.00000000,335.99487305);
	CreateObject(1577,-2702.17285156,374.61962891,4.38290453,0.00000000,0.00000000,0.00000000);
	CreateObject(1827,-2702.13793945,374.12081909,3.97474098,0.00000000,0.00000000,0.00000000);
	CreateObject(1954,-2701.78198242,373.78027344,4.69306993,0.00000000,0.00000000,46.00000000);
	CreateObject(2484,-2702.41088867,378.17538452,4.69339085,0.00000000,0.00000000,90.00000000);
	CreateObject(2484,-2704.55395508,376.18743896,6.87564707,0.00000000,0.00000000,90.00000000);
	CreateObject(2484,-2709.94458008,374.98107910,4.80514002,0.00000000,0.00000000,116.00000000);
	CreateObject(2485,-2702.60839844,377.15664673,5.00863266,0.00000000,0.00000000,126.00000000);
	CreateObject(2464,-2701.64501953,375.14590454,4.11610460,0.00000000,0.00000000,290.00000000);
	CreateObject(2464,-2701.89282227,377.39620972,4.11152649,0.00000000,0.00000000,257.99511719);
	CreateObject(2464,-2703.32958984,379.53802490,4.10850334,0.00000000,0.00000000,309.99194336);
	CreateObject(2464,-2709.75537109,378.10208130,5.15171289,0.00000000,0.00000000,63.99023438);
	CreateObject(2464,-2710.69531250,375.15093994,4.11727858,0.00000000,0.00000000,91.98986816);
	CreateObject(2464,-2708.88745117,372.80325317,4.11450672,0.00000000,0.00000000,105.98852539);
	CreateObject(2464,-2703.42065430,372.72836304,4.11189795,0.00000000,0.00000000,219.98510742);
	CreateObject(2466,-2705.27709961,377.61380005,6.06908226,0.00000000,0.00000000,94.00000000);
	CreateObject(2466,-2701.61425781,374.35293579,4.55010271,0.00000000,0.00000000,117.99902344);
	CreateObject(2477,-2702.24511719,378.58636475,4.41969681,0.00000000,0.00000000,84.00000000);
	CreateObject(2477,-2705.17846680,371.86395264,4.53150940,0.00000000,0.00000000,1.99597168);
	CreateObject(2477,-2710.75488281,376.70098877,4.53381872,0.00000000,0.00000000,275.99401855);
	CreateObject(970,-2697.26513672,373.62747192,3.93238306,0.00000000,0.00000000,2.00000000);
	CreateObject(970,-2697.31054688,379.07852173,3.92647910,0.00000000,0.00000000,359.99902344);
	CreateObject(970,-2692.37377930,373.79226685,3.92839718,0.00000000,0.00000000,359.99450684);
	CreateObject(970,-2692.45971680,379.13003540,3.91866851,0.00000000,0.00000000,359.99450684);
	CreateObject(3877,-2694.81933594,373.61663818,5.04487801,0.00000000,0.00000000,0.00000000);
	CreateObject(3877,-2695.22143555,379.01626587,5.03292847,0.00000000,0.00000000,0.00000000);
	CreateObject(3877,-2690.27124023,373.53881836,5.04664612,0.00000000,0.00000000,0.00000000);
	CreateObject(3877,-2690.11132812,379.28613281,5.04073906,0.00000000,0.00000000,0.00000000);
//-----------------------ANOTHER CHRISTMAS TREE -------------------------------------------------------
	CreateObject(664, -1998.0460205078, 148.79306030273, 25.906070709229, 0, 0, 340);
	CreateObject(664, -1998.0458984375, 148.79296875, 25.906070709229, 0, 0, 325.99938964844);
	CreateObject(664, -1998.0458984375, 148.79296875, 25.906070709229, 0, 0, 303.99731445313);
	CreateObject(664, -1998.0458984375, 148.79296875, 25.906070709229, 0, 0, 287.99719238281);
	CreateObject(3472, -1997.1529541016, 148.4162902832, 32.6875, 0, 0, 0);
	CreateObject(3472, -1997.15234375, 148.416015625, 36.607498168945, 0, 0, 0);
	CreateObject(3472, -1997.15234375, 148.416015625, 44.357498168945, 0, 0, 0);
	CreateObject(3472, -1997.4702148438, 148.65103149414, 55.107498168945, 0, 0, 0);
	CreateObject(3472, -1998.1090087891, 148.44111633301, 50.607498168945, 40, 0, 0);
	CreateObject(3472, -2001.8745117188, 148.5101776123, 47.607498168945, 39.995727539063, 0, 90);
	CreateObject(3472, -2000.2878417969, 145.7417755127, 50.607498168945, 39.995727539063, 0, 170);
	CreateObject(3472, -1996.1226806641, 149.14767456055, 44.607498168945, 39.995727539063, 0, 277.99694824219);
	CreateObject(3472, -1996.2100830078, 149.05192565918, 41.607498168945, 39.995727539063, 0, 277.99255371094);
	CreateObject(3472, -2000.4672851563, 151.34553527832, 41.607498168945, 39.995727539063, 0, 39.992553710938);
	CreateObject(3472, -1999.8195800781, 147.89109802246, 41.607498168945, 39.995727539063, 0, 127.990234375);
	CreateObject(3472, -1998.1652832031, 147.17254638672, 41.607498168945, 39.995727539063, 0, 207.98522949219);
	CreateObject(3472, -1997.15234375, 148.416015625, 28.857498168945, 0, 0, 310);
	CreateObject(3515, -1998.8930664063, 144.0747833252, 27.581159591675, 0, 0, 0);
	CreateObject(3515, -1998.8284912109, 154.17958068848, 27.831155776978, 0, 0, 0);
	CreateObject(3534, -1998.560546875, 141.37292480469, 48.970138549805, 28, 0, 352);
	CreateObject(3534, -1993.6901855469, 142.69296264648, 48.970138549805, 27.998657226563, 0, 29.996459960938);
	CreateObject(3534, -1991.8308105469, 148.89370727539, 48.970138549805, 27.998657226563, 0, 85.99267578125);
	CreateObject(3534, -1995.1551513672, 155.28498840332, 48.970138549805, 27.998657226563, 0, 123.98999023438);
	CreateObject(3534, -1999.73828125, 155.6160736084, 48.970138549805, 27.998657226563, 0, 159.98620605469);
	CreateObject(3534, -2004.7911376953, 149.40711975098, 48.970138549805, 27.998657226563, 0, 215.98291015625);
	CreateObject(3534, -2002.8659667969, 144.27090454102, 48.970138549805, 27.998657226563, 0, 277.98022460938);
	CreateObject(3534, -2001.7861328125, 145.97839355469, 56.220138549805, 27.998657226563, 0, 291.97607421875);
	CreateObject(3534, -2001.3598632813, 150.37046813965, 56.220138549805, 27.998657226563, 0, 253.97265625);
	CreateObject(3534, -1997.0113525391, 150.35415649414, 55.470138549805, 27.998657226563, 0, 177.97094726563);
	CreateObject(3534, -1995.1121826172, 147.66877746582, 55.470138549805, 27.998657226563, 0, 161.96752929688);
	CreateObject(3534, -1997.7120361328, 144.8631439209, 56.220138549805, 27.998657226563, 0, 3.97265625);
	CreateObject(3534, -2000.2390136719, 144.6975402832, 40.745124816895, 356.92108154297, 167.98248291016, 24.167358398438);
	CreateObject(3534, -2002.3602294922, 147.19053649902, 40.745124816895, 356.91833496094, 167.98095703125, 24.164428710938);
	CreateObject(3534, -2002.7614746094, 150.74235534668, 40.745124816895, 356.91833496094, 167.98095703125, 24.164428710938);
	CreateObject(3534, -2001.1950683594, 153.51251220703, 40.745124816895, 356.91833496094, 167.98095703125, 24.164428710938);
	CreateObject(3534, -1999.08984375, 154.86074829102, 40.745124816895, 356.91833496094, 167.98095703125, 24.164428710938);
	CreateObject(3534, -1994.4105224609, 155.89538574219, 40.745124816895, 356.91833496094, 167.98095703125, 24.164428710938);
	CreateObject(3534, -1990.2229003906, 153.66470336914, 40.745124816895, 356.91833496094, 167.98095703125, 24.164428710938);
	CreateObject(3534, -1989.1068115234, 150.2596282959, 40.745124816895, 356.91833496094, 167.98095703125, 24.164428710938);
	CreateObject(3534, -1990.0328369141, 144.34252929688, 40.745124816895, 356.91833496094, 167.98095703125, 24.164428710938);
	CreateObject(3534, -1992.7410888672, 140.88737487793, 40.745124816895, 356.91833496094, 167.98095703125, 24.164428710938);
	CreateObject(3534, -1996.2249755859, 139.30950927734, 40.745124816895, 356.91833496094, 167.98095703125, 24.164428710938);
	CreateObject(7666, -1998.1800537109, 148.45513916016, 74.819854736328, 0, 0, 0);
	CreateObject(7666, -1998.1796875, 148.455078125, 74.819854736328, 0, 0, 280);
	CreateObject(3472, -1997.4697265625, 148.650390625, 60.357498168945, 0, 0, 0);

//--------------------------------------SF circuslamposts----------------------------------------
	CreateChristmasLights(-1293.96105957,471.57125854,6.18750000);
	CreateChristmasLights(-1260.64416504,444.49423218,6.18750000);
	CreateChristmasLights(-1229.65881348,453.10644531,6.18750000);
	CreateChristmasLights(-1373.04516602,475.83438110,6.18750000);
	CreateChristmasLights(-1478.45825195,460.13754272,6.18750000);
	CreateChristmasLights(-1529.34753418,515.56933594,6.17968750);
	CreateChristmasLights(-1567.61364746,549.51361084,6.17968750);
	CreateChristmasLights(-1524.52832031,660.17004395,7.41608429);
	CreateChristmasLights(-1499.36853027,776.62878418,6.18531609);
	CreateChristmasLights(-1550.60546875,781.25585938,6.26562500);
	CreateChristmasLights(-1520.44885254,815.79431152,6.18750000);
	CreateChristmasLights(-1581.40991211,822.94024658,6.18750000);
	CreateChristmasLights(-1546.51574707,913.64306641,6.03906250);
	CreateChristmasLights(-1518.42053223,982.31994629,6.18750000);
	CreateChristmasLights(-1550.61291504,961.41210938,6.26562500);
	CreateChristmasLights(-1579.41711426,998.09582520,6.26562500);
	CreateChristmasLights(-1562.93664551,1053.31579590,6.18750000);
	CreateChristmasLights(-1592.88037109,1104.89196777,6.18750000);
	CreateChristmasLights(-1709.11193848,623.88732910,23.89062500);
	CreateChristmasLights(-1724.10241699,740.69903564,23.89062500);
	CreateChristmasLights(-1660.48291016,742.40258789,16.72198486);
	CreateChristmasLights(-1651.47204590,723.47357178,15.10015297);
	CreateChristmasLights(-1615.34167480,737.95001221,12.58959675);
	CreateChristmasLights(-1607.08288574,723.17523193,11.25325871);
	CreateChristmasLights(-1624.35449219,825.00469971,6.38964462);
	CreateChristmasLights(-1966.59936523,1295.37219238,6.18750000);
	CreateChristmasLights(-1967.86145020,1330.51306152,6.18750000);
	CreateChristmasLights(-2032.22045898,1324.98010254,6.27741623);
	CreateChristmasLights(-2059.11791992,1295.58276367,6.33593750);
	CreateChristmasLights(-2077.17700195,1257.81030273,11.29933167);
	CreateChristmasLights(-2089.61059570,1337.08764648,7.75382042);
	CreateChristmasLights(-2134.23706055,1320.89282227,6.18750000);
	CreateChristmasLights(-2173.73852539,1340.86975098,7.54163265);
	CreateChristmasLights(-2205.13208008,1321.81726074,6.18750000);
	CreateChristmasLights(-2249.03027344,1341.90502930,6.18750000);
	CreateChristmasLights(-2340.65991211,1363.66772461,6.27034760);
	CreateChristmasLights(-2613.32861328,1407.99890137,6.14962482);
	CreateChristmasLights(-2658.95239258,1281.64196777,6.18750048);
	CreateChristmasLights(-2694.06298828,1298.85168457,6.18109035);
	CreateChristmasLights(-2740.91113281,1280.98754883,5.82114124);
	CreateChristmasLights(-2768.25146484,1303.40466309,5.25621080);
	CreateChristmasLights(-2813.50683594,1275.10961914,4.72656250);
	CreateChristmasLights(-2634.42016602,607.13775635,13.45312500);
	CreateChristmasLights(-2697.69799805,619.00164795,13.45312500);
	CreateChristmasLights(-2700.64990234,582.93231201,14.81543350);
	CreateChristmasLights(-2700.76367188,410.51034546,3.36718750);
	CreateChristmasLights(-2721.14721680,411.87704468,3.17631340);
	CreateChristmasLights(-2698.97534180,343.98141479,3.41406250);
	CreateChristmasLights(-2713.60205078,342.31127930,3.41406250);
	CreateChristmasLights(-2705.25708008,289.91201782,3.28906250);
	CreateChristmasLights(-2066.05908203,69.35791016,27.39062500);
	CreateChristmasLights(-2051.78149414,116.07773590,28.08853531);
	CreateChristmasLights(-2022.22412109,116.58210754,26.92206764);
	CreateChristmasLights(-1972.75964355,332.83102417,33.53115845);
	CreateChristmasLights(-1985.43359375,437.95660400,34.17187500);
	CreateChristmasLights(-1985.44323730,437.71679688,34.28994370);
	CreateChristmasLights(-1917.57788086,584.41796875,34.22170639);
	CreateChristmasLights(-1911.19750977,723.03210449,44.44531250);
	CreateChristmasLights(-2035.43908691,713.39001465,51.75196457);
	CreateChristmasLights(-2024.85827637,679.72918701,47.81198883);
	CreateChristmasLights(-1983.20715332,880.57531738,44.20312500);
	CreateChristmasLights(-1912.47937012,876.44409180,34.24229050);
	CreateChristmasLights(-2015.01782227,584.51171875,34.17187500);
	CreateChristmasLights(-1958.47534180,596.22546387,34.17187500);
	CreateChristmasLights(-2029.48034668,496.16537476,34.17187500);
	CreateChristmasLights(-2127.29736328,497.09268188,34.17187500);
	CreateChristmasLights(-2244.83691406,532.76287842,34.14505005);
	CreateChristmasLights(-2261.08129883,746.97790527,48.29687500);
	return 1;
}


#endif

#if OBJECTS == 1
LoadObjects()
{
//L'Isle de Los Santos created by Rickeman//

//	Vehicles:
	AddStaticVehicleEx(531,3072.0000000,-364.6000100,1.8000000,307.7490000,37,37,15); //Tractor
	AddStaticVehicleEx(532,3101.1999500,-358.3999900,2.9000000,95.4990000,-1,-1,15); //Combine
	AddStaticVehicleEx(420,3597.1001000,-387.6000100,2.0000000,5.7460000,215,142,15); //Taxi
	AddStaticVehicleEx(420,3600.5000000,-387.2000100,2.0000000,5.7460000,215,142,15); //Taxi
	AddStaticVehicleEx(420,3593.8999000,-388.0000000,2.0000000,5.7460000,215,142,15); //Taxi
	AddStaticVehicleEx(515,3779.8999000,-264.2000100,3.2000000,6.4980000,39,47,15); //Roadtrain
	AddStaticVehicleEx(515,3769.8000500,-265.1000100,3.2000000,6.4980000,39,47,15); //Roadtrain
	AddStaticVehicleEx(515,3790.3000500,-262.3999900,3.2000000,6.4980000,39,47,15); //Roadtrain
	AddStaticVehicleEx(435,3773.6001000,-238.6000100,2.7000000,186.2460000,245,245,15); //Trailer 1
	AddStaticVehicleEx(435,3767.3999000,-239.5000000,2.7000000,186.2460000,245,245,15); //Trailer 1
	AddStaticVehicleEx(435,3736.5000000,-243.3000000,2.6000000,187.4930000,245,245,15); //Trailer 1
	AddStaticVehicleEx(455,3754.0000000,-242.6000100,2.5000000,186.4980000,132,148,15); //Flatbed

//	Objects:
	CreateDynamicObject(17656,2871.5000000,-349.0000000,11.5000000,0.0000000,0.0000000,277.7400000); //object(lae2_roads50) (1)
	CreateDynamicObject(17657,2944.6001000,-339.0000000,11.4000000,0.0000000,0.0000000,277.7400000); //object(lae2_roads52) (1)
	CreateDynamicObject(17656,3017.5000000,-329.5000000,7.9000000,0.0000000,0.0000000,97.2240000); //object(lae2_roads50) (2)
	CreateDynamicObject(17639,3102.1001000,-319.7000100,1.1000000,0.0000000,0.0000000,5.9990000); //object(lae2_roads31) (1)
	CreateDynamicObject(17639,3197.0000000,-309.7000100,1.1000000,0.0000000,0.0000000,5.9990000); //object(lae2_roads31) (2)
	CreateDynamicObject(5471,3094.6999500,-364.5000000,-0.3000000,0.0000000,0.0000000,185.9930000); //object(laeidlewood01) (1)
	CreateDynamicObject(17298,3104.3000500,-344.0000000,6.8000000,0.0000000,0.0000000,6.2180000); //object(sjmoldbarn03) (1)
	CreateDynamicObject(17324,3108.1999500,-370.1000100,0.5000000,0.0000000,0.0000000,275.9930000); //object(cw_combbarn) (1)
	CreateDynamicObject(12918,3077.8999000,-372.6000100,0.5000000,0.0000000,0.0000000,95.2460000); //object(sw_haypile05) (1)
	CreateDynamicObject(12918,3072.8999000,-350.7999900,0.4000000,0.0000000,0.0000000,95.2460000); //object(sw_haypile05) (2)
	CreateDynamicObject(12921,3086.8999000,-331.6000100,3.5000000,0.0000000,0.0000000,186.7400000); //object(sw_farment01) (1)
	CreateDynamicObject(13367,3116.6999500,-342.6000100,11.5000000,0.0000000,0.0000000,186.7400000); //object(sw_watertower01) (1)
	CreateDynamicObject(17039,3070.5000000,-363.7999900,0.7000000,0.0000000,0.0000000,303.9970000); //object(cuntw_weebarn1_) (1)
	CreateDynamicObject(3276,3100.3999000,-330.0000000,1.5000000,0.0000000,0.0000000,6.9980000); //object(cxreffencesld) (1)
	CreateDynamicObject(3276,3111.8999000,-328.6000100,1.5000000,0.0000000,0.0000000,6.9980000); //object(cxreffencesld) (2)
	CreateDynamicObject(3276,3121.6001000,-327.3999900,1.5000000,0.0000000,0.0000000,5.7460000); //object(cxreffencesld) (3)
	CreateDynamicObject(3276,3073.0000000,-332.8999900,1.6000000,0.0000000,0.0000000,4.4980000); //object(cxreffencesld) (4)
	CreateDynamicObject(17033,3061.0996100,-340.6992200,-0.2000000,0.0000000,0.0000000,32.9970000); //object(cunt_rockgp2_15) (1)
	CreateDynamicObject(17033,3057.1999500,-354.6000100,-0.4000000,0.0000000,0.0000000,32.9970000); //object(cunt_rockgp2_15) (2)
	CreateDynamicObject(17033,3053.3000500,-367.8999900,-0.9000000,0.0000000,0.0000000,32.9970000); //object(cunt_rockgp2_15) (3)
	CreateDynamicObject(17033,3056.3000500,-378.3999900,-1.6000000,0.0000000,0.0000000,82.9970000); //object(cunt_rockgp2_15) (4)
	CreateDynamicObject(17033,3066.3000500,-382.2999900,-1.8000000,0.0000000,0.0000000,126.9960000); //object(cunt_rockgp2_15) (5)
	CreateDynamicObject(17033,3078.3999000,-384.7000100,-1.4000000,0.0000000,0.0000000,127.4910000); //object(cunt_rockgp2_15) (6)
	CreateDynamicObject(17033,3091.6001000,-388.7999900,-1.5000000,0.0000000,0.0000000,130.7410000); //object(cunt_rockgp2_15) (7)
	CreateDynamicObject(17033,3104.8999000,-391.3999900,-2.4000000,0.0000000,0.0000000,128.9870000); //object(cunt_rockgp2_15) (8)
	CreateDynamicObject(17033,3118.0000000,-393.2000100,-3.0000000,0.0000000,0.0000000,135.2350000); //object(cunt_rockgp2_15) (9)
	CreateDynamicObject(17033,3131.5000000,-391.2998000,-3.5000000,0.0000000,0.0000000,143.2290000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17864,3075.3000500,-297.7999900,1.4000000,0.0000000,0.0000000,6.9980000); //object(comp_puchase) (1)
	CreateDynamicObject(17864,3113.8000500,-293.2000100,1.4000000,0.0000000,0.0000000,6.7400000); //object(comp_puchase) (2)
	CreateDynamicObject(17864,3151.5000000,-288.7999900,1.5000000,0.0000000,0.0000000,6.2240000); //object(comp_puchase) (3)
	CreateDynamicObject(715,3072.8000500,-304.8999900,8.8000000,0.0000000,0.0000000,11.9970000); //object(veg_bevtree3) (1)
	CreateDynamicObject(715,3087.3999000,-293.3999900,9.0000000,0.0000000,0.0000000,11.9920000); //object(veg_bevtree3) (2)
	CreateDynamicObject(715,3090.8999000,-305.2000100,8.8000000,0.0000000,0.0000000,11.9920000); //object(veg_bevtree3) (3)
	CreateDynamicObject(715,3068.8999000,-289.0000000,9.0000000,0.0000000,0.0000000,11.9920000); //object(veg_bevtree3) (4)
	CreateDynamicObject(715,3105.1001000,-287.8999900,9.0000000,0.0000000,0.0000000,11.9920000); //object(veg_bevtree3) (5)
	CreateDynamicObject(715,3116.5000000,-305.5000000,8.7000000,0.0000000,0.0000000,11.9970000); //object(veg_bevtree3) (6)
	CreateDynamicObject(715,3102.3000500,-300.5000000,8.8000000,0.0000000,0.0000000,11.9920000); //object(veg_bevtree3) (7)
	CreateDynamicObject(715,3124.3000500,-289.7000100,9.0000000,0.0000000,0.0000000,11.9920000); //object(veg_bevtree3) (8)
	CreateDynamicObject(715,3130.6001000,-299.7999900,8.7000000,0.0000000,0.0000000,11.9920000); //object(veg_bevtree3) (9)
	CreateDynamicObject(715,3140.8000500,-285.7000100,9.0000000,0.0000000,0.0000000,11.9920000); //object(veg_bevtree3) (10)
	CreateDynamicObject(715,3147.3000500,-299.5000000,8.8000000,0.0000000,0.0000000,11.9920000); //object(veg_bevtree3) (11)
	CreateDynamicObject(715,3161.1001000,-282.3999900,9.1000000,0.0000000,0.0000000,11.9920000); //object(veg_bevtree3) (12)
	CreateDynamicObject(715,3164.0000000,-293.2999900,8.8000000,0.0000000,0.0000000,11.9920000); //object(veg_bevtree3) (13)
	CreateDynamicObject(17864,3190.6999500,-284.8999900,1.5000000,0.0000000,0.0000000,6.2180000); //object(comp_puchase) (4)
	CreateDynamicObject(17864,3229.3999000,-281.0000000,1.4000000,0.0000000,0.0000000,6.2180000); //object(comp_puchase) (5)
	CreateDynamicObject(17864,3148.3999000,-340.6000100,0.9000000,0.0000000,0.0000000,6.2180000); //object(comp_puchase) (6)
	CreateDynamicObject(17864,3188.0000000,-336.2999900,0.9000000,0.0000000,0.0000000,6.2180000); //object(comp_puchase) (7)
	CreateDynamicObject(715,3182.5000000,-296.2999900,8.6000000,0.0000000,0.0000000,3.9940000); //object(veg_bevtree3) (14)
	CreateDynamicObject(715,3197.1001000,-281.1000100,9.1000000,0.0000000,0.0000000,9.9920000); //object(veg_bevtree3) (15)
	CreateDynamicObject(715,3178.3000500,-278.2999900,9.1000000,0.0000000,0.0000000,9.9920000); //object(veg_bevtree3) (16)
	CreateDynamicObject(715,3210.6999500,-291.7000100,8.9000000,0.0000000,0.0000000,15.9910000); //object(veg_bevtree3) (17)
	CreateDynamicObject(715,3219.8000500,-273.1000100,9.0000000,0.0000000,0.0000000,21.9890000); //object(veg_bevtree3) (18)
	CreateDynamicObject(715,3234.6001000,-288.7999900,8.8000000,0.0000000,0.0000000,21.9890000); //object(veg_bevtree3) (19)
	CreateDynamicObject(715,3128.6001000,-327.7000100,8.4000000,0.0000000,0.0000000,11.9810000); //object(veg_bevtree3) (20)
	CreateDynamicObject(715,3142.3999000,-345.2000100,8.2000000,0.0000000,0.0000000,11.9860000); //object(veg_bevtree3) (21)
	CreateDynamicObject(715,3163.1999500,-330.8999900,8.3000000,0.0000000,0.0000000,1.9890000); //object(veg_bevtree3) (22)
	CreateDynamicObject(715,3186.8000500,-340.6000100,8.3000000,0.0000000,0.0000000,1.9830000); //object(veg_bevtree3) (23)
	CreateDynamicObject(715,3188.6001000,-325.8999900,8.4000000,0.0000000,0.0000000,345.9870000); //object(veg_bevtree3) (24)
	CreateDynamicObject(715,3148.1999500,-332.0000000,8.5000000,0.0000000,0.0000000,345.9870000); //object(veg_bevtree3) (25)
	CreateDynamicObject(715,3166.8999000,-350.0000000,8.1000000,0.0000000,0.0000000,351.9910000); //object(veg_bevtree3) (26)
	CreateDynamicObject(715,3176.1001000,-329.8999900,8.5000000,0.0000000,0.0000000,351.9910000); //object(veg_bevtree3) (27)
	CreateDynamicObject(17864,3227.3000500,-332.1000100,0.9000000,0.0000000,0.0000000,6.2240000); //object(comp_puchase) (9)
	CreateDynamicObject(8535,3217.6999500,-328.5000000,7.4000000,0.0000000,0.0000000,275.7290000); //object(tikimotel02_lvs) (1)
	CreateDynamicObject(17639,3295.5000000,-299.2999900,1.1000000,0.0000000,0.0000000,5.9990000); //object(lae2_roads31) (2)
	CreateDynamicObject(17864,3234.3999000,-331.7000100,0.9000000,0.0000000,0.0000000,6.2180000); //object(comp_puchase) (10)
	CreateDynamicObject(17864,3268.3999000,-276.7000100,1.4000000,0.0000000,0.0000000,6.2180000); //object(comp_puchase) (11)
	CreateDynamicObject(17864,3307.8999000,-272.5000000,1.4000000,0.0000000,0.0000000,6.2240000); //object(comp_puchase) (12)
	CreateDynamicObject(17005,3286.0000000,-271.7000100,8.9000000,0.0000000,0.0000000,96.2290000); //object(farmhouse) (1)
	CreateDynamicObject(17324,3311.1001000,-269.2000100,0.5000000,0.0000000,0.0000000,6.2400000); //object(cw_combbarn) (2)
	CreateDynamicObject(3472,3290.0000000,-284.8999900,0.2000000,0.0000000,0.0000000,277.9980000); //object(circuslampost03) (1)
	CreateDynamicObject(672,3252.6999500,-288.1000100,0.7000000,0.0000000,0.0000000,358.0000000); //object(sm_veg_tree5) (1)
	CreateDynamicObject(672,3256.3000500,-271.2000100,1.0000000,0.0000000,0.0000000,357.9950000); //object(sm_veg_tree5) (2)
	CreateDynamicObject(672,3268.3000500,-287.1000100,1.0000000,0.0000000,0.0000000,357.9950000); //object(sm_veg_tree5) (3)
	CreateDynamicObject(715,3237.3000500,-273.2999900,9.0000000,0.0000000,0.0000000,21.9890000); //object(veg_bevtree3) (28)
	CreateDynamicObject(672,3325.1001000,-280.8999900,1.0000000,0.0000000,0.0000000,357.9950000); //object(sm_veg_tree5) (4)
	CreateDynamicObject(672,3322.1999500,-258.7999900,1.2000000,0.0000000,0.0000000,357.9900000); //object(sm_veg_tree5) (5)
	CreateDynamicObject(672,3324.1999500,-270.7000100,1.2000000,0.0000000,0.0000000,327.7440000); //object(sm_veg_tree5) (7)
	CreateDynamicObject(17864,3273.3000500,-327.3999900,0.9000000,0.0000000,0.0000000,6.2180000); //object(comp_puchase) (13)
	CreateDynamicObject(17864,3312.6001000,-323.0000000,0.9000000,0.0000000,0.0000000,6.2180000); //object(comp_puchase) (14)
	CreateDynamicObject(17864,3327.6999500,-321.3999900,0.9000000,0.0000000,0.0000000,6.2130000); //object(comp_puchase) (15)
	CreateDynamicObject(17864,3322.5000000,-270.7999900,1.4000000,0.0000000,0.0000000,6.2180000); //object(comp_puchase) (16)
	CreateDynamicObject(672,3248.8000500,-318.7999900,0.5000000,0.0000000,0.0000000,345.9870000); //object(sm_veg_tree5) (8)
	CreateDynamicObject(672,3265.3999000,-334.5000000,0.6000000,0.0000000,0.0000000,345.9870000); //object(sm_veg_tree5) (9)
	CreateDynamicObject(672,3267.5000000,-317.5000000,0.5000000,0.0000000,0.0000000,345.9870000); //object(sm_veg_tree5) (10)
	CreateDynamicObject(672,3287.5000000,-332.3999900,0.6000000,0.0000000,0.0000000,345.9870000); //object(sm_veg_tree5) (11)
	CreateDynamicObject(672,3284.1999500,-314.2000100,0.6000000,0.0000000,0.0000000,345.9870000); //object(sm_veg_tree5) (12)
	CreateDynamicObject(672,3306.0000000,-326.3999900,0.6000000,0.0000000,0.0000000,345.9870000); //object(sm_veg_tree5) (13)
	CreateDynamicObject(672,3299.3999000,-312.3999900,0.6000000,0.0000000,0.0000000,345.9870000); //object(sm_veg_tree5) (14)
	CreateDynamicObject(672,3319.0000000,-311.7000100,0.6000000,0.0000000,0.0000000,345.9870000); //object(sm_veg_tree5) (15)
	CreateDynamicObject(672,3334.1999500,-327.5000000,0.6000000,0.0000000,0.0000000,345.9870000); //object(sm_veg_tree5) (16)
	CreateDynamicObject(672,3335.3000500,-309.2000100,0.6000000,0.0000000,0.0000000,345.9870000); //object(sm_veg_tree5) (17)
	CreateDynamicObject(4847,3311.1999500,-388.7000100,-8.6000000,0.0000000,0.0000000,6.2400000); //object(beach1_las0gj) (1)
	CreateDynamicObject(17033,3135.3000500,-380.7000100,-3.9000000,0.0000000,0.0000000,219.2290000); //object(cunt_rockgp2_15) (11)
	CreateDynamicObject(17033,3130.3999000,-355.8999900,-3.9000000,0.0000000,0.0000000,235.2270000); //object(cunt_rockgp2_15) (12)
	CreateDynamicObject(17033,3131.3999000,-366.2000100,-4.0000000,0.0000000,0.0000000,235.2230000); //object(cunt_rockgp2_15) (13)
	CreateDynamicObject(17033,3132.1001000,-377.1000100,-4.0000000,0.0000000,0.0000000,235.2230000); //object(cunt_rockgp2_15) (14)
	CreateDynamicObject(4847,3223.8999000,-216.0000000,-7.7000000,0.0000000,0.0000000,186.2350000); //object(beach1_las0gj) (2)
	CreateDynamicObject(17639,3359.6999500,-292.3999900,1.1000000,0.0000000,0.0000000,6.4980000); //object(lae2_roads31) (2)
	CreateDynamicObject(17864,3360.6001000,-267.1000100,1.4000000,0.0000000,0.0000000,6.2130000); //object(comp_puchase) (17)
	CreateDynamicObject(17864,3386.0000000,-263.7999900,1.4000000,0.0000000,0.0000000,6.2070000); //object(comp_puchase) (18)
	CreateDynamicObject(17864,3366.8999000,-317.2000100,0.9000000,0.0000000,0.0000000,6.2130000); //object(comp_puchase) (19)
	CreateDynamicObject(17864,3392.3999000,-314.3999900,0.9000000,0.0000000,0.0000000,6.2130000); //object(comp_puchase) (20)
	CreateDynamicObject(672,3358.8000500,-324.7000100,0.6000000,0.0000000,0.0000000,345.9870000); //object(sm_veg_tree5) (18)
	CreateDynamicObject(672,3353.1999500,-307.7000100,0.6000000,0.0000000,0.0000000,345.9870000); //object(sm_veg_tree5) (19)
	CreateDynamicObject(672,3368.6999500,-310.1000100,0.6000000,0.0000000,0.0000000,345.9870000); //object(sm_veg_tree5) (20)
	CreateDynamicObject(672,3384.8000500,-318.7000100,0.6000000,0.0000000,0.0000000,345.9870000); //object(sm_veg_tree5) (21)
	CreateDynamicObject(672,3389.0000000,-304.6000100,0.6000000,0.0000000,0.0000000,345.9870000); //object(sm_veg_tree5) (22)
	CreateDynamicObject(672,3404.8999000,-317.2000100,0.6000000,0.0000000,0.0000000,345.9870000); //object(sm_veg_tree5) (23)
	CreateDynamicObject(672,3347.1001000,-280.0000000,1.0000000,0.0000000,0.0000000,357.9950000); //object(sm_veg_tree5) (24)
	CreateDynamicObject(672,3337.1999500,-261.1000100,1.0000000,0.0000000,0.0000000,357.9950000); //object(sm_veg_tree5) (25)
	CreateDynamicObject(672,3362.8999000,-257.8999900,1.0000000,0.0000000,0.0000000,357.9950000); //object(sm_veg_tree5) (26)
	CreateDynamicObject(672,3350.1999500,-266.8999900,1.0000000,0.0000000,0.0000000,357.9950000); //object(sm_veg_tree5) (27)
	CreateDynamicObject(672,3366.1001000,-275.1000100,1.0000000,0.0000000,0.0000000,357.9950000); //object(sm_veg_tree5) (28)
	CreateDynamicObject(672,3396.1001000,-253.5000000,1.0000000,0.0000000,0.0000000,357.9950000); //object(sm_veg_tree5) (29)
	CreateDynamicObject(672,3381.8000500,-262.5000000,1.0000000,0.0000000,0.0000000,357.9950000); //object(sm_veg_tree5) (30)
	CreateDynamicObject(672,3393.5000000,-273.6000100,1.0000000,0.0000000,0.0000000,357.9950000); //object(sm_veg_tree5) (31)
	CreateDynamicObject(672,3264.6999500,-258.2000100,1.0000000,0.0000000,0.0000000,357.9950000); //object(sm_veg_tree5) (32)
	CreateDynamicObject(672,3283.0000000,-253.1000100,1.0000000,0.0000000,0.0000000,357.9950000); //object(sm_veg_tree5) (33)
	CreateDynamicObject(672,3314.6999500,-250.8999900,1.0000000,0.0000000,0.0000000,357.9950000); //object(sm_veg_tree5) (35)
	CreateDynamicObject(672,3293.5000000,-251.0000000,1.0000000,0.0000000,0.0000000,357.9950000); //object(sm_veg_tree5) (36)
	CreateDynamicObject(672,3306.6001000,-250.1000100,1.0000000,0.0000000,0.0000000,357.9900000); //object(sm_veg_tree5) (37)
	CreateDynamicObject(672,3272.3999000,-253.3000000,1.0000000,0.0000000,0.0000000,357.9950000); //object(sm_veg_tree5) (38)
	CreateDynamicObject(3406,3299.0000000,-227.3000000,-2.0000000,0.0000000,0.0000000,276.0000000); //object(cxref_woodjetty) (1)
	CreateDynamicObject(5184,3467.6001000,-224.8000000,20.0000000,0.0000000,0.0000000,185.4880000); //object(mdock1a_las2) (2)
	CreateDynamicObject(17639,3458.3000500,-282.0000000,1.1000000,0.0000000,0.0000000,5.4880000); //object(lae2_roads31) (2)
	CreateDynamicObject(17864,3386.6001000,-263.2999900,0.7000000,0.0000000,0.0000000,6.2400000); //object(comp_puchase) (21)
	CreateDynamicObject(987,3400.6999500,-209.1000100,0.6000000,0.0000000,0.0000000,276.5000000); //object(elecfence_bar) (1)
	CreateDynamicObject(987,3402.0000000,-220.8999900,0.6000000,0.0000000,0.0000000,276.4980000); //object(elecfence_bar) (2)
	CreateDynamicObject(987,3403.1999500,-232.8000000,0.6000000,0.0000000,0.0000000,276.4980000); //object(elecfence_bar) (3)
	CreateDynamicObject(987,3406.6999500,-265.8999900,0.6000000,0.0000000,0.0000000,276.2480000); //object(elecfence_bar) (4)
	CreateDynamicObject(987,3405.6999500,-254.0000000,0.6000000,0.0000000,0.0000000,276.2460000); //object(elecfence_bar) (5)
	CreateDynamicObject(987,3404.5000000,-244.2000000,0.6000000,0.0000000,0.0000000,277.7460000); //object(elecfence_bar) (6)
	CreateDynamicObject(987,3407.8999000,-277.3999900,0.6000000,0.0000000,0.0000000,6.2460000); //object(elecfence_bar) (7)
	CreateDynamicObject(987,3419.6999500,-276.1000100,0.6000000,0.0000000,0.0000000,5.2400000); //object(elecfence_bar) (8)
	CreateDynamicObject(987,3431.6001000,-274.8999900,0.6000000,0.0000000,0.0000000,5.2350000); //object(elecfence_bar) (9)
	CreateDynamicObject(987,3443.5000000,-273.7998000,0.6000000,0.0000000,0.0000000,5.2290000); //object(elecfence_bar) (10)
	CreateDynamicObject(987,3468.6999500,-271.1000100,0.6000000,0.0000000,0.0000000,5.4790000); //object(elecfence_bar) (10)
	CreateDynamicObject(987,3480.6001000,-269.8999900,0.6000000,0.0000000,0.0000000,5.4770000); //object(elecfence_bar) (10)
	CreateDynamicObject(987,3492.3999000,-268.7999900,0.6000000,0.0000000,0.0000000,5.7270000); //object(elecfence_bar) (10)
	CreateDynamicObject(987,3504.3000500,-267.6000100,0.7000000,0.0000000,0.0000000,6.4710000); //object(elecfence_bar) (10)
	CreateDynamicObject(987,3516.1992200,-266.1992200,0.6000000,0.0000000,0.0000000,6.4710000); //object(elecfence_bar) (10)
	CreateDynamicObject(987,3528.0000000,-265.0000000,0.6000000,0.0000000,0.0000000,92.7210000); //object(elecfence_bar) (10)
	CreateDynamicObject(987,3527.5000000,-253.1000100,0.6000000,0.0000000,0.0000000,92.7190000); //object(elecfence_bar) (10)
	CreateDynamicObject(987,3526.8999000,-241.1000100,0.6000000,0.0000000,0.0000000,92.7190000); //object(elecfence_bar) (10)
	CreateDynamicObject(987,3526.3000500,-229.2000000,0.6000000,0.0000000,0.0000000,92.7190000); //object(elecfence_bar) (10)
	CreateDynamicObject(987,3525.6999500,-217.3000000,0.6000000,0.0000000,0.0000000,92.7190000); //object(elecfence_bar) (10)
	CreateDynamicObject(987,3525.3000500,-208.2000000,0.6000000,0.0000000,0.0000000,94.7190000); //object(elecfence_bar) (10)
	CreateDynamicObject(3255,3516.8999000,-211.6000100,0.7000000,0.0000000,0.0000000,185.2460000); //object(ref_oiltank01) (1)
	CreateDynamicObject(3255,3521.0996100,-258.5000000,0.7000000,0.0000000,0.0000000,186.2440000); //object(ref_oiltank01) (2)
	CreateDynamicObject(3673,3519.1999500,-232.0000000,19.6000000,0.0000000,0.0000000,275.9990000); //object(laxrf_refinerybase) (1)
	CreateDynamicObject(3257,3486.0000000,-205.1000100,-0.3000000,0.0000000,0.0000000,276.2460000); //object(refinerybox1) (1)
	CreateDynamicObject(3256,3470.1001000,-208.3000000,0.5000000,0.0000000,0.0000000,91.0000000); //object(refchimny01) (1)
	CreateDynamicObject(3259,3499.8000500,-201.8999900,0.3000000,0.0000000,0.0000000,6.2460000); //object(refcondens1) (1)
	CreateDynamicObject(3472,3505.3000500,-210.6000100,0.4000000,0.0000000,0.0000000,19.9950000); //object(circuslampost03) (2)
	CreateDynamicObject(3472,3509.3999000,-257.1000100,0.4000000,0.0000000,0.0000000,19.9900000); //object(circuslampost03) (3)
	CreateDynamicObject(3620,3451.3999000,-201.3000000,13.6000000,0.0000000,0.0000000,187.4870000); //object(redockrane_las) (1)
	CreateDynamicObject(10230,3447.3994100,-188.3994100,6.8000000,0.0000000,0.0000000,4.2460000); //object(freighter_sfe) (1)
	CreateDynamicObject(7527,3438.1999500,-190.7000000,11.3000000,0.0000000,0.0000000,4.5000000); //object(vegasnfrates03) (1)
	CreateDynamicObject(7025,3473.3000500,-183.1000100,9.2000000,0.0000000,0.0000000,4.7500000); //object(plantbox1) (1)
	CreateDynamicObject(7025,3474.0000000,-192.3000000,9.2000000,0.0000000,0.0000000,4.2460000); //object(plantbox1) (2)
	CreateDynamicObject(2934,3473.5000000,-182.5000000,7.2000000,0.0000000,0.0000000,4.2500000); //object(kmb_container_red) (2)
	CreateDynamicObject(2934,3476.1001000,-195.3000000,7.2000000,0.0000000,0.0000000,93.7460000); //object(kmb_container_red) (3)
	CreateDynamicObject(2934,3475.8999000,-193.7000000,7.2000000,0.0000000,0.0000000,93.7410000); //object(kmb_container_red) (4)
	CreateDynamicObject(2934,3475.8000500,-191.2000000,7.2000000,0.0000000,0.0000000,93.7410000); //object(kmb_container_red) (5)
	CreateDynamicObject(7025,3474.1001000,-192.8999900,9.2000000,0.0000000,0.0000000,4.2460000); //object(plantbox1) (3)
	CreateDynamicObject(2934,3477.6999500,-181.8999900,7.2000000,0.0000000,0.0000000,4.2460000); //object(kmb_container_red) (6)
	CreateDynamicObject(8058,3425.0000000,-245.1000100,5.6000000,0.0000000,0.0000000,96.2400000); //object(vgswrehse06) (1)
	CreateDynamicObject(3460,3466.6999500,-271.2999900,4.5000000,0.0000000,0.0000000,96.4980000); //object(vegaslampost) (1)
	CreateDynamicObject(3460,3457.1999500,-272.3999900,4.5000000,0.0000000,0.0000000,274.9930000); //object(vegaslampost) (2)
	CreateDynamicObject(17864,3431.8999000,-310.2000100,0.9000000,0.0000000,0.0000000,6.2130000); //object(comp_puchase) (20)
	CreateDynamicObject(17864,3460.1999500,-307.0000000,0.9000000,0.0000000,0.0000000,6.2020000); //object(comp_puchase) (20)
	CreateDynamicObject(672,3429.6001000,-319.5000000,0.5000000,0.0000000,0.0000000,345.9870000); //object(sm_veg_tree5) (23)
	CreateDynamicObject(672,3411.1999500,-302.7999900,0.6000000,0.0000000,0.0000000,345.9870000); //object(sm_veg_tree5) (23)
	CreateDynamicObject(672,3433.6999500,-302.3999900,0.6000000,0.0000000,0.0000000,345.9870000); //object(sm_veg_tree5) (23)
	CreateDynamicObject(672,3445.6001000,-319.0000000,0.6000000,0.0000000,0.0000000,345.9870000); //object(sm_veg_tree5) (23)
	CreateDynamicObject(672,3445.8999000,-306.3999900,0.6000000,0.0000000,0.0000000,345.9870000); //object(sm_veg_tree5) (23)
	CreateDynamicObject(672,3462.6999500,-302.5000000,0.6000000,0.0000000,0.0000000,345.9870000); //object(sm_veg_tree5) (23)
	CreateDynamicObject(672,3458.8000500,-314.3999900,0.6000000,0.0000000,0.0000000,345.9870000); //object(sm_veg_tree5) (23)
	CreateDynamicObject(672,3474.8000500,-310.7000100,0.6000000,0.0000000,0.0000000,345.9870000); //object(sm_veg_tree5) (23)
	CreateDynamicObject(18478,3534.3000500,-275.0000000,1.1000000,0.0000000,0.0000000,5.4990000); //object(cuntsrod09) (1)
	CreateDynamicObject(8661,3508.8994100,-307.1992200,1.3000000,0.0000000,0.0000000,275.9930000); //object(gnhtelgrnd_lvs) (1)
	CreateDynamicObject(8661,3512.6001000,-346.6000100,1.3000000,0.0000000,0.0000000,275.9930000); //object(gnhtelgrnd_lvs) (2)
	CreateDynamicObject(13296,3506.5000000,-305.2999900,4.4000000,0.0000000,0.0000000,95.7460000); //object(ce_roadsidegas) (1)
	CreateDynamicObject(1244,3512.1999500,-306.1000100,2.1000000,0.0000000,0.0000000,5.7460000); //object(petrolpump) (1)
	CreateDynamicObject(1244,3511.6999500,-301.5000000,2.0000000,0.0000000,0.0000000,5.7460000); //object(petrolpump) (2)
	CreateDynamicObject(1408,3517.3999000,-298.2999900,1.2000000,0.0000000,0.0000000,95.7460000); //object(dyn_f_wood_2) (1)
	CreateDynamicObject(1408,3518.0000000,-303.5000000,1.2000000,0.0000000,0.0000000,95.7460000); //object(dyn_f_wood_2) (2)
	CreateDynamicObject(1408,3518.5000000,-308.3999900,1.2000000,0.0000000,0.0000000,95.7460000); //object(dyn_f_wood_2) (3)
	CreateDynamicObject(1408,3519.6999500,-320.0000000,1.3000000,0.0000000,0.0000000,95.7460000); //object(dyn_f_wood_2) (4)
	CreateDynamicObject(1408,3520.0000000,-322.7999900,1.3000000,0.0000000,0.0000000,95.7460000); //object(dyn_f_wood_2) (5)
	CreateDynamicObject(1408,3517.1999500,-325.6000100,1.3000000,0.0000000,0.0000000,5.7460000); //object(dyn_f_wood_2) (6)
	CreateDynamicObject(1408,3512.0000000,-326.2000100,1.3000000,0.0000000,0.0000000,5.7460000); //object(dyn_f_wood_2) (7)
	CreateDynamicObject(1408,3501.6999500,-327.2000100,1.3000000,0.0000000,0.0000000,5.7460000); //object(dyn_f_wood_2) (8)
	CreateDynamicObject(1408,3506.8999000,-326.7000100,1.3000000,0.0000000,0.0000000,5.7460000); //object(dyn_f_wood_2) (9)
	CreateDynamicObject(13816,3504.1992200,-374.5996100,-1.1000000,0.0000000,0.0000000,275.7290000); //object(ce_safeground) (1)
	CreateDynamicObject(8661,3515.1999500,-377.0000000,1.3000000,0.0000000,0.0000000,275.9930000); //object(gnhtelgrnd_lvs) (4)
	CreateDynamicObject(1408,3516.3000500,-351.7999900,1.4000000,0.0000000,0.0000000,185.9930000); //object(dyn_f_wood_2) (10)
	CreateDynamicObject(1408,3519.1001000,-351.5000000,1.4000000,0.0000000,0.0000000,185.9930000); //object(dyn_f_wood_2) (11)
	CreateDynamicObject(1408,3522.5000000,-361.3999900,1.4000000,0.0000000,0.0000000,96.2350000); //object(dyn_f_wood_2) (12)
	CreateDynamicObject(1408,3523.1001000,-366.6000100,1.4000000,0.0000000,0.0000000,96.2290000); //object(dyn_f_wood_2) (13)
	CreateDynamicObject(1408,3523.8000500,-374.7999900,1.4000000,0.0000000,0.0000000,96.2290000); //object(dyn_f_wood_2) (14)
	CreateDynamicObject(1408,3524.3999000,-380.0000000,1.4000000,0.0000000,0.0000000,96.2350000); //object(dyn_f_wood_2) (15)
	CreateDynamicObject(1408,3525.0000000,-385.2000100,1.3000000,0.0000000,0.0000000,96.2290000); //object(dyn_f_wood_2) (16)
	CreateDynamicObject(9325,3509.1999500,-346.5000000,7.3000000,0.0000000,0.0000000,275.7290000); //object(preshoos03_sfn06) (1)
	CreateDynamicObject(8661,3507.6001000,-338.1000100,1.3000000,0.0000000,0.0000000,275.9930000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(9321,3506.5000000,-336.7999900,2.1000000,0.0000000,0.0000000,4.9770000); //object(garage_sfn01) (1)
	CreateDynamicObject(9321,3506.0000000,-330.8999900,2.1000000,0.0000000,0.0000000,4.9770000); //object(garage_sfn01) (2)
	CreateDynamicObject(1432,3517.3000500,-341.2000100,1.1000000,0.0000000,0.0000000,309.7490000); //object(dyn_table_2) (1)
	CreateDynamicObject(1432,3503.1999500,-370.0000000,0.6000000,0.0000000,0.0000000,350.0000000); //object(dyn_table_2) (2)
	CreateDynamicObject(4152,3545.8000500,-480.2000100,1.2000000,0.0000000,0.0000000,5.7460000); //object(roads15_lan) (1)
	CreateDynamicObject(4847,3496.3000500,-576.2000100,-8.0000000,0.0000000,0.0000000,275.7240000); //object(beach1_las0gj) (1)
	CreateDynamicObject(1360,3519.1001000,-396.2999900,1.0000000,0.0000000,0.0000000,278.0000000); //object(cj_bush_prop3) (1)
	CreateDynamicObject(1360,3521.6001000,-396.0000000,1.0000000,0.0000000,0.0000000,277.9980000); //object(cj_bush_prop3) (2)
	CreateDynamicObject(1360,3524.0996100,-395.6992200,1.0000000,0.0000000,0.0000000,277.9980000); //object(cj_bush_prop3) (3)
	CreateDynamicObject(1360,3525.1001000,-395.6000100,1.0000000,0.0000000,0.0000000,278.0000000); //object(cj_bush_prop3) (4)
	CreateDynamicObject(1360,3525.8000500,-394.3999900,1.0000000,0.0000000,0.0000000,4.7480000); //object(cj_bush_prop3) (5)
	CreateDynamicObject(1360,3525.6001000,-392.2999900,1.0000000,0.0000000,0.0000000,4.7480000); //object(cj_bush_prop3) (6)
	CreateDynamicObject(1360,3525.3994100,-390.1992200,1.0000000,0.0000000,0.0000000,4.7460000); //object(cj_bush_prop3) (7)
	CreateDynamicObject(1360,3525.3000500,-389.2000100,1.0000000,0.0000000,0.0000000,4.7460000); //object(cj_bush_prop3) (8)
	CreateDynamicObject(4567,3603.8994100,-374.8994100,1.1000000,0.0000000,0.0000000,5.9990000); //object(road07_lan2) (1)
	CreateDynamicObject(8661,3601.6999500,-344.5000000,1.4000000,0.0000000,0.0000000,275.9930000); //object(gnhtelgrnd_lvs) (1)
	CreateDynamicObject(8661,3582.3994100,-346.5996100,1.4000000,0.0000000,0.0000000,275.9930000); //object(gnhtelgrnd_lvs) (1)
	CreateDynamicObject(3475,3536.3000500,-290.2000100,2.0000000,0.0000000,0.0000000,185.5000000); //object(vgsn_fncelec_pst) (1)
	CreateDynamicObject(3475,3536.8000500,-296.1000100,2.0000000,0.0000000,0.0000000,185.4990000); //object(vgsn_fncelec_pst) (2)
	CreateDynamicObject(3475,3537.3000500,-302.0000000,2.0000000,0.0000000,0.0000000,185.4990000); //object(vgsn_fncelec_pst) (3)
	CreateDynamicObject(3475,3537.8999000,-307.7999900,2.0000000,0.0000000,0.0000000,185.4990000); //object(vgsn_fncelec_pst) (4)
	CreateDynamicObject(3475,3538.3999000,-313.6000100,2.0000000,0.0000000,0.0000000,185.4990000); //object(vgsn_fncelec_pst) (5)
	CreateDynamicObject(3475,3539.0000000,-319.3999900,2.0000000,0.0000000,0.0000000,185.4990000); //object(vgsn_fncelec_pst) (6)
	CreateDynamicObject(3475,3539.6001000,-325.1000100,2.0000000,0.0000000,0.0000000,185.4990000); //object(vgsn_fncelec_pst) (7)
	CreateDynamicObject(3475,3540.1001000,-330.7000100,2.0000000,0.0000000,0.0000000,185.4990000); //object(vgsn_fncelec_pst) (8)
	CreateDynamicObject(3475,3540.6999500,-336.5000000,2.0000000,0.0000000,0.0000000,185.4990000); //object(vgsn_fncelec_pst) (9)
	CreateDynamicObject(3475,3541.1999500,-342.3999900,2.0000000,0.0000000,0.0000000,185.4990000); //object(vgsn_fncelec_pst) (10)
	CreateDynamicObject(3475,3541.8000500,-348.2000100,2.0000000,0.0000000,0.0000000,185.4990000); //object(vgsn_fncelec_pst) (11)
	CreateDynamicObject(3475,3542.3999000,-353.8999900,2.0000000,0.0000000,0.0000000,185.4990000); //object(vgsn_fncelec_pst) (12)
	CreateDynamicObject(3475,3543.0000000,-359.8999900,2.0000000,0.0000000,0.0000000,185.4990000); //object(vgsn_fncelec_pst) (13)
	CreateDynamicObject(3475,3543.1999500,-362.8999900,2.0000000,0.0000000,0.0000000,185.4990000); //object(vgsn_fncelec_pst) (14)
	CreateDynamicObject(3475,3543.6001000,-366.8999900,2.0000000,0.0000000,0.0000000,185.5000000); //object(vgsn_fncelec_pst) (15)
	CreateDynamicObject(3475,3546.7998000,-369.5996100,2.0000000,0.0000000,0.0000000,275.4930000); //object(vgsn_fncelec_pst) (16)
	CreateDynamicObject(3475,3552.1992200,-369.0996100,2.0000000,0.0000000,0.0000000,275.9930000); //object(vgsn_fncelec_pst) (17)
	CreateDynamicObject(3475,3558.0000000,-368.5000000,2.0000000,0.0000000,0.0000000,275.9930000); //object(vgsn_fncelec_pst) (20)
	CreateDynamicObject(3475,3563.6001000,-368.0000000,2.0000000,0.0000000,0.0000000,275.9930000); //object(vgsn_fncelec_pst) (21)
	CreateDynamicObject(3475,3569.3000500,-367.3999900,2.0000000,0.0000000,0.0000000,275.9930000); //object(vgsn_fncelec_pst) (22)
	CreateDynamicObject(3475,3575.1001000,-366.7999900,2.0000000,0.0000000,0.0000000,275.9930000); //object(vgsn_fncelec_pst) (23)
	CreateDynamicObject(3475,3580.8999000,-366.2000100,2.0000000,0.0000000,0.0000000,275.9930000); //object(vgsn_fncelec_pst) (24)
	CreateDynamicObject(3475,3585.1999500,-365.7000100,2.0000000,0.0000000,0.0000000,275.9930000); //object(vgsn_fncelec_pst) (25)
	CreateDynamicObject(3475,3601.1992200,-363.6992200,2.0000000,0.0000000,0.0000000,276.2400000); //object(vgsn_fncelec_pst) (26)
	CreateDynamicObject(3475,3606.8994100,-363.0996100,2.0000000,0.0000000,0.0000000,276.2400000); //object(vgsn_fncelec_pst) (27)
	CreateDynamicObject(3475,3609.8994100,-362.8994100,2.0000000,0.0000000,0.0000000,276.2350000); //object(vgsn_fncelec_pst) (28)
	CreateDynamicObject(3475,3612.8000500,-359.6000100,2.0000000,0.0000000,0.0000000,6.4900000); //object(vgsn_fncelec_pst) (32)
	CreateDynamicObject(3475,3612.1999500,-353.7000100,2.0000000,0.0000000,0.0000000,6.4870000); //object(vgsn_fncelec_pst) (33)
	CreateDynamicObject(3475,3611.6001000,-347.8999900,2.0000000,0.0000000,0.0000000,6.4870000); //object(vgsn_fncelec_pst) (34)
	CreateDynamicObject(3475,3611.0000000,-342.1000100,2.0000000,0.0000000,0.0000000,6.4870000); //object(vgsn_fncelec_pst) (35)
	CreateDynamicObject(3475,3610.3000500,-336.2000100,2.0000000,0.0000000,0.0000000,6.4870000); //object(vgsn_fncelec_pst) (36)
	CreateDynamicObject(3475,3609.6999500,-330.2999900,2.0000000,0.0000000,0.0000000,5.9870000); //object(vgsn_fncelec_pst) (37)
	CreateDynamicObject(3475,3609.0000000,-324.5000000,2.0000000,0.0000000,0.0000000,6.2370000); //object(vgsn_fncelec_pst) (38)
	CreateDynamicObject(3475,3608.3999000,-318.7999900,2.0000000,0.0000000,0.0000000,6.2370000); //object(vgsn_fncelec_pst) (39)
	CreateDynamicObject(3475,3608.0000000,-313.3999900,2.0000000,0.0000000,0.0000000,6.2370000); //object(vgsn_fncelec_pst) (40)
	CreateDynamicObject(3475,3607.3999000,-307.6000100,2.0000000,0.0000000,0.0000000,5.4870000); //object(vgsn_fncelec_pst) (41)
	CreateDynamicObject(3475,3606.8000500,-301.6000100,2.0000000,0.0000000,0.0000000,6.9870000); //object(vgsn_fncelec_pst) (42)
	CreateDynamicObject(3475,3606.1999500,-295.7000100,2.0000000,0.0000000,0.0000000,5.9870000); //object(vgsn_fncelec_pst) (43)
	CreateDynamicObject(3475,3605.5996100,-289.8994100,2.0000000,0.0000000,0.0000000,6.9870000); //object(vgsn_fncelec_pst) (44)
	CreateDynamicObject(3475,3604.6001000,-281.1000100,2.0000000,0.0000000,0.0000000,4.7370000); //object(vgsn_fncelec_pst) (45)
	CreateDynamicObject(3475,3605.0000000,-284.1000100,2.0000000,0.0000000,0.0000000,6.4870000); //object(vgsn_fncelec_pst) (46)
	CreateDynamicObject(3475,3535.8999000,-287.8999900,2.0000000,0.0000000,0.0000000,185.5000000); //object(vgsn_fncelec_pst) (48)
	CreateDynamicObject(3475,3538.6001000,-284.2999900,2.0000000,0.0000000,0.0000000,95.4990000); //object(vgsn_fncelec_pst) (49)
	CreateDynamicObject(3475,3544.6001000,-283.7999900,2.0000000,0.0000000,0.0000000,95.4990000); //object(vgsn_fncelec_pst) (50)
	CreateDynamicObject(3475,3550.3999000,-283.2000100,2.0000000,0.0000000,0.0000000,95.4990000); //object(vgsn_fncelec_pst) (51)
	CreateDynamicObject(3475,3556.1001000,-282.6000100,2.0000000,0.0000000,0.0000000,95.4990000); //object(vgsn_fncelec_pst) (52)
	CreateDynamicObject(3475,3562.1001000,-281.8999900,2.0000000,0.0000000,0.0000000,95.4990000); //object(vgsn_fncelec_pst) (53)
	CreateDynamicObject(3475,3568.0000000,-281.2999900,2.0000000,0.0000000,0.0000000,95.4990000); //object(vgsn_fncelec_pst) (54)
	CreateDynamicObject(3475,3573.8999000,-280.7000100,2.0000000,0.0000000,0.0000000,95.4990000); //object(vgsn_fncelec_pst) (55)
	CreateDynamicObject(3475,3579.6999500,-280.1000100,2.0000000,0.0000000,0.0000000,95.4990000); //object(vgsn_fncelec_pst) (56)
	CreateDynamicObject(3475,3585.3999000,-279.3999900,2.0000000,0.0000000,0.0000000,95.4990000); //object(vgsn_fncelec_pst) (57)
	CreateDynamicObject(4152,3532.6999500,-350.2000100,1.2000000,0.0000000,0.0000000,5.7460000); //object(roads15_lan) (1)
	CreateDynamicObject(8661,3562.8000500,-348.7000100,1.4000000,0.0000000,0.0000000,275.9930000); //object(gnhtelgrnd_lvs) (1)
	CreateDynamicObject(8661,3552.1999500,-349.7999900,1.4000000,0.0000000,0.0000000,275.9930000); //object(gnhtelgrnd_lvs) (1)
	CreateDynamicObject(8661,3548.0000000,-310.2000100,1.4000000,0.0000000,0.0000000,275.9930000); //object(gnhtelgrnd_lvs) (1)
	CreateDynamicObject(8661,3547.1999500,-303.2999900,1.3000000,0.0000000,0.0000000,275.9930000); //object(gnhtelgrnd_lvs) (1)
	CreateDynamicObject(8661,3567.8000500,-308.3999900,1.4000000,0.0000000,0.0000000,275.9930000); //object(gnhtelgrnd_lvs) (1)
	CreateDynamicObject(8661,3566.8999000,-301.1000100,1.3000000,0.0000000,0.0000000,275.9930000); //object(gnhtelgrnd_lvs) (1)
	CreateDynamicObject(8661,3586.8000500,-306.3999900,1.4000000,0.0000000,0.0000000,275.9930000); //object(gnhtelgrnd_lvs) (1)
	CreateDynamicObject(8661,3586.1999500,-299.1000100,1.2000000,0.0000000,0.0000000,275.9930000); //object(gnhtelgrnd_lvs) (1)
	CreateDynamicObject(8661,3597.5000000,-305.1000100,1.4000000,0.0000000,0.0000000,275.9930000); //object(gnhtelgrnd_lvs) (1)
	CreateDynamicObject(8661,3596.6999500,-297.8999900,1.1000000,0.0000000,0.0000000,275.9930000); //object(gnhtelgrnd_lvs) (1)
	CreateDynamicObject(11548,3548.6001000,-306.1000100,1.6000000,0.0000000,0.0000000,66.7470000); //object(cnts_lines) (6)
	CreateDynamicObject(11548,3553.3999000,-347.3999900,1.4000000,0.0000000,0.0000000,251.2350000); //object(cnts_lines) (7)
	CreateDynamicObject(11548,3577.1001000,-314.7000100,1.1000000,0.0000000,0.0000000,66.7470000); //object(cnts_lines) (8)
	CreateDynamicObject(11548,3580.6001000,-345.7999900,1.4000000,0.0000000,0.0000000,66.4950000); //object(cnts_lines) (9)
	CreateDynamicObject(3314,3556.8000500,-413.6000100,2.2000000,0.0000000,0.0000000,5.7460000); //object(sw_bigburb_04) (1)
	CreateDynamicObject(3315,3599.1001000,-409.2000100,2.3000000,0.0000000,0.0000000,5.9930000); //object(sw_bigburb_03) (1)
	CreateDynamicObject(3353,3631.8999000,-405.7999900,2.3000000,0.0000000,0.0000000,5.9930000); //object(sw_bigburbsave2) (1)
	CreateDynamicObject(1498,3628.6001000,-410.8999900,2.9000000,0.0000000,0.0000000,6.4980000); //object(gen_doorext03) (1)
	CreateDynamicObject(3311,3663.1001000,-407.8999900,4.2000000,0.0000000,0.0000000,6.4870000); //object(sw_woodhaus01a) (1)
	CreateDynamicObject(8661,3567.1001000,-395.1000100,1.3000000,0.0000000,0.0000000,185.9930000); //object(gnhtelgrnd_lvs) (1)
	CreateDynamicObject(1498,3514.6999500,-373.2000100,1.3000000,0.0000000,0.0000000,95.7460000); //object(gen_doorext03) (2)
	CreateDynamicObject(1498,3514.3999000,-370.2000100,1.3000000,0.0000000,0.0000000,275.7350000); //object(gen_doorext03) (3)
	CreateDynamicObject(8661,3573.0000000,-411.1000100,1.3000000,0.0000000,0.0000000,275.7350000); //object(gnhtelgrnd_lvs) (1)
	CreateDynamicObject(1360,3547.0000000,-394.8999900,0.9000000,0.0000000,0.0000000,4.7460000); //object(cj_bush_prop3) (7)
	CreateDynamicObject(1360,3546.8000500,-392.5000000,0.9000000,0.0000000,0.0000000,4.7460000); //object(cj_bush_prop3) (7)
	CreateDynamicObject(1360,3546.6992200,-390.8994100,0.9000000,0.0000000,0.0000000,4.7460000); //object(cj_bush_prop3) (7)
	CreateDynamicObject(1360,3546.8999000,-393.7000100,0.9000000,0.0000000,0.0000000,4.7460000); //object(cj_bush_prop3) (7)
	CreateDynamicObject(8661,3609.3000500,-407.2999900,1.3000000,0.0000000,0.0000000,275.7290000); //object(gnhtelgrnd_lvs) (1)
	CreateDynamicObject(8661,3607.0000000,-393.3999900,1.3000000,0.0000000,0.0000000,185.4820000); //object(gnhtelgrnd_lvs) (1)
	CreateDynamicObject(1696,3591.6001000,-368.2000100,0.4000000,0.0000000,0.0000000,6.2460000); //object(roofstuff15) (1)
	CreateDynamicObject(1696,3596.8994100,-367.5996100,0.4000000,0.0000000,0.0000000,6.2350000); //object(roofstuff15) (2)
	CreateDynamicObject(1696,3597.5996100,-275.2998000,0.1000000,0.0000000,0.0000000,186.2350000); //object(roofstuff15) (3)
	CreateDynamicObject(1696,3592.0996100,-275.8994100,-0.4000000,0.0000000,0.0000000,186.2460000); //object(roofstuff15) (6)
	CreateDynamicObject(8661,3640.5000000,-404.1000100,1.2000000,0.0000000,0.0000000,275.7290000); //object(gnhtelgrnd_lvs) (1)
	CreateDynamicObject(8661,3642.6001000,-389.7000100,1.3000000,0.0000000,0.0000000,6.2290000); //object(gnhtelgrnd_lvs) (1)
	CreateDynamicObject(5762,3650.0000000,-388.2000100,4.1000000,0.0000000,0.0000000,185.7460000); //object(foodmartlawn) (1)
	CreateDynamicObject(1360,3636.8999000,-380.6000100,1.0000000,0.0000000,0.0000000,96.7460000); //object(cj_bush_prop3) (7)
	CreateDynamicObject(1360,3634.8999000,-380.7999900,1.0000000,0.0000000,0.0000000,96.7460000); //object(cj_bush_prop3) (7)
	CreateDynamicObject(1360,3632.8000500,-381.0000000,1.1000000,0.0000000,0.0000000,96.7460000); //object(cj_bush_prop3) (7)
	CreateDynamicObject(1360,3630.5000000,-381.2999900,1.1000000,0.0000000,0.0000000,96.7460000); //object(cj_bush_prop3) (7)
	CreateDynamicObject(1360,3628.8000500,-381.6000100,1.0000000,0.0000000,0.0000000,96.7460000); //object(cj_bush_prop3) (7)
	CreateDynamicObject(1360,3627.0000000,-381.7999900,1.1000000,0.0000000,0.0000000,96.7460000); //object(cj_bush_prop3) (7)
	CreateDynamicObject(1360,3625.1001000,-382.0000000,1.1000000,0.0000000,0.0000000,96.7460000); //object(cj_bush_prop3) (7)
	CreateDynamicObject(1360,3623.1999500,-382.2000100,1.1000000,0.0000000,0.0000000,96.7460000); //object(cj_bush_prop3) (7)
	CreateDynamicObject(1360,3621.5000000,-382.3999900,1.1000000,0.0000000,0.0000000,96.7460000); //object(cj_bush_prop3) (7)
	CreateDynamicObject(1360,3619.6001000,-382.6000100,1.1000000,0.0000000,0.0000000,96.7460000); //object(cj_bush_prop3) (7)
	CreateDynamicObject(1360,3617.8999000,-382.7999900,1.1000000,0.0000000,0.0000000,96.7460000); //object(cj_bush_prop3) (7)
	CreateDynamicObject(1360,3616.0000000,-383.0000000,1.1000000,0.0000000,0.0000000,96.7460000); //object(cj_bush_prop3) (7)
	CreateDynamicObject(1360,3614.3000500,-383.2000100,1.1000000,0.0000000,0.0000000,96.7460000); //object(cj_bush_prop3) (7)
	CreateDynamicObject(1360,3612.3999000,-383.3999900,1.1000000,0.0000000,0.0000000,96.7460000); //object(cj_bush_prop3) (7)
	CreateDynamicObject(1360,3611.1001000,-383.6000100,1.1000000,0.0000000,0.0000000,96.7460000); //object(cj_bush_prop3) (7)
	CreateDynamicObject(1360,3612.6001000,-389.5000000,1.1000000,0.0000000,0.0000000,96.7460000); //object(cj_bush_prop3) (7)
	CreateDynamicObject(1360,3611.3000500,-389.7000100,1.1000000,0.0000000,0.0000000,96.7460000); //object(cj_bush_prop3) (7)
	CreateDynamicObject(1360,3610.3999000,-388.8999900,1.1000000,0.0000000,0.0000000,7.7450000); //object(cj_bush_prop3) (7)
	CreateDynamicObject(1360,3610.1999500,-387.2999900,1.1000000,0.0000000,0.0000000,7.7400000); //object(cj_bush_prop3) (7)
	CreateDynamicObject(1256,3638.1999500,-384.3999900,1.7000000,0.0000000,0.0000000,5.7460000); //object(stonebench1) (1)
	CreateDynamicObject(1256,3633.1999500,-386.8999900,1.7000000,0.0000000,0.0000000,275.4930000); //object(stonebench1) (2)
	CreateDynamicObject(1256,3625.0000000,-387.6000100,1.7000000,0.0000000,0.0000000,275.4930000); //object(stonebench1) (3)
	CreateDynamicObject(1256,3616.3999000,-388.3999900,1.7000000,0.0000000,0.0000000,275.4930000); //object(stonebench1) (4)
	CreateDynamicObject(1229,3609.5000000,-383.6000100,2.4000000,0.0000000,0.0000000,185.4990000); //object(bussign1) (1)
	CreateDynamicObject(2745,3637.8000500,-381.8999900,2.0000000,0.0000000,0.0000000,276.7460000); //object(cj_stat_3) (1)
	CreateDynamicObject(3578,3597.6001000,-391.0000000,0.6000000,0.0000000,0.0000000,6.2460000); //object(dockbarr1_la) (1)
	CreateDynamicObject(3578,3592.5000000,-390.2999900,0.6000000,0.0000000,0.0000000,274.9880000); //object(dockbarr1_la) (2)
	CreateDynamicObject(3578,3602.5000000,-389.2999900,0.6000000,0.0000000,0.0000000,276.4930000); //object(dockbarr1_la) (3)
	CreateDynamicObject(1492,3648.1999500,-378.3999900,0.9000000,0.0000000,0.0000000,4.4990000); //object(gen_doorint02) (1)
	CreateDynamicObject(3310,3566.5000000,-463.5000000,3.3000000,0.0000000,0.0000000,275.7400000); //object(sw_woodhaus04) (1)
	CreateDynamicObject(3307,3615.3000500,-459.1000100,2.7000000,0.0000000,0.0000000,95.7460000); //object(swburbhaus01) (1)
	CreateDynamicObject(3308,3592.0000000,-461.6000100,2.7000000,0.0000000,0.0000000,95.7460000); //object(swburbhaus03) (1)
	CreateDynamicObject(3309,3641.1999500,-456.2000100,2.7000000,0.0000000,0.0000000,95.7460000); //object(swburbhaus04) (1)
	CreateDynamicObject(3311,3665.1001000,-452.7000100,4.2000000,0.0000000,0.0000000,185.4990000); //object(sw_woodhaus01a) (2)
	CreateDynamicObject(17033,3481.7998000,-336.0000000,-2.3000000,0.0000000,0.0000000,233.2230000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3480.5000000,-328.7000100,-2.4000000,0.0000000,0.0000000,233.2230000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3479.6001000,-321.1000100,-2.4000000,0.0000000,0.0000000,233.2230000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3479.1001000,-313.7000100,-2.4000000,0.0000000,0.0000000,233.2230000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3478.6999500,-304.6000100,-2.4000000,0.0000000,0.0000000,233.2230000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3478.5000000,-297.0000000,-2.4000000,0.0000000,0.0000000,233.2230000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3485.8000500,-290.7000100,-3.6000000,0.0000000,0.0000000,141.2230000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3490.3999000,-290.2000100,-3.6000000,0.0000000,0.0000000,141.2180000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3491.8999000,-290.3999900,-3.6000000,0.0000000,0.0000000,141.2180000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3495.5000000,-296.7000100,-3.6000000,0.0000000,0.0000000,51.2180000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3496.6001000,-303.6000100,-3.6000000,0.0000000,0.0000000,51.2130000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3497.6001000,-311.2999900,-3.6000000,0.0000000,0.0000000,51.2130000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3497.8999000,-322.2000100,-3.6000000,0.0000000,0.0000000,45.2130000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3496.3999000,-325.2999900,-3.6000000,0.0000000,0.0000000,35.2090000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3498.3000500,-336.0000000,-3.6000000,0.0000000,0.0000000,51.2060000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3497.6001000,-344.5000000,-3.6000000,0.0000000,0.0000000,51.2020000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3500.1001000,-352.7999900,-3.6000000,0.0000000,0.0000000,51.2020000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3500.1001000,-350.6000100,-3.6000000,0.0000000,0.0000000,51.2020000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3505.3999000,-398.1000100,-3.6000000,0.0000000,0.0000000,47.2020000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3504.3000500,-399.3999900,-3.6000000,0.0000000,0.0000000,47.1970000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(657,3555.6999500,-427.3999900,1.3000000,0.0000000,0.0000000,0.0000000); //object(pinetree02) (1)
	CreateDynamicObject(870,3606.0000000,-424.3999900,1.0000000,0.0000000,0.0000000,0.0000000); //object(veg_pflowers2wee) (1)
	CreateDynamicObject(870,3603.6001000,-416.7999900,2.4000000,0.0000000,0.0000000,0.0000000); //object(veg_pflowers2wee) (2)
	CreateDynamicObject(870,3601.1999500,-421.6000100,2.1000000,0.0000000,0.0000000,0.0000000); //object(veg_pflowers2wee) (3)
	CreateDynamicObject(1597,3611.6992200,-411.0000000,3.8000000,0.0000000,0.0000000,6.2460000); //object(cntrlrsac1) (1)
	CreateDynamicObject(1361,3638.8000500,-415.2999900,2.0000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (1)
	CreateDynamicObject(1361,3637.5000000,-423.5000000,1.4000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (2)
	CreateDynamicObject(1361,3632.5000000,-421.2999900,1.8000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (3)
	CreateDynamicObject(1361,3634.6001000,-412.6000100,2.4000000,0.0000000,0.0000000,0.0000000); //object(cj_bush_prop2) (4)
	CreateDynamicObject(17639,3601.3000500,-437.2000100,1.2000000,0.0000000,0.0000000,6.2400000); //object(lae2_roads31) (2)
	CreateDynamicObject(17639,3699.1001000,-426.5000000,1.2000000,0.0000000,0.0000000,6.2350000); //object(lae2_roads31) (2)
	CreateDynamicObject(17639,3608.0000000,-504.7000100,1.2000000,0.0000000,0.0000000,6.2240000); //object(lae2_roads31) (2)
	CreateDynamicObject(3444,3574.6999500,-533.2999900,3.7000000,0.0000000,0.0000000,275.9880000); //object(shabbyhouse02_lvs) (1)
	CreateDynamicObject(3466,3601.3999000,-530.5000000,3.8000000,0.0000000,0.0000000,276.2400000); //object(shabbyhouse01_lvs) (1)
	CreateDynamicObject(3464,3627.8999000,-527.5999800,3.6000000,0.0000000,0.0000000,276.2400000); //object(shabbyhouse03_lvs) (1)
	CreateDynamicObject(8661,3565.6001000,-479.3999900,1.3000000,0.0000000,0.0000000,275.9930000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(8661,3587.8000500,-487.0000000,1.3000000,0.0000000,0.0000000,186.4930000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(8661,3585.1999500,-484.0000000,1.3000000,0.0000000,0.0000000,186.4930000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(3580,3563.3999000,-484.5000000,5.4000000,0.0000000,0.0000000,185.7460000); //object(compbigho2_lae) (1)
	CreateDynamicObject(9321,3574.5000000,-478.2000100,2.0000000,0.0000000,0.0000000,276.2350000); //object(garage_sfn01) (1)
	CreateDynamicObject(1408,3555.6999500,-479.8999900,1.4000000,0.0000000,0.0000000,276.7460000); //object(dyn_f_wood_2) (17)
	CreateDynamicObject(1408,3556.3000500,-485.1000100,1.4000000,0.0000000,0.0000000,276.4930000); //object(dyn_f_wood_2) (18)
	CreateDynamicObject(1408,3556.8999000,-490.2999900,1.4000000,0.0000000,0.0000000,276.4870000); //object(dyn_f_wood_2) (19)
	CreateDynamicObject(1408,3557.1999500,-495.6000100,1.5000000,0.0000000,0.0000000,275.4870000); //object(dyn_f_wood_2) (20)
	CreateDynamicObject(1408,3557.5000000,-497.7000100,1.4000000,0.0000000,0.0000000,276.4870000); //object(dyn_f_wood_2) (21)
	CreateDynamicObject(1408,3560.6001000,-500.0000000,1.4000000,0.0000000,0.0000000,6.4870000); //object(dyn_f_wood_2) (22)
	CreateDynamicObject(1408,3569.1999500,-499.1000100,1.4000000,0.0000000,0.0000000,6.4820000); //object(dyn_f_wood_2) (23)
	CreateDynamicObject(1408,3571.6001000,-498.7999900,1.4000000,0.0000000,0.0000000,6.4820000); //object(dyn_f_wood_2) (24)
	CreateDynamicObject(1408,3581.6999500,-497.6000100,1.4000000,0.0000000,0.0000000,7.2340000); //object(dyn_f_wood_2) (25)
	CreateDynamicObject(1408,3584.1001000,-494.7000100,1.4000000,0.0000000,0.0000000,98.2340000); //object(dyn_f_wood_2) (26)
	CreateDynamicObject(1408,3583.3999000,-489.6000100,1.4000000,0.0000000,0.0000000,98.2340000); //object(dyn_f_wood_2) (27)
	CreateDynamicObject(1408,3582.6999500,-484.3999900,1.4000000,0.0000000,0.0000000,98.2340000); //object(dyn_f_wood_2) (28)
	CreateDynamicObject(1408,3582.3000500,-481.3999900,1.4000000,0.0000000,0.0000000,98.2340000); //object(dyn_f_wood_2) (29)
	CreateDynamicObject(1281,3560.6999500,-495.8999900,1.8000000,0.0000000,0.0000000,5.9990000); //object(parktable1) (1)
	CreateDynamicObject(640,3567.8000500,-490.7999900,1.9000000,0.0000000,0.0000000,95.7460000); //object(kb_planter_bush2) (1)
	CreateDynamicObject(1364,3583.1999500,-495.0000000,1.6000000,0.0000000,0.0000000,277.9980000); //object(cj_bush_prop) (1)
	CreateDynamicObject(1281,3568.3999000,-495.0000000,1.8000000,0.0000000,0.0000000,5.9990000); //object(parktable1) (2)
	CreateDynamicObject(17639,3703.3999000,-494.2000100,1.1000000,0.0000000,0.0000000,6.2240000); //object(lae2_roads31) (2)
	CreateDynamicObject(3466,3654.3000500,-524.7000100,3.8000000,0.0000000,0.0000000,276.2400000); //object(shabbyhouse01_lvs) (1)
	CreateDynamicObject(3444,3681.0000000,-521.7999900,3.7000000,0.0000000,0.0000000,276.2400000); //object(shabbyhouse02_lvs) (1)
	CreateDynamicObject(3464,3707.3999000,-518.7999900,3.5000000,0.0000000,0.0000000,276.2400000); //object(shabbyhouse03_lvs) (1)
	CreateDynamicObject(3445,3729.6999500,-515.7999900,4.1000000,0.0000000,0.0000000,185.9930000); //object(vegasxrexhse08) (1)
	CreateDynamicObject(3446,3747.8000500,-513.9000200,4.7000000,0.0000000,0.0000000,185.9930000); //object(vegasxrexhse10) (1)
	CreateDynamicObject(3483,3735.1001000,-463.7999900,8.1000000,0.0000000,0.0000000,5.7460000); //object(vegasxrexhse09) (1)
	CreateDynamicObject(3484,3705.1999500,-466.7999900,7.8000000,0.0000000,0.0000000,6.2460000); //object(vegasxrexhse03) (1)
	CreateDynamicObject(8661,3627.1999500,-482.6000100,1.3000000,0.0000000,0.0000000,186.4930000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(5520,3596.0000000,-485.5000000,6.1000000,0.0000000,0.0000000,6.7460000); //object(bdupshouse_lae) (1)
	CreateDynamicObject(1408,3608.3000500,-492.1000100,1.8000000,0.0000000,0.0000000,96.9820000); //object(dyn_f_wood_2) (25)
	CreateDynamicObject(1360,3586.8000500,-495.7999900,1.6000000,0.0000000,0.0000000,7.4980000); //object(cj_bush_prop3) (9)
	CreateDynamicObject(1360,3586.6001000,-494.2000100,1.6000000,0.0000000,0.0000000,7.4930000); //object(cj_bush_prop3) (10)
	CreateDynamicObject(1360,3587.8000500,-496.5000000,1.6000000,0.0000000,0.0000000,276.7460000); //object(cj_bush_prop3) (11)
	CreateDynamicObject(6137,3621.6999500,-482.7999900,5.8000000,0.0000000,0.0000000,276.4980000); //object(gaz12_law) (1)
	CreateDynamicObject(1418,3631.3999000,-483.7999900,1.3000000,0.0000000,0.0000000,96.0000000); //object(dyn_f_wood_3) (1)
	CreateDynamicObject(1418,3631.6999500,-487.2000100,1.3000000,0.0000000,0.0000000,95.9990000); //object(dyn_f_wood_3) (2)
	CreateDynamicObject(1418,3632.0000000,-490.3999900,1.3000000,0.0000000,0.0000000,95.9990000); //object(dyn_f_wood_3) (3)
	CreateDynamicObject(1418,3611.6001000,-490.1000100,1.3000000,0.0000000,0.0000000,276.2490000); //object(dyn_f_wood_3) (4)
	CreateDynamicObject(1418,3611.8999000,-492.6000100,1.3000000,0.0000000,0.0000000,276.2460000); //object(dyn_f_wood_3) (5)
	CreateDynamicObject(8661,3666.8000500,-478.2999900,1.3000000,0.0000000,0.0000000,186.4930000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(8661,3671.3000500,-477.7999900,0.6000000,0.0000000,0.0000000,185.9930000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(8661,3669.1999500,-458.5000000,1.3000000,0.0000000,0.0000000,186.4930000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(4178,3671.8999000,-478.7000100,4.9000000,0.0000000,0.0000000,186.2460000); //object(bailbonds3_lan) (1)
	CreateDynamicObject(9697,3642.1279300,-484.6171900,0.4666700,0.0000000,0.0000000,0.0000000); //object(carspaces3_sfw) (1)
	CreateDynamicObject(3618,3641.6999500,-481.2999900,3.7000000,0.0000000,0.0000000,6.4980000); //object(nwlaw2husjm3_law2) (2)
	CreateDynamicObject(2001,3642.3000500,-483.7999900,1.3000000,0.0000000,0.0000000,5.9990000); //object(nu_plant_ofc) (1)
	CreateDynamicObject(3313,3687.8999000,-405.2000100,4.1000000,0.0000000,0.0000000,6.4980000); //object(sw_woodhaus03) (1)
	CreateDynamicObject(3351,3712.0000000,-396.3999900,4.6000000,0.0000000,0.0000000,6.4870000); //object(sw_bigburbsave) (1)
	CreateDynamicObject(1504,3714.0000000,-397.8999900,2.9000000,0.0000000,0.0000000,6.4980000); //object(gen_doorext06) (1)
	CreateDynamicObject(11469,3688.8000500,-444.2000100,1.4000000,0.0000000,0.0000000,96.2460000); //object(des_bullgrill_) (1)
	CreateDynamicObject(16605,3718.1999500,-445.1000100,1.0000000,0.0000000,0.0000000,185.9990000); //object(des_stwnmotel03) (1)
	CreateDynamicObject(8661,3720.0000000,-444.2000100,1.3000000,0.0000000,0.0000000,186.4930000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(8661,3707.1001000,-445.6000100,0.5000000,0.0000000,0.0000000,186.4930000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(997,3732.0000000,-434.0000000,1.0000000,0.0000000,0.0000000,274.9990000); //object(lhouse_barrier3) (1)
	CreateDynamicObject(997,3732.0000000,-433.0000000,1.0000000,0.0000000,0.0000000,274.9990000); //object(lhouse_barrier3) (2)
	CreateDynamicObject(997,3705.1999500,-436.7999900,0.8000000,0.0000000,0.0000000,274.9990000); //object(lhouse_barrier3) (3)
	CreateDynamicObject(997,3705.1001000,-435.8999900,0.8000000,0.0000000,0.0000000,274.9990000); //object(lhouse_barrier3) (4)
	CreateDynamicObject(1364,3708.8000500,-440.7000100,1.6000000,0.0000000,0.0000000,186.2460000); //object(cj_bush_prop) (2)
	CreateDynamicObject(17639,3706.8000500,-363.1000100,1.0000000,0.0000000,0.0000000,6.2130000); //object(lae2_roads31) (2)
	CreateDynamicObject(17639,3773.1999500,-418.3999900,1.2000000,0.0000000,0.0000000,6.2240000); //object(lae2_roads31) (2)
	CreateDynamicObject(17639,3780.1001000,-485.8999900,1.2000000,0.0000000,0.0000000,6.2130000); //object(lae2_roads31) (2)
	CreateDynamicObject(3445,3766.1001000,-512.0000000,4.3000000,0.0000000,0.0000000,186.2460000); //object(vegasxrexhse08) (1)
	CreateDynamicObject(3446,3784.3000500,-509.7000100,4.4000000,0.0000000,0.0000000,185.9930000); //object(vegasxrexhse10) (1)
	CreateDynamicObject(3606,3756.6999500,-469.2000100,4.3000000,0.0000000,0.0000000,95.9990000); //object(bevbrkhus1) (1)
	CreateDynamicObject(8661,3768.1999500,-467.3999900,1.2000000,0.0000000,0.0000000,186.4930000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(3606,3782.0000000,-466.2999900,4.2000000,0.0000000,0.0000000,275.9930000); //object(bevbrkhus1) (2)
	CreateDynamicObject(1408,3763.3999000,-459.2999900,1.1000000,0.0000000,0.0000000,187.2500000); //object(dyn_f_wood_2) (30)
	CreateDynamicObject(1408,3768.6001000,-458.6000100,1.1000000,0.0000000,0.0000000,187.2500000); //object(dyn_f_wood_2) (31)
	CreateDynamicObject(1408,3773.3999000,-458.0000000,1.1000000,0.0000000,0.0000000,187.2450000); //object(dyn_f_wood_2) (32)
	CreateDynamicObject(1408,3768.8999000,-461.6000100,1.1000000,0.0000000,0.0000000,97.4950000); //object(dyn_f_wood_2) (33)
	CreateDynamicObject(1408,3769.6001000,-466.7999900,1.1000000,0.0000000,0.0000000,97.4930000); //object(dyn_f_wood_2) (34)
	CreateDynamicObject(1408,3770.3000500,-472.1000100,1.1000000,0.0000000,0.0000000,97.4930000); //object(dyn_f_wood_2) (35)
	CreateDynamicObject(1408,3770.6001000,-474.6000100,1.1000000,0.0000000,0.0000000,97.4930000); //object(dyn_f_wood_2) (36)
	CreateDynamicObject(9321,3764.8999000,-462.0000000,2.0000000,0.0000000,0.0000000,277.2450000); //object(garage_sfn01) (3)
	CreateDynamicObject(9321,3772.8000500,-461.0000000,2.0000000,0.0000000,0.0000000,277.2400000); //object(garage_sfn01) (4)
	CreateDynamicObject(8661,3765.8999000,-447.6000100,1.3000000,0.0000000,0.0000000,186.4930000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(8661,3758.1001000,-439.8999900,1.3000000,0.0000000,0.0000000,186.4930000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(8661,3765.0000000,-439.1000100,1.3000000,0.0000000,0.0000000,186.4930000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(6010,3755.5000000,-434.6000100,2.2000000,0.0000000,0.0000000,6.9980000); //object(lawnboigashot25) (1)
	CreateDynamicObject(1257,3747.1999500,-432.1000100,2.1000000,0.0000000,0.0000000,276.4980000); //object(bustopm) (1)
	CreateDynamicObject(1229,3750.1999500,-431.0000000,2.3000000,0.0000000,0.0000000,188.9980000); //object(bussign1) (2)
	CreateDynamicObject(4152,3835.1999500,-442.8999900,1.2000000,0.0000000,0.0000000,185.7460000); //object(roads15_lan) (1)
	CreateDynamicObject(17033,3059.3999000,-309.2999900,-0.5000000,0.0000000,0.0000000,61.4970000); //object(cunt_rockgp2_15) (1)
	CreateDynamicObject(17033,3057.0996100,-297.1992200,-0.6000000,0.0000000,0.0000000,61.4900000); //object(cunt_rockgp2_15) (1)
	CreateDynamicObject(17033,3054.3999000,-283.2999900,-0.7000000,0.0000000,0.0000000,61.4960000); //object(cunt_rockgp2_15) (1)
	CreateDynamicObject(17033,3051.6999500,-269.6000100,-0.6000000,0.0000000,0.0000000,61.4960000); //object(cunt_rockgp2_15) (1)
	CreateDynamicObject(8661,3804.6999500,-434.6000100,1.3000000,0.0000000,0.0000000,186.4930000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(8661,3806.8000500,-454.3999900,1.4000000,0.0000000,0.0000000,186.4930000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(8661,3807.8994100,-463.0000000,0.6000000,0.0000000,0.0000000,186.4930000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(6490,3679.8000500,-328.6000100,8.7000000,0.0000000,0.0000000,186.4930000); //object(tvstudio01_law2) (1)
	CreateDynamicObject(12859,3659.6001000,-347.6000100,0.9000000,0.0000000,0.0000000,96.2400000); //object(sw_cont03) (1)
	CreateDynamicObject(8661,3811.3999000,-502.3999900,1.3000000,0.0000000,0.0000000,186.4930000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(8661,3812.6999500,-511.5000000,0.9000000,0.0000000,0.0000000,186.4930000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(3595,3802.5000000,-508.0000000,4.0000000,0.0000000,0.0000000,186.2500000); //object(dingbat01aex_la) (1)
	CreateDynamicObject(3596,3822.3000500,-506.2000100,4.5000000,0.0000000,0.0000000,185.4990000); //object(dingbat02aex_la) (1)
	CreateDynamicObject(970,3812.1999500,-494.7999900,1.3000000,0.0000000,0.0000000,276.9980000); //object(fencesmallb) (1)
	CreateDynamicObject(970,3810.0000000,-495.0000000,1.3000000,0.0000000,0.0000000,276.9930000); //object(fencesmallb) (3)
	CreateDynamicObject(970,3792.3999000,-497.1000100,1.1000000,0.0000000,0.0000000,275.4980000); //object(fencesmallb) (4)
	CreateDynamicObject(970,3829.8999000,-493.0000000,1.3000000,0.0000000,0.0000000,276.9930000); //object(fencesmallb) (5)
	CreateDynamicObject(10606,3807.5000000,-449.6000100,10.0000000,0.0000000,0.0000000,6.4980000); //object(cluckbell_sfs) (1)
	CreateDynamicObject(17521,3679.6999500,-385.1000100,4.3000000,0.0000000,0.0000000,186.2400000); //object(pawnshp_lae2) (1)
	CreateDynamicObject(8661,3679.1999500,-387.8999900,0.6000000,0.0000000,0.0000000,6.2290000); //object(gnhtelgrnd_lvs) (1)
	CreateDynamicObject(12847,3788.6001000,-388.7999900,5.6000000,0.0000000,0.0000000,275.9930000); //object(sprunk_fact) (1)
	CreateDynamicObject(17639,3766.8000500,-356.5000000,1.2000000,0.0000000,0.0000000,6.2130000); //object(lae2_roads31) (2)
	CreateDynamicObject(4152,3821.8999000,-313.5000000,1.2000000,0.0000000,0.0000000,185.7460000); //object(roads15_lan) (1)
	CreateDynamicObject(8661,3798.3999000,-372.2999900,1.3000000,0.0000000,0.0000000,186.4930000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(8661,3758.8999000,-376.7999900,1.3000000,0.0000000,0.0000000,186.4930000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(8661,3719.1999500,-381.2999900,1.3000000,0.0000000,0.0000000,186.4930000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(8661,3745.1001000,-401.8999900,1.3000000,0.0000000,0.0000000,186.4930000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(8661,3762.5000000,-389.8999900,1.3000000,0.0000000,0.0000000,96.4870000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(8661,3744.6001000,-396.5000000,1.3000000,0.0000000,0.0000000,186.4930000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(12940,3747.8000500,-395.1000100,4.7000000,0.0000000,0.0000000,276.2460000); //object(sw_apartments07) (1)
	CreateDynamicObject(5142,3780.1999500,-325.8999900,7.8000000,0.0000000,0.0000000,185.9990000); //object(las2plaza1bit) (1)
	CreateDynamicObject(987,3767.8000500,-367.6000100,0.5000000,0.0000000,0.0000000,275.5000000); //object(elecfence_bar) (11)
	CreateDynamicObject(987,3779.6001000,-366.2000100,0.5000000,0.0000000,0.0000000,187.2490000); //object(elecfence_bar) (12)
	CreateDynamicObject(987,3791.3999000,-364.7000100,0.5000000,0.0000000,0.0000000,187.2450000); //object(elecfence_bar) (13)
	CreateDynamicObject(987,3803.1999500,-363.2000100,0.5000000,0.0000000,0.0000000,187.2450000); //object(elecfence_bar) (14)
	CreateDynamicObject(987,3815.0000000,-361.7000100,0.5000000,0.0000000,0.0000000,187.2450000); //object(elecfence_bar) (15)
	CreateDynamicObject(987,3816.6999500,-361.3999900,0.5000000,0.0000000,0.0000000,187.2450000); //object(elecfence_bar) (16)
	CreateDynamicObject(987,3808.5000000,-398.1000100,0.5000000,0.0000000,0.0000000,5.9950000); //object(elecfence_bar) (17)
	CreateDynamicObject(3472,3813.1999500,-391.6000100,0.0000000,0.0000000,0.0000000,0.0000000); //object(circuslampost03) (4)
	CreateDynamicObject(3378,3782.8000500,-374.8999900,2.4000000,0.0000000,0.0000000,275.7460000); //object(ce_beerpile01) (1)
	CreateDynamicObject(3472,3746.6999500,-395.3999900,0.2000000,0.0000000,0.0000000,354.9960000); //object(circuslampost03) (5)
	CreateDynamicObject(8661,3790.1999500,-295.2999900,1.3000000,0.0000000,0.0000000,185.9820000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(8661,3788.1999500,-276.1000100,1.3000000,0.0000000,0.0000000,185.9770000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(8661,3751.8000500,-300.0000000,1.3000000,0.0000000,0.0000000,185.9770000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(8661,3749.6999500,-280.2000100,1.3000000,0.0000000,0.0000000,185.9770000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(8661,3786.6999500,-261.3999900,0.6000000,0.0000000,0.0000000,185.9880000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(8661,3747.6001000,-260.7000100,1.3000000,0.0000000,0.0000000,185.9770000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(8661,3786.8000500,-256.2999900,1.3000000,0.0000000,0.0000000,185.9770000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(1696,3811.6999500,-286.0000000,0.3000000,0.0000000,0.0000000,95.9990000); //object(roofstuff15) (4)
	CreateDynamicObject(1696,3811.1999500,-281.2000100,0.3000000,0.0000000,0.0000000,95.9930000); //object(roofstuff15) (5)
	CreateDynamicObject(987,3808.3999000,-278.3999900,0.5000000,0.0000000,0.0000000,96.4920000); //object(elecfence_bar) (18)
	CreateDynamicObject(3574,3753.8000500,-299.7999900,3.4000000,0.0000000,0.0000000,95.9990000); //object(lasdkrtgrp2) (1)
	CreateDynamicObject(3573,3806.6001000,-296.7999900,3.1000000,0.0000000,0.0000000,95.9990000); //object(lasdkrtgrp1) (1)
	CreateDynamicObject(8661,3615.6001000,-288.1000100,1.1000000,0.0000000,0.0000000,275.9930000); //object(gnhtelgrnd_lvs) (1)
	CreateDynamicObject(8661,3614.3999000,-277.2999900,1.2000000,0.0000000,0.0000000,275.9930000); //object(gnhtelgrnd_lvs) (1)
	CreateDynamicObject(1696,3617.8000500,-310.3999900,-0.4000000,0.0000000,0.0000000,5.9960000); //object(roofstuff15) (3)
	CreateDynamicObject(1696,3615.1001000,-310.7000100,-0.4000000,0.0000000,0.0000000,5.9930000); //object(roofstuff15) (3)
	CreateDynamicObject(17033,3608.3999000,-258.8999900,-2.3000000,0.0000000,0.0000000,328.0000000); //object(cunt_rockgp2_15) (15)
	CreateDynamicObject(17033,3613.1001000,-259.1000100,-1.5000000,0.0000000,0.0000000,327.9970000); //object(cunt_rockgp2_15) (16)
	CreateDynamicObject(17033,3621.7998000,-262.0000000,-2.5000000,0.0000000,0.0000000,240.9960000); //object(cunt_rockgp2_15) (17)
	CreateDynamicObject(17033,3624.1001000,-273.2999900,-2.3000000,0.0000000,0.0000000,235.7430000); //object(cunt_rockgp2_15) (18)
	CreateDynamicObject(17033,3624.8000500,-285.5000000,-2.2000000,0.0000000,0.0000000,235.7390000); //object(cunt_rockgp2_15) (19)
	CreateDynamicObject(17033,3626.0000000,-297.3999900,-2.2000000,0.0000000,0.0000000,235.7390000); //object(cunt_rockgp2_15) (20)
	CreateDynamicObject(6965,3604.6001000,-276.7000100,3.2000000,0.0000000,0.0000000,0.0000000); //object(venefountain02) (1)
	CreateDynamicObject(6965,3603.3000500,-262.6000100,3.2000000,0.0000000,0.0000000,0.0000000); //object(venefountain02) (2)
	CreateDynamicObject(8661,3581.3999000,-250.7000000,1.2000000,0.0000000,0.0000000,185.2350000); //object(gnhtelgrnd_lvs) (1)
	CreateDynamicObject(8661,3541.6999500,-254.3999900,1.2000000,0.0000000,0.0000000,185.4880000); //object(gnhtelgrnd_lvs) (1)
	CreateDynamicObject(8661,3539.8999000,-234.7000000,1.2000000,0.0000000,0.0000000,185.4880000); //object(gnhtelgrnd_lvs) (1)
	CreateDynamicObject(8661,3579.3999000,-231.0000000,0.6000000,0.0000000,0.0000000,185.4880000); //object(gnhtelgrnd_lvs) (1)
	CreateDynamicObject(16271,3573.1999500,-235.6000100,14.5000000,0.0000000,0.0000000,276.2460000); //object(des_railfac02) (1)
	CreateDynamicObject(5244,3550.2998000,-238.3994100,3.4000000,0.0000000,0.0000000,5.9990000); //object(lasntrk1im03) (1)
	CreateDynamicObject(987,3532.1999500,-265.2000100,0.6000000,0.0000000,0.0000000,5.7210000); //object(elecfence_bar) (10)
	CreateDynamicObject(987,3544.0000000,-264.0000000,0.6000000,0.0000000,0.0000000,5.7180000); //object(elecfence_bar) (10)
	CreateDynamicObject(987,3555.8999000,-262.8999900,0.6000000,0.0000000,0.0000000,5.7180000); //object(elecfence_bar) (10)
	CreateDynamicObject(987,3567.6999500,-261.7999900,0.6000000,0.0000000,0.0000000,5.7180000); //object(elecfence_bar) (10)
	CreateDynamicObject(987,3576.3999000,-261.1000100,0.6000000,0.0000000,0.0000000,5.7180000); //object(elecfence_bar) (10)
	CreateDynamicObject(17033,3601.8999000,-249.7000000,-2.2000000,0.0000000,0.0000000,239.9970000); //object(cunt_rockgp2_15) (21)
	CreateDynamicObject(17033,3600.6001000,-235.7000000,-2.9000000,0.0000000,0.0000000,233.9960000); //object(cunt_rockgp2_15) (22)
	CreateDynamicObject(17033,3598.8999000,-221.1000100,-3.1000000,0.0000000,0.0000000,233.9920000); //object(cunt_rockgp2_15) (23)
	CreateDynamicObject(17033,3589.6999500,-221.0000000,-3.1000000,0.0000000,0.0000000,323.9920000); //object(cunt_rockgp2_15) (24)
	CreateDynamicObject(17033,3581.1001000,-222.3000000,-3.1000000,0.0000000,0.0000000,323.9920000); //object(cunt_rockgp2_15) (25)
	CreateDynamicObject(17033,3572.5000000,-223.1000100,-3.1000000,0.0000000,0.0000000,323.9920000); //object(cunt_rockgp2_15) (26)
	CreateDynamicObject(17033,3563.3999000,-223.6000100,-3.1000000,0.0000000,0.0000000,323.9920000); //object(cunt_rockgp2_15) (27)
	CreateDynamicObject(17033,3554.1001000,-224.3000000,-3.1000000,0.0000000,0.0000000,323.9920000); //object(cunt_rockgp2_15) (28)
	CreateDynamicObject(17033,3545.1999500,-225.3000000,-3.1000000,0.0000000,0.0000000,323.9920000); //object(cunt_rockgp2_15) (29)
	CreateDynamicObject(17033,3538.6001000,-225.3000000,-3.1000000,0.0000000,0.0000000,323.9920000); //object(cunt_rockgp2_15) (30)
	CreateDynamicObject(17033,3531.8000500,-219.1000100,-3.1000000,0.0000000,0.0000000,237.7420000); //object(cunt_rockgp2_15) (31)
	CreateDynamicObject(987,3524.1999500,-265.2999900,0.6000000,0.0000000,0.0000000,2.4680000); //object(elecfence_bar) (10)
	CreateDynamicObject(17033,3529.8999000,-205.6000100,-3.1000000,0.0000000,0.0000000,237.7390000); //object(cunt_rockgp2_15) (32)
	CreateDynamicObject(17033,3529.6999500,-202.3000000,-3.1000000,0.0000000,0.0000000,237.7420000); //object(cunt_rockgp2_15) (33)
	CreateDynamicObject(1696,3590.6999500,-262.2999900,-0.4000000,0.0000000,0.0000000,4.9960000); //object(roofstuff15) (6)
	CreateDynamicObject(1696,3595.3000500,-261.8999900,-0.4000000,0.0000000,0.0000000,4.9930000); //object(roofstuff15) (6)
	CreateDynamicObject(17033,3604.8999000,-251.2000000,-2.2000000,0.0000000,0.0000000,247.9960000); //object(cunt_rockgp2_15) (34)
	CreateDynamicObject(5259,3532.8999000,-259.8999900,0.7000000,0.0000000,0.0000000,5.4990000); //object(las2dkwar01) (1)
	CreateDynamicObject(3630,3640.3000500,-325.7000100,1.8000000,0.0000000,0.0000000,95.7460000); //object(crdboxes2_las) (1)
	CreateDynamicObject(3630,3638.8999000,-312.7000100,1.9000000,0.0000000,0.0000000,95.7460000); //object(crdboxes2_las) (2)
	CreateDynamicObject(8661,3679.8000500,-385.7000100,1.3000000,0.0000000,0.0000000,186.4930000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(8661,3804.3999000,-239.7000000,1.3000000,0.0000000,0.0000000,185.9770000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(8661,3764.8000500,-243.8999900,1.3000000,0.0000000,0.0000000,185.9770000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(8661,3746.1001000,-245.8999900,1.1000000,0.0000000,0.0000000,185.9820000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(8661,3802.3999000,-220.1000100,0.6000000,0.0000000,0.0000000,185.9880000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(8661,3762.8000500,-224.3000000,0.6000000,0.0000000,0.0000000,185.9880000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(8661,3743.8999000,-226.2000000,0.6000000,0.0000000,0.0000000,185.9880000); //object(gnhtelgrnd_lvs) (5)
	CreateDynamicObject(9243,3798.5000000,-222.0000000,6.1000000,0.0000000,0.0000000,276.2460000); //object(hrborbuild_sfn02) (1)
	CreateDynamicObject(9243,3752.3994100,-227.0000000,5.3000000,0.0000000,0.0000000,276.2400000); //object(hrborbuild_sfn02) (2)
	CreateDynamicObject(987,3807.0996100,-266.5000000,0.5000000,0.0000000,0.0000000,96.4870000); //object(elecfence_bar) (18)
	CreateDynamicObject(987,3806.3999000,-261.2999900,0.5000000,0.0000000,0.0000000,96.4870000); //object(elecfence_bar) (18)
	CreateDynamicObject(1696,3812.8000500,-251.3000000,0.3000000,0.0000000,0.0000000,6.4870000); //object(roofstuff15) (5)
	CreateDynamicObject(1696,3817.6001000,-250.8000000,0.3000000,0.0000000,0.0000000,6.4760000); //object(roofstuff15) (5)
	CreateDynamicObject(3627,3780.1001000,-266.8999900,4.2000000,0.0000000,0.0000000,276.4980000); //object(dckcanpy) (1)
	CreateDynamicObject(17033,3731.3999000,-288.5000000,-2.3000000,0.0000000,0.0000000,56.9960000); //object(cunt_rockgp2_15) (17)
	CreateDynamicObject(17033,3730.1999500,-273.5000000,-2.3000000,0.0000000,0.0000000,56.9920000); //object(cunt_rockgp2_15) (17)
	CreateDynamicObject(17033,3729.1001000,-263.5000000,-2.3000000,0.0000000,0.0000000,56.9920000); //object(cunt_rockgp2_15) (17)
	CreateDynamicObject(17033,3727.5000000,-251.1000100,-2.3000000,0.0000000,0.0000000,56.9920000); //object(cunt_rockgp2_15) (17)
	CreateDynamicObject(17033,3726.1999500,-238.2000000,-2.3000000,0.0000000,0.0000000,56.9920000); //object(cunt_rockgp2_15) (17)
	CreateDynamicObject(17033,3725.5000000,-227.6000100,-2.3000000,0.0000000,0.0000000,56.9920000); //object(cunt_rockgp2_15) (17)
	CreateDynamicObject(17033,3726.1001000,-217.8999900,-2.3000000,0.0000000,0.0000000,348.7420000); //object(cunt_rockgp2_15) (17)
	CreateDynamicObject(17033,3735.8000500,-216.3999900,-2.3000000,0.0000000,0.0000000,322.7390000); //object(cunt_rockgp2_15) (17)
	CreateDynamicObject(17033,3749.8999000,-215.8000000,-2.3000000,0.0000000,0.0000000,322.7340000); //object(cunt_rockgp2_15) (17)
	CreateDynamicObject(17033,3763.8999000,-215.2000000,-2.3000000,0.0000000,0.0000000,322.7340000); //object(cunt_rockgp2_15) (17)
	CreateDynamicObject(17033,3776.3999000,-213.7000000,-2.3000000,0.0000000,0.0000000,322.7340000); //object(cunt_rockgp2_15) (17)
	CreateDynamicObject(17033,3789.8000500,-212.1000100,-2.3000000,0.0000000,0.0000000,322.7340000); //object(cunt_rockgp2_15) (17)
	CreateDynamicObject(17033,3804.3999000,-210.3999900,-2.3000000,0.0000000,0.0000000,322.7340000); //object(cunt_rockgp2_15) (17)
	CreateDynamicObject(17033,3817.5000000,-208.8999900,-2.3000000,0.0000000,0.0000000,322.7340000); //object(cunt_rockgp2_15) (17)
	CreateDynamicObject(17033,3823.1999500,-213.1000100,-2.3000000,0.0000000,0.0000000,231.7340000); //object(cunt_rockgp2_15) (17)
	CreateDynamicObject(17033,3824.0000000,-226.1992200,-2.3000000,0.0000000,0.0000000,261.7290000); //object(cunt_rockgp2_15) (17)
	CreateDynamicObject(17033,3840.1999500,-226.3999900,-2.3000000,0.0000000,0.0000000,323.7290000); //object(cunt_rockgp2_15) (17)
	CreateDynamicObject(4152,3558.8994100,-609.8994100,1.3000000,0.0000000,0.0000000,5.7460000); //object(roads15_lan) (1)
	CreateDynamicObject(4847,3888.5000000,-398.6000100,-8.1000000,0.0000000,0.0000000,96.2350000); //object(beach1_las0gj) (1)
	CreateDynamicObject(17033,3827.8999000,-227.6000100,-2.3000000,0.0000000,0.0000000,321.7270000); //object(cunt_rockgp2_15) (17)
	CreateDynamicObject(987,3825.1001000,-247.5000000,0.5000000,0.0000000,0.0000000,96.4870000); //object(elecfence_bar) (18)
	CreateDynamicObject(987,3824.1999500,-240.8000000,0.5000000,0.0000000,0.0000000,96.4870000); //object(elecfence_bar) (18)
	CreateDynamicObject(1290,3072.1001000,-328.7999900,6.1000000,0.0000000,0.0000000,97.2500000); //object(lamppost2) (1)
	CreateDynamicObject(1290,3115.8999000,-324.5000000,6.1000000,0.0000000,0.0000000,97.2450000); //object(lamppost2) (2)
	CreateDynamicObject(1290,3161.1999500,-319.3999900,6.1000000,0.0000000,0.0000000,97.2450000); //object(lamppost2) (3)
	CreateDynamicObject(1290,3195.6001000,-315.7000100,6.1000000,0.0000000,0.0000000,97.2450000); //object(lamppost2) (4)
	CreateDynamicObject(1290,3235.6001000,-311.6000100,6.1000000,0.0000000,0.0000000,97.2450000); //object(lamppost2) (5)
	CreateDynamicObject(1290,3285.6001000,-306.1000100,6.1000000,0.0000000,0.0000000,97.2450000); //object(lamppost2) (6)
	CreateDynamicObject(1290,3327.8999000,-301.6000100,6.1000000,0.0000000,0.0000000,97.2450000); //object(lamppost2) (7)
	CreateDynamicObject(1290,3377.8999000,-296.3999900,6.1000000,0.0000000,0.0000000,97.2450000); //object(lamppost2) (8)
	CreateDynamicObject(1290,3434.1999500,-290.7000100,6.1000000,0.0000000,0.0000000,97.2450000); //object(lamppost2) (9)
	CreateDynamicObject(1290,3487.3000500,-285.6000100,6.1000000,0.0000000,0.0000000,97.2450000); //object(lamppost2) (10)
	CreateDynamicObject(1290,3515.5000000,-282.8999900,6.1000000,0.0000000,0.0000000,97.2450000); //object(lamppost2) (11)
	CreateDynamicObject(1290,3514.3000500,-270.5000000,6.1000000,0.0000000,0.0000000,97.2450000); //object(lamppost2) (12)
	CreateDynamicObject(1290,3514.2998000,-270.5000000,6.1000000,0.0000000,0.0000000,97.2450000); //object(lamppost2) (13)
	CreateDynamicObject(1290,3486.1999500,-273.8999900,6.1000000,0.0000000,0.0000000,97.2450000); //object(lamppost2) (14)
	CreateDynamicObject(1290,3432.6999500,-279.0000000,6.1000000,0.0000000,0.0000000,97.2450000); //object(lamppost2) (15)
	CreateDynamicObject(1290,3376.3999000,-284.7000100,6.1000000,0.0000000,0.0000000,97.2450000); //object(lamppost2) (16)
	CreateDynamicObject(1290,3326.6999500,-289.8999900,6.1000000,0.0000000,0.0000000,97.2450000); //object(lamppost2) (17)
	CreateDynamicObject(1290,3283.8999000,-294.6000100,6.1000000,0.0000000,0.0000000,97.2450000); //object(lamppost2) (18)
	CreateDynamicObject(1290,3233.8999000,-299.8999900,6.1000000,0.0000000,0.0000000,97.2450000); //object(lamppost2) (19)
	CreateDynamicObject(1290,3194.0000000,-304.1000100,6.1000000,0.0000000,0.0000000,97.2450000); //object(lamppost2) (20)
	CreateDynamicObject(1290,3159.8000500,-307.7000100,6.1000000,0.0000000,0.0000000,97.2450000); //object(lamppost2) (21)
	CreateDynamicObject(1290,3114.0000000,-312.6000100,6.1000000,0.0000000,0.0000000,97.2450000); //object(lamppost2) (22)
	CreateDynamicObject(1696,3084.5000000,-333.8999900,-0.4000000,0.0000000,0.0000000,5.0000000); //object(roofstuff15) (7)
	CreateDynamicObject(1696,3089.0000000,-333.5000000,-0.4000000,0.0000000,0.0000000,5.7490000); //object(roofstuff15) (8)
	CreateDynamicObject(1290,3070.6999500,-317.0000000,6.1000000,0.0000000,0.0000000,97.2450000); //object(lamppost2) (23)
	CreateDynamicObject(1290,3563.8999000,-278.1000100,6.1000000,0.0000000,0.0000000,97.2450000); //object(lamppost2) (24)
	CreateDynamicObject(1290,3562.8000500,-266.2000100,6.1000000,0.0000000,0.0000000,97.2450000); //object(lamppost2) (25)
	CreateDynamicObject(1290,3524.1001000,-325.2000100,6.1000000,0.0000000,0.0000000,185.9950000); //object(lamppost2) (26)
	CreateDynamicObject(1290,3535.6001000,-324.0000000,6.1000000,0.0000000,0.0000000,185.9930000); //object(lamppost2) (27)
	CreateDynamicObject(1290,3540.1999500,-370.2000100,6.1000000,0.0000000,0.0000000,185.9930000); //object(lamppost2) (28)
	CreateDynamicObject(1290,3528.6999500,-371.7000100,6.1000000,0.0000000,0.0000000,185.9930000); //object(lamppost2) (29)
	CreateDynamicObject(1290,3535.1001000,-433.8999900,6.1000000,0.0000000,0.0000000,185.9930000); //object(lamppost2) (30)
	CreateDynamicObject(1290,3547.0000000,-432.1000100,6.1000000,0.0000000,0.0000000,185.9930000); //object(lamppost2) (31)
	CreateDynamicObject(1290,3554.1001000,-499.7000100,6.1000000,0.0000000,0.0000000,185.9930000); //object(lamppost2) (32)
	CreateDynamicObject(1290,3542.0000000,-501.3994100,6.1000000,0.0000000,0.0000000,185.9930000); //object(lamppost2) (33)
	CreateDynamicObject(1290,3600.8999000,-511.6000100,6.1000000,0.0000000,0.0000000,95.9930000); //object(lamppost2) (34)
	CreateDynamicObject(1290,3632.6001000,-496.0000000,6.1000000,0.0000000,0.0000000,95.9880000); //object(lamppost2) (35)
	CreateDynamicObject(1290,3671.5000000,-503.7999900,6.1000000,0.0000000,0.0000000,95.9880000); //object(lamppost2) (36)
	CreateDynamicObject(1290,3721.8000500,-486.2999900,6.1000000,0.0000000,0.0000000,95.9880000); //object(lamppost2) (37)
	CreateDynamicObject(1290,3755.3000500,-494.5000000,6.1000000,0.0000000,0.0000000,95.9880000); //object(lamppost2) (38)
	CreateDynamicObject(1290,3796.3000500,-477.8999900,6.1000000,0.0000000,0.0000000,95.9880000); //object(lamppost2) (39)
	CreateDynamicObject(1290,3829.3000500,-486.6000100,6.1000000,0.0000000,0.0000000,95.9880000); //object(lamppost2) (40)
	CreateDynamicObject(1290,3575.8000500,-433.8999900,6.1000000,0.0000000,0.0000000,94.9930000); //object(lamppost2) (41)
	CreateDynamicObject(1290,3623.3999000,-440.7999900,6.1000000,0.0000000,0.0000000,94.9880000); //object(lamppost2) (42)
	CreateDynamicObject(1290,3677.1999500,-422.6000100,6.1000000,0.0000000,0.0000000,94.9880000); //object(lamppost2) (43)
	CreateDynamicObject(1290,3733.8999000,-428.6000100,6.1000000,0.0000000,0.0000000,94.9880000); //object(lamppost2) (44)
	CreateDynamicObject(1290,3789.1999500,-410.7999900,6.1000000,0.0000000,0.0000000,94.9880000); //object(lamppost2) (45)
	CreateDynamicObject(1290,3822.1999500,-419.1000100,6.1000000,0.0000000,0.0000000,94.9880000); //object(lamppost2) (46)
	CreateDynamicObject(1290,3569.8999000,-383.8999900,6.1000000,0.0000000,0.0000000,95.9930000); //object(lamppost2) (47)
	CreateDynamicObject(1290,3608.6001000,-367.2999900,6.1000000,0.0000000,0.0000000,95.9880000); //object(lamppost2) (48)
	CreateDynamicObject(1290,3638.1001000,-376.6000100,6.1000000,0.0000000,0.0000000,95.9880000); //object(lamppost2) (49)
	CreateDynamicObject(1290,3705.5000000,-357.3999900,6.1000000,0.0000000,0.0000000,95.9880000); //object(lamppost2) (50)
	CreateDynamicObject(1290,3767.8000500,-362.2999900,6.1000000,0.0000000,0.0000000,95.9880000); //object(lamppost2) (51)
	CreateDynamicObject(1290,3814.5000000,-345.6000100,6.1000000,0.0000000,0.0000000,95.9880000); //object(lamppost2) (52)
	CreateDynamicObject(8678,3586.3999000,-587.7000100,1.9000000,0.0000000,0.0000000,95.9930000); //object(wdngchplgrnd01_lvs) (1)
	CreateDynamicObject(17639,3621.0996100,-634.2998000,1.3000000,0.0000000,0.0000000,6.2130000); //object(lae2_roads31) (2)
	CreateDynamicObject(6203,3677.5000000,-591.9000200,1.7000000,0.0000000,0.0000000,95.9710000); //object(laland_08) (1)
	CreateDynamicObject(17639,3718.8000500,-623.5999800,1.3000000,0.0000000,0.0000000,6.2070000); //object(lae2_roads31) (2)
	CreateDynamicObject(11490,3734.3999000,-588.2999900,1.0000000,0.0000000,0.0000000,275.4990000); //object(des_ranch) (1)
	CreateDynamicObject(11491,3723.5000000,-589.2999900,2.4000000,0.0000000,0.0000000,274.9990000); //object(des_ranchbits1) (1)
	CreateDynamicObject(3749,3710.5000000,-612.2999900,6.2000000,0.0000000,0.0000000,6.5000000); //object(clubgate01_lax) (1)
	CreateDynamicObject(1408,3722.6001000,-610.5000000,1.1000000,0.0000000,0.0000000,5.0000000); //object(dyn_f_wood_2) (37)
	CreateDynamicObject(1408,3727.8000500,-610.0999800,1.1000000,0.0000000,0.0000000,3.9960000); //object(dyn_f_wood_2) (38)
	CreateDynamicObject(1408,3733.0000000,-609.7000100,1.1000000,0.0000000,0.0000000,3.9940000); //object(dyn_f_wood_2) (39)
	CreateDynamicObject(1408,3738.1999500,-609.2999900,1.1000000,0.0000000,0.0000000,3.9940000); //object(dyn_f_wood_2) (40)
	CreateDynamicObject(1408,3743.3999000,-609.0000000,1.1000000,0.0000000,0.0000000,3.9940000); //object(dyn_f_wood_2) (41)
	CreateDynamicObject(1408,3746.8999000,-608.7000100,1.1000000,0.0000000,0.0000000,3.9940000); //object(dyn_f_wood_2) (42)
	CreateDynamicObject(1408,3749.6001000,-605.9000200,1.1000000,0.0000000,0.0000000,86.7440000); //object(dyn_f_wood_2) (43)
	CreateDynamicObject(1408,3750.1001000,-600.7000100,1.1000000,0.0000000,0.0000000,86.7430000); //object(dyn_f_wood_2) (44)
	CreateDynamicObject(1408,3750.3999000,-595.5000000,1.1000000,0.0000000,0.0000000,85.7430000); //object(dyn_f_wood_2) (45)
	CreateDynamicObject(1408,3750.8999000,-590.2000100,1.1000000,0.0000000,0.0000000,85.7370000); //object(dyn_f_wood_2) (46)
	CreateDynamicObject(1408,3751.3999000,-585.0000000,1.1000000,0.0000000,0.0000000,85.7370000); //object(dyn_f_wood_2) (47)
	CreateDynamicObject(1408,3751.6999500,-582.2999900,1.1000000,0.0000000,0.0000000,85.7370000); //object(dyn_f_wood_2) (48)
	CreateDynamicObject(1408,3749.5000000,-579.0000000,1.1000000,0.0000000,0.0000000,165.7370000); //object(dyn_f_wood_2) (49)
	CreateDynamicObject(1408,3744.6999500,-577.0000000,1.1000000,0.0000000,0.0000000,147.2340000); //object(dyn_f_wood_2) (50)
	CreateDynamicObject(1408,3741.0000000,-573.4000200,1.1000000,0.0000000,0.0000000,124.4830000); //object(dyn_f_wood_2) (51)
	CreateDynamicObject(1408,3739.3999000,-571.0000000,1.1000000,0.0000000,0.0000000,122.9810000); //object(dyn_f_wood_2) (52)
	CreateDynamicObject(1408,3735.3999000,-569.0000000,1.1000000,0.0000000,0.0000000,186.7250000); //object(dyn_f_wood_2) (53)
	CreateDynamicObject(1408,3730.1999500,-569.5999800,1.1000000,0.0000000,0.0000000,186.7240000); //object(dyn_f_wood_2) (54)
	CreateDynamicObject(1408,3725.0000000,-570.0999800,1.1000000,0.0000000,0.0000000,186.7240000); //object(dyn_f_wood_2) (55)
	CreateDynamicObject(1408,3719.6999500,-570.7000100,1.1000000,0.0000000,0.0000000,186.4740000); //object(dyn_f_wood_2) (56)
	CreateDynamicObject(1408,3715.6001000,-571.0999800,1.1000000,0.0000000,0.0000000,186.4710000); //object(dyn_f_wood_2) (57)
	CreateDynamicObject(1408,3713.1999500,-574.0999800,1.1000000,0.0000000,0.0000000,275.9710000); //object(dyn_f_wood_2) (58)
	CreateDynamicObject(1408,3713.6999500,-579.2999900,1.1000000,0.0000000,0.0000000,275.9660000); //object(dyn_f_wood_2) (59)
	CreateDynamicObject(1408,3712.3999000,-584.0000000,1.1000000,0.0000000,0.0000000,230.2160000); //object(dyn_f_wood_2) (60)
	CreateDynamicObject(1408,3709.0000000,-588.0999800,1.1000000,0.0000000,0.0000000,230.2130000); //object(dyn_f_wood_2) (61)
	CreateDynamicObject(1408,3706.6999500,-590.9000200,1.1000000,0.0000000,0.0000000,230.2130000); //object(dyn_f_wood_2) (62)
	CreateDynamicObject(1408,3702.3999000,-593.2000100,1.1000000,0.0000000,0.0000000,185.9630000); //object(dyn_f_wood_2) (63)
	CreateDynamicObject(1408,3697.1001000,-593.7000100,1.1000000,0.0000000,0.0000000,185.9600000); //object(dyn_f_wood_2) (64)
	CreateDynamicObject(1408,3692.0000000,-594.2000100,1.1000000,0.0000000,0.0000000,185.9600000); //object(dyn_f_wood_2) (65)
	CreateDynamicObject(1408,3687.6999500,-594.5999800,1.1000000,0.0000000,0.0000000,185.9600000); //object(dyn_f_wood_2) (66)
	CreateDynamicObject(1408,3685.3000500,-597.5000000,1.1000000,0.0000000,0.0000000,275.9600000); //object(dyn_f_wood_2) (67)
	CreateDynamicObject(1408,3685.8999000,-602.7999900,1.1000000,0.0000000,0.0000000,275.9600000); //object(dyn_f_wood_2) (68)
	CreateDynamicObject(1408,3686.5000000,-608.0000000,1.1000000,0.0000000,0.0000000,275.9600000); //object(dyn_f_wood_2) (69)
	CreateDynamicObject(1408,3689.5000000,-610.7000100,1.1000000,0.0000000,0.0000000,6.2100000); //object(dyn_f_wood_2) (70)
	CreateDynamicObject(1408,3694.6999500,-610.2000100,1.1000000,0.0000000,0.0000000,6.2070000); //object(dyn_f_wood_2) (71)
	CreateDynamicObject(1408,3699.6999500,-611.0000000,1.1000000,0.0000000,0.0000000,336.2070000); //object(dyn_f_wood_2) (72)
	CreateDynamicObject(3525,3726.6999500,-589.0999800,1.2000000,0.0000000,0.0000000,92.0000000); //object(exbrtorch01) (1)
	CreateDynamicObject(2008,3738.3999000,-592.0000000,2.1000000,0.0000000,0.0000000,185.9990000); //object(officedesk1) (1)
	CreateDynamicObject(1714,3737.3999000,-591.2000100,2.3000000,0.0000000,0.0000000,3.9990000); //object(kb_swivelchair1) (1)
	CreateDynamicObject(1726,3730.1001000,-587.7000100,2.1000000,0.0000000,0.0000000,276.2460000); //object(mrk_seating2) (1)
	CreateDynamicObject(1824,3734.8999000,-587.7999900,2.4000000,0.0000000,0.0000000,6.7460000); //object(craps_table) (1)
	CreateDynamicObject(3472,3706.8000500,-600.4000200,0.1000000,0.0000000,0.0000000,60.0000000); //object(circuslampost03) (6)
	CreateDynamicObject(688,3681.8000500,-604.7999900,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (1)
	CreateDynamicObject(688,3660.1999500,-604.0999800,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (2)
	CreateDynamicObject(688,3696.8000500,-580.7000100,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (3)
	CreateDynamicObject(688,3664.8999000,-593.5000000,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3657.3000500,-583.0000000,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (6)
	CreateDynamicObject(688,3668.3000500,-606.5000000,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (8)
	CreateDynamicObject(688,3680.1001000,-590.0000000,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (9)
	CreateDynamicObject(688,3681.8000500,-576.2000100,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (10)
	CreateDynamicObject(688,3703.5000000,-571.5999800,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (11)
	CreateDynamicObject(688,3668.5000000,-582.4000200,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (12)
	CreateDynamicObject(3619,3643.6999500,-596.2000100,4.9000000,0.0000000,0.0000000,95.9990000); //object(nwlaw2husjm4_law2) (1)
	CreateDynamicObject(688,3623.5000000,-606.5999800,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (13)
	CreateDynamicObject(688,3658.3999000,-613.5000000,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (14)
	CreateDynamicObject(688,3629.6001000,-615.4000200,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (15)
	CreateDynamicObject(688,3625.8000500,-575.2999900,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (16)
	CreateDynamicObject(688,3623.6001000,-585.0999800,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (17)
	CreateDynamicObject(688,3617.8000500,-577.9000200,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (18)
	CreateDynamicObject(688,3646.8999000,-614.4000200,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (19)
	CreateDynamicObject(688,3637.3999000,-615.2999900,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (20)
	CreateDynamicObject(3666,3615.1001000,-603.7999900,1.6000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (1)
	CreateDynamicObject(3666,3614.0000000,-594.0999800,1.5000000,0.0000000,0.0000000,0.0000000); //object(airuntest_las) (2)
	CreateDynamicObject(3264,3618.1001000,-624.4000200,0.6000000,0.0000000,0.0000000,5.2460000); //object(privatesign3) (1)
	CreateDynamicObject(3262,3618.0000000,-613.9000200,0.2000000,0.0000000,0.0000000,342.0000000); //object(privatesign1) (1)
	CreateDynamicObject(3263,3620.1001000,-620.5999800,0.5000000,0.0000000,0.0000000,346.0000000); //object(privatesign2) (1)
	CreateDynamicObject(3265,3617.8000500,-618.0999800,1.2000000,0.0000000,0.0000000,338.5000000); //object(privatesign4) (1)
	CreateDynamicObject(870,3616.6001000,-591.4000200,0.7000000,0.0000000,0.0000000,8.0000000); //object(veg_pflowers2wee) (4)
	CreateDynamicObject(870,3617.3999000,-606.2000100,0.7000000,0.0000000,0.0000000,7.9980000); //object(veg_pflowers2wee) (5)
	CreateDynamicObject(870,3628.1999500,-604.4000200,0.7000000,0.0000000,0.0000000,7.9980000); //object(veg_pflowers2wee) (6)
	CreateDynamicObject(870,3628.5996100,-611.1992200,0.7000000,0.0000000,0.0000000,49.9930000); //object(veg_pflowers2wee) (7)
	CreateDynamicObject(870,3619.6999500,-617.2000100,0.7000000,0.0000000,0.0000000,49.9930000); //object(veg_pflowers2wee) (8)
	CreateDynamicObject(3505,3589.5000000,-580.5000000,1.0000000,0.0000000,0.0000000,0.0000000); //object(vgsn_nitree_y01) (1)
	CreateDynamicObject(870,3604.8999000,-622.7999900,1.0000000,0.0000000,0.0000000,49.9930000); //object(veg_pflowers2wee) (9)
	CreateDynamicObject(870,3591.3999000,-576.5999800,1.0000000,0.0000000,0.0000000,3.9930000); //object(veg_pflowers2wee) (10)
	CreateDynamicObject(870,3593.1001000,-592.4000200,1.0000000,0.0000000,0.0000000,3.9880000); //object(veg_pflowers2wee) (11)
	CreateDynamicObject(870,3584.6001000,-580.7000100,1.0000000,0.0000000,0.0000000,3.9880000); //object(veg_pflowers2wee) (12)
	CreateDynamicObject(870,3585.3000500,-566.7000100,1.0000000,0.0000000,0.0000000,3.9880000); //object(veg_pflowers2wee) (13)
	CreateDynamicObject(870,3584.5000000,-590.0000000,1.0000000,0.0000000,0.0000000,3.9880000); //object(veg_pflowers2wee) (14)
	CreateDynamicObject(870,3572.6001000,-606.5000000,1.0000000,0.0000000,0.0000000,3.9880000); //object(veg_pflowers2wee) (15)
	CreateDynamicObject(870,3576.5000000,-626.7999900,1.0000000,0.0000000,0.0000000,3.9880000); //object(veg_pflowers2wee) (16)
	CreateDynamicObject(870,3576.5000000,-626.7998000,1.0000000,0.0000000,0.0000000,3.9880000); //object(veg_pflowers2wee) (17)
	CreateDynamicObject(6356,3704.1999500,-547.2999900,12.2000000,0.0000000,0.0000000,333.9900000); //object(sunset06_law2) (1)
	CreateDynamicObject(6356,3732.6999500,-541.2999900,12.2000000,0.0000000,0.0000000,243.9900000); //object(sunset06_law2) (2)
	CreateDynamicObject(6356,3747.5000000,-555.0000000,12.1000000,0.0000000,0.0000000,63.9950000); //object(sunset06_law2) (3)
	CreateDynamicObject(6356,3765.1992200,-590.1992200,11.9000000,0.0000000,0.0000000,334.4840000); //object(sunset06_law2) (6)
	CreateDynamicObject(17639,3792.8999000,-615.5999800,1.2000000,0.0000000,0.0000000,5.9570000); //object(lae2_roads31) (2)
	CreateDynamicObject(6356,3614.3999000,-552.2999900,12.2000000,0.0000000,0.0000000,183.7410000); //object(sunset06_law2) (8)
	CreateDynamicObject(6356,3645.5000000,-548.0000000,12.2000000,0.0000000,0.0000000,174.4900000); //object(sunset06_law2) (9)
	CreateDynamicObject(6356,3680.1001000,-543.2000100,12.2000000,0.0000000,0.0000000,154.4840000); //object(sunset06_law2) (10)
	CreateDynamicObject(6356,3664.0000000,-543.2000100,12.2000000,0.0000000,0.0000000,190.4860000); //object(sunset06_law2) (11)
	CreateDynamicObject(688,3616.3999000,-549.9000200,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3613.8000500,-565.5000000,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3632.6999500,-564.0000000,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3625.6001000,-555.0999800,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3648.1001000,-566.0000000,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3641.3999000,-557.0999800,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3657.1001000,-546.5999800,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3642.8000500,-544.2999900,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3667.8000500,-562.7999900,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3673.1999500,-546.7999900,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3692.8999000,-561.4000200,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3683.6001000,-555.2000100,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3690.8999000,-541.5999800,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3702.1001000,-552.5999800,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3706.3999000,-539.2000100,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3719.5000000,-562.5999800,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3718.8999000,-548.0000000,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3743.6001000,-542.0999800,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3731.1001000,-551.4000200,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3746.1999500,-556.7999900,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3760.3994100,-560.0996100,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3747.8999000,-567.5999800,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3761.8000500,-580.4000200,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3758.0000000,-599.2999900,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3765.5000000,-589.5996100,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3759.6999500,-570.0000000,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(6213,3638.3000500,-667.7000100,1.6000000,0.0000000,0.0000000,275.9930000); //object(venlaw_grnd) (1)
	CreateDynamicObject(6356,3623.3994100,-553.7998000,12.5000000,0.0000000,0.0000000,101.7390000); //object(sunset06_law2) (12)
	CreateDynamicObject(6356,3822.1999500,-583.9000200,12.0000000,0.0000000,0.0000000,334.7310000); //object(sunset06_law2) (6)
	CreateDynamicObject(6356,3793.1992200,-588.3994100,11.9000000,0.0000000,0.0000000,334.7260000); //object(sunset06_law2) (6)
	CreateDynamicObject(6356,3817.3000500,-539.2000100,12.2000000,0.0000000,0.0000000,66.2370000); //object(sunset06_law2) (6)
	CreateDynamicObject(6356,3820.8999000,-568.7000100,12.0000000,0.0000000,0.0000000,64.4840000); //object(sunset06_law2) (6)
	CreateDynamicObject(6356,3793.1999500,-562.2999900,11.9000000,0.0000000,0.0000000,64.4790000); //object(sunset06_law2) (6)
	CreateDynamicObject(6356,3786.5000000,-540.7999900,12.3000000,0.0000000,0.0000000,64.4790000); //object(sunset06_law2) (6)
	CreateDynamicObject(6356,3766.6001000,-546.2000100,12.3000000,0.0000000,0.0000000,6.4820000); //object(sunset06_law2) (6)
	CreateDynamicObject(688,3761.8999000,-536.7999900,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3791.6999500,-549.5000000,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3775.8000500,-533.4000200,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3772.6999500,-550.2999900,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3822.1001000,-534.4000200,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3803.6999500,-530.0000000,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3788.1001000,-536.2000100,-0.7000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3811.3999000,-549.2999900,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3828.8999000,-557.2999900,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3802.8000500,-562.4000200,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3779.6001000,-566.2999900,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3796.3999000,-581.0000000,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3780.1001000,-578.9000200,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3788.5000000,-559.4000200,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3818.3999000,-567.0999800,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3813.0000000,-582.2999900,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3826.3994100,-586.0996100,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3777.5996100,-597.6992200,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3790.5000000,-591.7000100,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3805.1001000,-594.7999900,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3816.1992200,-593.8994100,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3833.3000500,-574.7000100,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3837.5000000,-591.5000000,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3823.3999000,-546.5999800,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(4152,3848.2998000,-572.6992200,1.2000000,0.0000000,0.0000000,185.7460000); //object(roads15_lan) (1)
	CreateDynamicObject(688,3825.6001000,-524.2000100,0.8000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3799.3999000,-542.7999900,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(1696,3839.5000000,-545.4000200,0.4000000,0.0000000,0.0000000,97.7340000); //object(roofstuff15) (5)
	CreateDynamicObject(1696,3838.8000500,-540.2000100,0.4000000,0.0000000,0.0000000,97.7340000); //object(roofstuff15) (5)
	CreateDynamicObject(9517,3721.8000500,-654.7999900,4.5000000,0.0000000,0.0000000,5.9990000); //object(bigboxtmp16) (1)
	CreateDynamicObject(6356,3732.0000000,-632.2999900,12.0000000,0.0000000,0.0000000,246.9840000); //object(sunset06_law2) (6)
	CreateDynamicObject(6356,3692.6001000,-653.0000000,12.2000000,0.0000000,0.0000000,162.4880000); //object(sunset06_law2) (6)
	CreateDynamicObject(9220,3768.8999000,-639.7000100,4.0000000,0.0000000,0.0000000,5.4990000); //object(villa_sfn_chris_01) (2)
	CreateDynamicObject(6356,3769.3000500,-643.5999800,11.9000000,0.0000000,0.0000000,67.9890000); //object(sunset06_law2) (6)
	CreateDynamicObject(688,3752.1999500,-649.5999800,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3752.3999000,-632.7000100,-0.9000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3733.3994100,-640.0000000,-0.9000000,0.0000000,0.0000000,333.9950000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3746.8000500,-643.0999800,-0.9000000,0.0000000,0.0000000,333.9950000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3722.8999000,-634.2999900,-0.9000000,0.0000000,0.0000000,333.9950000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3778.8000500,-648.0999800,-0.9000000,0.0000000,0.0000000,333.9950000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(3802,3766.3000500,-635.2000100,2.7000000,0.0000000,0.0000000,90.0000000); //object(sfx_plant03) (1)
	CreateDynamicObject(1364,3770.6001000,-630.2999900,1.3000000,0.0000000,0.0000000,185.7460000); //object(cj_bush_prop) (3)
	CreateDynamicObject(877,3756.0000000,-644.7000100,1.5000000,0.0000000,0.0000000,358.0000000); //object(veg_pflowers04) (1)
	CreateDynamicObject(17033,3703.5000000,-678.7000100,-2.9000000,0.0000000,0.0000000,133.2200000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3751.7998000,-659.2998000,-2.9000000,0.0000000,0.0000000,133.2200000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3765.6999500,-658.5999800,-2.9000000,0.0000000,0.0000000,133.2200000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3773.5000000,-658.2000100,-2.9000000,0.0000000,0.0000000,133.2200000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3781.3000500,-657.7999900,-2.9000000,0.0000000,0.0000000,133.2200000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3785.6001000,-655.4000200,-3.1000000,0.0000000,0.0000000,142.4700000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3785.6001000,-655.4000200,-3.2000000,0.0000000,0.0000000,172.4650000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(688,3699.0000000,-639.5999800,-0.9000000,0.0000000,0.0000000,333.9950000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3701.1001000,-665.0999800,-0.9000000,0.0000000,0.0000000,263.9950000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3699.8999000,-654.0000000,-0.9000000,0.0000000,0.0000000,225.9900000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(3496,3731.3000500,-653.9000200,1.2000000,0.0000000,0.0000000,95.9990000); //object(vgsxrefbballnet) (1)
	CreateDynamicObject(870,3730.8999000,-647.4000200,1.5000000,0.0000000,0.0000000,49.9930000); //object(veg_pflowers2wee) (7)
	CreateDynamicObject(870,3718.5000000,-644.7999900,1.5000000,0.0000000,0.0000000,49.9930000); //object(veg_pflowers2wee) (7)
	CreateDynamicObject(870,3724.3999000,-649.2000100,1.5000000,0.0000000,0.0000000,33.9920000); //object(veg_pflowers2wee) (7)
	CreateDynamicObject(870,3723.8999000,-642.7000100,1.4000000,0.0000000,0.0000000,33.9860000); //object(veg_pflowers2wee) (7)
	CreateDynamicObject(870,3739.8999000,-653.4000200,0.7000000,0.0000000,0.0000000,33.9920000); //object(veg_pflowers2wee) (7)
	CreateDynamicObject(870,3758.5000000,-632.5000000,1.3000000,0.0000000,0.0000000,33.9810000); //object(veg_pflowers2wee) (7)
	CreateDynamicObject(870,3771.3000500,-645.5000000,0.7000000,0.0000000,0.0000000,33.9920000); //object(veg_pflowers2wee) (7)
	CreateDynamicObject(3934,3692.1001000,-602.7000100,1.5000000,0.0000000,0.0000000,5.9990000); //object(helipad01) (1)
	CreateDynamicObject(12814,3859.5000000,-638.2000100,1.1000000,0.0000000,0.0000000,185.9930000); //object(cuntyeland04) (1)
	CreateDynamicObject(12814,3831.1999500,-641.9000200,1.1000000,0.0000000,0.0000000,185.9930000); //object(cuntyeland04) (3)
	CreateDynamicObject(12814,3855.3000500,-588.7999900,1.1000000,0.0000000,0.0000000,185.9930000); //object(cuntyeland04) (4)
	CreateDynamicObject(18249,3829.3000500,-649.0999800,5.7000000,0.0000000,0.0000000,7.9980000); //object(cuntwjunk05) (1)
	CreateDynamicObject(18248,3837.8000500,-646.4000200,9.0000000,0.0000000,0.0000000,261.4930000); //object(cuntwjunk01) (1)
	CreateDynamicObject(12814,3864.6999500,-687.9000200,1.1000000,0.0000000,0.0000000,185.9930000); //object(cuntyeland04) (5)
	CreateDynamicObject(12814,3836.1999500,-690.7999900,1.1000000,0.0000000,0.0000000,185.9930000); //object(cuntyeland04) (6)
	CreateDynamicObject(18251,3854.3999000,-687.7000100,9.4000000,0.0000000,0.0000000,95.9930000); //object(cuntwjunk07) (2)
	CreateDynamicObject(18253,3850.3000500,-689.9000200,4.0000000,0.0000000,0.0000000,6.0000000); //object(cuntwjunk09) (2)
	CreateDynamicObject(18253,3868.5000000,-688.2999900,4.0000000,0.0000000,0.0000000,5.9990000); //object(cuntwjunk09) (3)
	CreateDynamicObject(18253,3859.0000000,-688.9000200,4.0000000,0.0000000,0.0000000,5.9990000); //object(cuntwjunk09) (4)
	CreateDynamicObject(13591,3867.8000500,-661.7999900,1.2000000,0.0000000,0.0000000,311.9950000); //object(kickcar28) (1)
	CreateDynamicObject(13591,3828.3000500,-678.4000200,1.1000000,0.0000000,0.0000000,43.9950000); //object(kickcar28) (2)
	CreateDynamicObject(17033,3788.1999500,-645.2000100,-3.4000000,0.0000000,0.0000000,226.4650000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3786.6999500,-635.5999800,-3.5000000,0.0000000,0.0000000,228.4610000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3791.8999000,-626.5000000,-3.6000000,0.0000000,0.0000000,141.4610000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3802.1999500,-625.9000200,-3.6000000,0.0000000,0.0000000,141.4600000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3810.3000500,-625.0999800,-3.6000000,0.0000000,0.0000000,141.4600000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3815.3000500,-630.4000200,-3.6000000,0.0000000,0.0000000,65.4600000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3815.8999000,-639.2000100,-3.6000000,0.0000000,0.0000000,53.4570000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3816.8999000,-648.5000000,-3.6000000,0.0000000,0.0000000,53.4540000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3817.8000500,-661.7999900,-3.6000000,0.0000000,0.0000000,53.4540000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3819.0000000,-671.7000100,-3.6000000,0.0000000,0.0000000,53.4540000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3819.6999500,-681.0999800,-3.6000000,0.0000000,0.0000000,53.4540000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3820.3000500,-688.9000200,-3.6000000,0.0000000,0.0000000,53.4540000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3821.0000000,-697.7999900,-3.6000000,0.0000000,0.0000000,53.4540000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3821.6999500,-707.2000100,-3.6000000,0.0000000,0.0000000,53.4540000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3822.3000500,-715.0000000,-3.6000000,0.0000000,0.0000000,53.4540000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3834.6001000,-717.2000100,-3.6000000,0.0000000,0.0000000,137.4500000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3844.3000500,-715.7999900,-3.6000000,0.0000000,0.0000000,137.4500000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3858.1001000,-714.2999900,-3.6000000,0.0000000,0.0000000,143.4500000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3872.1999500,-712.0000000,-3.6000000,0.0000000,0.0000000,143.4480000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3880.0000000,-711.0999800,-3.6000000,0.0000000,0.0000000,143.4480000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3880.6999500,-701.5000000,-3.6000000,0.0000000,0.0000000,229.4480000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3879.5000000,-687.2000100,-3.6000000,0.0000000,0.0000000,229.4440000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3878.6999500,-672.5000000,-3.6000000,0.0000000,0.0000000,229.4440000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3877.6999500,-663.4000200,-3.6000000,0.0000000,0.0000000,229.4440000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3875.8000500,-649.2000100,-3.6000000,0.0000000,0.0000000,229.4440000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3874.3999000,-634.7999900,-3.6000000,0.0000000,0.0000000,229.4440000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3873.3999000,-620.0999800,-3.6000000,0.0000000,0.0000000,229.4440000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3872.5000000,-606.2999900,-3.6000000,0.0000000,0.0000000,229.4440000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3871.3000500,-596.5000000,-3.6000000,0.0000000,0.0000000,229.4440000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3870.6001000,-586.0000000,-3.6000000,0.0000000,0.0000000,229.4440000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3868.8000500,-582.7000100,-3.6000000,0.0000000,0.0000000,222.4440000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3876.8000500,-576.9000200,-3.6000000,0.0000000,0.0000000,150.4400000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3877.8000500,-576.5999800,-3.6000000,0.0000000,0.0000000,150.4360000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(8167,3820.3000500,-622.7999900,1.6000000,0.0000000,0.0000000,96.0000000); //object(apgate1_vegs01) (1)
	CreateDynamicObject(8167,3827.6999500,-622.0999800,1.6000000,0.0000000,0.0000000,95.9990000); //object(apgate1_vegs01) (2)
	CreateDynamicObject(8167,3835.0000000,-621.2999900,1.6000000,0.0000000,0.0000000,95.9990000); //object(apgate1_vegs01) (3)
	CreateDynamicObject(8167,3840.6001000,-620.7000100,1.6000000,0.0000000,0.0000000,95.9990000); //object(apgate1_vegs01) (4)
	CreateDynamicObject(8167,3843.6001000,-625.0000000,1.6000000,0.0000000,0.0000000,5.9990000); //object(apgate1_vegs01) (5)
	CreateDynamicObject(8167,3844.3000500,-632.2999900,1.6000000,0.0000000,0.0000000,5.4990000); //object(apgate1_vegs01) (6)
	CreateDynamicObject(8167,3844.6999500,-636.4000200,1.6000000,0.0000000,0.0000000,5.9990000); //object(apgate1_vegs01) (7)
	CreateDynamicObject(8167,3864.6001000,-634.5000000,1.6000000,0.0000000,0.0000000,5.9990000); //object(apgate1_vegs01) (8)
	CreateDynamicObject(8167,3863.8000500,-627.2000100,1.6000000,0.0000000,0.0000000,5.9990000); //object(apgate1_vegs01) (9)
	CreateDynamicObject(8167,3863.3999000,-623.0000000,1.6000000,0.0000000,0.0000000,5.9990000); //object(apgate1_vegs01) (10)
	CreateDynamicObject(8167,3865.6001000,-617.9000200,1.6000000,0.0000000,0.0000000,275.9990000); //object(apgate1_vegs01) (11)
	CreateDynamicObject(8167,3867.3999000,-617.7000100,1.6000000,0.0000000,0.0000000,275.9930000); //object(apgate1_vegs01) (12)
	CreateDynamicObject(17033,3873.3000500,-616.9000200,-3.6000000,0.0000000,0.0000000,229.4440000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(7933,3621.6999500,-1210.4000200,1.6000000,0.0000000,0.0000000,0.0000000); //object(vegascrashbar06) (1)
	CreateDynamicObject(17033,3697.5000000,-682.2000100,-2.9000000,0.0000000,0.0000000,221.2200000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3690.1999500,-689.5000000,-2.9000000,0.0000000,0.0000000,153.2150000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3675.3000500,-692.0999800,-2.9000000,0.0000000,0.0000000,153.2100000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3661.8999000,-694.2999900,-2.9000000,0.0000000,0.0000000,144.9600000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3647.1001000,-695.0000000,-2.9000000,0.0000000,0.0000000,144.9590000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3633.6999500,-695.5999800,-2.9000000,0.0000000,0.0000000,144.9590000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3619.0000000,-696.5999800,-2.9000000,0.0000000,0.0000000,144.9590000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3605.1999500,-697.7999900,-2.9000000,0.0000000,0.0000000,144.9590000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3591.1999500,-699.4000200,-2.9000000,0.0000000,0.0000000,144.9590000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3588.3999000,-699.7000100,-2.9000000,0.0000000,0.0000000,140.9540000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3557.0000000,-747.5996100,-2.9000000,0.0000000,0.0000000,144.9480000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3546.2998000,-749.0000000,-2.9000000,0.0000000,0.0000000,144.9430000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(9833,3581.1001000,-659.5000000,3.3000000,0.0000000,0.0000000,346.5000000); //object(fountain_sfw) (1)
	CreateDynamicObject(870,3691.1001000,-652.9000200,0.8000000,0.0000000,0.0000000,49.9930000); //object(veg_pflowers2wee) (7)
	CreateDynamicObject(870,3692.6001000,-667.5000000,0.8000000,0.0000000,0.0000000,49.9930000); //object(veg_pflowers2wee) (7)
	CreateDynamicObject(870,3691.8000500,-660.2999900,0.8000000,0.0000000,0.0000000,49.9930000); //object(veg_pflowers2wee) (7)
	CreateDynamicObject(870,3693.3000500,-679.7000100,0.8000000,0.0000000,0.0000000,17.9930000); //object(veg_pflowers2wee) (7)
	CreateDynamicObject(870,3639.5000000,-650.7999900,0.8000000,0.0000000,0.0000000,17.9900000); //object(veg_pflowers2wee) (7)
	CreateDynamicObject(870,3593.1001000,-653.0000000,0.8000000,0.0000000,0.0000000,17.9900000); //object(veg_pflowers2wee) (7)
	CreateDynamicObject(870,3608.6001000,-655.4000200,0.8000000,0.0000000,0.0000000,17.9900000); //object(veg_pflowers2wee) (7)
	CreateDynamicObject(870,3621.1001000,-651.7999900,0.8000000,0.0000000,0.0000000,17.9900000); //object(veg_pflowers2wee) (7)
	CreateDynamicObject(1290,3548.5000000,-566.7999900,6.1000000,0.0000000,0.0000000,185.9930000); //object(lamppost2) (33)
	CreateDynamicObject(1290,3555.0996100,-629.5000000,6.1000000,0.0000000,0.0000000,185.9880000); //object(lamppost2) (33)
	CreateDynamicObject(1290,3574.8999000,-645.7000100,6.1000000,0.0000000,0.0000000,96.9930000); //object(lamppost2) (33)
	CreateDynamicObject(1290,3645.8000500,-637.5999800,6.1000000,0.0000000,0.0000000,96.9930000); //object(lamppost2) (33)
	CreateDynamicObject(1290,3717.6999500,-629.2999900,6.1000000,0.0000000,0.0000000,96.9930000); //object(lamppost2) (33)
	CreateDynamicObject(1290,3783.5000000,-622.2000100,6.1000000,0.0000000,0.0000000,96.9930000); //object(lamppost2) (33)
	CreateDynamicObject(1290,3842.1001000,-615.9000200,6.1000000,0.0000000,0.0000000,96.9930000); //object(lamppost2) (33)
	CreateDynamicObject(1290,3841.0000000,-604.5000000,6.1000000,0.0000000,0.0000000,96.9930000); //object(lamppost2) (33)
	CreateDynamicObject(1290,3782.1001000,-611.0999800,6.1000000,0.0000000,0.0000000,96.9930000); //object(lamppost2) (33)
	CreateDynamicObject(1290,3716.3999000,-618.0999800,6.1000000,0.0000000,0.0000000,96.9930000); //object(lamppost2) (33)
	CreateDynamicObject(1290,3644.1999500,-626.0000000,6.1000000,0.0000000,0.0000000,96.9930000); //object(lamppost2) (33)
	CreateDynamicObject(1290,3573.6999500,-633.7999900,6.1000000,0.0000000,0.0000000,96.9930000); //object(lamppost2) (33)
	CreateDynamicObject(1290,3566.6999500,-628.5000000,6.1000000,0.0000000,0.0000000,185.9930000); //object(lamppost2) (33)
	CreateDynamicObject(1290,3562.3999000,-565.2999900,6.1000000,0.0000000,0.0000000,185.9930000); //object(lamppost2) (33)
	CreateDynamicObject(1696,3572.0000000,-617.5000000,0.4000000,0.0000000,0.0000000,95.4820000); //object(roofstuff15) (5)
	CreateDynamicObject(1696,3572.3999000,-621.9000200,0.4000000,0.0000000,0.0000000,95.4820000); //object(roofstuff15) (5)
	CreateDynamicObject(1696,3563.0000000,-574.5999800,0.6000000,0.0000000,0.0000000,275.4770000); //object(roofstuff15) (5)
	CreateDynamicObject(1696,3562.5000000,-569.4000200,0.6000000,0.0000000,0.0000000,275.4770000); //object(roofstuff15) (5)
	CreateDynamicObject(1337,3573.2949200,-859.8144500,-3.0656700,0.0000000,0.0000000,0.0000000); //object(binnt07_la) (1)
	CreateDynamicObject(17033,3710.0000000,-677.2999900,-2.9000000,0.0000000,0.0000000,143.2200000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(1360,3515.6001000,-286.5000000,1.3000000,0.0000000,0.0000000,277.9980000); //object(cj_bush_prop3) (3)
	CreateDynamicObject(1360,3513.3000500,-286.8999900,1.3000000,0.0000000,0.0000000,277.9980000); //object(cj_bush_prop3) (3)
	CreateDynamicObject(1360,3511.0000000,-287.2000100,1.3000000,0.0000000,0.0000000,277.9980000); //object(cj_bush_prop3) (3)
	CreateDynamicObject(1360,3508.8000500,-287.5000000,1.3000000,0.0000000,0.0000000,277.9980000); //object(cj_bush_prop3) (3)
	CreateDynamicObject(1360,3506.6999500,-287.7000100,1.3000000,0.0000000,0.0000000,277.9980000); //object(cj_bush_prop3) (3)
	CreateDynamicObject(1360,3504.6001000,-288.0000000,1.3000000,0.0000000,0.0000000,277.9980000); //object(cj_bush_prop3) (3)
	CreateDynamicObject(1360,3502.5000000,-288.2000100,1.3000000,0.0000000,0.0000000,277.9980000); //object(cj_bush_prop3) (3)
	CreateDynamicObject(1360,3500.5000000,-288.3999900,1.3000000,0.0000000,0.0000000,277.9980000); //object(cj_bush_prop3) (3)
	CreateDynamicObject(1360,3498.5000000,-288.6000100,1.3000000,0.0000000,0.0000000,277.9980000); //object(cj_bush_prop3) (3)
	CreateDynamicObject(1360,3497.1001000,-288.7999900,1.3000000,0.0000000,0.0000000,277.9980000); //object(cj_bush_prop3) (3)
	CreateDynamicObject(1696,3592.1999500,-275.8999900,0.1000000,0.0000000,0.0000000,185.9900000); //object(roofstuff15) (3)
	CreateDynamicObject(1696,3536.0000000,-315.0000000,0.3000000,0.0000000,0.0000000,275.7380000); //object(roofstuff15) (3)
	CreateDynamicObject(1696,3535.5000000,-309.7999900,0.3000000,0.0000000,0.0000000,275.7350000); //object(roofstuff15) (3)
	CreateDynamicObject(896,3761.1999500,-654.7000100,-4.8000000,0.0000000,0.0000000,106.0000000); //object(searock06) (1)
	CreateDynamicObject(17033,3829.5000000,-717.5000000,-3.6000000,0.0000000,0.0000000,137.4500000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(5191,3571.1999500,-732.7000100,-4.5000000,0.0000000,0.0000000,5.9990000); //object(nwdkbridd_las2) (1)
	CreateDynamicObject(5191,3583.6001000,-851.2999900,-4.5000000,0.0000000,0.0000000,5.9990000); //object(nwdkbridd_las2) (3)
	CreateDynamicObject(17033,3586.3999000,-700.2999900,-2.9000000,0.0000000,0.0000000,140.9440000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(5435,3595.8000500,-965.5999800,1.4000000,0.0000000,0.0000000,95.9990000); //object(laeroad06) (1)
	CreateDynamicObject(4567,3660.1001000,-915.7000100,1.5000000,0.0000000,0.0000000,187.9980000); //object(road07_lan2) (1)
	CreateDynamicObject(4847,3769.3000500,-844.2000100,-7.8000000,0.0000000,0.0000000,187.7230000); //object(beach1_las0gj) (1)
	CreateDynamicObject(4567,3774.5000000,-899.5999800,1.7000000,0.0000000,0.0000000,187.9930000); //object(road07_lan2) (1)
	CreateDynamicObject(4567,3889.8999000,-883.4000200,1.9000000,0.0000000,0.0000000,187.9930000); //object(road07_lan2) (1)
	CreateDynamicObject(3314,3622.8999000,-951.0000000,2.4000000,0.0000000,0.0000000,187.2500000); //object(sw_bigburb_04) (2)
	CreateDynamicObject(3315,3639.5000000,-948.4000200,2.5000000,0.0000000,0.0000000,187.7450000); //object(sw_bigburb_03) (2)
	CreateDynamicObject(3317,3667.6999500,-943.9000200,4.9000000,0.0000000,0.0000000,187.9980000); //object(sw_bigburb_01) (1)
	CreateDynamicObject(1696,3672.6001000,-922.0000000,0.6000000,0.0000000,0.0000000,186.9770000); //object(roofstuff15) (5)
	CreateDynamicObject(1696,3667.8000500,-922.5999800,0.6000000,0.0000000,0.0000000,187.2240000); //object(roofstuff15) (5)
	CreateDynamicObject(6959,3700.0996100,-938.2998000,1.6000000,0.0000000,0.0000000,7.9930000); //object(vegasnbball1) (1)
	CreateDynamicObject(9259,3709.8994100,-934.5000000,6.7000000,0.0000000,0.0000000,8.7450000); //object(preshoosbig02_sfn) (1)
	CreateDynamicObject(9321,3703.8994100,-949.0996100,2.9000000,0.0000000,0.0000000,98.7400000); //object(garage_sfn01) (5)
	CreateDynamicObject(9321,3698.1999500,-949.9000200,2.9000000,0.0000000,0.0000000,98.7450000); //object(garage_sfn01) (6)
	CreateDynamicObject(9321,3691.6999500,-950.9000200,2.9000000,0.0000000,0.0000000,98.7450000); //object(garage_sfn01) (7)
	CreateDynamicObject(9321,3687.1001000,-951.5999800,2.9000000,0.0000000,0.0000000,98.7450000); //object(garage_sfn01) (8)
	CreateDynamicObject(3660,3705.8994100,-920.8994100,3.7000000,0.0000000,0.0000000,7.9980000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3693.6001000,-922.5999800,3.7000000,0.0000000,0.0000000,7.9980000); //object(lasairfbed_las) (2)
	CreateDynamicObject(1364,3701.8000500,-935.7000100,2.3000000,0.0000000,0.0000000,278.0000000); //object(cj_bush_prop) (4)
	CreateDynamicObject(6959,3741.0000000,-932.5000000,1.6000000,0.0000000,0.0000000,7.9930000); //object(vegasnbball1) (1)
	CreateDynamicObject(9259,3730.1001000,-931.5999800,6.7000000,0.0000000,0.0000000,188.7450000); //object(preshoosbig02_sfn) (1)
	CreateDynamicObject(3660,3709.6001000,-920.2999900,3.7000000,0.0000000,0.0000000,7.9980000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3719.5000000,-929.5999800,3.7000000,0.0000000,0.0000000,97.9980000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3721.6999500,-945.0999800,3.7000000,0.0000000,0.0000000,97.9980000); //object(lasairfbed_las) (1)
	CreateDynamicObject(9321,3739.8999000,-945.2999900,2.9000000,0.0000000,0.0000000,98.7400000); //object(garage_sfn01) (5)
	CreateDynamicObject(9321,3746.3000500,-944.2999900,2.9000000,0.0000000,0.0000000,98.7400000); //object(garage_sfn01) (5)
	CreateDynamicObject(9321,3752.8000500,-943.2999900,2.9000000,0.0000000,0.0000000,98.7400000); //object(garage_sfn01) (5)
	CreateDynamicObject(9321,3759.1001000,-942.4000200,2.9000000,0.0000000,0.0000000,98.7400000); //object(garage_sfn01) (5)
	CreateDynamicObject(3660,3714.5000000,-955.3994100,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3695.6999500,-958.0000000,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3691.7998000,-958.5996100,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3733.5000000,-952.6992200,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3752.3999000,-950.0000000,3.7000000,0.0000000,0.0000000,187.9980000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3722.6999500,-918.4000200,3.7000000,0.0000000,0.0000000,7.9980000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3749.5000000,-914.5999800,3.7000000,0.0000000,0.0000000,7.9980000); //object(lasairfbed_las) (1)
	CreateDynamicObject(6959,3781.6992200,-926.7998000,1.6000000,0.0000000,0.0000000,7.9930000); //object(vegasnbball1) (1)
	CreateDynamicObject(3660,3768.3999000,-911.9000200,3.7000000,0.0000000,0.0000000,7.9980000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3770.6999500,-911.5999800,3.7000000,0.0000000,0.0000000,7.9980000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3760.8999000,-924.0999800,3.7000000,0.0000000,0.0000000,97.9980000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3763.0996100,-939.3994100,3.7000000,0.0000000,0.0000000,97.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3755.6999500,-949.5999800,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3598,3787.3999000,-932.0000000,3.6000000,0.0000000,0.0000000,8.0000000); //object(hillhouse01_la) (1)
	CreateDynamicObject(3660,3774.8994100,-946.8994100,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3793.6001000,-944.2999900,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3794.8994100,-944.0996100,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3801.8999000,-932.7999900,3.7000000,0.0000000,0.0000000,98.2430000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3799.6001000,-917.0999800,3.7000000,0.0000000,0.0000000,98.2400000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3800.1999500,-907.7999900,3.7000000,0.0000000,0.0000000,7.9980000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3472,3767.1992200,-921.5996100,1.2000000,0.0000000,0.0000000,265.9950000); //object(circuslampost03) (7)
	CreateDynamicObject(1281,3793.0996100,-939.7998000,2.3000000,0.0000000,0.0000000,275.9990000); //object(parktable1) (3)
	CreateDynamicObject(1481,3786.3999000,-937.2000100,2.2000000,0.0000000,0.0000000,8.0000000); //object(dyn_bar_b_q) (1)
	CreateDynamicObject(2964,3781.3000500,-941.7999900,1.5000000,0.0000000,0.0000000,320.0000000); //object(k_pooltablesm) (1)
	CreateDynamicObject(3262,3779.6001000,-909.9000200,1.3000000,0.0000000,0.0000000,189.2500000); //object(privatesign1) (2)
	CreateDynamicObject(6959,3822.3000500,-921.0999800,1.8000000,0.0000000,0.0000000,7.9930000); //object(vegasnbball1) (1)
	CreateDynamicObject(3605,3839.0000000,-920.9000200,7.5000000,0.0000000,0.0000000,187.7500000); //object(bevman3_law2) (1)
	CreateDynamicObject(6959,3863.1999500,-915.4000200,1.8000000,0.0000000,0.0000000,7.9930000); //object(vegasnbball1) (1)
	CreateDynamicObject(3660,3826.1001000,-904.0000000,3.7000000,0.0000000,0.0000000,7.9980000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3848.8999000,-900.7999900,3.7000000,0.0000000,0.0000000,8.0000000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3873.8999000,-897.4000200,3.7000000,0.0000000,0.0000000,8.0000000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3878.0000000,-906.2999900,3.7000000,0.0000000,0.0000000,97.9980000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3880.3000500,-922.9000200,3.7000000,0.0000000,0.0000000,97.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3876.3000500,-932.7000100,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3857.6001000,-935.2999900,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3838.5000000,-938.0000000,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3812.8999000,-941.5999800,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3832.0000000,-938.9000200,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3604,3812.3999000,-931.5999800,3.9000000,0.0000000,0.0000000,187.7500000); //object(bevmangar_law2) (1)
	CreateDynamicObject(3604,3871.3000500,-924.0000000,3.9000000,0.0000000,0.0000000,187.7450000); //object(bevmangar_law2) (2)
	CreateDynamicObject(16151,3850.3994100,-925.7998000,2.2000000,0.0000000,0.0000000,96.9980000); //object(ufo_bar) (1)
	CreateDynamicObject(1432,3828.7998000,-932.2998000,2.1000000,0.0000000,0.0000000,0.0000000); //object(dyn_table_2) (3)
	CreateDynamicObject(1432,3837.1999500,-931.0000000,2.1000000,0.0000000,0.0000000,344.0000000); //object(dyn_table_2) (4)
	CreateDynamicObject(1432,3845.6999500,-932.0000000,2.1000000,0.0000000,0.0000000,343.9980000); //object(dyn_table_2) (5)
	CreateDynamicObject(1432,3856.3999000,-928.0999800,2.1000000,0.0000000,0.0000000,27.9980000); //object(dyn_table_2) (6)
	CreateDynamicObject(6959,3903.8000500,-909.7000100,1.8000000,0.0000000,0.0000000,7.9930000); //object(vegasnbball1) (1)
	CreateDynamicObject(6959,3944.1001000,-904.2999900,1.8000000,0.0000000,0.0000000,7.9930000); //object(vegasnbball1) (1)
	CreateDynamicObject(3660,3886.0000000,-895.7000100,3.7000000,0.0000000,0.0000000,7.9980000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3914.8000500,-891.2999900,3.7000000,0.0000000,0.0000000,7.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3934.1001000,-888.5999800,3.7000000,0.0000000,0.0000000,7.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3951.3999000,-886.0999800,3.7000000,0.0000000,0.0000000,7.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(6284,3899.1001000,-911.0000000,5.9000000,0.0000000,0.0000000,188.0000000); //object(santahouse02_law2) (1)
	CreateDynamicObject(6285,3940.3999000,-908.0999800,6.7000000,0.0000000,0.0000000,188.2450000); //object(santahouse04_law2) (1)
	CreateDynamicObject(3660,3962.0000000,-894.2999900,3.7000000,0.0000000,0.0000000,97.9980000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3964.3000500,-911.0999800,3.7000000,0.0000000,0.0000000,97.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3895.3000500,-930.0000000,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3914.0000000,-927.4000200,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3933.1999500,-924.7000100,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3952.3000500,-922.0000000,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3957.0000000,-921.2999900,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(13512,3982.8999000,-827.5000000,0.0000000,0.0000000,0.0000000,0.0000000); //object(ce_groundpalo03a) (1)
	CreateDynamicObject(17033,3938.3000500,-867.5000000,-4.1000000,0.0000000,0.0000000,322.9410000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3935.6001000,-868.0000000,-4.5000000,0.0000000,0.0000000,322.9380000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3927.6001000,-869.2999900,-4.5000000,0.0000000,0.0000000,322.9380000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3925.3000500,-869.7000100,-4.5000000,0.0000000,0.0000000,322.9380000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3923.6001000,-870.0000000,-4.5000000,0.0000000,0.0000000,322.9380000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3920.6001000,-870.5000000,-4.5000000,0.0000000,0.0000000,322.9380000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3916.1999500,-870.7999900,-4.5000000,0.0000000,0.0000000,322.9380000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3913.6001000,-871.2000100,-4.5000000,0.0000000,0.0000000,322.9380000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3912.0000000,-871.9000200,-4.5000000,0.0000000,0.0000000,322.9380000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3909.3000500,-871.2000100,-4.5000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3905.3999000,-871.5000000,-4.5000000,0.0000000,0.0000000,314.9290000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3902.3000500,-872.4000200,-4.5000000,0.0000000,0.0000000,314.9290000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3898.3000500,-872.5999800,-4.5000000,0.0000000,0.0000000,314.9290000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3894.8000500,-872.2000100,-4.5000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3890.6001000,-872.9000200,-4.5000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3887.3999000,-873.0000000,-4.5000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3883.5000000,-873.4000200,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3879.8000500,-873.5999800,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3876.6001000,-875.0000000,-4.4000000,0.0000000,0.0000000,314.9290000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3873.5000000,-875.4000200,-4.4000000,0.0000000,0.0000000,314.9290000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3869.8000500,-875.5999800,-4.4000000,0.0000000,0.0000000,314.9290000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3866.6001000,-875.9000200,-4.4000000,0.0000000,0.0000000,314.9290000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3863.0000000,-876.7000100,-4.4000000,0.0000000,0.0000000,314.9290000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3859.8999000,-876.2999900,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3855.1999500,-877.5999800,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3852.0000000,-877.9000200,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3847.5000000,-878.2999900,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3844.0000000,-878.5999800,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3840.3000500,-879.0000000,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3836.6001000,-879.5999800,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3832.8999000,-880.0000000,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3829.3999000,-880.2999900,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3825.0000000,-881.5000000,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3821.5000000,-881.7999900,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3818.0000000,-882.0999800,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3814.3000500,-882.9000200,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3811.3000500,-883.2000100,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3807.6001000,-883.5999800,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3803.8999000,-884.0000000,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3801.8000500,-885.2000100,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3798.8000500,-885.5000000,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3790.6001000,-886.2999900,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3787.3999000,-886.5999800,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3783.3999000,-887.0000000,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3779.6999500,-887.4000200,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3776.1999500,-887.7000100,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3774.8000500,-888.5999800,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3772.6001000,-888.7999900,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3764.8999000,-889.5999800,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3762.3999000,-889.9000200,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3759.0000000,-891.2999900,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3755.5000000,-891.3994100,-4.4000000,0.0000000,0.0000000,314.9290000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3750.8000500,-892.0999800,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3747.6001000,-892.4000200,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3743.3999000,-892.9000200,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3739.6999500,-893.2999900,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3735.5000000,-893.7999900,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3731.8000500,-894.2000100,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3727.8000500,-894.5999800,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3724.6001000,-894.9000200,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3720.3999000,-895.4000200,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3717.0000000,-896.2999900,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3713.3999000,-897.5999800,-4.4000000,0.0000000,0.0000000,314.9290000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3709.6999500,-897.7999900,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3706.3000500,-898.9000200,-4.4000000,0.0000000,0.0000000,314.9290000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3702.8000500,-899.2999900,-4.4000000,0.0000000,0.0000000,314.9290000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3698.0000000,-899.0999800,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3695.1001000,-899.9000200,-4.4000000,0.0000000,0.0000000,314.9290000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3690.8000500,-899.9000200,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3688.1001000,-900.2000100,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3683.8999000,-900.7000100,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3680.6999500,-901.0999800,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3676.6999500,-901.5999800,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3673.0000000,-902.0000000,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3669.0000000,-902.5000000,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3665.6001000,-903.7000100,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3661.8000500,-903.7999900,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3658.1001000,-904.2000100,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3654.3999000,-904.5999800,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3650.8999000,-905.0000000,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3647.1999500,-905.7000100,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3644.5000000,-906.0000000,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3640.3000500,-906.5000000,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3636.3000500,-907.0000000,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3638.3999000,-907.5000000,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3629.3999000,-908.2999900,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3626.6001000,-909.7000100,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3624.6001000,-909.9000200,-4.4000000,0.0000000,0.0000000,314.9340000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(621,3927.8000500,-859.9000200,-4.5000000,0.0000000,0.0000000,255.9980000); //object(veg_palm02) (8)
	CreateDynamicObject(621,3892.8999000,-859.2000100,-4.5000000,0.0000000,0.0000000,255.9980000); //object(veg_palm02) (9)
	CreateDynamicObject(621,3851.3999000,-870.2000100,-4.5000000,0.0000000,0.0000000,255.9980000); //object(veg_palm02) (10)
	CreateDynamicObject(621,3809.6999500,-872.4000200,-4.5000000,0.0000000,0.0000000,255.9980000); //object(veg_palm02) (11)
	CreateDynamicObject(621,3771.3000500,-883.9000200,-4.5000000,0.0000000,0.0000000,255.9980000); //object(veg_palm02) (12)
	CreateDynamicObject(621,3732.3000500,-879.4000200,-4.5000000,0.0000000,0.0000000,255.9980000); //object(veg_palm02) (13)
	CreateDynamicObject(621,3699.5000000,-892.2999900,-4.5000000,0.0000000,0.0000000,255.9980000); //object(veg_palm02) (14)
	CreateDynamicObject(621,3663.3994100,-890.0000000,-4.5000000,0.0000000,0.0000000,255.9980000); //object(veg_palm02) (15)
	CreateDynamicObject(621,3636.1001000,-902.7999900,-4.5000000,0.0000000,0.0000000,255.9980000); //object(veg_palm02) (16)
	CreateDynamicObject(621,3607.1999500,-903.2999900,-4.5000000,0.0000000,0.0000000,255.9980000); //object(veg_palm02) (17)
	CreateDynamicObject(17033,3600.5000000,-914.2998000,-4.4000000,0.0000000,0.0000000,50.9270000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(6959,3564.1001000,-980.7000100,1.4000000,0.0000000,0.0000000,5.9930000); //object(vegasnbball1) (1)
	CreateDynamicObject(6959,3569.6001000,-1020.0000000,1.4000000,0.0000000,0.0000000,6.4870000); //object(vegasnbball1) (1)
	CreateDynamicObject(11547,3573.6999500,-998.4000200,4.2000000,0.0000000,0.0000000,276.0000000); //object(desn_tscanopy) (1)
	CreateDynamicObject(11547,3554.5000000,-1000.5000000,4.2000000,0.0000000,0.0000000,275.9990000); //object(desn_tscanopy) (2)
	CreateDynamicObject(6959,3528.8000500,-1024.5999800,1.4000000,0.0000000,0.0000000,6.4870000); //object(vegasnbball1) (1)
	CreateDynamicObject(6959,3523.3000500,-985.0999800,1.4000000,0.0000000,0.0000000,6.2370000); //object(vegasnbball1) (1)
	CreateDynamicObject(18285,3519.1999500,-992.0999800,1.4000000,0.0000000,0.0000000,292.0000000); //object(cw_trucklines) (1)
	CreateDynamicObject(18285,3519.8000500,-1013.9000200,1.4000000,0.0000000,0.0000000,293.9980000); //object(cw_trucklines) (2)
	CreateDynamicObject(18282,3528.3999000,-1066.0000000,1.3000000,0.0000000,0.0000000,134.5000000); //object(cw_tsblock) (1)
	CreateDynamicObject(3660,3583.6999500,-981.7000100,3.7000000,0.0000000,0.0000000,96.2430000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3585.8000500,-1001.0000000,3.7000000,0.0000000,0.0000000,96.2400000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3587.8999000,-1020.0000000,3.7000000,0.0000000,0.0000000,96.2400000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3550.3999000,-988.7999900,3.7000000,0.0000000,0.0000000,63.9900000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3563.0000000,-975.9000200,3.7000000,0.0000000,0.0000000,26.7400000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3547.6001000,-1014.5999800,3.7000000,0.0000000,0.0000000,96.2400000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3549.6999500,-1033.9000200,3.7000000,0.0000000,0.0000000,96.2400000); //object(lasairfbed_las) (1)
	CreateDynamicObject(5435,3606.0996100,-1063.5000000,1.3000000,0.0000000,0.0000000,95.9990000); //object(laeroad06) (1)
	CreateDynamicObject(6959,3572.8994100,-1059.6992200,1.4000000,0.0000000,0.0000000,6.4820000); //object(vegasnbball1) (1)
	CreateDynamicObject(6959,3533.1999500,-1064.3000500,1.4000000,0.0000000,0.0000000,6.4870000); //object(vegasnbball1) (1)
	CreateDynamicObject(3660,3558.3999000,-1048.8000500,3.7000000,0.0000000,0.0000000,144.2400000); //object(lasairfbed_las) (1)
	CreateDynamicObject(18285,3519.1001000,-1035.5999800,1.4000000,0.0000000,0.0000000,293.9940000); //object(cw_trucklines) (3)
	CreateDynamicObject(3660,3590.0000000,-1039.3000500,3.7000000,0.0000000,0.0000000,96.2400000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3591.1999500,-1050.0000000,3.7000000,0.0000000,0.0000000,96.2400000); //object(lasairfbed_las) (1)
	CreateDynamicObject(17033,3575.3994100,-958.6992200,-3.5000000,0.0000000,0.0000000,318.9220000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3566.1999500,-959.2999900,-3.5000000,0.0000000,0.0000000,318.9220000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3556.8999000,-960.2000100,-3.5000000,0.0000000,0.0000000,318.9220000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3547.2998000,-961.0000000,-3.5000000,0.0000000,0.0000000,318.9170000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3537.8999000,-961.7000100,-3.5000000,0.0000000,0.0000000,318.9220000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3534.6999500,-961.9000200,-3.5000000,0.0000000,0.0000000,318.9220000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3526.8999000,-962.2999900,-3.5000000,0.0000000,0.0000000,318.9220000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3522.8999000,-963.2000100,-3.5000000,0.0000000,0.0000000,318.9220000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3513.6999500,-964.2000100,-3.5000000,0.0000000,0.0000000,318.9220000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3510.0000000,-964.9000200,-3.5000000,0.0000000,0.0000000,318.9220000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3502.1999500,-966.5999800,-3.5000000,0.0000000,0.0000000,318.9220000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3500.8999000,-974.2999900,-3.5000000,0.0000000,0.0000000,50.9220000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3501.8000500,-982.7000100,-3.5000000,0.0000000,0.0000000,50.9220000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3502.8999000,-992.2000100,-3.5000000,0.0000000,0.0000000,50.9220000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3504.1001000,-1001.5999800,-3.5000000,0.0000000,0.0000000,50.9220000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3506.1001000,-1010.7000100,-3.5000000,0.0000000,0.0000000,50.9220000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3507.5000000,-1019.5999800,-3.5000000,0.0000000,0.0000000,50.9220000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3507.6001000,-1024.0999800,-3.5000000,0.0000000,0.0000000,50.9220000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3508.6999500,-1032.8000500,-3.5000000,0.0000000,0.0000000,50.9220000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3509.8999000,-1041.6999500,-3.5000000,0.0000000,0.0000000,50.9220000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3510.3999000,-1050.5999800,-3.5000000,0.0000000,0.0000000,50.9220000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3511.5000000,-1059.0000000,-3.5000000,0.0000000,0.0000000,50.9220000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3512.6992200,-1068.2998000,-3.5000000,0.0000000,0.0000000,50.9220000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(9193,3572.3999000,-971.4000200,5.6000000,0.0000000,0.0000000,23.2500000); //object(vgegassgn03_lvs) (1)
	CreateDynamicObject(1686,3576.3999000,-998.2000100,1.4000000,0.0000000,0.0000000,5.7500000); //object(petrolpumpnew) (1)
	CreateDynamicObject(1686,3581.8000500,-997.5999800,1.4000000,0.0000000,0.0000000,5.7460000); //object(petrolpumpnew) (2)
	CreateDynamicObject(1686,3571.1001000,-998.9000200,1.4000000,0.0000000,0.0000000,5.7460000); //object(petrolpumpnew) (3)
	CreateDynamicObject(1686,3565.3999000,-999.5999800,1.4000000,0.0000000,0.0000000,5.7460000); //object(petrolpumpnew) (4)
	CreateDynamicObject(1686,3562.8000500,-999.9000200,1.4000000,0.0000000,0.0000000,5.7460000); //object(petrolpumpnew) (5)
	CreateDynamicObject(1686,3557.1999500,-1000.5999800,1.4000000,0.0000000,0.0000000,5.7460000); //object(petrolpumpnew) (6)
	CreateDynamicObject(1686,3551.8000500,-1001.2000100,1.4000000,0.0000000,0.0000000,5.7460000); //object(petrolpumpnew) (7)
	CreateDynamicObject(3472,3566.8999000,-1023.0999800,1.1000000,0.0000000,0.0000000,276.0000000); //object(circuslampost03) (8)
	CreateDynamicObject(3472,3519.1001000,-1045.6999500,1.1000000,0.0000000,0.0000000,235.9990000); //object(circuslampost03) (9)
	CreateDynamicObject(1696,3596.8999000,-1067.0999800,0.4000000,0.0000000,0.0000000,96.7500000); //object(roofstuff15) (9)
	CreateDynamicObject(1696,3596.3000500,-1062.0000000,0.4000000,0.0000000,0.0000000,96.7460000); //object(roofstuff15) (10)
	CreateDynamicObject(1696,3586.0000000,-969.1992200,0.4000000,0.0000000,0.0000000,95.9880000); //object(roofstuff15) (11)
	CreateDynamicObject(1696,3585.5000000,-964.4000200,0.4000000,0.0000000,0.0000000,95.9930000); //object(roofstuff15) (12)
	CreateDynamicObject(1432,3526.1999500,-1052.0000000,1.3000000,0.0000000,0.0000000,348.0000000); //object(dyn_table_2) (7)
	CreateDynamicObject(1432,3530.0000000,-1057.8000500,1.3000000,0.0000000,0.0000000,347.9970000); //object(dyn_table_2) (8)
	CreateDynamicObject(1432,3531.6999500,-1052.0999800,1.3000000,0.0000000,0.0000000,333.9970000); //object(dyn_table_2) (9)
	CreateDynamicObject(1432,3528.6999500,-1047.4000200,1.3000000,0.0000000,0.0000000,333.9950000); //object(dyn_table_2) (10)
	CreateDynamicObject(1432,3526.6999500,-1056.1999500,1.3000000,0.0000000,0.0000000,333.9950000); //object(dyn_table_2) (11)
	CreateDynamicObject(1432,3535.0000000,-1055.5000000,1.3000000,0.0000000,0.0000000,333.9950000); //object(dyn_table_2) (12)
	CreateDynamicObject(12957,3523.3000500,-1078.8000500,2.0000000,0.0000000,0.0000000,70.0000000); //object(sw_pickupwreck01) (1)
	CreateDynamicObject(1344,3528.1999500,-1071.9000200,2.1000000,0.0000000,0.0000000,315.2500000); //object(cj_dumpster2) (1)
	CreateDynamicObject(1440,3530.3000500,-1078.6999500,1.8000000,0.0000000,0.0000000,306.0000000); //object(dyn_box_pile_3) (1)
	CreateDynamicObject(3886,3830.1999500,-853.5000000,-0.8000000,0.0000000,0.0000000,8.0000000); //object(ws_jettynol_sfx) (2)
	CreateDynamicObject(17033,3601.1999500,-916.7000100,-4.4000000,0.0000000,0.0000000,50.9220000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(12814,3567.6001000,-933.9000200,1.3000000,0.0000000,0.0000000,6.0000000); //object(cuntyeland04) (2)
	CreateDynamicObject(11449,3570.8999000,-939.2000100,3.7000000,0.0000000,0.0000000,96.0000000); //object(des_nwtshop2) (1)
	CreateDynamicObject(17033,3554.1992200,-953.2998000,-3.5000000,0.0000000,0.0000000,52.9160000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3552.8999000,-939.9000200,-3.5000000,0.0000000,0.0000000,52.9160000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3552.8000500,-937.2000100,-3.5000000,0.0000000,0.0000000,52.9160000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3551.1001000,-924.2999900,-3.5000000,0.0000000,0.0000000,52.9160000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3551.0000000,-921.7999900,-3.5000000,0.0000000,0.0000000,52.9160000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3550.1999500,-915.2999900,-3.5000000,0.0000000,0.0000000,52.9160000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3556.1001000,-909.9000200,-3.5000000,0.0000000,0.0000000,318.9160000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3558.1999500,-909.7999900,-3.5000000,0.0000000,0.0000000,318.9110000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3570.8999000,-907.9000200,-3.5000000,0.0000000,0.0000000,318.9160000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3565.8999000,-908.5999800,-3.5000000,0.0000000,0.0000000,318.9110000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(910,3572.1999500,-923.4000200,2.3000000,0.0000000,0.0000000,186.0000000); //object(bust_cabinet_4) (1)
	CreateDynamicObject(2971,3560.3999000,-939.4000200,1.1000000,0.0000000,0.0000000,336.0000000); //object(k_smashboxes) (1)
	CreateDynamicObject(2971,3563.6001000,-953.4000200,1.1000000,0.0000000,0.0000000,335.9950000); //object(k_smashboxes) (2)
	CreateDynamicObject(2971,3556.8999000,-948.0000000,1.1000000,0.0000000,0.0000000,355.9950000); //object(k_smashboxes) (3)
	CreateDynamicObject(2971,3560.8000500,-946.0000000,1.1000000,0.0000000,0.0000000,355.9900000); //object(k_smashboxes) (4)
	CreateDynamicObject(2890,3573.8000500,-931.5000000,1.1000000,0.0000000,0.0000000,96.0000000); //object(kmb_skip) (1)
	CreateDynamicObject(2744,3555.3000500,-926.7000100,3.1000000,0.0000000,0.0000000,182.7500000); //object(cj_stat_2) (1)
	CreateDynamicObject(1494,3578.6001000,-925.5000000,1.2000000,0.0000000,0.0000000,277.2500000); //object(gen_doorint03) (1)
	CreateDynamicObject(1498,3888.6999500,-903.9000200,1.6000000,0.0000000,0.0000000,5.7500000); //object(gen_doorext03) (5)
	CreateDynamicObject(17639,3661.5000000,-998.5996100,1.3000000,0.0000000,0.0000000,6.9600000); //object(lae2_roads31) (2)
	CreateDynamicObject(3304,3622.3000500,-981.5000000,4.3000000,0.0000000,0.0000000,7.2500000); //object(des_bighus02) (1)
	CreateDynamicObject(996,3609.0000000,-971.9000200,2.0000000,0.0000000,0.0000000,276.0000000); //object(lhouse_barrier1) (1)
	CreateDynamicObject(996,3609.8000500,-979.9000200,2.0000000,0.0000000,0.0000000,275.9990000); //object(lhouse_barrier1) (2)
	CreateDynamicObject(996,3610.5000000,-986.7000100,2.0000000,0.0000000,0.0000000,275.9990000); //object(lhouse_barrier1) (3)
	CreateDynamicObject(3303,3646.6001000,-978.2999900,3.4000000,0.0000000,0.0000000,97.0000000); //object(des_bighus03) (1)
	CreateDynamicObject(3305,3671.0000000,-974.7999900,4.3000000,0.0000000,0.0000000,97.0000000); //object(des_bighus01) (1)
	CreateDynamicObject(17639,3759.8999000,-986.5000000,1.3000000,0.0000000,0.0000000,6.9600000); //object(lae2_roads31) (2)
	CreateDynamicObject(6959,3702.5000000,-963.7999900,1.4000000,0.0000000,0.0000000,7.9930000); //object(vegasnbball1) (1)
	CreateDynamicObject(6959,3743.3999000,-958.7000100,1.4000000,0.0000000,0.0000000,7.9930000); //object(vegasnbball1) (1)
	CreateDynamicObject(5421,3695.3000500,-972.5999800,4.7000000,0.0000000,0.0000000,277.5000000); //object(laesmokeshse) (1)
	CreateDynamicObject(1535,3692.8999000,-977.7999900,2.1000000,0.0000000,0.0000000,8.0000000); //object(gen_doorext14) (1)
	CreateDynamicObject(646,3697.3000500,-979.2000100,3.2000000,0.0000000,0.0000000,232.0000000); //object(veg_palmkb14) (1)
	CreateDynamicObject(5060,3720.3000500,-969.0000000,3.4000000,0.0000000,0.0000000,8.0000000); //object(crlsafhus_las) (2)
	CreateDynamicObject(1569,3714.6001000,-977.4000200,1.4000000,0.0000000,0.0000000,8.5000000); //object(adam_v_door) (1)
	CreateDynamicObject(1408,3732.1001000,-968.5999800,1.8000000,0.0000000,0.0000000,97.2500000); //object(dyn_f_wood_2) (73)
	CreateDynamicObject(1408,3732.8000500,-973.7999900,1.8000000,0.0000000,0.0000000,97.2450000); //object(dyn_f_wood_2) (74)
	CreateDynamicObject(1408,3733.3000500,-977.5000000,1.8000000,0.0000000,0.0000000,97.2450000); //object(dyn_f_wood_2) (75)
	CreateDynamicObject(3934,3727.3999000,-961.0999800,5.0000000,0.0000000,0.0000000,278.2500000); //object(helipad01) (2)
	CreateDynamicObject(12950,3723.0000000,-964.5999800,1.6000000,0.0000000,0.0000000,8.0000000); //object(cos_sbanksteps03) (1)
	CreateDynamicObject(5520,3747.1992200,-962.8994100,6.3000000,0.0000000,0.0000000,7.4980000); //object(bdupshouse_lae) (2)
	CreateDynamicObject(1364,3747.1999500,-967.9000200,2.1000000,0.0000000,0.0000000,7.0000000); //object(cj_bush_prop) (5)
	CreateDynamicObject(877,3760.6001000,-971.5000000,2.0000000,0.0000000,0.0000000,324.0000000); //object(veg_pflowers04) (2)
	CreateDynamicObject(6959,3784.6001000,-955.4000200,1.4000000,0.0000000,0.0000000,7.9930000); //object(vegasnbball1) (1)
	CreateDynamicObject(9221,3786.6999500,-957.2000100,3.6000000,0.0000000,0.0000000,187.2500000); //object(villa_sfn_chris_02) (1)
	CreateDynamicObject(3660,3765.6999500,-958.5999800,3.7000000,0.0000000,0.0000000,97.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3766.6999500,-965.7999900,3.7000000,0.0000000,0.0000000,97.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3778.8999000,-973.4000200,3.7000000,0.0000000,0.0000000,187.2430000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3804.5000000,-952.0000000,3.7000000,0.0000000,0.0000000,97.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(6959,3825.3000500,-948.5999800,1.4000000,0.0000000,0.0000000,6.7430000); //object(vegasnbball1) (1)
	CreateDynamicObject(3660,3805.8000500,-961.2000100,3.7000000,0.0000000,0.0000000,97.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3472,3771.6999500,-968.2999900,1.2000000,0.0000000,0.0000000,231.9950000); //object(circuslampost03) (7)
	CreateDynamicObject(3660,3794.8000500,-946.0999800,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3775.5000000,-948.7999900,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3754.1001000,-951.7000100,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3740.3999000,-953.5999800,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3691.6999500,-960.4000200,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3711.0000000,-957.7000100,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3722.1999500,-955.9000200,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(1281,3800.0000000,-955.7999900,2.0000000,0.0000000,0.0000000,241.9990000); //object(parktable1) (3)
	CreateDynamicObject(16151,3775.0000000,-957.5999800,1.6000000,0.0000000,0.0000000,6.7480000); //object(ufo_bar) (1)
	CreateDynamicObject(1432,3769.5000000,-954.2000100,1.3000000,0.0000000,0.0000000,344.0000000); //object(dyn_table_2) (3)
	CreateDynamicObject(1432,3772.3999000,-964.2000100,1.3000000,0.0000000,0.0000000,9.9980000); //object(dyn_table_2) (3)
	CreateDynamicObject(1432,3768.8000500,-960.5000000,1.3000000,0.0000000,0.0000000,359.9980000); //object(dyn_table_2) (3)
	CreateDynamicObject(17639,3858.1999500,-974.5000000,1.3000000,0.0000000,0.0000000,6.9600000); //object(lae2_roads31) (2)
	CreateDynamicObject(6959,3866.0996100,-943.7998000,1.4000000,0.0000000,0.0000000,6.9930000); //object(vegasnbball1) (1)
	CreateDynamicObject(9341,3821.6999500,-954.5000000,3.8000000,0.0000000,0.0000000,7.5000000); //object(villa_sfn_chris_04) (1)
	CreateDynamicObject(3660,3814.3000500,-943.2999900,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3833.6001000,-940.5999800,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(9516,3858.6999500,-952.0999800,3.8000000,0.0000000,0.0000000,97.7500000); //object(bigboxtmp17) (2)
	CreateDynamicObject(3660,3852.8000500,-937.9000200,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3872.0996100,-935.1992200,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(1408,3842.0000000,-962.5999800,1.8000000,0.0000000,0.0000000,277.7450000); //object(dyn_f_wood_2) (76)
	CreateDynamicObject(1408,3842.1001000,-963.5999800,1.8000000,0.0000000,0.0000000,277.7450000); //object(dyn_f_wood_2) (77)
	CreateDynamicObject(1408,3862.5000000,-959.2000100,1.8000000,0.0000000,0.0000000,99.2450000); //object(dyn_f_wood_2) (78)
	CreateDynamicObject(1408,3862.7998000,-961.1992200,1.8000000,0.0000000,0.0000000,99.2450000); //object(dyn_f_wood_2) (79)
	CreateDynamicObject(1432,3845.0000000,-963.2000100,1.3000000,0.0000000,0.0000000,317.9980000); //object(dyn_table_2) (3)
	CreateDynamicObject(1432,3852.3994100,-962.0000000,1.3000000,0.0000000,0.0000000,323.9920000); //object(dyn_table_2) (3)
	CreateDynamicObject(17639,3956.5000000,-962.5000000,1.3000000,0.0000000,0.0000000,6.9600000); //object(lae2_roads31) (2)
	CreateDynamicObject(6959,3906.8000500,-938.5999800,1.4000000,0.0000000,0.0000000,6.9930000); //object(vegasnbball1) (1)
	CreateDynamicObject(6959,3947.6001000,-933.5999800,1.4000000,0.0000000,0.0000000,6.9930000); //object(vegasnbball1) (1)
	CreateDynamicObject(3660,3891.5000000,-932.5000000,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3910.8999000,-929.7000100,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3930.3000500,-927.0000000,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3949.6001000,-924.2999900,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(3660,3957.3999000,-923.2000100,3.7000000,0.0000000,0.0000000,187.9930000); //object(lasairfbed_las) (1)
	CreateDynamicObject(17575,3888.3000500,-946.0000000,4.9000000,0.0000000,0.0000000,277.5000000); //object(burgho01_lae2) (1)
	CreateDynamicObject(1408,3869.0000000,-960.4000200,1.8000000,0.0000000,0.0000000,276.7450000); //object(dyn_f_wood_2) (79)
	CreateDynamicObject(1408,3879.3999000,-959.0999800,1.8000000,0.0000000,0.0000000,96.7400000); //object(dyn_f_wood_2) (79)
	CreateDynamicObject(1408,3900.3999000,-956.7000100,1.8000000,0.0000000,0.0000000,277.9900000); //object(dyn_f_wood_2) (79)
	CreateDynamicObject(1408,3910.6999500,-955.4000200,1.8000000,0.0000000,0.0000000,97.9870000); //object(dyn_f_wood_2) (79)
	CreateDynamicObject(1365,3864.6999500,-953.5000000,2.2000000,0.0000000,0.0000000,98.5000000); //object(cj_big_skip1) (1)
	CreateDynamicObject(1597,3886.8000500,-939.5000000,3.9000000,0.0000000,0.0000000,6.7460000); //object(cntrlrsac1) (1)
	CreateDynamicObject(1597,3888.6001000,-954.7999900,3.9000000,0.0000000,0.0000000,6.7460000); //object(cntrlrsac1) (1)
	CreateDynamicObject(1492,3895.0000000,-937.2999900,1.4000000,0.0000000,0.0000000,277.0000000); //object(gen_doorint02) (2)
	CreateDynamicObject(13697,3937.8999000,-938.4000200,-3.2000000,0.0000000,0.0000000,188.2500000); //object(tcelhouse06) (1)
	CreateDynamicObject(1408,3916.6001000,-954.2999900,1.8000000,0.0000000,0.0000000,277.9870000); //object(dyn_f_wood_2) (79)
	CreateDynamicObject(1432,3962.1999500,-931.0999800,1.5000000,0.0000000,0.0000000,307.9920000); //object(dyn_table_2) (3)
	CreateDynamicObject(1432,3955.5000000,-928.7999900,1.5000000,0.0000000,0.0000000,273.9910000); //object(dyn_table_2) (3)
	CreateDynamicObject(1432,3955.8000500,-934.0999800,1.5000000,0.0000000,0.0000000,287.9880000); //object(dyn_table_2) (3)
	CreateDynamicObject(1597,3967.1999500,-943.2999900,3.9000000,0.0000000,0.0000000,6.7460000); //object(cntrlrsac1) (1)
	CreateDynamicObject(6959,3635.8000500,-1030.5999800,1.4000000,0.0000000,0.0000000,5.7320000); //object(vegasnbball1) (1)
	CreateDynamicObject(6959,3676.6001000,-1026.4000200,1.4000000,0.0000000,0.0000000,5.7290000); //object(vegasnbball1) (1)
	CreateDynamicObject(18365,3668.5000000,-1080.3000500,10.0000000,0.0000000,0.0000000,140.0000000); //object(sawmill) (1)
	CreateDynamicObject(6959,3640.0000000,-1070.2998000,1.4000000,0.0000000,0.0000000,5.7240000); //object(vegasnbball1) (1)
	CreateDynamicObject(6959,3644.0000000,-1110.0000000,1.4000000,0.0000000,0.0000000,5.7240000); //object(vegasnbball1) (1)
	CreateDynamicObject(6959,3648.0000000,-1149.5996100,1.4000000,0.0000000,0.0000000,5.7240000); //object(vegasnbball1) (1)
	CreateDynamicObject(6959,3689.0000000,-1145.5000000,1.4000000,0.0000000,0.0000000,5.7290000); //object(vegasnbball1) (1)
	CreateDynamicObject(6959,3685.0000000,-1105.8000500,1.4000000,0.0000000,0.0000000,5.7290000); //object(vegasnbball1) (1)
	CreateDynamicObject(6959,3680.8999000,-1066.0999800,1.4000000,0.0000000,0.0000000,5.7290000); //object(vegasnbball1) (1)
	CreateDynamicObject(17033,3540.0000000,-750.5000000,-2.9000000,0.0000000,0.0000000,144.9430000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3554.0000000,-951.2999900,-3.5000000,0.0000000,0.0000000,52.9160000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(7191,3617.3000500,-1049.3000500,1.4000000,0.0000000,0.0000000,6.0000000); //object(vegasnnewfence2b) (1)
	CreateDynamicObject(7191,3619.8999000,-1074.1999500,1.4000000,0.0000000,0.0000000,5.9990000); //object(vegasnnewfence2b) (3)
	CreateDynamicObject(7191,3625.6001000,-1128.9000200,1.4000000,0.0000000,0.0000000,5.9990000); //object(vegasnnewfence2b) (4)
	CreateDynamicObject(7191,3627.5996100,-1147.8994100,1.4000000,0.0000000,0.0000000,5.9990000); //object(vegasnnewfence2b) (5)
	CreateDynamicObject(7191,3651.6992200,-1168.2998000,1.4000000,0.0000000,0.0000000,95.7460000); //object(vegasnnewfence2b) (6)
	CreateDynamicObject(7191,3688.6001000,-1164.5999800,1.4000000,0.0000000,0.0000000,95.7460000); //object(vegasnnewfence2b) (7)
	CreateDynamicObject(7191,3708.8994100,-1140.6992200,1.4000000,0.0000000,0.0000000,185.9930000); //object(vegasnnewfence2b) (8)
	CreateDynamicObject(7191,3704.3000500,-1096.9000200,1.4000000,0.0000000,0.0000000,185.9930000); //object(vegasnnewfence2b) (9)
	CreateDynamicObject(7191,3699.6999500,-1053.0999800,1.4000000,0.0000000,0.0000000,185.9930000); //object(vegasnnewfence2b) (10)
	CreateDynamicObject(7191,3697.0000000,-1027.4000200,1.4000000,0.0000000,0.0000000,185.9930000); //object(vegasnnewfence2b) (11)
	CreateDynamicObject(7191,3636.1999500,-1012.0000000,1.4000000,0.0000000,0.0000000,276.9990000); //object(vegasnnewfence2b) (12)
	CreateDynamicObject(7191,3672.8999000,-1007.5000000,1.4000000,0.0000000,0.0000000,276.9980000); //object(vegasnnewfence2b) (13)
	CreateDynamicObject(1696,3612.0000000,-1024.5000000,0.4000000,0.0000000,0.0000000,275.9930000); //object(roofstuff15) (11)
	CreateDynamicObject(1696,3611.5000000,-1020.1992200,0.4000000,0.0000000,0.0000000,275.9880000); //object(roofstuff15) (11)
	CreateDynamicObject(1696,3620.3000500,-1104.0999800,0.4000000,0.0000000,0.0000000,275.9930000); //object(roofstuff15) (11)
	CreateDynamicObject(1696,3619.7998000,-1099.1992200,0.4000000,0.0000000,0.0000000,275.9880000); //object(roofstuff15) (11)
	CreateDynamicObject(12808,3638.1001000,-1045.6999500,3.3000000,0.0000000,0.0000000,94.0000000); //object(sw_logs3) (1)
	CreateDynamicObject(12808,3643.3000500,-1150.4000200,3.3000000,0.0000000,0.0000000,33.9990000); //object(sw_logs3) (2)
	CreateDynamicObject(1290,3641.3999000,-1090.1999500,6.7000000,0.0000000,0.0000000,275.5000000); //object(lamppost2) (53)
	CreateDynamicObject(10562,3765.8000500,-1022.5999800,1.4000000,0.0000000,0.0000000,276.7500000); //object(bbgroundbitd_sfs) (1)
	CreateDynamicObject(10562,3974.3000500,-966.4000200,2.0000000,0.0000000,0.0000000,186.7400000); //object(bbgroundbitd_sfs) (1)
	CreateDynamicObject(13120,4010.1999500,-897.5999800,-24.9000000,0.0000000,0.0000000,130.0000000); //object(ce_grndpalcst03) (1)
	CreateDynamicObject(13120,3947.0000000,-819.0000000,-24.9000000,0.0000000,0.0000000,173.9960000); //object(ce_grndpalcst03) (1)
	CreateDynamicObject(6356,3973.1999500,-883.7999900,12.9000000,0.0000000,0.0000000,338.7260000); //object(sunset06_law2) (6)
	CreateDynamicObject(6356,3957.5000000,-867.0000000,12.8000000,0.0000000,0.0000000,338.7250000); //object(sunset06_law2) (6)
	CreateDynamicObject(688,3959.6001000,-825.2999900,8.8000000,0.0000000,0.0000000,0.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3965.6001000,-853.5000000,8.8000000,0.0000000,0.0000000,260.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3974.3999000,-839.0999800,13.4000000,0.0000000,0.0000000,259.9970000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3988.1001000,-857.2999900,13.4000000,0.0000000,0.0000000,229.9970000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3975.1001000,-872.7000100,8.9000000,0.0000000,0.0000000,229.9930000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3999.6999500,-871.7999900,16.2000000,0.0000000,0.0000000,229.9930000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,4002.6992200,-840.1992200,16.3000000,0.0000000,0.0000000,229.9880000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3990.6992200,-894.0996100,4.2000000,0.0000000,0.0000000,229.9880000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,4011.5000000,-886.5999800,8.7000000,0.0000000,0.0000000,229.9930000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,4032.3999000,-863.9000200,5.7000000,0.0000000,0.0000000,229.9930000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,4015.5000000,-848.0000000,16.7000000,0.0000000,0.0000000,69.9930000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,4023.3000500,-893.0999800,7.0000000,0.0000000,0.0000000,69.9880000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(10562,3894.3999000,-1007.0999800,1.4000000,0.0000000,0.0000000,276.7460000); //object(bbgroundbitd_sfs) (1)
	CreateDynamicObject(10562,3965.8999000,-1032.6999500,1.3000000,0.0000000,0.0000000,1.9960000); //object(bbgroundbitd_sfs) (1)
	CreateDynamicObject(13120,3940.5996100,-1010.6992200,-24.9000000,0.0000000,0.0000000,77.2450000); //object(ce_grndpalcst03) (1)
	CreateDynamicObject(10562,3891.3999000,-1036.6999500,1.4000000,0.0000000,0.0000000,276.7460000); //object(bbgroundbitd_sfs) (1)
	CreateDynamicObject(13120,4007.5000000,-1010.5000000,-24.9000000,0.0000000,0.0000000,59.2450000); //object(ce_grndpalcst03) (1)
	CreateDynamicObject(10562,3768.5000000,-1051.5000000,1.4000000,0.0000000,0.0000000,276.7460000); //object(bbgroundbitd_sfs) (1)
	CreateDynamicObject(10562,3771.8000500,-1080.0999800,1.4000000,0.0000000,0.0000000,276.7460000); //object(bbgroundbitd_sfs) (1)
	CreateDynamicObject(13120,3865.3999000,-1028.5999800,-24.9000000,0.0000000,0.0000000,73.2450000); //object(ce_grndpalcst03) (1)
	CreateDynamicObject(10562,3712.5000000,-1151.6992200,1.4000000,0.0000000,0.0000000,185.9930000); //object(bbgroundbitd_sfs) (1)
	CreateDynamicObject(13120,3739.1999500,-1087.8000500,-24.9000000,0.0000000,0.0000000,145.2400000); //object(ce_grndpalcst03) (1)
	CreateDynamicObject(688,3863.3999000,-998.9000200,0.1000000,0.0000000,0.0000000,318.0000000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3886.6001000,-988.2000100,0.1000000,0.0000000,0.0000000,285.9990000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3910.6001000,-985.5000000,0.1000000,0.0000000,0.0000000,285.9960000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3928.6999500,-989.4000200,0.1000000,0.0000000,0.0000000,257.9960000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3942.0000000,-982.9000200,0.1000000,0.0000000,0.0000000,257.9920000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3959.3000500,-982.2999900,0.1000000,0.0000000,0.0000000,257.9920000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3901.1001000,-996.2000100,0.1000000,0.0000000,0.0000000,257.9920000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3877.8999000,-1007.2999900,0.1000000,0.0000000,0.0000000,299.9920000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3871.6001000,-988.0999800,0.1000000,0.0000000,0.0000000,299.9870000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3846.3000500,-1003.5999800,0.1000000,0.0000000,0.0000000,317.9990000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3851.6001000,-990.2000100,0.1000000,0.0000000,0.0000000,285.9990000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3980.8000500,-909.5999800,0.1000000,0.0000000,0.0000000,285.9960000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3957.1999500,-881.0000000,0.1000000,0.0000000,0.0000000,285.9960000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3969.6001000,-897.4000200,0.1000000,0.0000000,0.0000000,217.9960000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3978.8999000,-944.5000000,0.1000000,0.0000000,0.0000000,217.9910000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3978.6001000,-961.4000200,0.1000000,0.0000000,0.0000000,253.9910000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3974.5000000,-978.5999800,0.1000000,0.0000000,0.0000000,271.9870000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3829.6001000,-1009.9000200,0.1000000,0.0000000,0.0000000,257.9920000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3833.0000000,-998.4000200,0.1000000,0.0000000,0.0000000,241.9920000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3811.1001000,-1002.0000000,0.1000000,0.0000000,0.0000000,241.9900000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3815.0000000,-1022.9000200,0.1000000,0.0000000,0.0000000,263.9900000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3794.6999500,-1015.0000000,0.1000000,0.0000000,0.0000000,263.9850000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3788.8000500,-1003.5999800,0.1000000,0.0000000,0.0000000,235.9850000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3793.3999000,-1031.6999500,0.1000000,0.0000000,0.0000000,235.9810000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(17005,3764.5000000,-1027.3000500,8.9000000,0.0000000,0.0000000,302.0000000); //object(farmhouse) (2)
	CreateDynamicObject(17324,3737.8999000,-1040.5999800,1.1000000,0.0000000,0.0000000,186.7500000); //object(cw_combbarn) (3)
	CreateDynamicObject(688,3721.8000500,-1036.0000000,0.1000000,0.0000000,0.0000000,197.9810000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3704.6001000,-1012.5000000,0.1000000,0.0000000,0.0000000,197.9790000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3766.0000000,-1003.2000100,0.1000000,0.0000000,0.0000000,197.9790000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3711.3000500,-1024.0999800,0.1000000,0.0000000,0.0000000,197.9790000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3719.0000000,-1008.7999900,0.1000000,0.0000000,0.0000000,175.9790000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3752.5000000,-1005.4000200,0.1000000,0.0000000,0.0000000,183.9770000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3741.8000500,-1007.0999800,0.1000000,0.0000000,0.0000000,183.9770000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3725.8999000,-1020.9000200,0.1000000,0.0000000,0.0000000,223.9770000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3733.1999500,-1066.5000000,0.1000000,0.0000000,0.0000000,223.9730000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3726.8999000,-1051.6999500,0.1000000,0.0000000,0.0000000,253.9730000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3710.3999000,-1044.6999500,0.1000000,0.0000000,0.0000000,253.9710000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3714.6001000,-1061.4000200,0.1000000,0.0000000,0.0000000,253.9710000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3720.8999000,-1078.1999500,0.1000000,0.0000000,0.0000000,253.9710000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3718.6999500,-1093.8000500,0.1000000,0.0000000,0.0000000,323.9710000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3777.3999000,-1038.0999800,0.1000000,0.0000000,0.0000000,343.9700000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3766.5000000,-1046.9000200,0.1000000,0.0000000,0.0000000,299.9650000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3753.5000000,-1047.5999800,0.1000000,0.0000000,0.0000000,299.9650000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3744.3999000,-1057.0999800,0.1000000,0.0000000,0.0000000,315.9650000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(12921,3730.8999000,-1004.0000000,4.6000000,0.0000000,0.0000000,188.0000000); //object(sw_farment01) (2)
	CreateDynamicObject(688,3779.1999500,-1008.7999900,0.1000000,0.0000000,0.0000000,263.9850000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3803.8000500,-1010.7000100,-0.1000000,0.0000000,0.0000000,221.9850000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(18259,4039.6001000,-953.5000000,22.0000000,0.0000000,0.0000000,348.0000000); //object(logcabinn01) (1)
	CreateDynamicObject(688,4033.8999000,-934.4000200,16.7000000,0.0000000,0.0000000,197.9880000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,4016.1999500,-943.9000200,16.7000000,0.0000000,0.0000000,209.9850000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,4021.3999000,-978.0000000,16.7000000,0.0000000,0.0000000,209.9820000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,4010.3999000,-964.2000100,14.2000000,0.0000000,0.0000000,191.9820000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(1463,4028.3999000,-944.2000100,20.8000000,0.0000000,0.0000000,348.0000000); //object(dyn_woodpile2) (1)
	CreateDynamicObject(3461,4028.1999500,-944.4000200,19.1000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (1)
	CreateDynamicObject(3461,4028.6999500,-944.2999900,19.1000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (2)
	CreateDynamicObject(3461,4027.8999000,-944.2000100,19.1000000,0.0000000,0.0000000,0.0000000); //object(tikitorch01_lvs) (3)
	CreateDynamicObject(14872,4036.1001000,-942.5999800,21.0000000,0.0000000,0.0000000,0.0000000); //object(kylie_logs) (1)
	CreateDynamicObject(14872,4028.6999500,-942.2999900,20.7000000,0.0000000,0.0000000,266.0000000); //object(kylie_logs) (2)
	CreateDynamicObject(14872,4026.1001000,-944.2999900,20.7000000,0.0000000,0.0000000,307.9950000); //object(kylie_logs) (3)
	CreateDynamicObject(14872,4027.5000000,-946.5000000,20.7000000,0.0000000,0.0000000,69.9910000); //object(kylie_logs) (4)
	CreateDynamicObject(978,3970.3000500,-961.0000000,1.9000000,0.0000000,0.0000000,97.7500000); //object(sub_roadright) (2)
	CreateDynamicObject(5435,3616.5000000,-1162.6999500,1.3000000,0.0000000,0.0000000,95.9990000); //object(laeroad06) (1)
	CreateDynamicObject(6959,3652.1999500,-1189.3000500,1.4000000,0.0000000,0.0000000,5.7240000); //object(vegasnbball1) (1)
	CreateDynamicObject(6959,3693.3000500,-1185.1999500,1.4000000,0.0000000,0.0000000,5.7240000); //object(vegasnbball1) (1)
	CreateDynamicObject(12941,3669.3000500,-1186.9000200,1.3000000,0.0000000,0.0000000,276.0000000); //object(sw_lastdrop) (1)
	CreateDynamicObject(10562,3677.5000000,-1233.5999800,1.4000000,0.0000000,0.0000000,275.9930000); //object(bbgroundbitd_sfs) (1)
	CreateDynamicObject(7191,3630.3000500,-1173.3000500,1.4000000,0.0000000,0.0000000,5.9990000); //object(vegasnnewfence2b) (5)
	CreateDynamicObject(7191,3656.1999500,-1208.5999800,1.4000000,0.0000000,0.0000000,95.7460000); //object(vegasnnewfence2b) (6)
	CreateDynamicObject(7191,3692.6001000,-1205.0000000,1.4000000,0.0000000,0.0000000,95.7460000); //object(vegasnnewfence2b) (6)
	CreateDynamicObject(7191,3713.0000000,-1181.1999500,1.4000000,0.0000000,0.0000000,185.9930000); //object(vegasnnewfence2b) (8)
	CreateDynamicObject(13591,3704.3999000,-1171.4000200,1.3000000,0.0000000,0.0000000,326.0000000); //object(kickcar28) (3)
	CreateDynamicObject(2890,3688.5000000,-1171.3000500,0.9000000,0.0000000,0.0000000,36.0000000); //object(kmb_skip) (2)
	CreateDynamicObject(1440,3683.1999500,-1188.8000500,1.8000000,0.0000000,0.0000000,114.0000000); //object(dyn_box_pile_3) (2)
	CreateDynamicObject(1439,3682.6999500,-1180.5000000,1.2000000,0.0000000,0.0000000,94.0000000); //object(dyn_dumpster_1) (1)
	CreateDynamicObject(1358,3697.5000000,-1179.1999500,2.3000000,0.0000000,0.0000000,66.0000000); //object(cj_skip_rubbish) (1)
	CreateDynamicObject(12957,3702.0000000,-1198.0000000,1.8000000,0.0000000,0.0000000,236.0000000); //object(sw_pickupwreck01) (2)
	CreateDynamicObject(18248,3705.3999000,-1191.4000200,9.1000000,0.0000000,0.0000000,116.0000000); //object(cuntwjunk01) (2)
	CreateDynamicObject(18253,3709.5000000,-1192.3000500,3.6000000,0.0000000,0.0000000,6.0000000); //object(cuntwjunk09) (1)
	CreateDynamicObject(1696,3630.0000000,-1198.6999500,0.4000000,0.0000000,0.0000000,275.9880000); //object(roofstuff15) (11)
	CreateDynamicObject(1696,3630.5000000,-1203.5999800,0.4000000,0.0000000,0.0000000,275.9880000); //object(roofstuff15) (11)
	CreateDynamicObject(10562,3680.6999500,-1262.3000500,1.4000000,0.0000000,0.0000000,275.9930000); //object(bbgroundbitd_sfs) (1)
	CreateDynamicObject(13120,3764.1001000,-1184.4000200,-24.9000000,0.0000000,0.0000000,105.2390000); //object(ce_grndpalcst03) (1)
	CreateDynamicObject(13120,3692.6992200,-1257.7998000,-24.9000000,0.0000000,0.0000000,63.2370000); //object(ce_grndpalcst03) (1)
	CreateDynamicObject(621,3661.8999000,-955.7000100,-7.5000000,0.0000000,0.0000000,245.9980000); //object(veg_palm02) (15)
	CreateDynamicObject(621,3623.3000500,-940.2999900,-7.5000000,0.0000000,0.0000000,245.9950000); //object(veg_palm02) (15)
	CreateDynamicObject(6959,3577.5000000,-1099.1999500,1.4000000,0.0000000,0.0000000,5.9740000); //object(vegasnbball1) (1)
	CreateDynamicObject(6959,3581.6001000,-1138.9000200,1.4000000,0.0000000,0.0000000,5.9710000); //object(vegasnbball1) (1)
	CreateDynamicObject(6959,3585.6999500,-1178.5999800,1.4000000,0.0000000,0.0000000,5.9710000); //object(vegasnbball1) (1)
	CreateDynamicObject(10562,3598.3999000,-1241.9000200,1.4000000,0.0000000,0.0000000,275.9930000); //object(bbgroundbitd_sfs) (1)
	CreateDynamicObject(10562,3601.1999500,-1270.9000200,1.4000000,0.0000000,0.0000000,275.9930000); //object(bbgroundbitd_sfs) (1)
	CreateDynamicObject(6959,3589.6999500,-1218.1999500,1.4000000,0.0000000,0.0000000,5.9710000); //object(vegasnbball1) (1)
	CreateDynamicObject(13120,3614.1992200,-1307.6992200,-24.9000000,0.0000000,0.0000000,11.2340000); //object(ce_grndpalcst03) (1)
	CreateDynamicObject(6959,3536.6001000,-1104.0000000,1.4000000,0.0000000,0.0000000,5.9710000); //object(vegasnbball1) (1)
	CreateDynamicObject(6959,3540.6999500,-1143.5999800,1.4000000,0.0000000,0.0000000,5.9710000); //object(vegasnbball1) (1)
	CreateDynamicObject(6959,3544.6001000,-1183.1999500,1.4000000,0.0000000,0.0000000,5.9710000); //object(vegasnbball1) (1)
	CreateDynamicObject(6959,3548.6999500,-1222.9000200,1.4000000,0.0000000,0.0000000,5.9710000); //object(vegasnbball1) (1)
	CreateDynamicObject(10775,3545.5000000,-1152.6999500,22.1000000,0.0000000,0.0000000,6.0000000); //object(bigfactory_sfse) (1)
	CreateDynamicObject(7191,3606.8999000,-1191.8000500,1.4000000,0.0000000,0.0000000,185.9990000); //object(vegasnnewfence2b) (5)
	CreateDynamicObject(7191,3601.1999500,-1137.0999800,1.4000000,0.0000000,0.0000000,185.9930000); //object(vegasnnewfence2b) (5)
	CreateDynamicObject(7191,3597.3000500,-1099.5000000,1.4000000,0.0000000,0.0000000,185.9930000); //object(vegasnnewfence2b) (5)
	CreateDynamicObject(7191,3573.1999500,-1079.5999800,1.4000000,0.0000000,0.0000000,276.2430000); //object(vegasnnewfence2b) (5)
	CreateDynamicObject(7191,3537.6001000,-1083.5999800,1.4000000,0.0000000,0.0000000,276.2400000); //object(vegasnnewfence2b) (5)
	CreateDynamicObject(10562,3496.3999000,-1164.5000000,1.4000000,0.0000000,0.0000000,185.9930000); //object(bbgroundbitd_sfs) (1)
	CreateDynamicObject(13120,3506.6001000,-1231.0000000,-24.9000000,0.0000000,0.0000000,331.2340000); //object(ce_grndpalcst03) (1)
	CreateDynamicObject(13120,3463.8000500,-1198.9000200,-24.9000000,0.0000000,0.0000000,301.2320000); //object(ce_grndpalcst03) (1)
	CreateDynamicObject(17033,3513.8999000,-1076.5000000,-3.5000000,0.0000000,0.0000000,50.9220000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(17033,3515.0000000,-1084.4000200,-3.5000000,0.0000000,0.0000000,50.9220000); //object(cunt_rockgp2_15) (10)
	CreateDynamicObject(7191,3586.8000500,-1216.0000000,1.4000000,0.0000000,0.0000000,95.7460000); //object(vegasnnewfence2b) (6)
	CreateDynamicObject(7191,3553.3000500,-1219.3000500,1.4000000,0.0000000,0.0000000,95.7460000); //object(vegasnnewfence2b) (6)
	CreateDynamicObject(10844,3578.1999500,-1094.3000500,4.2000000,0.0000000,0.0000000,6.0000000); //object(gen_whouse01_sfse) (1)
	CreateDynamicObject(10847,3578.0000000,-1188.5000000,7.6000000,0.0000000,0.0000000,96.0000000); //object(gen_whouse03_sfse01) (1)
	CreateDynamicObject(10847,3596.6001000,-1186.5000000,7.6000000,0.0000000,0.0000000,95.9990000); //object(gen_whouse03_sfse01) (2)
	CreateDynamicObject(5244,3591.5000000,-1137.0000000,3.6000000,0.0000000,0.0000000,275.9990000); //object(lasntrk1im03) (1)
	CreateDynamicObject(688,3721.3000500,-1176.3000500,0.1000000,0.0000000,0.0000000,23.9700000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3728.0000000,-1145.5999800,0.1000000,0.0000000,0.0000000,23.9670000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3716.3999000,-1154.0000000,0.1000000,0.0000000,0.0000000,57.9670000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3689.3999000,-1235.3000500,-0.7000000,0.0000000,0.0000000,27.9640000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3697.1001000,-1219.1999500,-0.7000000,0.0000000,0.0000000,63.9600000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3676.3999000,-1211.8000500,-0.7000000,0.0000000,0.0000000,63.9570000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3673.3000500,-1233.5000000,-0.7000000,0.0000000,0.0000000,45.9570000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3661.6001000,-1217.0999800,-0.7000000,0.0000000,0.0000000,45.9560000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3648.8999000,-1229.5000000,-0.7000000,0.0000000,0.0000000,15.9560000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3645.1999500,-1214.6999500,-0.7000000,0.0000000,0.0000000,35.9520000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3682.3000500,-1223.0000000,-0.7000000,0.0000000,0.0000000,35.9470000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3702.3999000,-1206.0000000,-0.7000000,0.0000000,0.0000000,35.9470000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3602.3000500,-1248.4000200,-0.7000000,0.0000000,0.0000000,353.9470000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3627.1001000,-1241.0000000,-0.7000000,0.0000000,0.0000000,335.9470000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3626.3000500,-1216.3000500,-0.7000000,0.0000000,0.0000000,15.9450000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3607.8000500,-1230.9000200,-0.7000000,0.0000000,0.0000000,15.9410000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3582.6001000,-1238.9000200,-0.7000000,0.0000000,0.0000000,29.9410000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3592.1999500,-1221.5000000,-0.7000000,0.0000000,0.0000000,349.9380000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3634.5000000,-1230.0999800,-0.7000000,0.0000000,0.0000000,349.9370000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3576.0000000,-1228.9000200,-0.7000000,0.0000000,0.0000000,315.9370000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3554.0000000,-1228.5000000,-0.7000000,0.0000000,0.0000000,243.9340000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3713.8999000,-1110.0999800,0.1000000,0.0000000,0.0000000,297.9700000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3716.5000000,-1127.4000200,0.1000000,0.0000000,0.0000000,327.9660000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3999.3000500,-926.0000000,6.3000000,0.0000000,0.0000000,229.9880000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3996.1999500,-953.0000000,6.6000000,0.0000000,0.0000000,201.9880000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3995.1999500,-978.7999900,6.6000000,0.0000000,0.0000000,181.9840000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,4013.0000000,-1000.4000200,7.4000000,0.0000000,0.0000000,207.9830000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3997.0000000,-997.5000000,5.5000000,0.0000000,0.0000000,241.9820000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3976.5000000,-1006.4000200,5.5000000,0.0000000,0.0000000,241.9790000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3957.1999500,-1011.0999800,5.5000000,0.0000000,0.0000000,253.9790000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3976.6001000,-1038.0999800,15.9000000,0.0000000,0.0000000,253.9760000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3940.5000000,-1046.3000500,15.9000000,0.0000000,0.0000000,213.9760000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3957.6999500,-1035.0999800,15.9000000,0.0000000,0.0000000,237.9750000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3995.0000000,-1023.7999900,12.2000000,0.0000000,0.0000000,237.9750000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3929.5000000,-1032.8000500,13.9000000,0.0000000,0.0000000,211.9750000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3926.3999000,-1014.2000100,5.8000000,0.0000000,0.0000000,183.9700000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3919.8000500,-1073.5999800,16.7000000,0.0000000,0.0000000,249.9750000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3887.6999500,-1066.1999500,16.7000000,0.0000000,0.0000000,179.9720000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3911.3999000,-1053.8000500,16.7000000,0.0000000,0.0000000,209.9670000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3876.1999500,-1038.8000500,8.1000000,0.0000000,0.0000000,211.9700000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3903.1999500,-1039.0000000,10.6000000,0.0000000,0.0000000,231.9700000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3906.6001000,-1019.0999800,8.3000000,0.0000000,0.0000000,165.9650000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3848.6999500,-1031.4000200,6.5000000,0.0000000,0.0000000,85.9650000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3859.8000500,-1069.0999800,13.9000000,0.0000000,0.0000000,183.9700000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3841.3000500,-1055.0000000,13.9000000,0.0000000,0.0000000,161.9660000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3963.0000000,-1063.5000000,15.9000000,0.0000000,0.0000000,213.9750000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3936.5000000,-1070.6999500,14.0000000,0.0000000,0.0000000,213.9750000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3821.8999000,-1084.5000000,15.5000000,0.0000000,0.0000000,95.9660000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3811.0000000,-1067.6999500,15.5000000,0.0000000,0.0000000,91.9660000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3838.3999000,-1075.5999800,15.5000000,0.0000000,0.0000000,91.9610000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3818.3999000,-1046.0999800,12.2000000,0.0000000,0.0000000,91.9610000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3828.6999500,-1063.5000000,15.5000000,0.0000000,0.0000000,67.9610000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3791.8999000,-1056.0000000,7.6000000,0.0000000,0.0000000,51.9610000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3796.1001000,-1101.4000200,7.6000000,0.0000000,0.0000000,51.9600000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3796.3999000,-1077.6999500,11.8000000,0.0000000,0.0000000,51.9600000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3769.5000000,-1072.5000000,7.6000000,0.0000000,0.0000000,51.9600000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3741.3999000,-1082.4000200,5.1000000,0.0000000,0.0000000,60.9600000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3751.3999000,-1129.9000200,14.3000000,0.0000000,0.0000000,51.9600000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3759.0000000,-1095.0999800,12.8000000,0.0000000,0.0000000,71.9600000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3735.8000500,-1113.5999800,9.1000000,0.0000000,0.0000000,97.9550000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3772.8999000,-1121.8000500,15.6000000,0.0000000,0.0000000,51.9600000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3758.3000500,-1160.6999500,13.1000000,0.0000000,0.0000000,141.9540000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3786.8999000,-1156.0000000,13.1000000,0.0000000,0.0000000,59.9490000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3748.8999000,-1173.9000200,6.9000000,0.0000000,0.0000000,275.9670000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3753.1001000,-1191.4000200,6.9000000,0.0000000,0.0000000,269.9660000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3733.5000000,-1210.5999800,6.9000000,0.0000000,0.0000000,205.9620000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3715.8000500,-1230.4000200,1.5000000,0.0000000,0.0000000,73.9670000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3717.6001000,-1199.5999800,1.5000000,0.0000000,0.0000000,99.9650000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3727.8000500,-1252.8000500,13.1000000,0.0000000,0.0000000,141.9490000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3750.3000500,-1242.4000200,14.0000000,0.0000000,0.0000000,105.9490000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3734.8000500,-1223.5999800,13.1000000,0.0000000,0.0000000,81.9470000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3760.1999500,-1218.5000000,13.1000000,0.0000000,0.0000000,81.9420000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3807.8999000,-1132.5999800,10.6000000,0.0000000,0.0000000,309.9470000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3850.8000500,-1099.5999800,10.6000000,0.0000000,0.0000000,309.9460000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3827.1999500,-1102.0000000,10.6000000,0.0000000,0.0000000,321.9460000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3890.5000000,-1086.9000200,10.6000000,0.0000000,0.0000000,91.9430000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3915.6001000,-1095.0999800,7.7000000,0.0000000,0.0000000,91.9390000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3780.1001000,-1138.5000000,16.5000000,0.0000000,0.0000000,71.9600000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3769.3000500,-1200.9000200,13.1000000,0.0000000,0.0000000,81.9420000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3772.3999000,-1181.5000000,8.7000000,0.0000000,0.0000000,269.9620000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3773.8999000,-1238.9000200,14.0000000,0.0000000,0.0000000,127.9470000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3772.8999000,-1265.1999500,11.2000000,0.0000000,0.0000000,57.9410000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3741.1999500,-1266.4000200,14.0000000,0.0000000,0.0000000,105.9470000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3701.6001000,-1257.4000200,1.5000000,0.0000000,0.0000000,73.9650000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3712.6001000,-1280.5000000,1.5000000,0.0000000,0.0000000,73.9650000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3721.3999000,-1267.5999800,7.4000000,0.0000000,0.0000000,73.9650000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3686.1001000,-1290.6999500,13.5000000,10.0000000,0.0000000,89.9650000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3670.8000500,-1276.9000200,13.5000000,9.9980000,0.0000000,37.9620000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3683.3999000,-1258.0000000,11.3000000,9.9980000,0.0000000,359.9580000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3655.8000500,-1251.9000200,7.7000000,9.9980000,0.0000000,359.9560000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3653.0000000,-1267.6999500,10.1000000,9.9980000,0.0000000,33.9560000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3653.5000000,-1292.8000500,13.5000000,9.9980000,0.0000000,37.9580000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3626.0996100,-1277.5000000,5.5000000,9.9980000,0.0000000,21.9560000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3649.3999000,-1311.3000500,13.5000000,9.9980000,0.0000000,21.9560000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3636.6992200,-1264.6992200,7.7000000,9.9980000,0.0000000,295.9550000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3616.1999500,-1294.1999500,13.1000000,9.9980000,0.0000000,315.9560000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3599.2998000,-1274.3994100,5.5000000,9.9980000,0.0000000,21.9510000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3573.1992200,-1294.6992200,14.9000000,9.9980000,0.0000000,21.9510000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3545.8999000,-1278.6999500,15.4000000,9.9980000,0.0000000,21.9560000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3561.3999000,-1273.5999800,14.6000000,9.9980000,0.0000000,33.9560000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3551.1999500,-1254.1999500,5.5000000,9.9980000,0.0000000,21.9510000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3583.5000000,-1283.0999800,14.0000000,9.9980000,0.0000000,279.9510000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3546.3999000,-1296.1999500,16.1000000,9.9980000,0.0000000,21.9510000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(688,3524.3999000,-1251.8000500,12.1000000,9.9980000,0.0000000,47.9510000); //object(sm_fir_scabg) (4)
	CreateDynamicObject(1290,3570.1001000,-785.0000000,6.1000000,0.0000000,0.0000000,185.9880000); //object(lamppost2) (33)
	CreateDynamicObject(1290,3584.3999000,-783.5999800,6.1000000,0.0000000,0.0000000,185.9880000); //object(lamppost2) (33)
	CreateDynamicObject(1696,3601.6001000,-1017.4000200,0.3000000,0.0000000,0.0000000,5.9880000); //object(roofstuff15) (11)
	CreateDynamicObject(1696,3606.0000000,-1017.0000000,0.3000000,0.0000000,0.0000000,5.9880000); //object(roofstuff15) (11)
	CreateDynamicObject(1696,3596.1001000,-1018.0000000,0.3000000,0.0000000,0.0000000,5.9880000); //object(roofstuff15) (11)
	CreateDynamicObject(1696,3614.6001000,-1002.2000100,0.4000000,0.0000000,0.0000000,95.9880000); //object(roofstuff15) (11)
	CreateDynamicObject(1696,3615.1001000,-1007.0000000,0.4000000,0.0000000,0.0000000,95.9820000); //object(roofstuff15) (11)
	CreateDynamicObject(1290,3582.8999000,-916.0999800,6.1000000,0.0000000,0.0000000,185.9880000); //object(lamppost2) (33)
	CreateDynamicObject(1290,3598.3999000,-914.0000000,6.1000000,0.0000000,0.0000000,185.9930000); //object(lamppost2) (33)
	CreateDynamicObject(1290,3612.8999000,-1013.9000200,6.1000000,0.0000000,0.0000000,185.9880000); //object(lamppost2) (33)
	CreateDynamicObject(1290,3593.1001000,-1016.0999800,6.1000000,0.0000000,0.0000000,185.9880000); //object(lamppost2) (33)
	CreateDynamicObject(1290,3606.5000000,-1143.6999500,6.1000000,0.0000000,0.0000000,185.9880000); //object(lamppost2) (33)
	CreateDynamicObject(1290,3622.3000500,-1141.5999800,6.1000000,0.0000000,0.0000000,185.9880000); //object(lamppost2) (33)
	CreateDynamicObject(1290,3637.3999000,-914.2000100,6.1000000,0.0000000,0.0000000,278.4930000); //object(lamppost2) (33)
	CreateDynamicObject(1290,3639.1001000,-925.0000000,6.1000000,0.0000000,0.0000000,278.4920000); //object(lamppost2) (33)
	CreateDynamicObject(1290,3758.5000000,-908.2999900,6.1000000,0.0000000,0.0000000,278.4920000); //object(lamppost2) (33)
	CreateDynamicObject(1290,3756.5000000,-897.4000200,6.1000000,0.0000000,0.0000000,278.4920000); //object(lamppost2) (33)
	CreateDynamicObject(1290,3876.0000000,-891.7999900,6.1000000,0.0000000,0.0000000,278.4920000); //object(lamppost2) (33)
	CreateDynamicObject(1290,3874.0000000,-880.7999900,6.1000000,0.0000000,0.0000000,278.4920000); //object(lamppost2) (33)
	CreateDynamicObject(1290,3886.8999000,-965.7000100,6.1000000,0.0000000,0.0000000,278.4920000); //object(lamppost2) (33)
	CreateDynamicObject(1290,3888.6999500,-976.4000200,6.1000000,0.0000000,0.0000000,278.4920000); //object(lamppost2) (33)
	CreateDynamicObject(1290,3771.1001000,-990.5000000,6.1000000,0.0000000,0.0000000,278.4920000); //object(lamppost2) (33)
	CreateDynamicObject(1290,3769.5000000,-979.9000200,6.1000000,0.0000000,0.0000000,278.4920000); //object(lamppost2) (33)
	CreateDynamicObject(1290,3648.6001000,-1005.4000200,6.1000000,0.0000000,0.0000000,278.4920000); //object(lamppost2) (33)
	CreateDynamicObject(1290,3647.1999500,-995.0999800,6.1000000,0.0000000,0.0000000,278.4920000); //object(lamppost2) (33)
	CreateDynamicObject(1696,3903.1999500,-894.9000200,1.0000000,0.0000000,0.0000000,7.9880000); //object(roofstuff15) (11)
	CreateDynamicObject(1696,3898.3000500,-895.5999800,1.0000000,0.0000000,0.0000000,7.9870000); //object(roofstuff15) (11)
	CreateDynamicObject(1494,3758.1999500,-1030.5000000,1.8000000,0.0000000,0.0000000,32.2500000); //object(gen_doorint03) (2)
	CreateDynamicObject(1696,3595.1999500,-261.8999900,0.2000000,0.0000000,0.0000000,5.4850000); //object(roofstuff15) (3)
	CreateDynamicObject(1696,3590.6999500,-262.2999900,0.2000000,0.0000000,0.0000000,4.9820000); //object(roofstuff15) (3)

	//Decas city island.

    CreateDynamicObject(5147,2949.5996094,-808.5996094,16.6000004,0.0000000,0.0000000,179.9945068);
    CreateDynamicObject(5333,3174.8999023,-808.5800171,15.5900002,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1422,2905.1999512,-808.7000122,10.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1422,2900.5000000,-808.5999756,10.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(3749,2903.1000977,-808.5999756,15.8000002,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(1237,2902.8000488,-808.5999756,10.0000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1237,2907.2998047,-808.6992188,10.0000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(17550,3365.6999512,-737.5000000,12.8000002,0.0000000,0.0000000,290.0000000);
    CreateDynamicObject(13168,3288.0000000,-773.5996094,6.8299999,0.0000000,0.0000000,179.9945068);
    CreateDynamicObject(13092,3346.8994141,-851.0000000,6.8299999,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(12906,3356.0000000,-772.5996094,6.8299999,0.0000000,0.0000000,179.9945068);
    CreateDynamicObject(12801,3407.6992188,-773.5693359,6.8299999,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(10394,3332.8999023,-773.5599976,9.6300001,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(5463,3338.0000000,-773.7999878,33.7999992,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1383,3350.5000000,-792.7000122,39.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1384,3350.5000000,-792.7000122,72.0999985,0.0000000,0.0000000,32.0000000);
    CreateDynamicObject(2062,3320.3000488,-751.2999878,7.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(2062,3325.3999023,-751.7999878,7.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(2062,3323.5000000,-752.7000122,7.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(2062,3321.8999023,-751.0999756,7.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(2062,3320.6999512,-752.2000122,7.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1685,3351.5000000,-750.7999878,7.6999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1685,3352.8999023,-754.7999878,7.6999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(925,3330.6999512,-750.7000122,8.0000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(3573,3327.3000488,-792.9000244,9.6000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(4013,3280.0000000,-697.5000000,14.8999996,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(5716,3268.0000000,-836.0000000,20.1000004,0.0000000,0.0000000,179.9945068);
    CreateDynamicObject(9949,3455.5000000,-781.4000244,18.7999992,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(10378,3338.2998047,-697.7998047,6.9000001,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(13295,3345.6494141,-833.0996094,13.4399996,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(5709,3423.0996094,-832.0000000,15.8999996,0.0000000,0.0000000,180.0000000);
    CreateDynamicObject(5725,3402.3999023,-726.2000122,15.8500004,0.0000000,0.0000000,180.0000000);
    CreateDynamicObject(5762,3293.6999512,-851.5000000,10.0000000,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(5787,3405.5000000,-872.7999878,11.6999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(6977,3295.1999512,-773.7000122,6.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(7917,3337.8999023,-654.2000122,6.6999998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(7885,3337.8994141,-654.1992188,6.6999998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(7090,3441.3999023,-774.0999756,23.6000004,0.0000000,0.0000000,179.9945068);
    CreateDynamicObject(7090,3441.5000000,-782.5000000,23.6000004,0.0000000,0.0000000,179.9945068);
    CreateDynamicObject(7090,3441.3999023,-765.7000122,23.6000004,0.0000000,0.0000000,179.9945068);
    CreateDynamicObject(1257,3271.0996094,-754.0996094,8.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(8678,3337.5996094,-882.0000000,7.3000002,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(6959,3407.5000000,-778.2999878,6.9000001,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(12853,3407.5996094,-773.5791016,8.8999996,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(6959,3407.5000000,-738.2998047,6.8000002,0.0000000,359.5989990,270.0000000);
    CreateDynamicObject(1228,3426.6000977,-743.0000000,7.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1228,3388.0000000,-742.2998047,7.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1422,3393.3999023,-738.7999878,7.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1422,3389.6992188,-738.7998047,7.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1422,3397.1999512,-738.7999878,7.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1422,3401.1999512,-738.7999878,7.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1422,3405.6000977,-738.7999878,7.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1422,3409.8999023,-738.7999878,7.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1422,3414.3999023,-738.7999878,7.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1422,3418.8000488,-738.7999878,7.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1422,3425.1000977,-739.2999878,7.1999998,0.0000000,0.0000000,340.0000000);
    CreateDynamicObject(935,3403.6000977,-746.9000244,7.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(935,3401.0000000,-746.0000000,7.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(935,3405.1999512,-745.0999756,7.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(935,3402.5000000,-745.5999756,7.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1685,3407.3000488,-747.2000122,7.6999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1685,3411.7998047,-747.0996094,7.6999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(12930,3412.8994141,-744.1992188,7.5999999,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(1676,3396.5000000,-779.4000244,8.5000000,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1676,3396.5000000,-767.5000000,8.5000000,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(970,3414.6999512,-798.5000000,7.4000001,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(970,3418.8999023,-798.5000000,7.4000001,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(970,3414.6999512,-748.5999756,7.4000001,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(970,3418.8999023,-748.5999756,7.4000001,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(970,3422.6999512,-755.2000122,7.4000001,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(970,3422.6999512,-762.7000122,7.4000001,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(970,3422.6999512,-770.2000122,7.4000001,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(970,3422.6999512,-778.0000000,7.4000001,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(970,3422.6999512,-785.5000000,7.4000001,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(970,3422.6999512,-792.9000244,7.4000001,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(997,3412.6000977,-794.0000000,6.9000001,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(997,3412.6000977,-789.4000244,6.9000001,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(997,3412.6000977,-784.5999756,6.9000001,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(997,3412.6000977,-780.2000122,6.9000001,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(997,3412.6000977,-769.4000244,6.9000001,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(997,3412.6000977,-774.9000244,6.9000001,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(997,3412.6000977,-764.4000244,6.9000001,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(997,3412.6000977,-759.5999756,6.9000001,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(997,3412.6000977,-754.0999756,6.9000001,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(6959,3411.6992188,-853.3994141,6.9200001,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(6959,3444.6000977,-833.7999878,6.9000001,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(6959,3438.6000977,-805.0000000,6.7800002,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(6959,3288.0000000,-779.0000000,6.9099998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(6959,3288.0000000,-767.9000244,6.9200001,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(6959,3284.6999512,-711.0999756,6.9200001,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(6959,3273.0000000,-737.2999878,6.7909999,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1412,3253.1000977,-796.0999756,8.1999998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1412,3253.1000977,-790.9000244,8.1999998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1412,3253.1000977,-785.5999756,8.1999998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1412,3253.1000977,-780.2999878,8.1999998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1412,3253.1000977,-775.0000000,8.1999998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1412,3253.1000977,-769.7000122,8.1999998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1412,3253.1000977,-764.4000244,8.1999998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1412,3253.1000977,-759.0999756,8.1999998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1412,3253.1000977,-753.7999878,8.1999998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1412,3253.1000977,-748.5000000,8.1999998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1412,3253.1000977,-743.2000122,8.1999998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1412,3253.1000977,-737.9000244,8.1999998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1412,3253.1000977,-732.5999756,8.1999998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1412,3253.1000977,-727.2999878,8.1999998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1422,3253.3999023,-724.5999756,7.1999998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1422,3253.3000488,-727.5000000,7.1999998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1422,3253.3000488,-730.4000244,7.1999998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1422,3253.3000488,-733.2999878,7.1999998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1422,3253.3000488,-736.2000122,7.1999998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1422,3253.3000488,-739.0999756,7.1999998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1422,3253.3000488,-742.0000000,7.1999998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1422,3253.3000488,-745.0000000,7.1999998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1422,3253.3000488,-748.0999756,7.1999998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(3753,3447.1000977,-709.7000122,-2.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(6959,3372.3999023,-696.9000244,-13.0000000,270.0000000,0.0000000,90.0000000);
    CreateDynamicObject(6959,3451.5996094,-738.2998047,6.7800002,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(6959,3393.1000977,-717.5999756,-13.0000000,270.0000000,0.0000000,180.0000000);
    CreateDynamicObject(6959,3434.3999023,-717.5999756,-13.2299995,270.0000000,180.0000000,179.9945068);
    CreateDynamicObject(6959,3450.8999023,-717.5999756,-13.1999998,270.0000000,179.9945068,179.9945068);
    CreateDynamicObject(6959,3471.5000000,-738.2999878,-13.1999998,270.0000000,0.0000000,90.0000000);
    CreateDynamicObject(6959,3471.6000977,-779.5999756,-13.1999998,270.0000000,0.0000000,270.0000000);
    CreateDynamicObject(6959,3471.5000000,-820.9000244,-13.1000004,270.0000000,0.0000000,90.0000000);
    CreateDynamicObject(3753,3479.3999023,-834.2000122,-2.5000000,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(6959,3471.6000977,-833.9000244,-13.1000004,270.0000000,0.0000000,270.0000000);
    CreateDynamicObject(6959,3450.8994141,-854.5000000,-13.1000004,270.0000000,0.0000000,0.0000000);
    CreateDynamicObject(6959,3451.6000977,-833.9000244,6.9200001,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(6959,3397.3999023,-881.4000244,6.7300000,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(6959,3411.0000000,-874.0000000,-13.1000004,270.0000000,0.0000000,180.0000000);
    CreateDynamicObject(6959,3431.6000977,-853.4000244,-13.1000004,270.0000000,0.0000000,270.0000000);
    CreateDynamicObject(6959,3417.3994141,-881.3994141,-13.3000002,270.0000000,0.0000000,270.0000000);
    CreateDynamicObject(6959,3396.6992188,-902.0996094,-13.3000002,270.0000000,0.0000000,179.9945068);
    CreateDynamicObject(4585,3362.6000977,-878.5000000,-93.1999969,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(4585,3332.3999023,-878.5999756,-93.1999969,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(4585,3315.5000000,-878.5999756,-93.1999969,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(4585,3300.6999512,-841.5000000,-93.1999969,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(4585,3284.8000488,-827.0000000,-93.1999969,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(4585,3260.2998047,-821.1992188,-93.1999969,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(4585,3273.6000977,-780.0000000,-93.1999969,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(4585,3273.5000000,-742.2999878,-93.1999969,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(4585,3317.1999512,-655.9000244,-93.1999969,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(4585,3348.0000000,-655.9000244,-93.1999969,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(4585,3358.6999512,-656.0000000,-93.1999969,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(4585,3283.0000000,-701.0999756,-93.1999969,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(3029,3303.1992188,-852.1992188,6.8000002,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(3275,3425.5000000,-846.0999756,7.6999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(3275,3440.6999512,-836.7000122,7.6999998,0.0000000,0.0000000,272.0000000);
    CreateDynamicObject(924,3419.5000000,-845.4000244,7.0999999,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(910,3437.3999023,-835.2999878,8.1000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(853,3427.3999023,-839.7999878,7.2600002,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(851,3438.3000488,-838.2000122,7.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1450,3419.3000488,-843.4000244,7.5000000,0.0000000,0.0000000,96.0000000);
    CreateDynamicObject(1439,3435.0000000,-835.0999756,6.9000001,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1369,3433.1000977,-834.9000244,7.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1327,3419.3999023,-836.0000000,7.5999999,0.0000000,340.5000000,0.0000000);
    CreateDynamicObject(12957,3429.6000977,-865.4000244,7.8000002,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1442,3432.5000000,-840.9000244,7.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1440,3424.8999023,-834.7000122,7.4000001,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1431,3428.8999023,-834.7000122,7.4000001,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(2671,3435.6000977,-843.0999756,6.9000001,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(2670,3426.1000977,-842.9000244,7.0000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(2674,3435.6000977,-837.5999756,6.9000001,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(2675,3426.0000000,-837.2999878,7.0000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(3594,3454.5000000,-838.7000122,7.5000000,0.0000000,0.0000000,320.0000000);
    CreateDynamicObject(3594,3445.6000977,-831.5000000,7.5000000,0.0000000,0.0000000,195.9987793);
    CreateDynamicObject(2907,3419.3999023,-835.2000122,7.0000000,0.0000000,0.0000000,324.0000000);
    CreateDynamicObject(933,3421.1999512,-841.0999756,6.9000001,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(16305,3405.3000488,-876.5999756,11.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1215,3372.6999512,-743.7999878,7.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1215,3377.3999023,-748.2000122,7.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1215,3367.8999023,-748.2000122,7.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1215,3367.8999023,-754.9000244,7.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1215,3377.5000000,-754.5000000,7.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1215,3377.5000000,-760.0999756,7.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1215,3377.5000000,-765.5999756,7.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1215,3368.1000977,-761.2000122,7.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1215,3368.1000977,-767.2999878,7.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1215,3368.1999512,-774.0999756,7.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1215,3367.8999023,-786.7000122,7.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1215,3367.8999023,-792.7000122,7.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1215,3367.8999023,-798.7000122,7.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1215,3372.6999512,-803.2999878,7.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1215,3377.3999023,-799.0999756,7.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1215,3377.5000000,-792.5999756,7.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1215,3377.6999512,-785.7999878,7.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1215,3377.6000977,-773.9000244,7.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(792,3372.6999512,-746.2999878,7.0999999,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(792,3372.6999512,-758.2000122,7.0999999,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(792,3372.8000488,-800.7000122,7.0999999,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(792,3372.8999023,-790.0999756,7.0999999,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(792,3372.8000488,-769.0999756,7.0999999,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(803,3310.5000000,-674.2999878,7.9000001,0.0000000,0.0000000,274.0000000);
    CreateDynamicObject(803,3323.3999023,-677.2000122,7.9000001,0.0000000,0.0000000,42.0000000);
    CreateDynamicObject(803,3352.8000488,-677.5999756,8.1000004,0.0000000,0.0000000,122.0000000);
    CreateDynamicObject(803,3364.5000000,-673.7000122,8.1000004,0.0000000,0.0000000,192.0000000);
    CreateDynamicObject(803,3309.5000000,-722.2000122,8.0000000,0.0000000,0.0000000,252.0000000);
    CreateDynamicObject(803,3323.0000000,-722.5000000,8.0000000,0.0000000,0.0000000,50.0000000);
    CreateDynamicObject(803,3367.0000000,-721.9000244,8.0000000,0.0000000,0.0000000,96.0000000);
    CreateDynamicObject(803,3353.5000000,-721.5000000,8.0000000,0.0000000,0.0000000,318.0000000);
    CreateDynamicObject(3512,3316.3000488,-676.2999878,7.0999999,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(3512,3359.1000977,-676.2999878,7.0999999,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(629,3311.3999023,-716.5000000,7.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(629,3325.1000977,-716.7000122,7.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(629,3311.0000000,-725.4000244,7.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(629,3325.3000488,-725.4000244,7.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(629,3355.8000488,-715.0999756,7.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(629,3355.8000488,-725.2999878,7.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(629,3368.0000000,-725.2999878,7.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(629,3368.0000000,-716.2999878,7.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(629,3362.0000000,-721.2999878,7.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(629,3317.6000977,-721.2999878,7.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(2671,3276.3000488,-787.9000244,6.9000001,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(983,3286.6999512,-818.7000122,7.5000000,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(983,3280.3000488,-818.7000122,7.5000000,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(983,3273.8999023,-818.7000122,7.5000000,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1215,3348.3999023,-728.2000122,8.0000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1215,3348.3999023,-713.4000244,8.0000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1215,3372.0000000,-713.4000244,8.0000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1215,3372.0000000,-728.2000122,8.0000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1215,3328.1999512,-728.2000122,8.0000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1215,3328.1999512,-713.7000122,8.0000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1215,3304.6000977,-728.2000122,8.0000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(997,3468.1999512,-717.7000122,6.6999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(997,3465.1000977,-717.7000122,6.6999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(997,3462.0000000,-717.7000122,6.6999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(997,3458.8999023,-717.7000122,6.6999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(997,3455.8000488,-717.7000122,6.6999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(997,3452.6999512,-717.7000122,6.6999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(997,3449.6000977,-717.7000122,6.6999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(997,3446.5000000,-717.7000122,6.6999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(997,3443.3999023,-717.7000122,6.6999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(997,3471.3999023,-717.5999756,6.6999998,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(997,3471.3999023,-720.7000122,6.6999998,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(997,3471.3994141,-723.7998047,6.6999998,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(997,3372.3000488,-709.5000000,6.8000002,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(997,3372.3000488,-706.4000244,6.8000002,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(997,3372.3000488,-703.2999878,6.8000002,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(997,3372.3000488,-700.2000122,6.8000002,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(997,3372.3000488,-697.0999756,6.8000002,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(997,3372.3000488,-694.0000000,6.8000002,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(997,3372.3000488,-690.9000244,6.8000002,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(997,3372.3000488,-687.7999878,6.8000002,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(997,3372.3000488,-684.7000122,6.8000002,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(997,3372.1999512,-681.5999756,6.8000002,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(1215,3372.1000977,-682.5000000,8.0000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1215,3348.3999023,-682.2999878,8.0000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1215,3328.3000488,-682.5000000,8.0000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(618,3301.1999512,-891.5000000,7.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(618,3374.8000488,-869.7999878,7.1999998,0.0000000,0.0000000,286.0000000);
    CreateDynamicObject(624,3320.8000488,-872.7999878,6.0999999,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(624,3322.3999023,-864.7999878,6.0999999,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(624,3342.0000000,-864.5000000,6.0999999,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(624,3352.1000977,-863.9000244,6.0999999,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(624,3360.5000000,-865.2000122,6.0999999,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(624,3371.3999023,-864.2000122,6.0999999,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(624,3330.6999512,-865.0000000,6.0999999,0.0000000,0.0000000,330.0000000);
    CreateDynamicObject(669,3336.3999023,-877.5000000,7.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(870,3320.1999512,-872.0999756,7.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(870,3300.0000000,-864.5999756,7.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(871,3300.1999512,-867.2999878,7.3000002,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(873,3334.6999512,-885.5000000,8.6000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(870,3300.1999512,-869.2000122,7.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(871,3300.3999023,-871.9000244,7.3000002,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(873,3346.6000977,-886.0000000,8.6000004,0.0000000,0.0000000,42.0000000);
    CreateDynamicObject(873,3356.1000977,-885.0000000,8.6000004,0.0000000,0.0000000,349.9952393);
    CreateDynamicObject(618,3374.1999512,-895.9000244,7.1999998,0.0000000,0.0000000,50.0000000);
    CreateDynamicObject(1597,3432.5000000,-753.7000122,9.3999996,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1597,3432.5000000,-772.7000122,9.3999996,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1597,3432.5000000,-791.9000244,9.3999996,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(7662,3352.8000488,-899.7000122,7.6999998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1211,3269.6999512,-801.7000122,7.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1211,3355.5000000,-745.7999878,7.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1211,3375.1999512,-850.7999878,7.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1231,3432.6999512,-762.9000244,9.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1231,3432.6000977,-782.9000244,9.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1232,3376.6999512,-795.7999878,9.6000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1232,3368.5000000,-795.7000122,9.6000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1232,3369.1000977,-764.2000122,9.6000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1232,3368.8000488,-751.4000244,9.6000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1232,3376.8999023,-751.2000122,9.6000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1232,3377.1000977,-764.0999756,9.6000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1232,3269.1000977,-798.0000000,9.6000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1232,3269.1000977,-786.5000000,9.6000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1232,3269.1000977,-776.5000000,9.6000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1232,3269.1000977,-766.7000122,9.6000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1232,3269.1000977,-757.4000244,9.6000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1232,3273.1999512,-744.5000000,9.6000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1232,3285.1999512,-744.2999878,9.6000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1232,3297.0000000,-744.2999878,9.6000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1232,3307.3999023,-750.9000244,9.6000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1232,3307.3000488,-765.0999756,9.6000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1232,3307.3000488,-777.9000244,9.6000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1232,3307.3000488,-790.9000244,9.6000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1232,3301.3000488,-802.7999878,9.6000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1232,3287.8000488,-802.7999878,9.6000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1232,3276.8000488,-802.7999878,9.6000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1232,3323.3000488,-815.2000122,9.6000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1232,3337.3000488,-814.9000244,9.6000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1232,3352.5000000,-815.0000000,9.6000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1232,3372.6000977,-815.0000000,9.6000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1341,3368.1999512,-685.0999756,7.9000001,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(1346,3371.5000000,-729.9000244,8.3000002,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1407,3392.8000488,-848.7000122,7.6999998,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(1407,3392.8000488,-853.4000244,7.6999998,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(1431,3408.0000000,-846.7000122,7.4000001,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1440,3410.1000977,-853.7999878,7.4000001,0.0000000,0.0000000,179.9945068);
    CreateDynamicObject(1447,3434.3999023,-854.5999756,8.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1447,3439.6999512,-854.5999756,8.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1447,3445.0000000,-854.5999756,8.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1447,3450.3000488,-854.5999756,8.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1447,3455.6000977,-854.5999756,8.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1447,3460.8999023,-854.5999756,8.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1447,3466.1999512,-854.5999756,8.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1447,3468.6999512,-853.0999756,6.9000001,271.2745667,168.6799316,172.4327393);
    CreateDynamicObject(1434,3470.8000488,-851.5000000,6.9000001,0.0000000,0.0000000,100.0000000);
    CreateDynamicObject(1434,3471.0000000,-849.7000122,6.9000001,0.0000000,0.0000000,86.0000000);
    CreateDynamicObject(1434,3470.8000488,-848.0000000,6.9000001,0.0000000,0.0000000,96.0000000);
    CreateDynamicObject(1434,3470.6000977,-846.2000122,6.9000001,0.0000000,0.0000000,88.0000000);
    CreateDynamicObject(1434,3470.3999023,-844.2999878,6.9000001,0.0000000,0.0000000,84.0000000);
    CreateDynamicObject(1434,3471.0000000,-842.5000000,6.9000001,0.0000000,0.0000000,96.0000000);
    CreateDynamicObject(1434,3470.5000000,-839.5999756,6.9000001,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1434,3470.8000488,-838.0999756,6.9000001,0.0000000,0.0000000,118.0000000);
    CreateDynamicObject(1412,3431.5000000,-857.0999756,8.1999998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1412,3431.5000000,-862.4000244,8.1999998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1412,3431.5000000,-867.7000122,8.1999998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1412,3431.5000000,-871.2000122,8.1999998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1413,3428.8000488,-873.9000244,8.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(10985,3458.6999512,-824.7000122,7.6999998,0.0000000,0.0000000,332.0000000);
    CreateDynamicObject(849,3460.8000488,-844.7999878,7.1999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(853,3453.6999512,-851.7000122,7.3000002,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(3029,3285.8000488,-773.9000244,7.6999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(16337,2903.0000000,-815.2000122,10.0000000,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(16337,2903.1000977,-802.0999756,10.0000000,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1229,3269.6000977,-749.5000000,8.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(3715,2900.6000977,-809.0999756,17.0000000,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(8406,3311.5000000,-862.4000244,12.3000002,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(8526,3326.6000977,-679.7000122,12.1999998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(10838,3253.5000000,-698.2999878,24.1000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(7037,3399.3999023,-834.9000244,11.6999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(3029,3391.6999512,-838.7000122,6.8000002,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(8406,3434.0000000,-734.7000122,12.3999996,0.0000000,0.0000000,324.0000000);
    CreateDynamicObject(8843,3444.1000977,-722.5000000,6.7700000,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(1251,3469.6999512,-721.0000000,6.8000002,0.0000000,0.0000000,334.0000000);
    CreateDynamicObject(1251,3465.1000977,-720.9000244,6.8000002,0.0000000,0.0000000,333.9953613);
    CreateDynamicObject(1251,3460.3999023,-721.0999756,6.8000002,0.0000000,0.0000000,333.9953613);
    CreateDynamicObject(1251,3455.6999512,-721.0999756,6.8000002,0.0000000,0.0000000,333.9953613);
    CreateDynamicObject(1251,3451.1000977,-721.0000000,6.8000002,0.0000000,0.0000000,333.9953613);
    CreateDynamicObject(1251,3446.3999023,-721.2000122,6.8000002,0.0000000,0.0000000,333.9953613);
    CreateDynamicObject(997,3471.3999023,-726.9000244,6.6999998,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(4638,3319.6000977,-863.5999756,8.3999996,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(11392,3397.6999512,-773.9000244,6.8699999,0.0000000,0.0000000,20.0000000);
    CreateDynamicObject(5822,3422.3000488,-856.7999878,9.3000002,0.0000000,0.0000000,273.9990234);
    CreateDynamicObject(3569,3335.1999512,-843.5000000,9.5000000,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(5145,3340.1999512,-996.0999756,-3.7000000,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(6959,3437.3000488,-901.9000244,-13.1999998,270.0000000,0.0000000,0.0000000);
    CreateDynamicObject(10610,3354.5000000,-995.0999756,16.7999992,0.0000000,0.0000000,179.9945068);
    CreateDynamicObject(12983,3354.1000977,-928.5000000,6.5999999,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(10631,3304.3999023,-982.4000244,11.1000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(10832,3399.1999512,-909.2999878,8.6000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(3689,3413.6999512,-974.0000000,14.6999998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(10775,3256.8999023,-1014.4000244,28.0000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(3620,3280.0000000,-1088.0999756,19.7999992,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(9585,3340.3000488,-1118.0999756,0.7000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(3620,3340.8000488,-1088.0999756,19.7999992,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(3620,3405.3000488,-1088.0999756,19.7999992,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(9586,3338.0000000,-1118.0999756,10.8000002,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(9584,3265.1000977,-1118.0999756,19.8999996,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(9761,3338.8000488,-1118.0999756,20.7999992,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(9587,3349.1000977,-1118.0000000,17.2000008,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(9583,3273.3999023,-1118.5999756,48.0999985,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(2944,3282.1000977,-1115.0999756,18.0000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(2938,3311.8000488,-1114.8000488,10.0000000,0.0000000,90.0000000,0.0000000);
    CreateDynamicObject(2938,3311.8000488,-1126.8000488,10.0000000,0.0000000,90.0000000,0.0000000);
    CreateDynamicObject(12859,3314.8000488,-1078.5999756,6.8000002,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(3753,3464.6999512,-1062.1999512,-3.4000001,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(10831,3365.8000488,-1067.4000244,11.6000004,0.0000000,0.0000000,180.0000000);
    CreateDynamicObject(923,3376.1999512,-1077.9000244,7.6999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1348,3371.8999023,-1077.8000488,7.5000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(2991,3375.3000488,-1057.5000000,7.4000001,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(2991,3375.0000000,-1060.5000000,7.4000001,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(2991,3375.6999512,-1059.4000244,8.6999998,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(2991,3375.8000488,-1065.0000000,7.4000001,0.0000000,0.0000000,320.0000000);
    CreateDynamicObject(923,3377.6999512,-1069.9000244,7.6999998,0.0000000,0.0000000,290.0000000);
    CreateDynamicObject(923,3353.8000488,-1078.0000000,7.6999998,0.0000000,0.0000000,309.9951172);
    CreateDynamicObject(3576,3355.5000000,-1057.1999512,8.3000002,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1362,3354.5000000,-1069.6999512,7.4000001,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(6959,3323.1000977,-929.2999878,-13.3999996,270.0000000,0.0000000,270.0000000);
    CreateDynamicObject(3753,3216.1999512,-1008.0999756,-3.4000001,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(11011,3347.1000977,-1018.9000244,10.8000002,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(978,3293.3000488,-946.7999878,7.5000000,0.0000000,0.0000000,179.9975586);
    CreateDynamicObject(16401,3283.3000488,-951.2000122,6.6999998,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(6959,3284.5000000,-956.7000122,-9.5000000,305.0000000,0.0000000,179.9945679);
    CreateDynamicObject(978,3283.6000977,-946.7999878,7.5000000,0.0000000,0.0000000,179.9945068);
    CreateDynamicObject(978,3274.0000000,-946.7999878,7.5000000,0.0000000,0.0000000,179.9945068);
    CreateDynamicObject(1423,3280.8000488,-960.2999878,7.4000001,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1423,3284.0000000,-960.2999878,7.4000001,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1423,3287.3999023,-959.0000000,7.4000001,0.0000000,0.0000000,40.0000000);
    CreateDynamicObject(1423,3289.0000000,-956.0000000,7.4000001,0.0000000,0.0000000,89.9957275);
    CreateDynamicObject(1238,3285.8999023,-960.4000244,7.0000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1238,3282.5000000,-960.7000122,7.0000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1238,3288.8000488,-957.7999878,7.0000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1685,3276.5000000,-958.2999878,7.4000001,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1685,3276.0000000,-956.2999878,7.4000001,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1685,3277.3000488,-953.7999878,7.4000001,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(3722,3304.3999023,-950.0999756,11.1999998,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(2991,3291.5000000,-949.0999756,7.4000001,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(12934,3300.8000488,-1071.8000488,10.1999998,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(12913,3297.3000488,-1005.9000244,9.3999996,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(3753,3318.6000977,-907.5999756,-3.5000000,0.0000000,0.0000000,180.0000000);
    CreateDynamicObject(3460,3371.1000977,-967.2000122,10.6000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(3460,3352.3999023,-967.2000122,10.6000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(3460,3334.8999023,-967.2000122,10.6000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(3460,3318.1000977,-967.2000122,10.6000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(3460,3293.6000977,-967.2000122,10.6000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1257,3390.3999023,-1017.0000000,8.1000004,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(3460,3293.6000977,-958.9000244,10.6000004,0.0000000,0.0000000,180.0000000);
    CreateDynamicObject(3460,3318.1000977,-958.9000244,10.6000004,0.0000000,0.0000000,180.0000000);
    CreateDynamicObject(3460,3334.8999023,-959.0000000,10.6000004,0.0000000,0.0000000,180.0000000);
    CreateDynamicObject(3460,3352.3999023,-958.9000244,10.6000004,0.0000000,0.0000000,180.0000000);
    CreateDynamicObject(3460,3371.1000977,-959.2000122,10.6000004,0.0000000,0.0000000,180.0000000);
    CreateDynamicObject(3460,3378.5000000,-947.9000244,10.6000004,0.0000000,0.0000000,269.9945068);
    CreateDynamicObject(3460,3378.5000000,-932.9000244,10.6000004,0.0000000,0.0000000,269.9890137);
    CreateDynamicObject(3460,3378.5000000,-918.4000244,10.6000004,0.0000000,0.0000000,269.9890137);
    CreateDynamicObject(3460,3378.5000000,-902.5999756,10.6000004,0.0000000,0.0000000,269.9890137);
    CreateDynamicObject(3460,3378.5000000,-1016.5999756,10.6000004,0.0000000,0.0000000,269.9890137);
    CreateDynamicObject(3460,3386.8000488,-1010.7999878,10.6000004,0.0000000,0.0000000,89.9890137);
    CreateDynamicObject(3460,3360.8999023,-1044.6999512,10.6000004,0.0000000,0.0000000,359.9890137);
    CreateDynamicObject(3460,3360.8999023,-1036.1999512,10.6000004,0.0000000,0.0000000,179.9835205);
    CreateDynamicObject(3460,3342.5000000,-1036.1999512,10.6000004,0.0000000,0.0000000,179.9835205);
    CreateDynamicObject(3460,3323.5000000,-1036.1999512,10.6000004,0.0000000,0.0000000,179.9835205);
    CreateDynamicObject(3460,3304.1000977,-1036.1999512,10.6000004,0.0000000,0.0000000,179.9835205);
    CreateDynamicObject(3460,3304.1000977,-1045.4000244,10.6000004,0.0000000,0.0000000,359.9835205);
    CreateDynamicObject(3460,3323.6000977,-1045.4000244,10.6000004,0.0000000,0.0000000,359.9780273);
    CreateDynamicObject(3460,3342.3999023,-1045.4000244,10.6000004,0.0000000,0.0000000,359.9780273);
    CreateDynamicObject(3460,3387.0000000,-902.5999756,10.6000004,0.0000000,0.0000000,89.9890137);
    CreateDynamicObject(3460,3387.0000000,-918.4000244,10.6000004,0.0000000,0.0000000,89.9890137);
    CreateDynamicObject(3460,3387.0000000,-932.7000122,10.6000004,0.0000000,0.0000000,89.9890137);
    CreateDynamicObject(3460,3387.0000000,-948.0000000,10.6000004,0.0000000,0.0000000,89.9890137);
    CreateDynamicObject(3460,3387.0000000,-977.5000000,10.6000004,0.0000000,0.0000000,89.9890137);
    CreateDynamicObject(3460,3288.3000488,-976.7000122,10.6000004,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(3460,3288.3000488,-994.7000122,10.6000004,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(3460,3279.3000488,-994.7000122,10.6000004,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(3460,3279.3000488,-977.0000000,10.6000004,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(3460,3288.3999023,-1015.0000000,10.6000004,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(852,3453.3000488,-946.4000244,6.6999998,0.0000000,0.0000000,0.0000000);

    // Pirate Island

	CreateDynamicObject(10410, -2077.97, -7664.46, 16.15,   0.00, 0.00, 249.99);
	CreateDynamicObject(6295, -2167.59, -7731.46, 75.98,   0.00, 0.00, 313.99);
	CreateDynamicObject(8493, -2069.85, -7560.68, 17.75,   0.00, 0.00, 286.00);
	CreateDynamicObject(9159, -2069.90, -7560.67, 17.66,   0.00, 0.00, 286.00);
	CreateDynamicObject(3886, -2045.37, -7603.08, 1.17,   0.00, 0.00, 112.00);
	CreateDynamicObject(3886, -2054.76, -7607.02, 1.17,   0.00, 0.00, 112.00);
	CreateDynamicObject(3886, -2063.81, -7611.25, 1.17,   0.00, 0.00, 113.99);
	CreateDynamicObject(3886, -2073.07, -7615.65, 1.17,   0.00, 0.00, 115.99);
	CreateDynamicObject(3886, -2082.34, -7619.91, 1.17,   0.00, 0.00, 115.99);
	CreateDynamicObject(3886, -2037.72, -7605.93, -24.58,   180.00, 0.00, 19.99);
	CreateDynamicObject(3886, -2034.00, -7614.66, -24.58,   179.99, 0.00, 23.98);
	CreateDynamicObject(3886, -2029.41, -7622.55, -24.58,   179.99, 0.00, 35.98);
	CreateDynamicObject(3886, -2026.52, -7627.24, -24.58,   179.99, 0.00, 37.98);
	CreateDynamicObject(3886, -2041.69, -7607.25, -25.08,   179.99, 0.00, 21.98);
	CreateDynamicObject(3886, -2046.06, -7608.58, -25.08,   179.99, 0.00, 21.98);
	CreateDynamicObject(3886, -2048.62, -7609.62, -25.08,   179.99, 0.00, 35.98);
	CreateDynamicObject(3886, -2053.34, -7612.22, -24.83,   179.99, 0.00, 23.97);
	CreateDynamicObject(3886, -2057.36, -7613.09, -24.83,   179.99, 0.00, 15.97);
	CreateDynamicObject(3886, -2058.91, -7614.17, -24.83,   179.99, 0.00, 43.97);
	CreateDynamicObject(3886, -2063.58, -7616.35, -24.83,   179.99, 0.00, 19.97);
	CreateDynamicObject(3886, -2067.72, -7617.73, -24.83,   179.99, 0.00, 19.96);
	CreateDynamicObject(3886, -2071.55, -7619.26, -24.83,   179.99, 0.00, 23.96);
	CreateDynamicObject(3886, -2074.91, -7620.97, -24.83,   179.99, 0.00, 27.96);
	CreateDynamicObject(3886, -2079.52, -7622.90, -24.83,   179.99, 0.00, 21.96);
	CreateDynamicObject(3886, -2084.46, -7623.97, -24.83,   179.99, 0.00, 11.96);
	CreateDynamicObject(3886, -2082.42, -7622.48, -37.58,   179.99, 0.00, 33.95);
	CreateDynamicObject(3886, -2079.69, -7621.20, -37.58,   179.99, 0.00, 17.95);
	CreateDynamicObject(3886, -2075.49, -7619.32, -37.58,   179.99, 0.00, 25.95);
	CreateDynamicObject(3886, -2072.36, -7617.98, -37.58,   179.99, 0.00, 21.95);
	CreateDynamicObject(3886, -2084.94, -7623.42, -37.58,   179.99, 0.00, 31.95);
	CreateDynamicObject(11245, -2168.12, -7732.64, 102.32,   0.00, 289.99, 0.00);
	CreateDynamicObject(16410, -2104.77, -7654.68, 16.91,   0.00, 0.00, 8.00);
	CreateDynamicObject(3249, -2067.42, -7629.32, 1.82,   0.00, 0.00, 205.99);
	CreateDynamicObject(16690, -2041.82, -7650.43, 5.23,   0.00, 0.00, 25.99);
	CreateDynamicObject(16051, -2063.61, -7621.02, 5.32,   0.00, 0.00, 296.00);
	CreateDynamicObject(16105, -2054.06, -7619.60, 3.71,   0.00, 0.00, 294.00);
	CreateDynamicObject(711, -2051.69, -7614.59, 7.42,   0.00, 0.00, 0.00);
	CreateDynamicObject(711, -2074.21, -7630.26, 8.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(711, -2039.92, -7614.29, 7.92,   0.00, 0.00, 0.00);
	CreateDynamicObject(837, -2048.89, -7618.19, 2.70,   0.00, 0.00, 291.99);
	CreateDynamicObject(711, -2058.12, -7637.76, 8.67,   0.00, 0.00, 0.00);
	CreateDynamicObject(711, -2085.12, -7656.40, 22.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(711, -2079.04, -7670.51, 17.77,   0.00, 0.00, 0.00);
	CreateDynamicObject(746, -2042.10, -7608.63, 2.04,   0.00, 0.00, 18.00);
	CreateDynamicObject(750, -2094.10, -7639.22, 16.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, -2122.52, -7604.04, 0.68,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, -2118.81, -7604.04, -0.82,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, -2114.67, -7606.59, 1.68,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, -2110.87, -7606.36, 1.68,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, -2113.22, -7605.51, 1.68,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, -2116.52, -7604.33, 1.68,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, -2121.70, -7606.19, 1.68,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, -2121.00, -7610.16, 1.68,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, -2107.17, -7609.73, 1.43,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, -2108.31, -7608.01, 0.18,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, -2104.99, -7611.04, 0.18,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, -2106.84, -7613.07, 0.18,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, -2111.08, -7613.27, 0.18,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, -2116.23, -7612.97, 0.18,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, -2115.89, -7612.60, 2.93,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, -2113.02, -7609.46, 2.93,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, -2110.45, -7611.47, 2.93,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, -2104.06, -7615.44, 2.93,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, -2105.83, -7618.55, 0.93,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, -2109.57, -7618.22, 5.18,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, -2107.70, -7614.50, 5.18,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, -2107.70, -7614.50, 5.18,   0.00, 0.00, 0.00);
	CreateDynamicObject(1610, -2050.08, -7609.03, 1.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2782, -2094.12, -7639.89, 21.43,   0.00, 0.00, 338.00);
	CreateDynamicObject(711, -2100.20, -7637.92, 22.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(711, -2111.62, -7697.52, 24.59,   0.00, 0.00, 0.00);
	CreateDynamicObject(711, -2092.01, -7699.61, 24.59,   0.00, 0.00, 0.00);
	CreateDynamicObject(711, -2118.54, -7644.17, 18.59,   0.00, 0.00, 0.00);
	CreateDynamicObject(3461, -2100.02, -7726.35, 32.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(3461, -2093.30, -7728.35, 33.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(3461, -2093.85, -7712.72, 26.67,   0.00, 0.00, 0.00);
	CreateDynamicObject(3461, -2088.64, -7714.66, 26.82,   0.00, 0.00, 0.00);
	CreateDynamicObject(3461, -2090.41, -7703.03, 22.48,   0.00, 0.00, 0.00);
	CreateDynamicObject(3461, -2077.82, -7686.26, 16.67,   0.00, 0.00, 0.00);
	CreateDynamicObject(3461, -2085.73, -7704.87, 22.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(3461, -2082.08, -7684.87, 16.52,   0.00, 0.00, 0.00);
	CreateDynamicObject(3461, -2075.26, -7670.10, 12.92,   0.00, 0.00, 0.00);
	CreateDynamicObject(3461, -2069.68, -7671.35, 13.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(3524, -2072.08, -7662.64, 11.63,   0.00, 0.00, 150.00);
	CreateDynamicObject(3524, -2066.39, -7665.21, 11.63,   0.00, 0.00, 155.99);
	CreateDynamicObject(711, -2111.62, -7697.52, 24.59,   0.00, 0.00, 0.00);
	CreateDynamicObject(711, -2128.17, -7723.98, 37.83,   0.00, 0.00, 0.00);
	CreateDynamicObject(2906, -2026.52, -7636.03, 0.23,   70.00, 0.00, 106.00);
	CreateDynamicObject(855, -2100.13, -7616.80, 1.68,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, -2101.38, -7621.28, 1.68,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, -2099.84, -7623.25, 1.68,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, -2095.71, -7624.46, 1.68,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, -2096.33, -7623.67, 1.68,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, -2098.64, -7621.34, 2.68,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, -2101.32, -7624.95, 2.68,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, -2105.17, -7621.70, 3.68,   0.00, 0.00, 0.00);
	CreateDynamicObject(10409, -2105.54, -7727.36, 27.33,   0.00, 0.00, 252.00);
	CreateDynamicObject(10409, -2104.59, -7725.89, 19.67,   0.00, 0.00, 252.00);
	CreateDynamicObject(10409, -2103.37, -7732.86, 18.17,   0.00, 0.00, 252.00);
	CreateDynamicObject(18228, -2042.41, -7764.88, 0.00,   0.00, 0.00, 36.00);
	CreateDynamicObject(18228, -2058.57, -7795.75, 0.00,   0.00, 0.00, 358.00);
	CreateDynamicObject(18228, -2127.44, -7627.25, -4.25,   0.00, 0.00, 233.99);
	CreateDynamicObject(18228, -2023.91, -7709.11, -12.25,   0.00, 0.00, 39.99);
	CreateDynamicObject(18228, -2022.96, -7686.87, -3.89,   0.00, 0.00, 31.99);
	CreateDynamicObject(18228, -2128.08, -7653.04, -4.25,   0.00, 0.00, 237.99);
	CreateDynamicObject(18228, -2127.66, -7667.83, -1.50,   0.00, 0.00, 237.99);
	CreateDynamicObject(18228, -2130.26, -7694.27, -6.00,   0.00, 0.00, 237.99);
	CreateDynamicObject(18228, -2130.26, -7694.27, 0.75,   0.00, 0.00, 237.99);
	CreateDynamicObject(18228, -2132.85, -7702.26, 0.75,   0.00, 0.00, 229.99);
	CreateDynamicObject(18228, -2153.67, -7713.76, 14.25,   0.00, 0.00, 179.99);
	CreateDynamicObject(18228, -2159.62, -7702.87, 1.25,   0.00, 0.00, 179.98);
	CreateDynamicObject(18228, -2159.62, -7702.87, 1.25,   0.00, 0.00, 179.98);
	CreateDynamicObject(18228, -2163.27, -7714.20, 12.00,   0.00, 0.00, 199.98);
	CreateDynamicObject(18228, -2166.04, -7706.16, 1.50,   0.00, 0.00, 199.97);
	CreateDynamicObject(18228, -2171.84, -7719.27, 11.50,   0.00, 0.00, 199.98);
	CreateDynamicObject(18228, -2178.36, -7719.03, 29.75,   0.00, 0.00, 199.98);
	CreateDynamicObject(18228, -2180.43, -7710.43, 17.25,   0.00, 0.00, 199.98);
	CreateDynamicObject(18228, -2183.39, -7704.64, 10.25,   0.00, 0.00, 199.98);
	CreateDynamicObject(18228, -2186.91, -7697.74, 2.25,   0.00, 0.00, 199.98);
	CreateDynamicObject(18228, -2193.09, -7727.74, 18.50,   0.00, 0.00, 199.98);
	CreateDynamicObject(18228, -2201.84, -7727.96, 2.50,   0.00, 0.00, 199.98);
	CreateDynamicObject(18228, -2180.67, -7725.22, 37.50,   0.00, 0.00, 199.97);
	CreateDynamicObject(18228, -2173.78, -7748.95, 37.50,   0.00, 0.00, 259.98);
	CreateDynamicObject(18228, -2190.52, -7757.55, 19.25,   0.00, 0.00, 259.97);
	CreateDynamicObject(18228, -2202.40, -7762.47, 1.00,   0.00, 0.00, 259.97);
	CreateDynamicObject(18228, -2179.99, -7759.43, 1.00,   0.00, 0.00, 289.97);
	CreateDynamicObject(18228, -2177.27, -7707.10, 11.50,   0.00, 0.00, 199.97);
	CreateDynamicObject(18228, -2199.97, -7712.99, 14.75,   0.00, 0.00, 199.98);
	CreateDynamicObject(18228, -2208.20, -7701.68, 7.50,   0.00, 0.00, 199.97);
	CreateDynamicObject(18228, -2209.39, -7742.42, 5.50,   0.00, 0.00, 259.97);
	CreateDynamicObject(18228, -2160.81, -7714.95, 14.25,   0.00, 0.00, 177.98);
	CreateDynamicObject(18228, -2062.86, -7794.79, 10.25,   0.00, 0.00, 330.00);
	CreateDynamicObject(18228, -2089.48, -7797.66, 4.75,   0.00, 0.00, 330.00);
	CreateDynamicObject(18228, -2088.34, -7787.84, 18.75,   0.00, 0.00, 309.99);
	CreateDynamicObject(18228, -2108.85, -7757.39, 30.50,   0.00, 0.00, 39.99);
	CreateDynamicObject(18228, -2130.23, -7777.92, 24.50,   0.00, 0.00, 289.99);
	CreateDynamicObject(18228, -2137.99, -7795.25, 5.25,   0.00, 0.00, 289.98);
	CreateDynamicObject(18228, -2153.73, -7772.89, 5.25,   0.00, 0.00, 293.98);
	CreateDynamicObject(18228, -2168.76, -7785.05, 5.25,   0.00, 0.00, 307.98);
	CreateDynamicObject(18228, -2058.45, -7805.57, -1.75,   0.00, 0.00, 330.00);
	CreateDynamicObject(18228, -2162.16, -7766.62, 20.00,   0.00, 0.00, 305.97);
	CreateDynamicObject(18228, -2165.20, -7760.41, 28.75,   0.00, 0.00, 319.97);
	CreateDynamicObject(18228, -2170.50, -7753.71, 36.25,   0.00, 0.00, 319.97);
	CreateDynamicObject(18228, -2164.37, -7750.52, 36.25,   0.00, 0.00, 329.97);
	CreateDynamicObject(18228, -2175.98, -7763.43, 28.00,   0.00, 0.00, 305.97);
	CreateDynamicObject(18228, -2194.35, -7773.49, 13.00,   0.00, 0.00, 305.96);
	CreateDynamicObject(18228, -2204.53, -7782.02, 3.75,   0.00, 0.00, 293.96);
	CreateDynamicObject(18228, -2023.91, -7709.11, -12.25,   0.00, 0.00, 39.99);
	CreateDynamicObject(18228, -2032.90, -7729.96, 0.00,   0.00, 0.00, 39.99);
	CreateDynamicObject(18228, -2014.35, -7657.48, -9.64,   0.00, 0.00, 83.98);
	CreateDynamicObject(8483, -2141.61, -7748.52, 38.98,   0.00, 0.00, 73.98);
	CreateDynamicObject(18228, -2117.08, -7765.72, 30.50,   0.00, 0.00, 279.99);
	CreateDynamicObject(18228, -2131.99, -7768.18, 35.25,   0.00, 0.00, 279.99);
	CreateDynamicObject(18228, -2128.20, -7782.67, 19.75,   0.00, 0.00, 279.99);
	CreateDynamicObject(18228, -2112.23, -7612.62, -9.50,   0.00, 0.00, 117.99);
	CreateDynamicObject(18228, -2121.45, -7608.68, -9.50,   0.00, 0.00, 127.99);
	CreateDynamicObject(3434, -2140.03, -7741.95, 44.88,   0.00, 0.00, 161.99);
	CreateDynamicObject(1431, -2049.57, -7615.00, 2.74,   0.00, 0.00, 0.00);
	CreateDynamicObject(935, -2066.36, -7620.18, 2.52,   0.00, 0.00, 0.00);
	CreateDynamicObject(3243, -2105.42, -7647.03, 17.86,   0.00, 0.00, 221.99);
	CreateDynamicObject(3243, -2086.43, -7651.65, 17.36,   0.00, 0.00, 107.99);
	CreateDynamicObject(11427, -2066.43, -7724.34, 23.33,   0.00, 0.00, 273.99);
	CreateDynamicObject(5777, -2099.60, -7639.82, 17.93,   0.00, 0.00, 256.00);
	CreateDynamicObject(2895, -2099.82, -7640.59, 17.63,   0.00, 0.00, 0.00);
	CreateDynamicObject(16689, -2071.94, -7762.65, 36.08,   0.00, 0.00, 11.99);
	CreateDynamicObject(3461, -2094.71, -7740.53, 34.86,   0.00, 0.00, 0.00);
	CreateDynamicObject(3461, -2104.88, -7735.29, 34.32,   0.00, 0.00, 0.00);
	CreateDynamicObject(18228, -2109.48, -7765.70, 30.50,   0.00, 0.00, 271.98);
	CreateDynamicObject(16285, -2063.80, -7777.70, 33.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(2780, -2144.34, -7742.71, 34.25,   0.00, 0.00, 0.00);
	CreateDynamicObject(2780, -2130.42, -7744.83, 34.25,   0.00, 0.00, 0.00);
	CreateDynamicObject(2780, -2138.88, -7743.75, 33.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(2780, -2140.33, -7746.93, 47.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(3524, -2139.05, -7742.75, 32.93,   0.00, 0.00, 170.00);
	CreateDynamicObject(3528, -2137.83, -7744.98, 41.92,   0.00, 344.99, 54.00);
	CreateDynamicObject(3528, -2140.74, -7744.37, 41.67,   0.00, 344.99, 76.00);
	CreateDynamicObject(14608, -2121.40, -7718.55, 23.33,   0.00, 0.00, 289.99);
	CreateDynamicObject(1313, -2077.86, -7753.56, 35.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(2045, -2137.14, -7734.17, 33.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(3364, -2038.80, -7662.40, 13.50,   4.00, 0.00, 216.00);
	CreateDynamicObject(16502, -2015.94, -7661.86, 11.33,   0.00, 0.00, 24.00);
	CreateDynamicObject(749, -2007.61, -7667.93, -3.09,   0.00, 0.00, 0.00);
	CreateDynamicObject(749, -2010.85, -7667.85, -3.34,   0.00, 0.00, 0.00);
	CreateDynamicObject(758, -2118.47, -7731.05, 31.74,   0.00, 0.00, 0.00);
	CreateDynamicObject(711, -2121.72, -7736.25, 39.18,   0.00, 0.00, 0.00);
	CreateDynamicObject(711, -2157.23, -7710.05, 57.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(711, -2154.92, -7721.26, 57.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(711, -2159.97, -7743.56, 58.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(711, -2169.95, -7723.77, 58.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(711, -2151.00, -7736.64, 57.77,   0.00, 0.00, 0.00);
	CreateDynamicObject(711, -2146.40, -7740.42, 49.35,   0.00, 0.00, 0.00);
	CreateDynamicObject(711, -2091.79, -7738.08, 39.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(711, -2070.86, -7772.67, 38.86,   0.00, 0.00, 0.00);
	CreateDynamicObject(711, -2068.60, -7746.27, 38.73,   0.00, 0.00, 0.00);
	CreateDynamicObject(711, -2122.67, -7681.60, 23.98,   0.00, 0.00, 0.00);
	CreateDynamicObject(711, -2026.03, -7655.13, 17.96,   0.00, 0.00, 0.00);
	CreateDynamicObject(711, -2052.13, -7662.27, 19.23,   0.00, 0.00, 0.00);
	CreateDynamicObject(711, -2047.26, -7722.52, 21.59,   0.00, 0.00, 0.00);
	CreateDynamicObject(711, -2031.19, -7686.14, 19.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(711, -2044.94, -7680.76, 19.88,   0.00, 0.00, 0.00);
	CreateDynamicObject(803, -2086.78, -7660.24, 18.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(808, -2076.26, -7643.58, 4.46,   0.00, 0.00, 0.00);
	CreateDynamicObject(808, -2047.86, -7722.44, 16.94,   0.00, 0.00, 0.00);
	CreateDynamicObject(808, -2038.78, -7626.19, 3.55,   0.00, 0.00, 0.00);
	CreateDynamicObject(808, -2027.21, -7654.23, 14.04,   0.00, 0.00, 0.00);
	CreateDynamicObject(808, -2135.18, -7721.78, 35.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(808, -2089.78, -7762.76, 34.86,   0.00, 0.00, 0.00);
	CreateDynamicObject(648, -2207.27, -7694.20, 14.49,   0.00, 41.00, 128.00);
	CreateDynamicObject(710, -2031.87, -7644.26, 16.71,   0.00, 0.00, 0.00);
	CreateDynamicObject(18228, -2180.62, -7742.37, 37.50,   0.00, 0.00, 243.97);
	CreateDynamicObject(3461, -2124.33, -7716.42, 23.18,   0.00, 0.00, 0.00);
	CreateDynamicObject(3461, -2117.53, -7719.12, 22.96,   0.00, 0.00, 0.00);
	CreateDynamicObject(2631, -2120.31, -7716.64, 21.68,   0.00, 0.00, 335.99);
	CreateDynamicObject(2869, -2120.27, -7717.03, 21.74,   0.00, 0.00, 302.00);
	CreateDynamicObject(14705, -2121.70, -7716.80, 21.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(2096, -2080.10, -7753.02, 33.30,   0.00, 0.00, 130.00);
	CreateDynamicObject(838, -2048.98, -7743.14, 18.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(18228, -2213.20, -7693.69, 1.25,   0.00, 0.00, 181.98);
	CreateDynamicObject(710, -2090.98, -7777.92, 47.72,   0.00, 0.00, 0.00);
	CreateDynamicObject(710, -2170.99, -7719.15, 64.05,   0.00, 0.00, 0.00);
	CreateDynamicObject(9831, -2122.89, -7721.57, 23.33,   0.00, 0.00, 332.00);
	CreateDynamicObject(9831, -2120.66, -7721.39, 23.33,   0.00, 0.00, 331.99);
	CreateDynamicObject(9831, -2123.51, -7719.75, 22.83,   0.00, 0.00, 31.99);
	CreateDynamicObject(1517, -2079.76, -7753.23, 32.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(1520, -2066.32, -7620.07, 3.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(1667, -2066.47, -7620.16, 3.15,   0.00, 0.00, 0.00);
	CreateDynamicObject(1736, -2079.12, -7753.83, 34.89,   0.00, 0.00, 208.00);
	CreateDynamicObject(1828, -2054.87, -7617.05, 1.61,   0.00, 0.00, 0.00);
	CreateDynamicObject(18228, -2046.07, -7789.42, -5.00,   0.00, 0.00, 330.00);
	CreateDynamicObject(18228, -2025.41, -7771.08, -15.25,   0.00, 0.00, 27.99);
	CreateDynamicObject(18228, -2217.64, -7732.85, -7.50,   0.00, 0.00, 271.97);
	CreateDynamicObject(18228, -2218.62, -7766.58, -7.50,   0.00, 0.00, 285.97);
	CreateDynamicObject(18228, -2216.17, -7776.45, -7.50,   0.00, 0.00, 319.97);
	CreateDynamicObject(18228, -2208.53, -7779.44, -7.50,   0.00, 0.00, 7.97);
	CreateDynamicObject(18228, -2188.69, -7787.85, -7.50,   0.00, 0.00, 27.97);
	CreateDynamicObject(18228, -2111.20, -7761.45, 30.50,   0.00, 0.00, 25.99);
	CreateDynamicObject(18228, -2110.34, -7770.38, 30.50,   0.00, 0.00, 269.98);
	CreateDynamicObject(18228, -2081.45, -7789.58, 18.75,   0.00, 0.00, 297.99);
	CreateDynamicObject(18228, -2187.14, -7745.08, 28.50,   0.00, 0.00, 243.97);
	CreateDynamicObject(18228, -2197.64, -7744.93, 14.75,   0.00, 0.00, 243.97);
	CreateDynamicObject(18228, -2211.18, -7693.79, -2.25,   0.00, 0.00, 199.97);
	CreateDynamicObject(18228, -2187.55, -7718.17, 25.25,   0.00, 0.00, 199.98);
	CreateDynamicObject(18228, -2215.04, -7750.00, 1.75,   0.00, 0.00, 259.97);
	CreateDynamicObject(18228, -2231.04, -7754.53, -12.00,   0.00, 0.00, 259.97);
	CreateDynamicObject(3872, -2171.26, -7726.15, 94.34,   0.00, 0.00, 300.00);
	CreateDynamicObject(18228, -2166.89, -7702.44, 1.75,   0.00, 0.00, 221.97);
	CreateDynamicObject(18228, -2158.60, -7707.25, 1.75,   0.00, 0.00, 207.97);
	CreateDynamicObject(900, -2157.60, -7665.80, -6.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(900, -2151.10, -7648.97, -6.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(900, -2135.69, -7661.19, -6.00,   0.00, 0.00, 344.00);
	CreateDynamicObject(900, -2140.20, -7671.99, -5.25,   0.00, 0.00, 352.00);
	CreateDynamicObject(900, -2139.60, -7659.26, -5.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(18228, -2138.77, -7648.42, -9.50,   0.00, 0.00, 231.96);
	CreateDynamicObject(18228, -2125.25, -7794.01, 6.25,   0.00, 0.00, 279.99);
	CreateDynamicObject(18228, -2181.06, -7732.59, 36.00,   0.00, 0.00, 213.97);
	CreateDynamicObject(18228, -2164.67, -7753.12, 41.50,   0.00, 0.00, 335.97);
	CreateDynamicObject(18228, -2170.48, -7762.63, 29.50,   0.00, 0.00, 335.97);
	CreateDynamicObject(18228, -2182.95, -7750.86, 23.50,   0.00, 0.00, 327.96);
	CreateDynamicObject(18228, -2173.01, -7769.80, 18.75,   0.00, 0.00, 335.96);
	CreateDynamicObject(18228, -2011.50, -7662.16, -9.64,   0.00, 0.00, 83.99);
	CreateDynamicObject(622, -2156.67, -7797.49, 13.59,   0.00, 0.00, 248.00);
	CreateDynamicObject(18228, -2081.46, -7807.16, 0.25,   0.00, 0.00, 309.99);
	CreateDynamicObject(18228, -2133.17, -7812.24, -13.25,   0.00, 0.00, 279.99);
	CreateDynamicObject(18228, -2091.62, -7817.55, -13.25,   0.00, 0.00, 331.99);
	CreateDynamicObject(18228, -2047.77, -7805.03, -13.25,   0.00, 0.00, 5.98);
	CreateDynamicObject(18228, -2012.70, -7728.90, -16.25,   0.00, 0.00, 61.98);
	CreateDynamicObject(1458, -2048.98, -7626.10, 2.47,   0.00, 0.00, 342.00);
	CreateDynamicObject(16406, -2200.05, -7794.86, 16.23,   0.00, 0.00, 40.00);
	CreateDynamicObject(18228, -2192.60, -7757.65, 8.25,   0.00, 0.00, 327.96);
	CreateDynamicObject(18228, -2173.41, -7771.43, 16.50,   0.00, 0.00, 335.96);
	CreateDynamicObject(16404, -2112.30, -7677.04, 20.02,   0.00, 0.00, 0.00);
	CreateDynamicObject(1451, -2060.26, -7766.20, 33.68,   0.00, 0.00, 0.00);
	CreateDynamicObject(1454, -2086.55, -7770.07, 33.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(6865, -2145.10, -7725.32, 42.47,   0.00, 0.00, 128.00);
	CreateDynamicObject(1486, -2098.75, -7571.04, 10.21,   0.00, 0.00, 0.00);
	CreateDynamicObject(1433, -2100.48, -7568.82, 9.12,   0.00, 0.00, 0.00);
	CreateDynamicObject(1609, -2013.29, -7648.17, 0.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(18228, -2024.53, -7634.94, -15.64,   0.00, 0.00, 77.98);
	CreateDynamicObject(18228, -2032.51, -7611.65, -18.14,   0.00, 0.00, 77.98);
	CreateDynamicObject(18228, -2029.38, -7622.06, -15.64,   0.00, 0.00, 77.98);
	CreateDynamicObject(18228, -2037.00, -7603.05, -18.64,   0.00, 0.00, 85.98);
	CreateDynamicObject(18228, -2039.14, -7602.02, -18.64,   0.00, 0.00, 93.98);
	CreateDynamicObject(18228, -2126.34, -7657.73, -4.25,   0.00, 0.00, 237.99);
	CreateDynamicObject(18228, -2132.95, -7706.51, 4.25,   0.00, 0.00, 229.99);
	CreateDynamicObject(18228, -2132.95, -7716.77, 6.25,   0.00, 0.00, 229.99);
	CreateDynamicObject(18228, -2061.39, -7791.88, 14.75,   0.00, 0.00, 330.00);
	CreateDynamicObject(18228, -2070.94, -7791.34, 17.50,   0.00, 0.00, 314.00);
	CreateDynamicObject(18228, -2129.08, -7767.17, 35.25,   0.00, 0.00, 279.99);

	//New City

	CreateDynamicObject(4048,492.85742188,-2566.77539062,17.77514267,0.00000000,0.00000000,270.00000000); //object(lacityhall4_lan) (1)
	CreateDynamicObject(4808,488.61230469,-2613.53320312,5.93965912,0.00000000,0.00000000,267.99499512); //object(laroadss_30_las) (1)
	CreateDynamicObject(5441,470.22753906,-2715.21679688,5.97499990,0.00000000,0.00000000,87.98950195); //object(laeroad12) (1)
	CreateDynamicObject(5142,501.94238281,-2646.91015625,12.50705338,0.00000000,0.00000000,87.99499512); //object(las2plaza1bit) (1)
	CreateDynamicObject(8661,490.38769531,-2699.95605469,5.98260403,0.00000000,0.00000000,87.99499512); //object(gnhtelgrnd_lvs) (1)
	CreateDynamicObject(5509,465.74414062,-2542.75390625,5.88180923,0.00000000,0.00000000,87.98400879); //object(laeroad44) (1)
	CreateDynamicObject(5410,459.88589478,-2551.20019531,9.32873154,0.00000000,0.00000000,88.00000000); //object(laecumpstreet) (1)
	CreateDynamicObject(1257,479.72949219,-2620.31933594,7.30478859,0.00000000,0.00000000,0.00000000); //object(bustopm) (1)
	CreateDynamicObject(638,479.04730225,-2624.46557617,6.72263050,0.00000000,0.00000000,358.00000000); //object(kb_planter_bush) (1)
	CreateDynamicObject(638,479.35375977,-2616.17651367,6.71483707,0.00000000,0.00000000,357.99499512); //object(kb_planter_bush) (2)
	CreateDynamicObject(8661,459.39550781,-2571.51953125,5.97690153,0.00000000,0.00000000,87.99499512); //object(gnhtelgrnd_lvs) (2)
	CreateDynamicObject(13132,459.19439697,-2594.43457031,9.27510452,0.00000000,0.00000000,178.00000000); //object(ce_bar01) (1)
	CreateDynamicObject(8661,456.07519531,-2608.07714844,6.02559662,0.00000000,0.00000000,87.98400879); //object(gnhtelgrnd_lvs) (3)
	CreateDynamicObject(3655,439.33187866,-2599.83740234,9.07881069,0.00000000,0.00000000,358.00000000); //object(ganghous03_lax) (1)
	CreateDynamicObject(3655,438.83496094,-2612.98046875,9.07880688,0.00000000,0.00000000,357.98950195); //object(ganghous03_lax) (2)
	CreateDynamicObject(984,463.49517822,-2621.88574219,6.66227627,0.00000000,0.00000000,358.00000000); //object(fenceshit2) (1)
	CreateDynamicObject(983,464.04354858,-2606.33837891,6.70915127,0.00000000,0.00000000,358.00000000); //object(fenceshit3) (1)
	CreateDynamicObject(983,460.95626831,-2603.14160156,6.70915127,0.00000000,0.00000000,90.00000000); //object(fenceshit3) (2)
	CreateDynamicObject(17897,457.77636719,-2616.04101562,5.36108780,0.00000000,0.00000000,0.00000000); //object(cparkshit_alpha) (1)
	CreateDynamicObject(17474,457.77636719,-2616.04101562,-2.30184555,0.00000000,0.00000000,0.00000000); //object(cuntwland17_de_a) (1)
	CreateDynamicObject(3655,457.02230835,-2635.25341797,9.15384007,0.00000000,0.00000000,88.00000000); //object(ganghous03_lax) (3)
	CreateDynamicObject(972,441.77148438,-2633.20019531,6.02559662,0.00000000,0.00000000,357.98950195); //object(tunnelentrance) (1)
	CreateDynamicObject(8661,454.07617188,-2648.00781250,6.00059652,0.00000000,0.00000000,87.98400879); //object(gnhtelgrnd_lvs) (4)
	CreateDynamicObject(8569,452.35491943,-2652.92309570,7.70000553,0.00000000,0.00000000,358.00000000); //object(vgsebuild12_lvs) (1)
	CreateDynamicObject(1496,464.68911743,-2593.55517578,6.22559881,0.00000000,0.00000000,88.00000000); //object(gen_doorshop02) (1)
	CreateDynamicObject(5509,424.08496094,-2517.02246094,5.80522299,0.00000000,0.00000000,177.99499512); //object(laeroad44) (1)
	CreateDynamicObject(5441,386.61230469,-2594.23730469,5.86836672,0.00000000,0.00000000,87.97851562); //object(laeroad12) (1)
	CreateDynamicObject(5187,415.51559448,-2530.68334961,9.06194210,0.00000000,0.00000000,268.00000000); //object(mexcrnrxc_las2) (1)
	CreateDynamicObject(5762,444.30072021,-2526.10620117,8.99873352,0.00000000,0.00000000,178.00000000); //object(foodmartlawn) (1)
	CreateDynamicObject(1496,443.78363037,-2516.29077148,5.79171801,0.00000000,0.00000000,358.00000000); //object(gen_doorshop02) (2)
	CreateDynamicObject(8553,415.80859375,-2572.65136719,5.85878992,0.00000000,0.00000000,87.98400879); //object(vgseland21_lvs) (2)
	CreateDynamicObject(3651,405.31195068,-2549.26440430,8.74365044,0.00000000,0.00000000,178.00000000); //object(ganghous04_lax) (1)
	CreateDynamicObject(3651,404.95526123,-2560.13427734,8.76862335,0.00000000,0.00000000,177.99499512); //object(ganghous04_lax) (2)
	CreateDynamicObject(3651,404.57800293,-2571.03466797,8.74361992,0.00000000,0.00000000,177.99499512); //object(ganghous04_lax) (3)
	CreateDynamicObject(3651,404.18914795,-2581.83349609,8.76085472,0.00000000,0.00000000,177.99499512); //object(ganghous04_lax) (4)
	CreateDynamicObject(8553,441.14746094,-2561.65625000,5.88202572,0.00000000,0.00000000,87.97851562); //object(vgseland21_lvs) (3)
	CreateDynamicObject(5400,467.47949219,-2571.49902344,11.08325195,0.00000000,0.00000000,357.99499512); //object(laeskatetube1) (2)
	CreateDynamicObject(1415,433.83993530,-2537.39282227,5.96015072,0.00000000,0.00000000,0.00000000); //object(dyn_dumpster) (1)
	CreateDynamicObject(1358,448.24197388,-2583.59252930,7.15590191,0.00000000,0.00000000,0.00000000); //object(cj_skip_rubbish) (1)
	CreateDynamicObject(1265,412.23306274,-2582.35864258,6.39816284,0.00000000,0.00000000,0.00000000); //object(blackbag2) (1)
	CreateDynamicObject(972,436.15838623,-2594.55419922,5.86015034,0.00000000,0.00000000,88.00000000); //object(tunnelentrance) (2)
	CreateDynamicObject(972,411.25930786,-2593.70239258,5.93691492,0.00000000,0.00000000,87.99499512); //object(tunnelentrance) (3)
	CreateDynamicObject(849,433.87454224,-2589.38598633,6.25990534,0.00000000,0.00000000,0.00000000); //object(cj_urb_rub_3) (1)
	CreateDynamicObject(1733,437.06716919,-2589.82861328,6.57364655,0.00000000,0.00000000,192.00000000); //object(cj_washingmac) (1)
	CreateDynamicObject(3887,404.31823730,-2617.65136719,13.70714378,0.00000000,0.00000000,358.00000000); //object(demolish4_sfxrf) (1)
	CreateDynamicObject(8553,428.23632812,-2620.67968750,5.85313702,0.00000000,0.00000000,267.99499512); //object(vgseland21_lvs) (4)
	CreateDynamicObject(8661,399.89511108,-2616.10742188,5.70626116,0.00000000,0.00000000,88.00000000); //object(gnhtelgrnd_lvs) (7)
	CreateDynamicObject(3173,434.70233154,-2629.94531250,5.93126202,0.00000000,0.00000000,147.99993896); //object(trailer_large4_01) (1)
	CreateDynamicObject(3171,416.27282715,-2594.54614258,5.93691492,0.00000000,0.00000000,86.00000000); //object(trailer5_01) (1)
	CreateDynamicObject(8661,405.99316406,-2625.49121094,5.90138769,0.00000000,0.00000000,87.98950195); //object(gnhtelgrnd_lvs) (8)
	CreateDynamicObject(972,432.07470703,-2649.14721680,5.93126202,0.00000000,0.00000000,88.00000000); //object(tunnelentrance) (1)
	CreateDynamicObject(972,408.99887085,-2648.87841797,5.90000248,0.00000000,0.00000000,87.99499512); //object(tunnelentrance) (1)
	CreateDynamicObject(3362,406.95941162,-2610.79199219,5.87638760,0.00000000,0.00000000,0.00000000); //object(des_ruin2_) (1)
	CreateDynamicObject(1358,408.04858398,-2604.43896484,6.90980721,0.00000000,0.00000000,268.00000000); //object(cj_skip_rubbish) (2)
	CreateDynamicObject(1349,420.84255981,-2617.02172852,6.49385118,0.00000000,0.00000000,0.00000000); //object(cj_shtrolly) (1)
	CreateDynamicObject(3594,421.02871704,-2623.72875977,6.56243896,0.00000000,0.00000000,322.00000000); //object(la_fuckcar1) (1)
	CreateDynamicObject(4060,445.87304688,-2483.20898438,10.32093620,0.00000000,0.00000000,357.99499512); //object(fighotblok4_lan) (1)
	CreateDynamicObject(5040,364.76757812,-2536.68554688,9.31781197,0.00000000,0.00000000,177.98950195); //object(unionliq_las) (1)
	CreateDynamicObject(2957,367.33410645,-2536.15039062,7.33603477,0.00000000,0.00000000,88.00000000); //object(chinatgaragedoor) (1)
	CreateDynamicObject(8687,368.90563965,-2575.27490234,10.01634598,0.00000000,0.00000000,358.00000000); //object(vgelwbld15_lvs) (1)
	CreateDynamicObject(3783,360.61114502,-2603.78930664,8.22719574,0.00000000,0.00000000,88.00000000); //object(las2xref01_lax) (1)
	CreateDynamicObject(8661,367.14996338,-2607.31079102,5.93867922,0.00000000,0.00000000,87.98950195); //object(gnhtelgrnd_lvs) (8)
	CreateDynamicObject(3783,359.77435303,-2626.97070312,8.22719574,0.00000000,0.00000000,87.99499512); //object(las2xref01_lax) (2)
	CreateDynamicObject(8661,367.19165039,-2647.26513672,5.93867922,0.00000000,0.00000000,87.98950195); //object(gnhtelgrnd_lvs) (8)
	CreateDynamicObject(982,376.20098877,-2604.74584961,6.59723377,0.00000000,0.00000000,358.00000000); //object(fenceshit) (1)
	CreateDynamicObject(982,375.01245117,-2640.75781250,6.62223387,0.00000000,0.00000000,357.99499512); //object(fenceshit) (2)
	CreateDynamicObject(8059,354.85226440,-2654.61083984,9.32740402,0.00000000,0.00000000,358.00000000); //object(vgswrehse07) (1)
	CreateDynamicObject(5441,546.00781250,-2606.21679688,5.96557903,0.00000000,0.00000000,357.98950195); //object(laeroad12) (1)
	CreateDynamicObject(1257,392.45733643,-2607.98071289,7.16787052,0.00000000,0.00000000,358.00000000); //object(bustopm) (1)
	CreateDynamicObject(4142,644.19628906,-2649.64453125,5.94562244,0.00000000,0.00000000,267.99499512); //object(roads10_lan) (1)
	CreateDynamicObject(4004,583.85058594,-2587.94921875,18.09308052,0.00000000,0.00000000,357.98950195); //object(lacityhall3_lan) (1)
	CreateDynamicObject(8661,586.73242188,-2588.02148438,6.05284548,0.00000000,0.00000000,357.98950195); //object(gnhtelgrnd_lvs) (3)
	CreateDynamicObject(4058,583.44238281,-2682.29296875,25.95969582,0.00000000,0.00000000,267.99499512); //object(fighotblok2_lan) (1)
	CreateDynamicObject(7091,602.92395020,-2692.27001953,24.17007065,0.00000000,0.00000000,0.00000000); //object(vegasflag02) (1)
	CreateDynamicObject(7091,603.10705566,-2682.01611328,24.10747910,0.00000000,0.00000000,0.00000000); //object(vegasflag02) (2)
	CreateDynamicObject(7091,603.28106689,-2671.93505859,24.02007484,0.00000000,0.00000000,0.00000000); //object(vegasflag02) (3)
	CreateDynamicObject(8553,579.43511963,-2637.11865234,5.90948296,0.00000000,0.00000000,358.00000000); //object(vgseland21_lvs) (1)
	CreateDynamicObject(8325,565.90252686,-2623.99267578,27.85436440,0.00000000,0.00000000,178.00000000); //object(vgsbboardsigns12) (1)
	CreateDynamicObject(7914,566.05657959,-2625.21264648,21.63421631,0.00000000,0.00000000,268.00000000); //object(vgwestbillbrd15) (1)
	CreateDynamicObject(8553,539.95928955,-2645.15039062,5.93271875,0.00000000,0.00000000,268.00000000); //object(vgseland21_lvs) (5)
	CreateDynamicObject(7596,540.46459961,-2640.80322266,10.46208763,0.00000000,0.00000000,88.00000000); //object(tamomotel1) (1)
	CreateDynamicObject(7597,566.25665283,-2612.53564453,15.53453541,0.00000000,0.00000000,88.00000000); //object(gingersign1) (1)
	CreateDynamicObject(7911,566.12121582,-2625.19189453,14.39642906,0.00000000,0.00000000,268.00000000); //object(vgwestbillbrd12) (2)
	CreateDynamicObject(8330,565.32421875,-2637.99316406,32.68371964,0.00000000,0.00000000,0.00000000); //object(vgsbboardsigns17) (1)
	CreateDynamicObject(6100,644.35937500,-2662.52734375,30.36350632,0.00000000,0.00000000,87.99499512); //object(gaz1_law) (1)
	CreateDynamicObject(4123,660.85839844,-2575.67871094,17.38906670,0.00000000,0.00000000,267.99499512); //object(cityhallblock1_lan) (1)
	CreateDynamicObject(8661,635.45587158,-2579.93676758,5.95659208,0.00000000,0.00000000,88.00000000); //object(gnhtelgrnd_lvs) (3)
	CreateDynamicObject(8661,646.58789062,-2626.55175781,5.90031004,0.00000000,0.00000000,357.99499512); //object(gnhtelgrnd_lvs) (3)
	CreateDynamicObject(677,654.01171875,-2637.10351562,5.43975019,0.00000000,0.00000000,0.00000000); //object(sm_des_agave1) (1)
	CreateDynamicObject(805,656.95355225,-2635.02880859,7.08500290,0.00000000,0.00000000,0.00000000); //object(genveg_bush11) (1)
	CreateDynamicObject(805,634.83917236,-2634.17700195,7.08500290,0.00000000,0.00000000,0.00000000); //object(genveg_bush11) (2)
	CreateDynamicObject(11489,646.05993652,-2635.75830078,5.97081757,0.00000000,0.00000000,178.00000000); //object(dam_statues) (1)
	CreateDynamicObject(1256,657.03369141,-2632.02954102,6.66971970,0.00000000,0.00000000,268.00000000); //object(stonebench1) (2)
	CreateDynamicObject(1256,635.31597900,-2631.08374023,6.67252541,0.00000000,0.00000000,267.99499512); //object(stonebench1) (3)
	CreateDynamicObject(1256,656.88818359,-2637.31591797,6.66514778,0.00000000,0.00000000,88.00000000); //object(stonebench1) (4)
	CreateDynamicObject(1256,635.12030029,-2636.31201172,6.66358757,0.00000000,0.00000000,87.99499512); //object(stonebench1) (5)
	CreateDynamicObject(18477,712.92187500,-2586.31738281,5.93095684,0.00000000,0.00000000,87.99499512); //object(cuntsrod11) (1)
	CreateDynamicObject(5709,729.77832031,-2571.15039062,14.94935799,0.00000000,0.00000000,267.99499512); //object(shop03_law01) (1)
	CreateDynamicObject(8661,734.00000000,-2572.69628906,6.02500010,0.00000000,0.00000000,87.97851562); //object(gnhtelgrnd_lvs) (3)
	CreateDynamicObject(4650,747.43457031,-2676.61816406,6.06313467,0.00000000,0.00000000,357.98950195); //object(road02_lan2) (1)
	CreateDynamicObject(3996,611.48779297,-2726.83105469,5.95000744,0.00000000,0.00000000,267.99499512); //object(roads08_lan) (3)
	CreateDynamicObject(5441,677.66992188,-2737.77050781,6.02377510,0.00000000,359.79675293,357.98950195); //object(laeroad12) (1)
	CreateDynamicObject(5725,696.21923828,-2625.16796875,15.01414204,0.00000000,0.00000000,358.00000000); //object(holpacific2_law) (2)
	CreateDynamicObject(4112,730.16113281,-2672.37207031,16.24999237,0.00000000,0.00000000,177.98950195); //object(build01_lan) (2)
	CreateDynamicObject(5812,679.60644531,-2680.91308594,5.92147636,0.00000000,0.00000000,357.98950195); //object(grasspatchlawn) (1)
	CreateDynamicObject(5812,709.15820312,-2682.21289062,5.78762197,0.00000000,0.00000000,357.98950195); //object(grasspatchlawn) (3)
	CreateDynamicObject(6965,695.16113281,-2681.14453125,9.30662346,0.00000000,0.00000000,0.00000000); //object(venefountain02) (1)
	CreateDynamicObject(6964,695.07232666,-2681.21826172,5.43138456,0.00000000,0.00000000,0.00000000); //object(venefountwat02) (1)
	CreateDynamicObject(673,673.30761719,-2681.12890625,5.91678905,0.00000000,0.00000000,0.00000000); //object(sm_bevhiltree) (1)
	CreateDynamicObject(673,673.68164062,-2667.72143555,5.92142010,0.00000000,0.00000000,0.00000000); //object(sm_bevhiltree) (2)
	CreateDynamicObject(673,672.67108154,-2693.98413086,5.92783642,0.00000000,0.00000000,0.00000000); //object(sm_bevhiltree) (3)
	CreateDynamicObject(673,672.69494629,-2709.30590820,5.91506481,0.00000000,0.00000000,0.00000000); //object(sm_bevhiltree) (4)
	CreateDynamicObject(673,673.71673584,-2654.40087891,5.91816998,0.00000000,0.00000000,0.00000000); //object(sm_bevhiltree) (5)
	CreateDynamicObject(673,717.34124756,-2682.57104492,5.65084457,0.00000000,0.00000000,0.00000000); //object(sm_bevhiltree) (6)
	CreateDynamicObject(673,717.31158447,-2696.08081055,5.65527344,0.00000000,0.00000000,0.00000000); //object(sm_bevhiltree) (7)
	CreateDynamicObject(673,716.13360596,-2711.37133789,5.65594864,0.00000000,0.00000000,0.00000000); //object(sm_bevhiltree) (8)
	CreateDynamicObject(673,718.30609131,-2668.62963867,5.63843536,0.00000000,0.00000000,0.00000000); //object(sm_bevhiltree) (9)
	CreateDynamicObject(673,718.26995850,-2656.22973633,5.64280701,0.00000000,0.00000000,0.00000000); //object(sm_bevhiltree) (10)
	CreateDynamicObject(1280,690.25018311,-2691.14404297,6.19594479,0.00000000,0.00000000,64.00000000); //object(parkbench1) (1)
	CreateDynamicObject(1280,700.01843262,-2691.15576172,6.16935158,0.00000000,0.00000000,115.99539185); //object(parkbench1) (2)
	CreateDynamicObject(1280,690.07250977,-2670.53369141,6.19260645,0.00000000,0.00000000,298.00000000); //object(parkbench1) (3)
	CreateDynamicObject(1280,700.13671875,-2670.57006836,6.15651226,0.00000000,0.00000000,242.00000000); //object(parkbench1) (4)
	CreateDynamicObject(1359,701.92651367,-2690.01513672,6.46210861,0.00000000,0.00000000,0.00000000); //object(cj_bin1) (1)
	CreateDynamicObject(1359,688.33557129,-2671.56323242,6.49834251,0.00000000,0.00000000,0.00000000); //object(cj_bin1) (2)
	CreateDynamicObject(1359,701.90405273,-2671.66259766,6.46178055,0.00000000,0.00000000,0.00000000); //object(cj_bin1) (3)
	CreateDynamicObject(1359,688.50476074,-2690.09521484,6.50501776,0.00000000,0.00000000,0.00000000); //object(cj_bin1) (4)
	CreateDynamicObject(9833,694.72680664,-2681.43750000,15.45106888,0.00000000,0.00000000,22.00000000); //object(fountain_sfw) (1)
	CreateDynamicObject(4021,634.17968750,-2718.88574219,12.12673759,0.00000000,0.00000000,357.98950195); //object(officessml1_lan) (1)
	CreateDynamicObject(8661,643.47167969,-2717.46289062,5.78967762,0.00000000,0.00000000,357.98950195); //object(gnhtelgrnd_lvs) (3)
	CreateDynamicObject(8661,621.64825439,-2710.84082031,5.81094408,0.00000000,0.00000000,357.99499512); //object(gnhtelgrnd_lvs) (3)
	CreateDynamicObject(1257,618.67535400,-2698.98876953,7.31513691,0.00000000,0.00000000,0.00000000); //object(bustopm) (3)
	CreateDynamicObject(1257,618.78790283,-2692.50292969,7.31856441,0.00000000,0.00000000,0.00000000); //object(bustopm) (4)
	CreateDynamicObject(1229,617.79473877,-2695.70312500,7.59905243,0.00000000,0.00000000,272.00000000); //object(bussign1) (1)
	CreateDynamicObject(8645,707.58789062,-2728.71777344,6.70847940,0.00000000,0.00000000,357.99499512); //object(shbbyhswall01_lvs) (1)
	CreateDynamicObject(8646,677.94915771,-2727.66308594,6.72123528,0.00000000,0.00000000,88.00000000); //object(shbbyhswall02_lvs) (1)
	CreateDynamicObject(8397,695.75683594,-2647.18261719,16.18124962,0.00000000,0.00000000,357.99499512); //object(luxorpillar01_lvs) (1)
	CreateDynamicObject(3494,692.67089844,-2727.85351562,9.32964897,0.00000000,0.00000000,357.98950195); //object(luxorpillar04_lvs) (1)
	CreateDynamicObject(3494,663.47705078,-2727.08154297,8.92273521,0.00000000,0.00000000,357.98950195); //object(luxorpillar04_lvs) (2)
	CreateDynamicObject(3494,722.16210938,-2729.21972656,9.46879768,0.00000000,0.00000000,357.98950195); //object(luxorpillar04_lvs) (3)
	CreateDynamicObject(4847,772.53125000,-2896.63183594,-2.97499704,0.00000000,0.00000000,357.98950195); //object(beach1_las0gj) (1)
	CreateDynamicObject(5141,651.45312500,-2802.77929688,6.30000114,0.00000000,0.00000000,177.98950195); //object(btoroadxtra_las2) (1)
	CreateDynamicObject(6057,639.65783691,-2815.40014648,10.61398125,0.00000000,0.00000000,177.99499512); //object(wdpanelhs09_law) (1)
	CreateDynamicObject(6057,685.43750000,-2816.74804688,10.48134041,0.00000000,0.00000000,177.98950195); //object(wdpanelhs09_law) (2)
	CreateDynamicObject(5441,743.04003906,-2839.95117188,6.31188869,0.00000000,0.00000000,357.98950195); //object(laeroad12) (1)
	CreateDynamicObject(1637,608.33239746,-2853.03222656,7.27690172,0.00000000,0.00000000,358.00000000); //object(od_pat_hutb) (1)
	CreateDynamicObject(1637,719.83703613,-2857.01025391,7.27690172,0.00000000,0.00000000,357.99499512); //object(od_pat_hutb) (2)
	CreateDynamicObject(1637,802.19763184,-2859.26000977,7.27690172,0.00000000,0.00000000,357.99499512); //object(od_pat_hutb) (3)
	CreateDynamicObject(5441,823.19934082,-2842.80834961,6.29675817,0.00000000,0.00000000,357.98950195); //object(laeroad12) (1)
	CreateDynamicObject(5441,814.81048584,-2742.58593750,6.19553518,0.00000000,0.00000000,357.98950195); //object(laeroad12) (1)
	CreateDynamicObject(3988,772.12677002,-2687.05346680,14.80324745,0.00000000,0.00000000,358.00000000); //object(cityhallblock2_lan) (1)
	CreateDynamicObject(3996,810.80664062,-2615.26953125,5.93222952,0.00000000,0.00000000,357.98950195); //object(roads08_lan) (1)
	CreateDynamicObject(4233,805.50292969,-2545.23242188,6.01364040,0.00000000,0.00000000,357.99499512); //object(roads05_lan) (1)
	CreateDynamicObject(8562,377.79589844,-2782.31640625,5.92499876,0.00000000,0.00000000,357.98950195); //object(vegaseroad127) (1)
	CreateDynamicObject(11111,818.82031250,-2580.66601562,6.02500010,0.29663086,0.00000000,357.99499512); //object(roadssfse57) (1)
	CreateDynamicObject(16685,775.16113281,-2773.62500000,5.90918207,0.00000000,0.00000000,357.98950195); //object(cn2_rnway_bit2) (1)
	CreateDynamicObject(16685,773.48144531,-2810.85058594,6.03838730,0.00000000,0.00000000,357.98950195); //object(cn2_rnway_bit2) (2)
	CreateDynamicObject(3997,789.30291748,-2494.85034180,5.80358887,0.00000000,0.00000000,357.99499512); //object(cityhallblok_lan) (1)
	CreateDynamicObject(10377,793.22320557,-2471.02783203,23.78348732,0.00000000,0.00000000,268.00000000); //object(cityhall_sfs) (1)
	CreateDynamicObject(7665,846.25891113,-2509.20141602,7.15636826,0.00000000,0.00000000,267.99499512); //object(glfcrsgate4_vgs) (1)
	CreateDynamicObject(7664,739.53961182,-2504.15478516,7.40606880,0.00000000,0.00000000,87.97851562); //object(glfcrsgate5_vgs) (1)
	CreateDynamicObject(669,767.47790527,-2531.79736328,5.82858896,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4) (1)
	CreateDynamicObject(669,752.16766357,-2530.93286133,5.82858896,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4) (2)
	CreateDynamicObject(669,737.47222900,-2530.07250977,5.82858896,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4) (3)
	CreateDynamicObject(669,721.03857422,-2530.15112305,5.82858896,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4) (4)
	CreateDynamicObject(669,826.45190430,-2532.58081055,5.82858896,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4) (5)
	CreateDynamicObject(669,842.53405762,-2532.76391602,5.82858896,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4) (6)
	CreateDynamicObject(669,859.56152344,-2533.64428711,5.82858896,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4) (7)
	CreateDynamicObject(3676,633.31561279,-2755.56079102,11.33840656,0.00000000,0.00000000,88.00000000); //object(lawnhousereda) (2)
	CreateDynamicObject(3676,658.28637695,-2756.39965820,11.33112431,0.00000000,0.00000000,87.99499512); //object(lawnhousereda) (3)
	CreateDynamicObject(3676,682.92254639,-2757.26708984,11.35695171,0.00000000,0.00000000,87.99499512); //object(lawnhousereda) (4)
	CreateDynamicObject(13088,892.35137939,-2792.51416016,6.24258089,0.00000000,0.00000000,88.00000000); //object(cuntetownrd4a) (1)
	CreateDynamicObject(16685,872.56640625,-2676.83398438,5.84070301,0.00000000,0.00000000,87.98950195); //object(cn2_rnway_bit2) (2)
	CreateDynamicObject(5441,835.95312500,-2795.88476562,6.26119995,0.00000000,0.00000000,357.98950195); //object(laeroad12) (1)
	CreateDynamicObject(5441,739.19824219,-2792.50097656,6.36120033,0.00000000,0.00000000,357.98950195); //object(laeroad12) (1)
	CreateDynamicObject(5441,675.42187500,-2790.22558594,6.33869982,0.00000000,0.00000000,357.98950195); //object(laeroad12) (1)
	CreateDynamicObject(8661,595.43359375,-2754.99511719,5.79688215,358.49487305,0.00000000,357.98950195); //object(gnhtelgrnd_lvs) (3)
	CreateDynamicObject(8661,594.98535156,-2787.61328125,5.65748835,0.00000000,357.99499512,357.98950195); //object(gnhtelgrnd_lvs) (3)
	CreateDynamicObject(3443,809.38494873,-2772.42456055,9.19162560,0.00000000,0.00000000,358.00000000); //object(vegasxrexhse2) (1)
	CreateDynamicObject(3445,785.15301514,-2769.83471680,9.36835098,0.00000000,0.00000000,358.00000000); //object(vegasxrexhse08) (1)
	CreateDynamicObject(3446,767.04248047,-2769.53051758,9.63879967,0.00000000,0.00000000,358.00000000); //object(vegasxrexhse10) (1)
	CreateDynamicObject(3449,742.66656494,-2771.71777344,7.84535122,0.00000000,0.00000000,178.00000000); //object(vegashsenew1) (1)
	CreateDynamicObject(7615,747.75262451,-2751.41772461,7.99140692,0.00000000,0.00000000,358.00000000); //object(vegasstadwall02) (1)
	CreateDynamicObject(7615,835.39410400,-2754.51708984,7.99141073,0.00000000,0.00000000,358.00000000); //object(vegasstadwall02) (2)
	CreateDynamicObject(7615,676.52593994,-2779.07714844,8.06130028,0.00000000,0.00000000,178.00000000); //object(vegasstadwall02) (3)
	CreateDynamicObject(3466,838.29711914,-2771.19018555,8.79706573,0.00000000,0.00000000,88.00000000); //object(shabbyhouse01_lvs) (1)
	CreateDynamicObject(3484,874.66601562,-2772.37670898,12.91082954,0.00000000,0.00000000,88.00000000); //object(vegasxrexhse03) (1)
	CreateDynamicObject(16781,754.10327148,-2824.73242188,6.38220119,0.00000000,0.00000000,357.99499512); //object(cn2_ringking) (1)
	CreateDynamicObject(7615,829.91955566,-2831.76196289,8.11550713,0.00000000,0.00000000,177.99499512); //object(vegasstadwall02) (4)
	CreateDynamicObject(7615,678.82910156,-2801.51074219,8.06550789,0.00000000,0.00000000,357.98950195); //object(vegasstadwall02) (5)
	CreateDynamicObject(7615,794.22009277,-2805.57006836,8.06551170,0.00000000,0.00000000,357.99499512); //object(vegasstadwall02) (6)
	CreateDynamicObject(7615,833.11962891,-2806.93945312,8.05765915,0.00000000,0.00000000,357.99499512); //object(vegasstadwall02) (7)
	CreateDynamicObject(8324,755.70544434,-2828.40258789,5.51085186,280.02795410,175.68884277,174.25463867); //object(vgsbboardsigns10) (1)
	CreateDynamicObject(5441,544.60742188,-2786.19824219,6.39407778,0.00000000,0.00000000,357.98950195); //object(laeroad12) (1)
	CreateDynamicObject(5441,533.30352783,-2785.65747070,6.09657621,0.00000000,0.00000000,357.98950195); //object(laeroad12) (1)
	CreateDynamicObject(8661,465.36260986,-2783.22900391,5.07782269,0.00000000,356.70001221,357.98950195); //object(gnhtelgrnd_lvs) (3)
	CreateDynamicObject(5441,382.36520386,-2714.11816406,5.87086630,0.00000000,0.00000000,87.97851562); //object(laeroad12) (1)
	CreateDynamicObject(5441,381.14257812,-2747.27929688,6.02336645,0.00000000,0.00000000,87.97851562); //object(laeroad12) (1)
	CreateDynamicObject(5441,295.26593018,-2574.00805664,5.93918467,0.00000000,0.00000000,87.97851562); //object(laeroad12) (1)
	CreateDynamicObject(7479,408.36145020,-2485.94262695,5.79601908,0.00000000,0.00000000,358.00000000); //object(vegasnroad46) (1)
	CreateDynamicObject(5441,291.08404541,-2692.06127930,5.93995619,0.00000000,0.00000000,87.97851562); //object(laeroad12) (1)
	CreateDynamicObject(3589,313.66867065,-2517.57812500,8.56225204,0.00000000,0.00000000,87.99499512); //object(compfukhouse3) (1)
	CreateDynamicObject(3590,313.31100464,-2531.33007812,8.66224861,0.00000000,0.00000000,88.00000000); //object(compfukhouse2) (1)
	CreateDynamicObject(3635,318.78619385,-2547.42236328,8.66706467,0.00000000,0.00000000,88.00000000); //object(nwccumphus2_las) (1)
	CreateDynamicObject(3646,313.38671875,-2565.24511719,8.39675140,0.00000000,0.00000000,357.99499512); //object(ganghous05_lax) (1)
	CreateDynamicObject(12814,321.26757812,-2537.82226562,5.95210552,0.00000000,0.00000000,357.99499512); //object(cuntyeland04) (1)
	CreateDynamicObject(12814,348.32519531,-2538.61035156,5.99914455,0.00000000,0.00000000,357.98950195); //object(cuntyeland04) (2)
	CreateDynamicObject(1447,322.89050293,-2512.63183594,7.15365648,0.00000000,0.00000000,178.00000000); //object(dyn_mesh_4) (1)
	CreateDynamicObject(1447,328.14501953,-2512.84594727,7.15365648,0.00000000,0.00000000,177.99499512); //object(dyn_mesh_4) (2)
	CreateDynamicObject(1447,333.43035889,-2513.05395508,7.15365648,0.00000000,0.00000000,177.99499512); //object(dyn_mesh_4) (3)
	CreateDynamicObject(1447,338.71197510,-2513.21289062,7.15365648,0.00000000,0.00000000,177.99499512); //object(dyn_mesh_4) (4)
	CreateDynamicObject(1447,343.96624756,-2513.41552734,7.15365648,0.00000000,0.00000000,177.99499512); //object(dyn_mesh_4) (5)
	CreateDynamicObject(1447,349.24432373,-2513.55126953,7.15365648,0.00000000,0.00000000,177.99499512); //object(dyn_mesh_4) (6)
	CreateDynamicObject(1447,354.52352905,-2513.70996094,7.15365648,0.00000000,0.00000000,177.99499512); //object(dyn_mesh_4) (7)
	CreateDynamicObject(12957,341.75952148,-2528.75830078,6.71017361,0.00000000,0.00000000,320.00000000); //object(sw_pickupwreck01) (1)
	CreateDynamicObject(3496,321.22546387,-2528.58862305,6.00991821,0.00000000,0.00000000,268.00000000); //object(vgsxrefbballnet) (1)
	CreateDynamicObject(3496,319.88711548,-2553.18041992,6.00991821,0.00000000,0.00000000,267.99499512); //object(vgsxrefbballnet) (2)
	CreateDynamicObject(850,344.84176636,-2530.59472656,6.11844969,0.00000000,0.00000000,0.00000000); //object(cj_urb_rub_1) (1)
	CreateDynamicObject(3005,352.29739380,-2532.42993164,6.00695705,0.00000000,0.00000000,0.00000000); //object(smash_box_stay) (1)
	CreateDynamicObject(2890,351.03836060,-2547.99414062,6.00695705,0.00000000,0.00000000,0.00000000); //object(kmb_skip) (1)
	CreateDynamicObject(1773,329.04287720,-2513.91503906,6.80931473,0.00000000,0.00000000,0.00000000); //object(cj_cooker2) (1)
	CreateDynamicObject(1264,340.69158936,-2527.63623047,6.47910118,0.00000000,0.00000000,0.00000000); //object(blackbag1) (2)
	CreateDynamicObject(1264,353.42773438,-2518.74243164,6.47910118,0.00000000,0.00000000,0.00000000); //object(blackbag1) (3)
	CreateDynamicObject(1264,329.32861328,-2540.11279297,6.48206234,0.00000000,0.00000000,0.00000000); //object(blackbag1) (4)
	CreateDynamicObject(4176,770.20477295,-2641.30664062,11.27902222,0.00000000,0.00000000,268.00000000); //object(bailbonds2_lan) (1)
	CreateDynamicObject(5769,769.70019531,-2594.38769531,11.93522453,0.00000000,0.00000000,357.99499512); //object(vineblock1_lawn) (1)
	CreateDynamicObject(8842,834.48925781,-2674.29785156,27.81476212,0.00000000,0.00000000,357.99499512); //object(vgse24hr_lvs) (1)
	CreateDynamicObject(10976,801.43908691,-2673.09082031,6.32256269,0.00000000,0.00000000,88.00000000); //object(drivingsch_sfs) (1)
	CreateDynamicObject(8661,833.90429688,-2634.86132812,5.94443750,0.00000000,0.00000000,357.99499512); //object(gnhtelgrnd_lvs) (2)
	CreateDynamicObject(8661,802.26605225,-2634.45825195,5.90217161,0.00000000,0.00000000,357.99499512); //object(gnhtelgrnd_lvs) (2)
	CreateDynamicObject(8661,781.43487549,-2662.35058594,5.99443769,0.00000000,0.00000000,88.00000000); //object(gnhtelgrnd_lvs) (2)
	CreateDynamicObject(8661,779.91204834,-2700.23413086,5.91943741,0.00000000,0.00000000,87.99499512); //object(gnhtelgrnd_lvs) (2)
	CreateDynamicObject(8661,804.38970947,-2722.57470703,6.14084721,0.00000000,0.00000000,358.00000000); //object(gnhtelgrnd_lvs) (2)
	CreateDynamicObject(8661,836.17431641,-2724.34594727,6.13976192,0.00000000,0.00000000,357.99499512); //object(gnhtelgrnd_lvs) (2)
	CreateDynamicObject(7971,880.52581787,-2718.73510742,11.05010033,0.00000000,0.00000000,358.00000000); //object(vgnprtlstation03) (1)
	CreateDynamicObject(8661,875.80279541,-2725.68359375,6.14227629,0.00000000,0.00000000,357.99499512); //object(gnhtelgrnd_lvs) (2)
	CreateDynamicObject(8661,871.10925293,-2705.70336914,6.11727715,0.00000000,0.00000000,357.99499512); //object(gnhtelgrnd_lvs) (2)
	CreateDynamicObject(8661,887.11425781,-2695.00097656,6.14227724,0.00000000,0.00000000,87.99499512); //object(gnhtelgrnd_lvs) (2)
	CreateDynamicObject(8661,850.59454346,-2693.10229492,6.16476202,0.00000000,0.00000000,87.99499512); //object(gnhtelgrnd_lvs) (2)
	CreateDynamicObject(1365,892.31640625,-2715.66699219,7.26018858,0.00000000,0.00000000,357.99499512); //object(cj_big_skip1) (1)
	CreateDynamicObject(1365,892.46386719,-2711.54296875,7.26018953,0.00000000,0.00000000,357.98950195); //object(cj_big_skip1) (2)
	CreateDynamicObject(7433,619.04589844,-2509.07617188,5.97611284,0.00000000,0.00000000,357.99499512); //object(vegasnroad09) (1)
	CreateDynamicObject(3307,620.85156250,-2406.15136719,7.42924309,0.00000000,0.00000000,267.99499512); //object(swburbhaus01) (1)
	CreateDynamicObject(3306,595.87347412,-2405.02587891,7.42924309,0.00000000,0.00000000,268.00000000); //object(swburbhaus02) (2)
	CreateDynamicObject(3309,569.49572754,-2404.59814453,7.40000153,0.00000000,0.00000000,268.00000000); //object(swburbhaus04) (1)
	CreateDynamicObject(3484,515.15332031,-2426.01562500,12.50589180,0.00000000,0.00000000,87.99499512); //object(vegasxrexhse03) (2)
	CreateDynamicObject(3485,546.58062744,-2453.58398438,13.02028656,0.00000000,0.00000000,178.00000000); //object(vegasxrexhse04) (1)
	CreateDynamicObject(3487,545.39398193,-2399.34228516,12.65433311,0.00000000,0.00000000,358.00000000); //object(vegasxrexhse06) (1)
	CreateDynamicObject(3483,576.81732178,-2454.63378906,13.03243446,0.00000000,0.00000000,178.00000000); //object(vegasxrexhse09) (1)
	CreateDynamicObject(3486,608.09881592,-2455.71948242,13.00744820,0.00000000,0.00000000,178.00000000); //object(vegasxrexhse05) (1)
	CreateDynamicObject(8068,595.89886475,-2556.53100586,12.70147896,0.00000000,0.00000000,358.00000000); //object(hseing04_lvs) (1)
	CreateDynamicObject(6157,655.01702881,-2530.05004883,16.57502365,0.00000000,0.00000000,268.00000000); //object(gaz22_law) (1)
	CreateDynamicObject(3749,638.53497314,-2429.51733398,11.71421623,0.00000000,0.00000000,88.00000000); //object(clubgate01_lax) (1)
	CreateDynamicObject(13738,538.42712402,-2509.87231445,5.60178995,0.00000000,0.00000000,331.00000000); //object(roads39_ce) (1)
	CreateDynamicObject(4847,698.75292969,-2358.46875000,-3.22499323,0.00000000,0.00000000,177.99499512); //object(beach1_las0gj) (1)
	CreateDynamicObject(16685,649.84765625,-2429.01464844,5.75423670,0.00000000,0.00000000,357.98950195); //object(cn2_rnway_bit2) (1)
	CreateDynamicObject(12814,696.15039062,-2526.24023438,5.82144356,0.00000000,0.00000000,357.98950195); //object(cuntyeland04) (2)
	CreateDynamicObject(11674,688.62255859,-2565.93701172,6.01689434,0.00000000,0.00000000,127.50003052); //object(des_cluckin) (1)
	CreateDynamicObject(12814,640.71508789,-2559.44702148,5.85000944,0.00000000,0.00000000,357.98950195); //object(cuntyeland04) (2)
	CreateDynamicObject(12814,679.60833740,-2550.66650391,5.77501297,0.00000000,0.00000000,88.00000000); //object(cuntyeland04) (2)
	CreateDynamicObject(12814,679.05499268,-2572.90454102,5.74999762,0.00000000,0.00000000,88.00000000); //object(cuntyeland04) (2)
	CreateDynamicObject(5708,526.89453125,-2724.32910156,16.34750748,0.00000000,0.00000000,267.99499512); //object(hospital_law) (1)
	CreateDynamicObject(17542,312.49063110,-2584.37548828,10.11783218,0.00000000,0.00000000,178.00000000); //object(gangshops6_lae2) (1)
	CreateDynamicObject(5186,318.83825684,-2593.25512695,5.81633377,0.00000000,0.00000000,0.00000000); //object(nwsnpdnw_las2) (1)
	CreateDynamicObject(3588,321.94198608,-2617.23999023,8.49852753,0.00000000,0.00000000,358.00000000); //object(sanped_hse1_las) (1)
	CreateDynamicObject(5186,306.07910156,-2710.78320312,5.81658411,0.00000000,0.00000000,0.00000000); //object(nwsnpdnw_las2) (2)
	CreateDynamicObject(3588,318.16760254,-2650.64941406,8.49852753,0.00000000,0.00000000,267.99499512); //object(sanped_hse1_las) (2)
	CreateDynamicObject(10402,334.63037109,-2669.38916016,7.33388996,0.00000000,0.00000000,357.99499512); //object(hc_secfence_sfs) (1)
	CreateDynamicObject(10402,337.84640503,-2573.93774414,7.49399137,0.00000000,0.00000000,357.99499512); //object(hc_secfence_sfs) (1)
	CreateDynamicObject(9171,320.62316895,-2714.44384766,8.89216232,0.00000000,0.00000000,358.00000000); //object(vgseprtlstation2) (1)
	CreateDynamicObject(1676,324.65863037,-2705.73852539,7.51209164,0.00000000,0.00000000,358.00000000); //object(washgaspump) (1)
	CreateDynamicObject(1676,321.97271729,-2705.64257812,7.51209164,0.00000000,0.00000000,357.99499512); //object(washgaspump) (2)
	CreateDynamicObject(1676,321.44409180,-2716.56030273,7.51209164,0.00000000,0.00000000,357.99499512); //object(washgaspump) (3)
	CreateDynamicObject(1676,324.22692871,-2716.69775391,7.51209164,0.00000000,0.00000000,357.99499512); //object(washgaspump) (4)
	CreateDynamicObject(5186,334.19921875,-2725.50097656,5.78071260,0.00000000,0.00000000,0.00000000); //object(nwsnpdnw_las2) (2)
	CreateDynamicObject(17515,356.44509888,-2771.37109375,10.69236374,0.00000000,0.00000000,88.00000000); //object(scumgym1_lae) (1)
	CreateDynamicObject(3655,330.88885498,-2793.62670898,8.88137054,0.00000000,0.00000000,268.00000000); //object(ganghous03_lax) (4)
	CreateDynamicObject(3655,315.25354004,-2793.03906250,8.90637016,0.00000000,0.00000000,268.00000000); //object(ganghous03_lax) (4)
	CreateDynamicObject(8661,305.49325562,-2784.43432617,5.82812309,0.00000000,0.00000000,87.98950195); //object(gnhtelgrnd_lvs) (3)
	CreateDynamicObject(8661,335.23486328,-2793.40991211,5.82812309,0.00000000,0.00000000,358.00000000); //object(gnhtelgrnd_lvs) (3)
	CreateDynamicObject(3303,445.40988159,-2792.26806641,7.99690294,0.00000000,0.00000000,88.00000000); //object(des_bighus03) (1)
	CreateDynamicObject(3304,420.55401611,-2791.41357422,8.94548225,0.00000000,0.00000000,358.00000000); //object(des_bighus02) (1)
	CreateDynamicObject(3305,446.37078857,-2757.14941406,8.94339085,0.00000000,0.00000000,178.00000000); //object(des_bighus01) (1)
	CreateDynamicObject(3304,447.12399292,-2732.23828125,8.93767166,0.00000000,0.00000000,88.00000000); //object(des_bighus02) (3)
	CreateDynamicObject(5186,419.91113281,-2753.24902344,5.83103514,0.00000000,0.00000000,0.00000000); //object(nwsnpdnw_las2) (2)
	CreateDynamicObject(17543,453.07617188,-2686.94140625,7.98912477,0.00000000,0.00000000,177.98950195); //object(gangshops5_lae2) (1)
	CreateDynamicObject(16769,401.94378662,-2654.62133789,5.96367931,0.00000000,0.00000000,268.00000000); //object(desn2_ammun04) (1)
	CreateDynamicObject(18553,394.61947632,-2651.31958008,7.23062563,0.00000000,0.00000000,357.00000000); //object(count_ammundoor) (1)
	CreateDynamicObject(17521,362.76614380,-2704.72119141,9.44452477,0.00000000,0.00000000,88.00000000); //object(pawnshp_lae2) (1)
	CreateDynamicObject(3169,355.07571411,-2728.29003906,5.76352501,0.00000000,0.00000000,334.00000000); //object(trailer_large2_01) (1)
	CreateDynamicObject(4847,466.22070312,-2872.18261719,-3.29999781,0.00000000,0.00000000,357.98950195); //object(beach1_las0gj) (1)
	CreateDynamicObject(16685,553.03808594,-2805.93847656,5.61199951,0.00000000,0.00000000,357.98950195); //object(cn2_rnway_bit2) (1)
	CreateDynamicObject(16112,584.97192383,-2866.39697266,-0.31541723,0.00000000,0.00000000,0.00000000); //object(des_rockfl1_) (1)
	CreateDynamicObject(899,591.49829102,-2854.63305664,3.84056139,0.00000000,0.00000000,0.00000000); //object(searock03) (1)
	CreateDynamicObject(4847,236.11035156,-2626.08984375,-3.27330303,0.00000000,0.00000000,267.99499512); //object(beach1_las0gj) (1)
	CreateDynamicObject(10166,257.20523071,-2838.96704102,-0.52877045,0.00000000,0.00000000,330.00000000); //object(p69_rocks) (2)
	CreateDynamicObject(901,291.34606934,-2842.66162109,6.44038439,0.00000000,0.00000000,88.00000000); //object(searock05) (1)
	CreateDynamicObject(8661,372.74713135,-2530.45117188,5.69124937,0.00000000,0.00000000,87.98400879); //object(gnhtelgrnd_lvs) (3)
	CreateDynamicObject(5186,402.19238281,-2701.88671875,5.69999790,0.00000000,0.00000000,0.00000000); //object(nwsnpdnw_las2) (2)
	CreateDynamicObject(8661,395.69479370,-2783.41796875,5.81030750,0.00000000,0.00000000,87.98950195); //object(gnhtelgrnd_lvs) (4)
	CreateDynamicObject(3648,399.66229248,-2680.47534180,8.37660885,0.00000000,0.00000000,358.00000000); //object(ganghous02_lax) (1)
	CreateDynamicObject(3649,400.51846313,-2697.88793945,8.29793262,0.00000000,0.00000000,358.00000000); //object(ganghous01_lax) (1)
	CreateDynamicObject(3642,399.19338989,-2715.53955078,8.73390961,0.00000000,0.00000000,268.00000000); //object(glenphouse03_lax) (1)
	CreateDynamicObject(3646,399.42630005,-2732.69531250,8.27610207,0.00000000,0.00000000,358.00000000); //object(ganghous05_lax) (2)
	CreateDynamicObject(5341,403.32510376,-2756.09008789,8.61717796,0.00000000,0.00000000,268.00000000); //object(crlsafhus_las2) (1)
	CreateDynamicObject(3171,429.80792236,-2753.45214844,5.83884764,0.00000000,0.00000000,296.00000000); //object(trailer5_01) (2)
	CreateDynamicObject(3173,418.92031860,-2756.29248047,5.83884764,0.00000000,0.00000000,79.99993896); //object(trailer_large4_01) (2)
	CreateDynamicObject(3175,431.17419434,-2740.03125000,5.83884764,0.00000000,0.00000000,0.00000000); //object(sm_airstrm_med_) (1)
	CreateDynamicObject(3242,431.47662354,-2724.80590820,7.77514029,0.00000000,0.00000000,268.00000000); //object(conhoos1) (1)
	CreateDynamicObject(3284,423.33956909,-2704.17407227,7.76853514,0.00000000,0.00000000,85.99993896); //object(conhoos5) (1)
	CreateDynamicObject(3285,436.72674561,-2653.63500977,7.63704062,0.00000000,0.00000000,0.00000000); //object(conhoos4) (1)
	CreateDynamicObject(9310,397.56286621,-2793.83789062,12.12979984,0.00000000,0.00000000,88.00000000); //object(chapel_sfn) (1)
	CreateDynamicObject(10395,554.15533447,-2708.12939453,5.92500067,0.00000000,0.00000000,358.00000000); //object(mission_13_sfs) (1)
	CreateDynamicObject(5186,530.22753906,-2705.86718750,5.86412907,0.00000000,0.00000000,87.99499512); //object(nwsnpdnw_las2) (2)
	CreateDynamicObject(972,521.33990479,-2674.37329102,5.88260365,0.00000000,0.00000000,268.00000000); //object(tunnelentrance) (1)
	CreateDynamicObject(972,544.86505127,-2674.98266602,6.01084375,0.00000000,0.00000000,267.99499512); //object(tunnelentrance) (1)
	CreateDynamicObject(972,555.73742676,-2674.39526367,5.87194157,0.00000000,0.00000000,267.99499512); //object(tunnelentrance) (1)
	CreateDynamicObject(8661,498.73361206,-2730.15258789,5.92194176,0.00000000,0.00000000,358.00000000); //object(gnhtelgrnd_lvs) (1)
	CreateDynamicObject(8661,503.52828979,-2720.85205078,5.90001059,0.00000000,0.00000000,357.99499512); //object(gnhtelgrnd_lvs) (1)
	CreateDynamicObject(4848,487.38125610,-2692.80932617,9.49386787,0.00000000,0.00000000,268.00000000); //object(sanpedbeaut) (1)
	CreateDynamicObject(8661,580.73242188,-2769.07031250,6.12632799,358.49487305,0.00000000,357.98950195); //object(gnhtelgrnd_lvs) (3)
	CreateDynamicObject(8399,590.75024414,-2757.98583984,10.80934334,0.00000000,0.00000000,178.00000000); //object(nightclub01_lvs) (1)
	CreateDynamicObject(5441,904.98370361,-2676.32812500,6.21139383,0.00000000,0.00000000,88.00000000); //object(laeroad12) (1)
	CreateDynamicObject(18477,876.56970215,-2573.42187500,5.89880276,0.00000000,0.00000000,268.00000000); //object(cuntsrod11) (2)
	CreateDynamicObject(5441,907.23760986,-2613.53198242,6.20936728,0.00000000,0.09887695,87.98950195); //object(laeroad12) (1)
	CreateDynamicObject(4847,961.46490479,-2684.43237305,-3.13089943,0.00000000,0.00000000,88.00000000); //object(beach1_las0gj) (1)
	CreateDynamicObject(4843,920.21484375,-2495.09765625,-3.52649879,0.00000000,0.00000000,272.99926758); //object(beach1_las0fhy) (1)
	CreateDynamicObject(17029,909.30407715,-2526.35986328,1.71852493,0.00000000,0.00000000,34.00000000); //object(cunt_rockgp2_09) (1)
	CreateDynamicObject(17031,923.39160156,-2523.92480469,4.64184237,0.00000000,0.00000000,0.00000000); //object(cunt_rockgp2_13) (1)
	CreateDynamicObject(18228,948.13574219,-2513.35546875,4.45430946,0.00000000,0.00000000,47.99377441); //object(cunt_rockgp2_21) (1)
	CreateDynamicObject(3584,926.45294189,-2586.48950195,10.54148674,0.00000000,0.00000000,358.00000000); //object(compproj01_la) (1)
	CreateDynamicObject(3584,924.63146973,-2641.16772461,10.64148521,0.00000000,0.00000000,357.99499512); //object(compproj01_la) (2)
	CreateDynamicObject(3584,922.92431641,-2695.13574219,10.56648636,0.00000000,0.00000000,357.99499512); //object(compproj01_la) (3)
	CreateDynamicObject(5134,848.00012207,-2587.87890625,9.65659428,0.00000000,0.00000000,358.00000000); //object(snpedshprk_las2) (1)
	CreateDynamicObject(10388,881.42675781,-2651.44824219,11.70548534,0.00000000,0.00000000,357.99499512); //object(tempobj_sfs02) (1)
	CreateDynamicObject(8661,858.87707520,-2634.04882812,5.81727409,0.00000000,0.00000000,357.99499512); //object(gnhtelgrnd_lvs) (2)
	CreateDynamicObject(8661,859.62188721,-2658.94360352,5.86816645,0.00000000,0.00000000,268.00000000); //object(gnhtelgrnd_lvs) (2)
	CreateDynamicObject(8661,888.97546387,-2619.37475586,5.81727505,0.00000000,0.00000000,267.99499512); //object(gnhtelgrnd_lvs) (2)
	CreateDynamicObject(8661,895.25793457,-2577.75073242,5.80008745,0.00000000,0.00000000,267.99499512); //object(gnhtelgrnd_lvs) (2)
	CreateDynamicObject(716,895.43609619,-2597.08105469,5.81727505,0.00000000,0.00000000,0.00000000); //object(sjmpalmbigpv) (1)
	CreateDynamicObject(716,895.79986572,-2585.82202148,5.82508373,0.00000000,0.00000000,0.00000000); //object(sjmpalmbigpv) (2)
	CreateDynamicObject(716,896.21490479,-2572.13696289,5.82508373,0.00000000,0.00000000,0.00000000); //object(sjmpalmbigpv) (3)
	CreateDynamicObject(8661,855.17480469,-2562.83398438,5.94226599,0.00000000,0.00000000,357.99499512); //object(gnhtelgrnd_lvs) (2)
	CreateDynamicObject(16685,573.94042969,-2476.23144531,5.98915768,0.00000000,0.00000000,357.98950195); //object(cn2_rnway_bit2) (1)
	CreateDynamicObject(4843,902.97717285,-2487.15380859,-3.56607914,0.00000000,0.00000000,175.00000000); //object(beach1_las0fhy) (1)
	CreateDynamicObject(17031,879.08288574,-2407.93847656,-1.22051358,0.00000000,4.00000000,276.00000000); //object(cunt_rockgp2_13) (1)
	CreateDynamicObject(18228,871.99072266,-2382.94335938,-3.27500010,0.00000000,0.00000000,47.99926758); //object(cunt_rockgp2_21) (1)
	CreateDynamicObject(16685,759.93145752,-2423.58740234,5.67805243,0.00000000,0.00000000,358.00000000); //object(cn2_rnway_bit2) (2)
	CreateDynamicObject(7664,740.76696777,-2463.54809570,7.40636921,0.00000000,0.00000000,358.00000000); //object(glfcrsgate5_vgs) (1)
	CreateDynamicObject(7665,842.79333496,-2460.14746094,7.07700777,0.00000000,0.00000000,358.00000000); //object(glfcrsgate4_vgs) (1)
	CreateDynamicObject(5186,546.91125488,-2556.17382812,5.94291067,0.00000000,0.00000000,91.99951172); //object(nwsnpdnw_las2) (2)
	CreateDynamicObject(4847,430.85058594,-2380.53027344,-3.37499475,0.00000000,0.00000000,195.99060059); //object(beach1_las0gj) (1)
	CreateDynamicObject(16685,438.97363281,-2465.32714844,5.64144516,0.00000000,0.00000000,2.98278809); //object(cn2_rnway_bit2) (1)
	CreateDynamicObject(4880,379.87936401,-2486.25561523,11.72623444,0.00000000,0.00000000,178.00000000); //object(dwntwnbit2_las) (1)
	CreateDynamicObject(18228,601.07440186,-2354.32421875,-2.17836761,0.00000000,0.00000000,73.99926758); //object(cunt_rockgp2_21) (1)
	CreateDynamicObject(18228,261.00878906,-2454.38867188,-0.94999963,0.00000000,0.00000000,117.99865723); //object(cunt_rockgp2_21) (1)
	CreateDynamicObject(899,528.49560547,-2365.57763672,-0.79406941,0.00000000,333.99996948,231.99998474); //object(searock03) (2)
	CreateDynamicObject(8661,686.52770996,-2633.41064453,6.31648874,30.49487305,0.00000000,357.98950195); //object(gnhtelgrnd_lvs) (3)
	CreateDynamicObject(8661,706.15625000,-2633.77734375,6.54746962,30.49255371,0.00000000,357.98950195); //object(gnhtelgrnd_lvs) (3)
	CreateDynamicObject(8656,666.25091553,-2647.63916016,6.77266884,0.00000000,0.00000000,357.99499512); //object(shbbyhswall09_lvs) (1)
	CreateDynamicObject(8656,637.56054688,-2707.77319336,5.67533016,0.00000000,0.00000000,88.00000000); //object(shbbyhswall09_lvs) (2)
	CreateDynamicObject(8656,648.41088867,-2708.16503906,5.66868973,0.00000000,0.00000000,87.99499512); //object(shbbyhswall09_lvs) (3)
	CreateDynamicObject(7615,541.92608643,-2797.41796875,7.76412010,0.00000000,0.00000000,357.98950195); //object(vegasstadwall02) (5)
	CreateDynamicObject(7615,537.34985352,-2797.25366211,7.76626778,0.00000000,0.00000000,357.98950195); //object(vegasstadwall02) (5)
	CreateDynamicObject(12814,834.80285645,-2581.35791016,5.80130053,0.00000000,0.00000000,357.98950195); //object(cuntyeland04) (2)
	CreateDynamicObject(4176,791.26068115,-2566.41674805,11.61248875,0.00000000,0.00000000,178.00000000); //object(bailbonds2_lan) (2)
	CreateDynamicObject(12814,767.74511719,-2567.71191406,5.92624044,0.00000000,0.00000000,267.99499512); //object(cuntyeland04) (2)
	CreateDynamicObject(12814,783.85101318,-2592.40283203,5.95545816,0.00000000,0.00000000,267.99499512); //object(cuntyeland04) (2)
	CreateDynamicObject(8661,728.94061279,-2642.47314453,5.50630474,0.00000000,0.00000000,88.00000000); //object(gnhtelgrnd_lvs) (3)
	CreateDynamicObject(8661,732.83843994,-2671.28710938,5.78188372,0.00000000,0.00000000,87.99499512); //object(gnhtelgrnd_lvs) (3)
	CreateDynamicObject(4857,731.73419189,-2723.87475586,8.61806870,0.00000000,0.00000000,268.00000000); //object(snpedmtsp1_las) (1)
	CreateDynamicObject(8661,601.72442627,-2537.24755859,5.92572308,0.00000000,0.00000000,87.97851562); //object(gnhtelgrnd_lvs) (3)
	CreateDynamicObject(8661,598.01678467,-2572.50659180,6.04437971,0.00000000,0.00000000,87.97851562); //object(gnhtelgrnd_lvs) (3)
	CreateDynamicObject(8661,570.00689697,-2579.95581055,5.87784481,0.00000000,0.00000000,357.98950195); //object(gnhtelgrnd_lvs) (3)
	CreateDynamicObject(8661,506.31137085,-2568.34277344,6.00072336,0.00000000,0.00000000,357.98950195); //object(gnhtelgrnd_lvs) (3)
	CreateDynamicObject(10063,528.59344482,-2531.29760742,19.14042473,0.00000000,0.00000000,180.75000000); //object(aprtmnts02_sfe) (1)
	CreateDynamicObject(4682,510.10687256,-2570.69409180,-2.33533096,0.00000000,0.00000000,358.00000000); //object(ladtbuild3_lan2) (1)
	CreateDynamicObject(8661,732.44055176,-2721.29785156,6.05001402,0.00000000,0.00000000,87.99499512); //object(gnhtelgrnd_lvs) (3)
	CreateDynamicObject(8645,722.84686279,-2714.16748047,6.70650291,0.00000000,0.00000000,88.00000000); //object(shbbyhswall01_lvs) (1)
	CreateDynamicObject(1315,620.74871826,-2602.81079102,9.14439011,0.00000000,0.00000000,0.00000000); //object(trafficlight1) (1)
	CreateDynamicObject(1315,606.04895020,-2611.09130859,9.20845413,0.00000000,0.00000000,272.00000000); //object(trafficlight1) (2)
	CreateDynamicObject(1315,612.87573242,-2780.48852539,9.54543495,0.00000000,0.00000000,0.00000000); //object(trafficlight1) (3)
	CreateDynamicObject(1315,603.17095947,-2792.93627930,9.58347321,0.00000000,0.00000000,268.00000000); //object(trafficlight1) (4)
	CreateDynamicObject(1315,381.89440918,-2508.88037109,9.00086784,0.00000000,0.00000000,267.99499512); //object(trafficlight1) (5)
	CreateDynamicObject(1315,393.74932861,-2512.56494141,9.09322548,0.00000000,0.00000000,358.00000000); //object(trafficlight1) (6)
	CreateDynamicObject(1315,759.04364014,-2616.27563477,9.32105637,0.00000000,0.00000000,268.00000000); //object(trafficlight1) (7)
	CreateDynamicObject(1315,746.23626709,-2623.39575195,9.22596550,0.00000000,0.00000000,178.00000000); //object(trafficlight1) (8)
	CreateDynamicObject(1257,590.78405762,-2501.68188477,7.30842924,0.00000000,0.00000000,88.00000000); //object(bustopm) (5)
	CreateDynamicObject(16685,397.56610107,-2448.65332031,5.63468170,0.00000000,0.00000000,14.23278809); //object(cn2_rnway_bit2) (1)
	CreateDynamicObject(18228,261.08071899,-2491.47680664,4.71489668,0.00000000,0.00000000,251.74865723); //object(cunt_rockgp2_21) (1)
	CreateDynamicObject(8185,895.89007568,-2648.10766602,4.24784231,0.00000000,0.00000000,358.00000000); //object(vgssredbrix02) (1)
	CreateDynamicObject(8650,486.91601562,-2533.99511719,6.69105768,0.00000000,0.00000000,357.99499512); //object(shbbyhswall06_lvs) (1)
	CreateDynamicObject(8650,501.24533081,-2498.17065430,6.58350086,0.00000000,0.00000000,272.50000000); //object(shbbyhswall06_lvs) (1)
	CreateDynamicObject(8661,753.84503174,-2580.71289062,5.90905285,0.00000000,0.00000000,357.99499512); //object(gnhtelgrnd_lvs) (2)
	CreateDynamicObject(18228,940.49707031,-2868.23657227,2.01928139,0.00000000,0.00000000,47.99377441); //object(cunt_rockgp2_21) (1)
	CreateDynamicObject(1257,902.15478516,-2580.09863281,7.54609823,0.00000000,0.00000000,178.00000000); //object(bustopm) (6)
	CreateDynamicObject(1257,736.73931885,-2606.60449219,7.24633312,0.00000000,0.00000000,87.99499512); //object(bustopm) (7)
	CreateDynamicObject(8656,598.72576904,-2813.27807617,5.55645704,0.00000000,0.00000000,357.99499512); //object(shbbyhswall09_lvs) (1)
	CreateDynamicObject(10376,673.22558594,-2470.91113281,11.92561817,0.00000000,0.00000000,357.99499512); //object(subshop2_sfs) (1)

	//Chill Out Island By LeGGGeNNdA

	CreateDynamicObject(4247,624.59997559,-3439.89990234,1.70000005,0.00000000,0.00000000,0.00000000); //object(sbsbed6law2) (1)
	CreateDynamicObject(4247,380.50000000,-3439.80004883,-28.20000076,0.00000000,346.00000000,0.00000000); //object(sbsbed6law2) (2)
	CreateDynamicObject(4247,600.09997559,-3659.00000000,-28.10000038,0.00000000,345.99792480,90.00000000); //object(sbsbed6law2) (3)
	CreateDynamicObject(4247,649.20001221,-3659.10009766,-28.10000038,0.00000000,345.99792480,90.00000000); //object(sbsbed6law2) (4)
	CreateDynamicObject(16133,498.20001221,-3548.80004883,-11.30000019,0.00000000,0.00000000,28.00000000); //object(des_rockgp2_18) (1)
	CreateDynamicObject(16133,536.79998779,-3551.89990234,-11.30000019,0.00000000,0.00000000,83.99865723); //object(des_rockgp2_18) (2)
	CreateDynamicObject(16133,584.79998779,-3552.10009766,-11.30000019,0.00000000,0.00000000,83.99597168); //object(des_rockgp2_18) (3)
	CreateDynamicObject(16133,632.90002441,-3552.30004883,-11.30000019,0.00000000,0.00000000,83.99597168); //object(des_rockgp2_18) (4)
	CreateDynamicObject(16133,678.20001221,-3549.19995117,-11.30000019,0.00000000,0.00000000,83.99597168); //object(des_rockgp2_18) (5)
	CreateDynamicObject(16133,718.29998779,-3547.69995117,-11.30000019,0.00000000,0.00000000,83.99597168); //object(des_rockgp2_18) (6)
	CreateDynamicObject(16133,743.90002441,-3521.89990234,-11.30000019,0.00000000,0.00000000,169.99597168); //object(des_rockgp2_18) (7)
	CreateDynamicObject(16133,745.00000000,-3496.30004883,-11.30000019,0.00000000,0.00000000,169.99145508); //object(des_rockgp2_18) (8)
	CreateDynamicObject(16133,745.09997559,-3470.50000000,-11.30000019,0.00000000,0.00000000,171.99145508); //object(des_rockgp2_18) (9)
	CreateDynamicObject(16133,743.70001221,-3443.00000000,-11.30000019,0.00000000,0.00000000,173.99096680); //object(des_rockgp2_18) (10)
	CreateDynamicObject(16133,742.29998779,-3418.00000000,-11.30000019,0.00000000,0.00000000,173.99047852); //object(des_rockgp2_18) (11)
	CreateDynamicObject(16133,743.00000000,-3390.60009766,-11.30000019,0.00000000,0.00000000,173.99047852); //object(des_rockgp2_18) (12)
	CreateDynamicObject(16133,743.20001221,-3362.89990234,-11.30000019,0.00000000,0.00000000,173.99047852); //object(des_rockgp2_18) (13)
	CreateDynamicObject(16133,743.29998779,-3352.80004883,-11.30000019,0.00000000,0.00000000,173.99047852); //object(des_rockgp2_18) (14)
	CreateDynamicObject(16133,716.90002441,-3345.19995117,-11.30000019,0.00000000,0.00000000,261.99047852); //object(des_rockgp2_18) (15)
	CreateDynamicObject(16133,692.00000000,-3345.00000000,-11.30000019,0.00000000,0.00000000,261.98547363); //object(des_rockgp2_18) (16)
	CreateDynamicObject(16133,665.40002441,-3346.30004883,-11.30000019,0.00000000,0.00000000,261.98547363); //object(des_rockgp2_18) (17)
	CreateDynamicObject(16133,637.70001221,-3346.60009766,-11.30000019,0.00000000,0.00000000,261.98547363); //object(des_rockgp2_18) (18)
	CreateDynamicObject(16133,610.09997559,-3346.39990234,-11.30000019,0.00000000,0.00000000,261.98547363); //object(des_rockgp2_18) (19)
	CreateDynamicObject(16133,584.20001221,-3346.00000000,-11.30000019,0.00000000,0.00000000,263.98547363); //object(des_rockgp2_18) (20)
	CreateDynamicObject(16133,556.09997559,-3346.80004883,-11.30000019,0.00000000,0.00000000,263.98498535); //object(des_rockgp2_18) (21)
	CreateDynamicObject(16133,528.29998779,-3346.60009766,-11.30000019,0.00000000,0.00000000,263.98498535); //object(des_rockgp2_18) (22)
	CreateDynamicObject(16133,514.00000000,-3346.80004883,-11.30000019,0.00000000,0.00000000,263.98498535); //object(des_rockgp2_18) (23)
	CreateDynamicObject(16133,474.79998779,-3347.50000000,-11.30000019,0.00000000,0.00000000,263.98498535); //object(des_rockgp2_18) (24)
	CreateDynamicObject(16133,430.60000610,-3339.39990234,-17.79999924,17.00000000,0.00000000,263.98498535); //object(des_rockgp2_18) (25)
	CreateDynamicObject(16133,384.10000610,-3337.30004883,-30.60000038,16.99584961,0.00000000,263.97949219); //object(des_rockgp2_18) (26)
	CreateDynamicObject(16133,338.00000000,-3339.30004883,-46.09999847,16.99584961,0.00000000,263.97949219); //object(des_rockgp2_18) (27)
	CreateDynamicObject(16133,286.50000000,-3336.69995117,-56.59999847,16.99584961,0.00000000,263.97949219); //object(des_rockgp2_18) (28)
	CreateDynamicObject(16133,258.10000610,-3336.89990234,-62.90000153,16.99584961,0.00000000,263.97949219); //object(des_rockgp2_18) (29)
	CreateDynamicObject(4247,328.29998779,-3439.80004883,-41.09999847,0.00000000,345.99792480,0.00000000); //object(sbsbed6law2) (6)
	CreateDynamicObject(16133,222.39999390,-3338.30004883,-70.19999695,16.99584961,0.00000000,263.97949219); //object(des_rockgp2_18) (30)
	CreateDynamicObject(16133,462.70001221,-3535.10009766,-11.30000019,345.00000000,0.00000000,85.99865723); //object(des_rockgp2_18) (31)
	CreateDynamicObject(16133,412.39999390,-3535.19995117,-20.50000000,344.99816895,0.00000000,85.99548340); //object(des_rockgp2_18) (32)
	CreateDynamicObject(16133,356.89999390,-3532.19995117,-35.00000000,344.99816895,0.00000000,85.99548340); //object(des_rockgp2_18) (33)
	CreateDynamicObject(16133,304.39999390,-3533.89990234,-49.00000000,344.99816895,0.00000000,85.99548340); //object(des_rockgp2_18) (34)
	CreateDynamicObject(16133,249.39999390,-3535.30004883,-62.50000000,344.99816895,0.00000000,85.99548340); //object(des_rockgp2_18) (35)
	CreateDynamicObject(16133,485.29998779,-3556.69995117,-11.30000019,0.00000000,0.00000000,55.99865723); //object(des_rockgp2_18) (36)
	CreateDynamicObject(16133,535.50000000,-3567.39990234,-11.30000019,0.00000000,0.00000000,83.99597168); //object(des_rockgp2_18) (37)
	CreateDynamicObject(16133,582.79998779,-3566.50000000,-11.30000019,0.00000000,0.00000000,83.99597168); //object(des_rockgp2_18) (38)
	CreateDynamicObject(16133,631.20001221,-3565.80004883,-11.30000019,0.00000000,0.00000000,83.99597168); //object(des_rockgp2_18) (39)
	CreateDynamicObject(16133,677.00000000,-3563.30004883,-11.30000019,0.00000000,0.00000000,83.99597168); //object(des_rockgp2_18) (40)
	CreateDynamicObject(16133,724.70001221,-3560.60009766,-11.30000019,0.00000000,0.00000000,83.99597168); //object(des_rockgp2_18) (41)
	CreateDynamicObject(16133,752.79998779,-3549.50000000,-11.30000019,0.00000000,0.00000000,117.99597168); //object(des_rockgp2_18) (42)
	CreateDynamicObject(16133,761.59997559,-3510.00000000,-11.30000019,0.00000000,0.00000000,169.99316406); //object(des_rockgp2_18) (43)
	CreateDynamicObject(16133,760.40002441,-3463.00000000,-11.30000019,0.00000000,0.00000000,169.99145508); //object(des_rockgp2_18) (44)
	CreateDynamicObject(16133,759.29998779,-3414.89990234,-11.30000019,0.00000000,0.00000000,169.99145508); //object(des_rockgp2_18) (45)
	CreateDynamicObject(16133,758.20001221,-3365.80004883,-11.30000019,0.00000000,0.00000000,169.99145508); //object(des_rockgp2_18) (46)
	CreateDynamicObject(16133,746.20001221,-3336.19995117,-11.30000019,0.00000000,0.00000000,207.99145508); //object(des_rockgp2_18) (47)
	CreateDynamicObject(16133,707.79998779,-3329.50000000,-11.30000019,0.00000000,0.00000000,257.98767090); //object(des_rockgp2_18) (48)
	CreateDynamicObject(16133,660.50000000,-3330.19995117,-11.30000019,0.00000000,0.00000000,257.98645020); //object(des_rockgp2_18) (49)
	CreateDynamicObject(16133,613.20001221,-3332.39990234,-11.30000019,0.00000000,0.00000000,257.98645020); //object(des_rockgp2_18) (50)
	CreateDynamicObject(16133,566.00000000,-3332.50000000,-11.30000019,0.00000000,0.00000000,257.98645020); //object(des_rockgp2_18) (51)
	CreateDynamicObject(16133,517.59997559,-3332.39990234,-11.30000019,0.00000000,0.00000000,257.98645020); //object(des_rockgp2_18) (52)
	CreateDynamicObject(16133,470.39999390,-3332.30004883,-11.30000019,0.00000000,0.00000000,257.98645020); //object(des_rockgp2_18) (53)
	CreateDynamicObject(7885,635.00000000,-3450.30004883,1.70000005,0.00000000,0.00000000,0.00000000); //object(vegasglfhse1) (1)
	CreateDynamicObject(726,547.00000000,-3365.10009766,1.70000005,0.00000000,0.00000000,0.00000000); //object(tree_hipoly19) (1)
	CreateDynamicObject(726,563.09960938,-3363.19921875,1.70000005,0.00000000,0.00000000,0.00000000); //object(tree_hipoly19) (2)
	CreateDynamicObject(726,531.79998779,-3362.00000000,1.70000005,0.00000000,0.00000000,0.00000000); //object(tree_hipoly19) (3)
	CreateDynamicObject(726,511.39999390,-3362.69995117,1.70000005,0.00000000,0.00000000,0.00000000); //object(tree_hipoly19) (4)
	CreateDynamicObject(726,645.00000000,-3360.50000000,1.70000005,0.00000000,0.00000000,0.00000000); //object(tree_hipoly19) (5)
	CreateDynamicObject(726,583.29980469,-3361.59960938,1.70000005,0.00000000,0.00000000,0.00000000); //object(tree_hipoly19) (6)
	CreateDynamicObject(726,604.19921875,-3361.59960938,1.70000005,0.00000000,0.00000000,0.00000000); //object(tree_hipoly19) (7)
	CreateDynamicObject(726,625.09960938,-3360.89941406,1.70000005,0.00000000,0.00000000,0.00000000); //object(tree_hipoly19) (8)
	CreateDynamicObject(726,686.70001221,-3358.50000000,1.70000005,0.00000000,0.00000000,0.00000000); //object(tree_hipoly19) (9)
	CreateDynamicObject(726,665.50000000,-3359.29980469,1.70000005,0.00000000,0.00000000,0.00000000); //object(tree_hipoly19) (10)
	CreateDynamicObject(726,728.40002441,-3387.39990234,1.70000005,0.00000000,0.00000000,0.00000000); //object(tree_hipoly19) (11)
	CreateDynamicObject(726,708.69921875,-3358.39941406,1.70000005,0.00000000,0.00000000,0.00000000); //object(tree_hipoly19) (12)
	CreateDynamicObject(726,726.79980469,-3366.19921875,1.70000005,0.00000000,0.00000000,0.00000000); //object(tree_hipoly19) (13)
	CreateDynamicObject(726,730.70001221,-3408.50000000,1.70000005,0.00000000,0.00000000,0.00000000); //object(tree_hipoly19) (14)
	CreateDynamicObject(726,731.20001221,-3428.39990234,1.70000005,0.00000000,0.00000000,0.00000000); //object(tree_hipoly19) (15)
	CreateDynamicObject(726,731.29998779,-3449.50000000,1.70000005,0.00000000,0.00000000,0.00000000); //object(tree_hipoly19) (16)
	CreateDynamicObject(726,732.40002441,-3469.00000000,1.70000005,0.00000000,0.00000000,0.00000000); //object(tree_hipoly19) (17)
	CreateDynamicObject(726,731.40002441,-3488.39990234,1.70000005,0.00000000,0.00000000,0.00000000); //object(tree_hipoly19) (18)
	CreateDynamicObject(726,730.50000000,-3507.19995117,1.70000005,0.00000000,0.00000000,0.00000000); //object(tree_hipoly19) (19)
	CreateDynamicObject(726,728.00000000,-3527.30004883,1.70000005,0.00000000,0.00000000,0.00000000); //object(tree_hipoly19) (20)
	CreateDynamicObject(726,704.90002441,-3531.00000000,1.70000005,0.00000000,0.00000000,0.00000000); //object(tree_hipoly19) (21)
	CreateDynamicObject(726,682.79998779,-3533.00000000,1.70000005,0.00000000,0.00000000,0.00000000); //object(tree_hipoly19) (22)
	CreateDynamicObject(726,661.40002441,-3534.30004883,1.70000005,0.00000000,0.00000000,0.00000000); //object(tree_hipoly19) (23)
	CreateDynamicObject(726,639.90002441,-3534.19995117,1.70000005,0.00000000,0.00000000,0.00000000); //object(tree_hipoly19) (24)
	CreateDynamicObject(726,618.50000000,-3536.80004883,1.70000005,0.00000000,0.00000000,0.00000000); //object(tree_hipoly19) (25)
	CreateDynamicObject(726,595.40002441,-3538.30004883,1.70000005,0.00000000,0.00000000,0.00000000); //object(tree_hipoly19) (26)
	CreateDynamicObject(726,572.29998779,-3538.69995117,1.89999998,0.00000000,0.00000000,0.00000000); //object(tree_hipoly19) (27)
	CreateDynamicObject(726,550.50000000,-3538.30004883,1.70000005,0.00000000,0.00000000,0.00000000); //object(tree_hipoly19) (28)
	CreateDynamicObject(726,528.29998779,-3538.10009766,1.70000005,0.00000000,0.00000000,0.00000000); //object(tree_hipoly19) (29)
	CreateDynamicObject(726,505.79998779,-3537.89990234,1.70000005,0.00000000,0.00000000,0.00000000); //object(tree_hipoly19) (30)
	CreateDynamicObject(705,704.09997559,-3424.30004883,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree7vbig) (1)
	CreateDynamicObject(705,703.59960938,-3383.09960938,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree7vbig) (2)
	CreateDynamicObject(705,702.70001221,-3463.80004883,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree7vbig) (3)
	CreateDynamicObject(705,701.79998779,-3502.10009766,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree7vbig) (4)
	CreateDynamicObject(705,624.20001221,-3386.30004883,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree7vbig) (5)
	CreateDynamicObject(705,671.00000000,-3425.39990234,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree7vbig) (6)
	CreateDynamicObject(705,673.70001221,-3465.10009766,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree7vbig) (7)
	CreateDynamicObject(705,671.79998779,-3506.30004883,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree7vbig) (8)
	CreateDynamicObject(673,501.70001221,-3525.30004883,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_bevhiltree) (1)
	CreateDynamicObject(673,501.70001221,-3518.00000000,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_bevhiltree) (2)
	CreateDynamicObject(673,501.60000610,-3509.89990234,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_bevhiltree) (3)
	CreateDynamicObject(673,501.60000610,-3501.69995117,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_bevhiltree) (4)
	CreateDynamicObject(673,501.50000000,-3493.30004883,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_bevhiltree) (5)
	CreateDynamicObject(673,501.60000610,-3485.69995117,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_bevhiltree) (6)
	CreateDynamicObject(673,501.60000610,-3477.89990234,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_bevhiltree) (7)
	CreateDynamicObject(673,501.70001221,-3451.00000000,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_bevhiltree) (11)
	CreateDynamicObject(673,502.00000000,-3461.19995117,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_bevhiltree) (12)
	CreateDynamicObject(673,501.79998779,-3469.60009766,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_bevhiltree) (13)
	CreateDynamicObject(673,501.60000610,-3441.89990234,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_bevhiltree) (14)
	CreateDynamicObject(673,501.50000000,-3432.50000000,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_bevhiltree) (15)
	CreateDynamicObject(673,501.50000000,-3422.60009766,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_bevhiltree) (16)
	CreateDynamicObject(673,501.70001221,-3413.30004883,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_bevhiltree) (17)
	CreateDynamicObject(673,501.39999390,-3403.60009766,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_bevhiltree) (18)
	CreateDynamicObject(673,501.50000000,-3391.80004883,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_bevhiltree) (19)
	CreateDynamicObject(673,501.79998779,-3380.50000000,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_bevhiltree) (20)
	CreateDynamicObject(673,502.10000610,-3368.60009766,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_bevhiltree) (21)
	CreateDynamicObject(17068,486.79998779,-3455.10009766,0.40000001,0.00000000,0.00000000,270.00000000); //object(xjetty01) (1)
	CreateDynamicObject(11495,465.10000610,-3455.10009766,0.40000001,0.00000000,0.00000000,270.00000000); //object(des_ranchjetty) (1)
	CreateDynamicObject(1461,454.29998779,-3455.19995117,1.39999998,0.00000000,0.00000000,90.00000000); //object(dyn_life_p) (1)
	CreateDynamicObject(1461,493.69921875,-3454.39941406,1.39999998,0.00000000,0.00000000,0.00000000); //object(dyn_life_p) (2)
	CreateDynamicObject(1461,472.50000000,-3454.39941406,1.39999998,0.00000000,0.00000000,0.00000000); //object(dyn_life_p) (3)
	CreateDynamicObject(1461,461.29980469,-3454.39941406,1.39999998,0.00000000,0.00000000,0.00000000); //object(dyn_life_p) (4)
	CreateDynamicObject(1598,518.29998779,-3453.50000000,2.00000000,0.00000000,0.00000000,0.00000000); //object(beachball) (1)
	CreateDynamicObject(1601,462.50000000,-3515.30004883,-6.19999981,0.00000000,0.00000000,0.00000000); //object(fish3s) (1)
	CreateDynamicObject(1603,488.00000000,-3459.80004883,-0.20000000,0.00000000,0.00000000,0.00000000); //object(jellyfish01) (1)
	CreateDynamicObject(1607,472.50000000,-3465.60009766,-3.79999995,0.00000000,0.00000000,0.00000000); //object(dolphin) (1)
	CreateDynamicObject(1607,464.70001221,-3431.69995117,-5.80000019,0.00000000,0.00000000,0.00000000); //object(dolphin) (2)
	CreateDynamicObject(1609,488.70001221,-3423.30004883,-0.80000001,0.00000000,0.00000000,0.00000000); //object(turtle) (1)
	CreateDynamicObject(1610,507.39999390,-3436.69995117,1.70000005,0.00000000,0.00000000,0.00000000); //object(sandcastle1) (1)
	CreateDynamicObject(1611,507.50000000,-3435.60009766,1.70000005,0.00000000,0.00000000,0.00000000); //object(sandcastle2) (1)
	CreateDynamicObject(1637,506.10000610,-3458.30004883,3.00000000,0.00000000,0.00000000,180.00000000); //object(od_pat_hutb) (1)
	CreateDynamicObject(1637,506.19921875,-3520.09960938,3.00000000,0.00000000,0.00000000,179.99450684); //object(od_pat_hutb) (2)
	CreateDynamicObject(1637,505.79980469,-3488.00000000,3.00000000,0.00000000,0.00000000,179.99450684); //object(od_pat_hutb) (3)
	CreateDynamicObject(1637,504.50000000,-3411.30004883,3.00000000,0.00000000,0.00000000,179.99450684); //object(od_pat_hutb) (4)
	CreateDynamicObject(1637,505.29980469,-3433.89941406,3.00000000,0.00000000,0.00000000,179.99450684); //object(od_pat_hutb) (5)
	CreateDynamicObject(1637,505.50000000,-3385.39990234,3.00000000,0.00000000,0.00000000,179.99450684); //object(od_pat_hutb) (6)
	CreateDynamicObject(1637,506.70001221,-3365.30004883,3.00000000,0.00000000,0.00000000,179.99450684); //object(od_pat_hutb) (7)
	CreateDynamicObject(6295,539.20001221,-3388.60009766,25.39999962,0.00000000,0.00000000,184.00000000); //object(sanpedlithus_law2) (1)
	CreateDynamicObject(9241,598.59997559,-3511.80004883,3.29999995,0.00000000,0.00000000,0.00000000); //object(copbits_sfn) (1)
	CreateDynamicObject(9241,598.09997559,-3478.39990234,3.29999995,0.00000000,0.00000000,0.00000000); //object(copbits_sfn) (2)
	CreateDynamicObject(1598,517.29998779,-3455.80004883,2.00000000,0.00000000,0.00000000,0.00000000); //object(beachball) (2)
	CreateDynamicObject(1598,515.20001221,-3454.89990234,2.00000000,0.00000000,0.00000000,0.00000000); //object(beachball) (3)
	CreateDynamicObject(1598,521.29998779,-3452.60009766,2.00000000,0.00000000,0.00000000,0.00000000); //object(beachball) (4)
	CreateDynamicObject(1598,520.70001221,-3446.89990234,2.00000000,0.00000000,0.00000000,0.00000000); //object(beachball) (5)
	CreateDynamicObject(1598,519.40002441,-3449.89990234,2.00000000,0.00000000,0.00000000,0.00000000); //object(beachball) (6)
	CreateDynamicObject(1598,521.20001221,-3450.69995117,2.00000000,0.00000000,0.00000000,0.00000000); //object(beachball) (7)
	CreateDynamicObject(1598,516.70001221,-3451.80004883,2.00000000,0.00000000,0.00000000,0.00000000); //object(beachball) (8)
	CreateDynamicObject(1598,515.70001221,-3448.69995117,2.00000000,0.00000000,0.00000000,0.00000000); //object(beachball) (9)
	CreateDynamicObject(1281,516.59997559,-3461.69995117,2.50000000,0.00000000,0.00000000,0.00000000); //object(parktable1) (1)
	CreateDynamicObject(1281,516.50000000,-3467.60009766,2.50000000,0.00000000,0.00000000,0.00000000); //object(parktable1) (2)
	CreateDynamicObject(1281,516.29998779,-3473.89990234,2.50000000,0.00000000,0.00000000,0.00000000); //object(parktable1) (3)
	CreateDynamicObject(947,550.79998779,-3432.30004883,3.90000010,0.00000000,0.00000000,180.00000000); //object(bskballhub_lax01) (1)
	CreateDynamicObject(947,551.00000000,-3454.19995117,3.90000010,0.00000000,0.00000000,359.99450684); //object(bskballhub_lax01) (2)
	CreateDynamicObject(2114,550.29998779,-3452.30004883,1.79999995,0.00000000,0.00000000,0.00000000); //object(basketball) (1)
	CreateDynamicObject(1255,519.59997559,-3441.89990234,2.29999995,0.00000000,0.00000000,180.00000000); //object(lounger) (1)
	CreateDynamicObject(1255,519.70001221,-3437.39990234,2.29999995,0.00000000,0.00000000,179.99450684); //object(lounger) (2)
	CreateDynamicObject(1255,519.79998779,-3432.60009766,2.29999995,0.00000000,0.00000000,179.99450684); //object(lounger) (3)
	CreateDynamicObject(1646,502.10000610,-3424.69995117,2.00000000,0.00000000,0.00000000,272.00000000); //object(lounge_towel_up) (1)
	CreateDynamicObject(1646,502.20001221,-3427.39990234,2.00000000,0.00000000,0.00000000,269.99951172); //object(lounge_towel_up) (2)
	CreateDynamicObject(1646,502.10000610,-3430.39990234,2.00000000,0.00000000,0.00000000,267.99951172); //object(lounge_towel_up) (3)
	CreateDynamicObject(14467,545.29998779,-3394.50000000,4.40000010,0.00000000,0.00000000,0.00000000); //object(carter_statue) (1)
	CreateDynamicObject(14467,535.09997559,-3394.69995117,4.40000010,0.00000000,0.00000000,0.00000000); //object(carter_statue) (2)
	CreateDynamicObject(2669,703.50000000,-3456.60009766,3.00000000,0.00000000,0.00000000,266.00000000); //object(cj_chris_crate) (1)
	CreateDynamicObject(647,700.00000000,-3454.00000000,3.50000000,0.00000000,0.00000000,0.00000000); //object(new_bushsm) (1)
	CreateDynamicObject(647,703.59997559,-3453.10009766,3.50000000,0.00000000,0.00000000,0.00000000); //object(new_bushsm) (2)
	CreateDynamicObject(647,707.50000000,-3453.80004883,3.50000000,0.00000000,0.00000000,0.00000000); //object(new_bushsm) (3)
	CreateDynamicObject(647,708.79998779,-3457.50000000,3.50000000,0.00000000,0.00000000,0.00000000); //object(new_bushsm) (4)
	CreateDynamicObject(647,706.00000000,-3460.50000000,3.50000000,0.00000000,0.00000000,0.00000000); //object(new_bushsm) (5)
	CreateDynamicObject(647,699.09997559,-3460.10009766,3.50000000,0.00000000,0.00000000,0.00000000); //object(new_bushsm) (6)
	CreateDynamicObject(800,702.79998779,-3457.50000000,5.40000010,0.00000000,0.00000000,0.00000000); //object(genveg_bush07) (1)
	CreateDynamicObject(870,620.70001221,-3448.10009766,1.89999998,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (1)
	CreateDynamicObject(870,620.59997559,-3450.89990234,1.89999998,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (2)
	CreateDynamicObject(870,620.70001221,-3453.39990234,1.89999998,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (3)
	CreateDynamicObject(870,618.70001221,-3453.00000000,1.89999998,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (4)
	CreateDynamicObject(870,618.59997559,-3450.50000000,1.89999998,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (5)
	CreateDynamicObject(870,618.50000000,-3448.30004883,1.89999998,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (6)
	CreateDynamicObject(870,616.40002441,-3446.89990234,1.89999998,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (7)
	CreateDynamicObject(870,616.29998779,-3449.69995117,1.89999998,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (8)
	CreateDynamicObject(870,616.40002441,-3452.69995117,1.89999998,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (9)
	CreateDynamicObject(870,614.09997559,-3452.50000000,1.89999998,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (10)
	CreateDynamicObject(870,614.00000000,-3450.00000000,1.89999998,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (11)
	CreateDynamicObject(870,614.40002441,-3447.69995117,1.89999998,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (12)
	CreateDynamicObject(870,614.29998779,-3445.19995117,1.89999998,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (13)
	CreateDynamicObject(870,614.20001221,-3442.50000000,1.89999998,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (14)
	CreateDynamicObject(870,614.09997559,-3439.80004883,1.89999998,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (15)
	CreateDynamicObject(870,614.09960938,-3439.79980469,1.89999998,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (16)
	CreateDynamicObject(870,616.59997559,-3439.69995117,1.89999998,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (17)
	CreateDynamicObject(870,616.70001221,-3442.69995117,1.89999998,0.00000000,0.00000000,0.00000000); //object(veg_pflowers2wee) (18)
	CreateDynamicObject(870,616.50000000,-3445.00000000,1.89999998,0.00000000,0.00000000,30.00000000); //object(veg_pflowers2wee) (19)
	CreateDynamicObject(870,616.50000000,-3455.50000000,1.89999998,0.00000000,0.00000000,29.99816895); //object(veg_pflowers2wee) (20)
	CreateDynamicObject(870,614.50000000,-3455.50000000,1.89999998,0.00000000,0.00000000,29.99816895); //object(veg_pflowers2wee) (21)
	CreateDynamicObject(870,615.00000000,-3458.30004883,1.89999998,0.00000000,0.00000000,29.99816895); //object(veg_pflowers2wee) (22)
	CreateDynamicObject(870,617.00000000,-3457.80004883,1.89999998,0.00000000,0.00000000,29.99816895); //object(veg_pflowers2wee) (23)
	CreateDynamicObject(870,617.00000000,-3460.50000000,1.89999998,0.00000000,0.00000000,29.99816895); //object(veg_pflowers2wee) (24)
	CreateDynamicObject(870,614.50000000,-3460.50000000,1.89999998,0.00000000,0.00000000,29.99816895); //object(veg_pflowers2wee) (25)
	CreateDynamicObject(870,614.50000000,-3463.00000000,1.89999998,0.00000000,0.00000000,29.99816895); //object(veg_pflowers2wee) (26)
	CreateDynamicObject(870,617.00000000,-3463.00000000,1.89999998,0.00000000,0.00000000,29.99816895); //object(veg_pflowers2wee) (27)
	CreateDynamicObject(870,616.79998779,-3465.80004883,1.89999998,0.00000000,0.00000000,29.99816895); //object(veg_pflowers2wee) (28)
	CreateDynamicObject(870,614.50000000,-3465.50000000,1.89999998,0.00000000,0.00000000,29.99816895); //object(veg_pflowers2wee) (29)
	CreateDynamicObject(870,616.79998779,-3468.00000000,1.89999998,0.00000000,0.00000000,29.99816895); //object(veg_pflowers2wee) (30)
	CreateDynamicObject(870,614.50000000,-3467.80004883,1.89999998,0.00000000,0.00000000,29.99816895); //object(veg_pflowers2wee) (31)
	CreateDynamicObject(870,616.79998779,-3432.60009766,1.89999998,0.00000000,0.00000000,29.99816895); //object(veg_pflowers2wee) (32)
	CreateDynamicObject(870,614.29998779,-3432.60009766,1.89999998,0.00000000,0.00000000,29.99816895); //object(veg_pflowers2wee) (33)
	CreateDynamicObject(870,614.29998779,-3435.30004883,1.89999998,0.00000000,0.00000000,29.99816895); //object(veg_pflowers2wee) (34)
	CreateDynamicObject(870,614.29998779,-3437.50000000,1.89999998,0.00000000,0.00000000,29.99816895); //object(veg_pflowers2wee) (35)
	CreateDynamicObject(870,616.79998779,-3437.50000000,1.89999998,0.00000000,0.00000000,29.99816895); //object(veg_pflowers2wee) (36)
	CreateDynamicObject(870,616.79998779,-3435.30004883,1.89999998,0.00000000,0.00000000,29.99816895); //object(veg_pflowers2wee) (37)
	CreateDynamicObject(7986,554.40002441,-3431.80004883,2.79999995,0.00000000,0.00000000,0.00000000); //object(plants01_lvs) (1)
	CreateDynamicObject(8623,614.00000000,-3427.10009766,2.50000000,0.00000000,0.00000000,0.00000000); //object(bush03_lvs) (1)
	CreateDynamicObject(705,669.79980469,-3384.69921875,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree7vbig) (9)
	CreateDynamicObject(705,587.20001221,-3387.60009766,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree7vbig) (10)
	CreateDynamicObject(705,629.90002441,-3507.80004883,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree7vbig) (11)
	CreateDynamicObject(691,522.29998779,-3521.00000000,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4_big) (1)
	CreateDynamicObject(691,540.79998779,-3521.50000000,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4_big) (2)
	CreateDynamicObject(691,560.40002441,-3521.19995117,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4_big) (3)
	CreateDynamicObject(691,580.29998779,-3520.00000000,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4_big) (4)
	CreateDynamicObject(691,580.29998779,-3501.10009766,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4_big) (5)
	CreateDynamicObject(691,561.90002441,-3502.00000000,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4_big) (6)
	CreateDynamicObject(691,540.79998779,-3501.30004883,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4_big) (7)
	CreateDynamicObject(691,521.79998779,-3501.50000000,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4_big) (8)
	CreateDynamicObject(691,703.20001221,-3403.00000000,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4_big) (9)
	CreateDynamicObject(691,671.29998779,-3403.39990234,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4_big) (10)
	CreateDynamicObject(691,704.79998779,-3441.80004883,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4_big) (11)
	CreateDynamicObject(691,667.00000000,-3443.80004883,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4_big) (12)
	CreateDynamicObject(691,703.59997559,-3482.69995117,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4_big) (13)
	CreateDynamicObject(691,667.90002441,-3484.60009766,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4_big) (14)
	CreateDynamicObject(691,655.50000000,-3510.50000000,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4_big) (15)
	CreateDynamicObject(691,528.90002441,-3473.60009766,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4_big) (16)
	CreateDynamicObject(691,544.29998779,-3476.19995117,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4_big) (17)
	CreateDynamicObject(4247,624.59960938,-3439.89941406,1.70000005,0.00000000,0.00000000,0.00000000); //object(sbsbed6law2) (8)
	CreateDynamicObject(691,562.70001221,-3476.50000000,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4_big) (18)
	CreateDynamicObject(691,579.79998779,-3477.19995117,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4_big) (19)
	CreateDynamicObject(691,552.00000000,-3460.89990234,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4_big) (20)
	CreateDynamicObject(691,523.00000000,-3380.39990234,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4_big) (21)
	CreateDynamicObject(691,553.19921875,-3378.39941406,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4_big) (22)
	CreateDynamicObject(691,552.50000000,-3400.29980469,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4_big) (23)
	CreateDynamicObject(691,568.79998779,-3397.39990234,1.70000005,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4_big) (24)

	//Island by Kimossab

	CreateDynamicObject(19456, 1645.44, -4739.75, 5.50,   0.00, 0.00, 51.58);
	CreateDynamicObject(19456, 1645.44, -4739.75, 9.00,   0.00, 0.00, 51.58);
	CreateDynamicObject(19456, 1652.19, -4738.85, 5.50,   0.00, 0.00, 141.58);
	CreateDynamicObject(19456, 1652.19, -4738.85, 9.00,   0.00, 0.00, 141.58);
	CreateDynamicObject(19456, 1658.17, -4731.30, 5.50,   0.00, 0.00, 141.58);
	CreateDynamicObject(19456, 1658.17, -4731.30, 9.00,   0.00, 0.00, 141.58);
	CreateDynamicObject(19456, 1657.28, -4724.56, 5.50,   0.00, 0.00, 51.58);
	CreateDynamicObject(19456, 1657.28, -4724.56, 9.00,   0.00, 0.00, 51.58);
	CreateDynamicObject(19393, 1640.42, -4735.76, 5.50,   0.00, 0.00, 51.58);
	CreateDynamicObject(19364, 1640.42, -4735.76, 9.00,   0.00, 0.00, 51.58);
	CreateDynamicObject(19456, 1635.38, -4731.78, 5.50,   0.00, 0.00, 51.58);
	CreateDynamicObject(19456, 1635.38, -4731.78, 9.00,   0.00, 0.00, 51.58);
	CreateDynamicObject(19410, 1630.37, -4727.80, 5.50,   0.00, 0.00, 51.58);
	CreateDynamicObject(19364, 1630.37, -4727.80, 9.00,   0.00, 0.00, 51.58);
	CreateDynamicObject(19437, 1628.47, -4726.32, 5.50,   0.00, 0.00, 51.58);
	CreateDynamicObject(19437, 1628.47, -4726.32, 9.00,   0.00, 0.00, 51.58);
	CreateDynamicObject(19410, 1652.24, -4720.59, 5.50,   0.00, 0.00, 51.58);
	CreateDynamicObject(19364, 1652.24, -4720.59, 9.00,   0.00, 0.00, 51.58);
	CreateDynamicObject(19456, 1630.95, -4722.03, 5.50,   0.00, 0.00, 141.58);
	CreateDynamicObject(19456, 1630.95, -4722.03, 9.00,   0.00, 0.00, 141.58);
	CreateDynamicObject(19456, 1636.92, -4714.50, 5.50,   0.00, 0.00, 141.58);
	CreateDynamicObject(19456, 1636.92, -4714.50, 9.00,   0.00, 0.00, 141.58);
	CreateDynamicObject(19393, 1649.75, -4718.61, 5.50,   0.00, 0.00, 51.58);
	CreateDynamicObject(19364, 1649.75, -4718.61, 9.00,   0.00, 0.00, 51.58);
	CreateDynamicObject(19456, 1644.72, -4714.65, 5.50,   0.00, 0.00, 51.58);
	CreateDynamicObject(19456, 1644.72, -4714.65, 9.00,   0.00, 0.00, 51.58);
	CreateDynamicObject(19437, 1640.53, -4711.33, 5.50,   0.00, 0.00, 51.58);
	CreateDynamicObject(19437, 1640.53, -4711.33, 9.00,   0.00, 0.00, 51.58);
	CreateDynamicObject(1649, 1630.69, -4728.04, 4.93,   0.00, 0.00, -38.46);
	CreateDynamicObject(1494, 1639.78, -4735.30, 3.75,   0.00, 0.00, -38.64);
	CreateDynamicObject(1649, 1630.66, -4728.01, 4.93,   0.00, 0.00, 141.54);
	CreateDynamicObject(1649, 1652.76, -4721.00, 4.93,   0.00, 0.00, -38.46);
	CreateDynamicObject(1649, 1652.76, -4721.00, 4.93,   0.00, 0.00, 141.54);
	CreateDynamicObject(18980, 1639.62, -4734.47, 10.29,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1640.24, -4733.69, 10.29,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1640.83, -4732.92, 10.29,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1639.92, -4730.84, 10.29,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1642.06, -4731.36, 10.29,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1642.69, -4730.58, 10.29,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1643.30, -4729.82, 10.29,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1643.89, -4729.03, 10.29,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1644.51, -4728.25, 10.29,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1645.15, -4727.48, 10.29,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1645.76, -4726.69, 10.29,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1646.35, -4725.95, 10.29,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1646.95, -4725.16, 10.29,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1647.60, -4724.37, 10.29,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1648.16, -4723.67, 10.29,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1648.79, -4722.88, 10.29,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1649.41, -4722.08, 10.29,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1650.03, -4721.31, 10.29,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1650.64, -4720.56, 10.29,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1650.96, -4720.14, 10.28,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1638.02, -4733.21, 10.28,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1638.66, -4732.42, 10.28,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1639.29, -4731.63, 10.28,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1640.55, -4730.07, 10.28,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1641.14, -4729.31, 10.28,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1641.74, -4728.52, 10.28,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1642.21, -4727.94, 10.28,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1642.82, -4727.21, 10.28,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1643.46, -4726.41, 10.28,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1644.02, -4725.66, 10.28,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1644.64, -4724.91, 10.28,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1645.27, -4724.14, 10.28,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1645.83, -4723.45, 10.28,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1646.48, -4722.66, 10.28,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1646.92, -4722.06, 10.28,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1647.93, -4720.83, 10.28,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1648.53, -4720.08, 10.28,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1649.14, -4719.30, 10.28,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1649.43, -4718.96, 10.27,   0.00, 90.00, -38.40);
	CreateDynamicObject(18980, 1641.47, -4732.15, 10.29,   0.00, 90.00, -38.40);
	CreateDynamicObject(16151, 1643.84, -4715.43, 4.23,   0.00, 0.00, 51.48);
	CreateDynamicObject(2964, 1638.53, -4725.40, 3.76,   0.00, 0.00, -39.48);
	CreateDynamicObject(3004, 1639.16, -4725.50, 4.65,   -2.82, 0.36, 52.50);
	CreateDynamicObject(14537, 1651.58, -4732.09, 2.42,   0.00, 0.00, 7.20);
	CreateDynamicObject(19159, 1642.47, -4726.45, 9.58,   0.00, 0.00, 0.00);
	CreateDynamicObject(3004, 1638.99, -4725.61, 4.65,   -2.82, 0.36, 77.16);
	CreateDynamicObject(3004, 1635.48, -4722.78, 4.65,   -2.82, 0.36, 67.56);
	CreateDynamicObject(3004, 1635.59, -4722.61, 4.65,   -2.82, 0.36, 50.58);
	CreateDynamicObject(18653, 1653.16, -4736.61, 3.79,   0.00, 0.00, -79.02);
	CreateDynamicObject(18655, 1654.71, -4734.66, 3.80,   0.00, 0.00, -44.40);
	CreateDynamicObject(18653, 1648.92, -4741.75, 3.79,   0.00, 0.00, -79.02);
	CreateDynamicObject(18655, 1634.80, -4718.26, 3.80,   0.00, 0.00, -221.52);
	CreateDynamicObject(18654, 1659.40, -4727.36, 3.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(18654, 1656.20, -4732.41, 3.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(19143, 1660.84, -4727.81, 9.74,   0.00, 0.00, 88.32);
	CreateDynamicObject(19153, 1628.25, -4725.87, 9.74,   0.00, 0.00, -92.58);
	CreateDynamicObject(19153, 1639.94, -4711.11, 9.72,   0.00, 0.00, -179.88);
	CreateDynamicObject(19153, 1634.29, -4718.24, 9.72,   0.00, 0.00, -125.10);
	CreateDynamicObject(19153, 1650.32, -4719.41, 9.72,   0.00, 0.00, 146.16);
	CreateDynamicObject(19153, 1654.73, -4734.71, 9.72,   0.00, 0.00, 43.50);
	CreateDynamicObject(19153, 1649.15, -4742.37, 9.72,   0.00, 0.00, 0.30);
	CreateDynamicObject(19153, 1637.90, -4733.45, 9.72,   0.00, 0.00, -38.76);
	CreateDynamicObject(19279, 1648.92, -4730.10, 4.45,   0.00, 0.00, -127.50);
	CreateDynamicObject(19279, 1650.95, -4727.20, 4.45,   0.00, 0.00, -170.46);
	CreateDynamicObject(19279, 1646.67, -4732.78, 4.45,   0.00, 0.00, -82.74);
	CreateDynamicObject(1826, 1644.81, -4737.21, 3.79,   0.00, 0.00, 140.94);
	CreateDynamicObject(1954, 1644.89, -4737.11, 4.72,   0.00, 0.00, -38.34);
	CreateDynamicObject(1957, 1643.88, -4736.32, 4.70,   0.00, 0.00, -39.48);
	CreateDynamicObject(1958, 1644.39, -4736.74, 4.65,   0.00, 0.00, -39.06);
	CreateDynamicObject(18871, 1644.49, -4737.31, 4.62,   0.00, 0.00, 34.08);
	CreateDynamicObject(19422, 1643.99, -4736.89, 4.62,   0.00, 0.00, 0.00);
	CreateDynamicObject(2232, 1652.01, -4738.45, 4.37,   0.00, 0.00, -128.52);
	CreateDynamicObject(2232, 1657.99, -4730.93, 4.37,   0.00, 0.00, -128.52);
	CreateDynamicObject(2229, 1658.01, -4731.39, 4.97,   0.00, 0.00, -127.98);
	CreateDynamicObject(2229, 1652.12, -4738.89, 4.97,   0.00, 0.00, -127.98);
	CreateDynamicObject(1841, 1652.52, -4738.03, 9.31,   -0.78, -28.92, -39.84);
	CreateDynamicObject(1841, 1657.19, -4732.15, 9.31,   -0.78, -28.92, -39.84);
	CreateDynamicObject(18980, 1647.44, -4721.42, 10.28,   0.00, 90.00, -38.40);
	CreateDynamicObject(19128, 1643.78, -4731.37, 3.87,   0.00, 0.00, -36.36);
	CreateDynamicObject(19128, 1648.50, -4724.99, 3.87,   0.00, 0.00, -36.84);
	CreateDynamicObject(19128, 1646.16, -4728.15, 3.87,   0.00, 0.00, -36.36);
	CreateDynamicObject(2964, 1634.80, -4722.38, 3.76,   0.00, 0.00, -39.48);
	CreateDynamicObject(14657, 1635.83, -4723.42, 4.47,   0.00, 0.00, 52.20);
	CreateDynamicObject(19452, 1638.30, -4715.71, 3.82,   0.00, 90.00, -39.00);
	CreateDynamicObject(19452, 1632.26, -4723.22, 3.82,   0.00, 90.00, -39.00);
	CreateDynamicObject(19452, 1634.89, -4725.33, 3.82,   0.00, 90.00, -39.00);
	CreateDynamicObject(19452, 1640.97, -4717.87, 3.82,   0.00, 90.00, -39.00);
	CreateDynamicObject(19452, 1637.67, -4727.43, 3.82,   0.00, 90.00, -39.00);
	CreateDynamicObject(19452, 1640.38, -4729.63, 3.82,   0.00, 90.00, -39.00);
	CreateDynamicObject(19452, 1643.17, -4731.75, 3.82,   0.00, 90.00, -39.00);
	CreateDynamicObject(19452, 1645.86, -4733.95, 3.82,   0.00, 90.00, -39.00);
	CreateDynamicObject(19452, 1648.58, -4736.10, 3.82,   0.00, 90.00, -39.00);
	CreateDynamicObject(19452, 1650.77, -4737.86, 3.82,   0.00, 90.00, -39.00);
	CreateDynamicObject(19452, 1643.61, -4719.96, 3.82,   0.00, 90.00, -38.58);
	CreateDynamicObject(19452, 1646.34, -4722.12, 3.82,   0.00, 90.00, -38.58);
	CreateDynamicObject(19452, 1649.07, -4724.29, 3.82,   0.00, 90.00, -38.58);
	CreateDynamicObject(19452, 1651.82, -4726.47, 3.82,   0.00, 90.00, -38.58);
	CreateDynamicObject(19452, 1654.54, -4728.58, 3.82,   0.00, 90.00, -38.58);
	CreateDynamicObject(19452, 1656.76, -4730.36, 3.82,   0.00, 90.00, -38.58);
	CreateDynamicObject(8859, 1666.50, -5438.33, -6.59,   -2.10, 0.12, 322.46);
	CreateDynamicObject(8859, 1512.67, -5456.47, -5.80,   0.00, 0.00, 302.08);
	CreateDynamicObject(8859, 1353.97, -5409.77, -5.80,   0.00, 0.00, 280.95);
	CreateDynamicObject(8859, 1252.43, -5329.65, -5.80,   0.00, 0.00, 264.70);
	CreateDynamicObject(8859, 1151.51, -5182.18, -5.80,   0.00, 0.00, 235.17);
	CreateDynamicObject(8859, 1100.55, -5011.30, -5.80,   0.00, 0.00, 221.61);
	CreateDynamicObject(8859, 1114.66, -4863.84, -5.80,   0.00, 0.00, 201.13);
	CreateDynamicObject(8859, 1176.33, -4741.89, -5.80,   0.00, 0.00, 180.35);
	CreateDynamicObject(8859, 1310.04, -4647.00, -5.80,   0.00, 0.00, 146.14);
	CreateDynamicObject(8859, 1480.18, -4638.26, -5.80,   0.00, 0.00, 112.10);
	CreateDynamicObject(8859, 1811.61, -4784.59, -5.80,   0.00, 0.00, 77.45);
	CreateDynamicObject(8859, 1668.16, -4685.75, -5.80,   0.00, 0.00, 99.49);
	CreateDynamicObject(8859, 1896.99, -5312.77, -14.27,   -5.58, -2.28, 177.60);
	CreateDynamicObject(4284, 1890.35, -4939.89, -28.09,   -9.47, 0.00, 90.00);
	CreateDynamicObject(8859, 1797.68, -5362.98, -10.03,   0.00, 0.00, 363.58);
	CreateDynamicObject(19340, 1921.05, -5173.38, 0.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(19340, 1921.03, -5122.54, 0.19,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1809.27, -4823.22, 3.60,   0.00, 0.00, 270.00);
	CreateDynamicObject(12814, 1809.27, -4853.23, 3.70,   0.00, 0.00, 270.00);
	CreateDynamicObject(12814, 1809.27, -4883.21, 3.71,   0.00, 0.00, 270.00);
	CreateDynamicObject(12814, 1849.10, -5242.84, 3.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1809.27, -4943.21, 3.71,   0.00, 0.00, 270.00);
	CreateDynamicObject(12814, 1809.27, -4973.20, 3.71,   0.00, 0.00, 270.00);
	CreateDynamicObject(12814, 1809.27, -5003.18, 3.69,   0.00, 0.00, 270.00);
	CreateDynamicObject(12814, 1809.27, -5033.18, 3.69,   0.00, 0.00, 270.00);
	CreateDynamicObject(12814, 1849.10, -5292.83, 3.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(7605, 1838.11, -5144.40, 3.77,   0.00, 0.00, 180.00);
	CreateDynamicObject(8443, 1789.23, -5164.40, 3.78,   0.00, 0.00, 180.00);
	CreateDynamicObject(6881, 1749.22, -4782.77, 3.83,   0.00, 0.00, 90.00);
	CreateDynamicObject(6888, 1659.24, -4752.77, 3.83,   0.00, 0.00, 270.00);
	CreateDynamicObject(7596, 1745.55, -4980.57, 8.10,   0.00, 0.00, 0.00);
	CreateDynamicObject(19435, 1767.58, -4979.75, 3.39,   0.00, 104.30, 180.00);
	CreateDynamicObject(19435, 1767.57, -4968.14, 3.39,   0.00, 104.30, 180.00);
	CreateDynamicObject(6959, 1748.64, -4979.28, 3.78,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1809.28, -4793.25, 3.70,   0.00, 0.00, 270.00);
	CreateDynamicObject(12814, 1809.27, -5063.17, 3.70,   0.00, 0.00, 270.00);
	CreateDynamicObject(12814, 1809.27, -5093.09, 3.53,   0.00, 0.00, 270.00);
	CreateDynamicObject(12814, 1819.33, -5100.53, 3.37,   0.00, 0.00, 304.55);
	CreateDynamicObject(12814, 1799.66, -5109.79, 3.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(3749, 1835.30, -5118.30, 9.45,   0.00, 0.00, 90.00);
	CreateDynamicObject(3749, 1836.14, -5170.20, 9.45,   0.00, 0.00, 90.00);
	CreateDynamicObject(740, 1832.19, -5132.87, 2.78,   0.00, 0.00, 0.00);
	CreateDynamicObject(740, 1832.19, -5144.62, 2.78,   0.00, 0.00, 0.00);
	CreateDynamicObject(740, 1832.19, -5155.61, 2.78,   0.00, 0.00, 0.00);
	CreateDynamicObject(7055, 1777.29, -5011.51, 3.84,   0.00, 0.00, 0.00);
	CreateDynamicObject(7383, 1779.23, -4892.74, 3.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(8443, 1699.48, -4882.45, 3.82,   0.00, 0.00, 89.76);
	CreateDynamicObject(12814, 1809.27, -4913.21, 3.70,   0.00, 0.00, 270.00);
	CreateDynamicObject(6876, 1699.32, -5154.47, 3.90,   0.00, 0.00, 180.06);
	CreateDynamicObject(6417, 2050.86, -5204.78, -13.21,   0.00, 0.00, 90.06);
	CreateDynamicObject(19463, 2009.68, -5204.14, 3.44,   0.00, -75.00, 0.00);
	CreateDynamicObject(19463, 2009.68, -5209.16, 3.45,   0.00, -75.00, 0.00);
	CreateDynamicObject(6230, 2011.86, -5154.01, -5.33,   0.00, 0.00, -180.00);
	CreateDynamicObject(6295, 2095.32, -5206.00, 27.08,   0.00, 0.00, 91.38);
	CreateDynamicObject(3406, 2020.34, -5123.68, -0.03,   0.00, 10.50, 0.00);
	CreateDynamicObject(17068, 2035.47, -5123.70, 1.10,   0.00, 0.00, 270.00);
	CreateDynamicObject(3406, 2020.32, -5115.03, -0.03,   0.00, 10.50, 0.00);
	CreateDynamicObject(17068, 2035.50, -5115.03, 1.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(3406, 2020.33, -5181.09, -0.03,   0.00, 10.50, 0.00);
	CreateDynamicObject(3406, 2020.31, -5189.37, -0.03,   0.00, 10.50, 0.00);
	CreateDynamicObject(17068, 2035.50, -5189.39, 1.10,   0.00, 0.00, 270.00);
	CreateDynamicObject(17068, 2035.52, -5181.02, 1.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(8637, 1549.34, -4794.92, 3.83,   0.00, 0.00, 90.00);
	CreateDynamicObject(6881, 1448.31, -4865.46, 3.95,   0.00, 0.00, 90.18);
	CreateDynamicObject(7326, 1384.48, -4814.09, 3.98,   0.00, 0.00, 90.12);
	CreateDynamicObject(7052, 1448.83, -4812.71, 3.83,   0.00, 0.00, 0.00);
	CreateDynamicObject(19435, 1406.54, -4829.78, 3.54,   0.00, 104.30, 180.00);
	CreateDynamicObject(19435, 1406.54, -4828.18, 3.54,   0.00, 104.30, 180.00);
	CreateDynamicObject(19435, 1406.54, -4826.58, 3.54,   0.00, 104.30, 180.00);
	CreateDynamicObject(19435, 1406.54, -4826.38, 3.52,   0.00, 104.30, 180.00);
	CreateDynamicObject(7478, 1453.38, -4986.29, 3.94,   0.00, 0.00, -89.70);
	CreateDynamicObject(19467, 1408.57, -4915.73, 3.89,   180.00, 0.00, -90.00);
	CreateDynamicObject(19467, 1410.29, -4911.70, 3.89,   180.00, 0.00, -135.00);
	CreateDynamicObject(19467, 1410.27, -4919.80, 3.89,   180.00, 0.00, -45.00);
	CreateDynamicObject(6881, 1749.23, -5274.41, 3.77,   0.00, 0.00, 0.00);
	CreateDynamicObject(7327, 1709.21, -5193.78, 3.81,   0.00, 0.00, 90.00);
	CreateDynamicObject(8514, 1559.06, -5221.82, 3.76,   0.00, 0.00, 269.34);
	CreateDynamicObject(7052, 1668.55, -5304.41, 3.77,   0.00, 0.00, 0.00);
	CreateDynamicObject(7327, 1588.12, -5313.51, 3.81,   0.00, 0.00, -90.30);
	CreateDynamicObject(7052, 1558.74, -5253.47, 3.75,   0.00, 0.00, 89.40);
	CreateDynamicObject(6881, 1588.04, -5373.01, 3.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(8135, 1367.03, -5213.17, 3.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(7326, 1443.36, -5381.62, 3.95,   0.00, 0.00, 90.00);
	CreateDynamicObject(7052, 1507.51, -5403.01, 3.77,   0.00, 0.00, 0.00);
	CreateDynamicObject(6881, 1507.02, -5350.23, 3.81,   0.00, 0.00, 0.00);
	CreateDynamicObject(6881, 1506.99, -5270.31, 3.81,   0.00, 0.00, 90.00);
	CreateDynamicObject(8562, 1227.75, -5150.03, 3.83,   0.00, 0.00, -90.42);
	CreateDynamicObject(8514, 1317.71, -4960.33, 3.83,   0.00, 0.00, 0.00);
	CreateDynamicObject(8932, 1399.27, -5076.94, 3.98,   0.00, 0.00, -90.00);
	CreateDynamicObject(7052, 1459.55, -5130.29, 3.82,   0.00, 0.00, 90.00);
	CreateDynamicObject(7052, 1459.55, -5125.54, 3.83,   0.00, 0.00, 90.00);
	CreateDynamicObject(6881, 1509.28, -5126.79, 3.93,   0.00, 0.00, 270.00);
	CreateDynamicObject(6881, 1589.62, -4902.19, 3.78,   0.00, 0.00, 180.00);
	CreateDynamicObject(6881, 1269.44, -5106.95, 3.96,   0.00, 0.00, 180.00);
	CreateDynamicObject(7327, 1269.40, -5166.19, 3.94,   0.00, 0.00, -90.00);
	CreateDynamicObject(7327, 1328.55, -5126.98, 3.96,   0.00, 0.00, -0.30);
	CreateDynamicObject(7992, 1591.53, -5150.34, 3.84,   0.00, 0.00, 6.00);
	CreateDynamicObject(8514, 1277.71, -4839.46, 3.84,   0.00, 0.00, 180.00);
	CreateDynamicObject(7052, 1367.19, -4739.47, 3.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(3306, 1448.50, -4892.16, 5.46,   0.00, 0.00, -90.00);
	CreateDynamicObject(3307, 1423.50, -4892.19, 5.46,   0.00, 0.00, -90.00);
	CreateDynamicObject(3308, 1456.93, -4938.69, 5.46,   0.00, 0.00, 90.00);
	CreateDynamicObject(3309, 1431.95, -4938.90, 5.46,   0.00, 0.00, 90.00);
	CreateDynamicObject(3310, 1406.27, -4938.07, 6.03,   0.00, 0.00, -90.00);
	CreateDynamicObject(6959, 1391.93, -5006.87, 3.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(3976, 1180.06, -4835.67, 26.89,   0.00, 0.00, 180.00);
	CreateDynamicObject(3975, 1173.19, -4834.95, 4.45,   0.00, 0.00, 180.00);
	CreateDynamicObject(5708, 1381.61, -5078.03, 14.26,   0.00, 0.00, -270.00);
	CreateDynamicObject(6959, 1433.13, -5037.14, 3.96,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1448.60, -5047.23, 4.02,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1448.54, -5032.28, 4.00,   0.00, -0.10, 0.00);
	CreateDynamicObject(13006, 1581.76, -5267.12, 3.83,   0.00, 0.00, 0.00);
	CreateDynamicObject(8675, 1708.01, -5279.97, 12.84,   0.00, 0.00, -90.00);
	CreateDynamicObject(9171, 1267.93, -4789.53, 6.92,   0.00, 0.00, -180.00);
	CreateDynamicObject(9193, 1286.21, -4765.05, 8.73,   0.00, 0.00, 90.00);
	CreateDynamicObject(8676, 1732.00, -5212.40, 8.78,   0.00, 0.00, 90.00);
	CreateDynamicObject(7419, 1591.58, -4979.83, -2.63,   0.00, 0.00, -90.00);
	CreateDynamicObject(7389, 1379.35, -5119.43, 5.26,   0.00, 0.00, 359.58);
	CreateDynamicObject(6907, 1280.34, -5202.99, 3.94,   0.00, 0.00, -90.00);
	CreateDynamicObject(3464, 1453.29, -5265.32, 6.19,   0.00, 0.00, -90.00);
	CreateDynamicObject(3466, 1426.52, -5265.35, 6.38,   0.00, 0.00, -90.00);
	CreateDynamicObject(3483, 1398.03, -5267.48, 10.78,   0.00, 0.00, 180.00);
	CreateDynamicObject(3484, 1367.72, -5267.48, 10.59,   0.00, 0.00, 180.00);
	CreateDynamicObject(3485, 1337.71, -5267.48, 10.91,   0.00, 0.00, 180.00);
	CreateDynamicObject(3486, 1307.45, -5267.49, 11.01,   0.00, 0.00, 180.00);
	CreateDynamicObject(3487, 1281.82, -5267.49, 10.60,   0.00, 0.00, 180.00);
	CreateDynamicObject(3488, 1260.70, -5267.49, 10.27,   0.00, 0.00, 180.00);
	CreateDynamicObject(3466, 1237.05, -5265.09, 6.35,   0.00, 0.36, -90.48);
	CreateDynamicObject(19471, 1233.93, -5251.07, 4.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19471, 1261.49, -5250.47, 4.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19471, 1281.07, -5250.43, 4.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19471, 1314.46, -5250.39, 4.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19471, 1324.61, -5250.33, 4.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19471, 1354.63, -5250.40, 4.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19471, 1390.64, -5250.43, 4.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19471, 1423.49, -5250.48, 4.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19471, 1440.97, -5250.45, 4.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19471, 1453.98, -4926.31, 4.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19471, 1426.65, -4926.91, 4.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19471, 1409.77, -4926.53, 4.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(19471, 1419.03, -4904.84, 4.00,   0.00, 0.00, -90.00);
	CreateDynamicObject(19471, 1442.67, -4904.64, 4.00,   0.00, 0.00, -90.00);
	CreateDynamicObject(6965, 1284.82, -5119.55, 7.63,   0.00, 0.00, 0.00);
	CreateDynamicObject(6964, 1285.03, -5119.63, 3.77,   0.00, 0.00, 0.00);
	CreateDynamicObject(9833, 1440.03, -5370.73, 6.95,   0.00, 0.00, 0.00);
	CreateDynamicObject(6965, 1380.82, -4802.47, 7.62,   0.00, 0.00, 0.00);
	CreateDynamicObject(6964, 1380.82, -4802.47, 3.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1742.43, -4975.89, 3.74,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1268.84, -4810.73, 3.84,   0.00, 0.00, 180.00);
	CreateDynamicObject(6959, 1268.86, -4770.75, 3.84,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1268.81, -4770.07, 3.83,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1207.12, -4839.40, 3.78,   0.00, 0.00, 0.00);
	CreateDynamicObject(3311, 1456.37, -4967.75, 6.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(19471, 1468.38, -4965.57, 4.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(1229, 1487.20, -5001.17, 5.62,   0.00, 0.00, 0.00);
	CreateDynamicObject(1229, 1486.80, -4921.01, 5.62,   0.00, 0.00, 180.00);
	CreateDynamicObject(1257, 1490.59, -4991.67, 5.34,   0.00, 0.00, 180.00);
	CreateDynamicObject(1257, 1490.59, -4961.44, 5.34,   0.00, 0.00, 180.00);
	CreateDynamicObject(1257, 1490.59, -4930.31, 5.34,   0.00, 0.00, 180.00);
	CreateDynamicObject(12849, 1754.28, -4896.79, 7.18,   0.00, 0.00, 180.00);
	CreateDynamicObject(12863, 1759.14, -4837.34, 3.89,   0.00, 0.00, 180.72);
	CreateDynamicObject(12946, 1764.25, -4943.20, 3.86,   0.00, 0.00, 180.00);
	CreateDynamicObject(13015, 1681.47, -4890.60, 6.79,   0.00, 0.00, -90.66);
	CreateDynamicObject(6959, 1718.92, -4902.27, 3.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1677.70, -4902.44, 3.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1760.29, -4932.15, 3.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1760.29, -4972.14, 3.77,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1719.01, -4942.25, 3.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1677.70, -4942.41, 3.77,   0.00, 0.00, 0.00);
	CreateDynamicObject(5392, 1736.82, -4929.83, 6.47,   0.00, 0.00, 21.96);
	CreateDynamicObject(6048, 1213.83, -4982.14, 23.99,   0.00, 0.00, -90.00);
	CreateDynamicObject(19322, 1213.83, -4982.14, 23.99,   0.00, 0.00, -90.00);
	CreateDynamicObject(3586, 1227.13, -4993.55, 9.65,   0.00, 0.00, -90.00);
	CreateDynamicObject(3586, 1201.82, -4993.54, 9.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(6051, 1214.75, -4974.85, 10.25,   0.00, 0.00, -90.00);
	CreateDynamicObject(712, 1284.37, -4972.30, 15.72,   0.00, 0.00, 0.00);
	CreateDynamicObject(712, 1284.25, -5015.32, 15.72,   0.00, 0.00, 0.00);
	CreateDynamicObject(615, 1283.91, -5044.92, 5.66,   0.00, 0.00, 0.00);
	CreateDynamicObject(736, 1226.04, -4988.91, 17.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(3517, 1225.80, -4998.00, 17.41,   0.00, 0.00, 0.00);
	CreateDynamicObject(736, 1202.46, -4988.94, 17.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(736, 1202.01, -4998.20, 17.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(6404, 1855.35, -5043.20, 8.09,   0.00, 0.00, 88.86);
	CreateDynamicObject(643, 1872.40, -5033.66, 1.42,   0.00, 0.00, 0.00);
	CreateDynamicObject(642, 1870.68, -5036.16, 2.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(3862, 1698.04, -4925.03, 4.89,   0.00, 0.00, 180.00);
	CreateDynamicObject(3863, 1705.25, -4925.14, 4.89,   0.00, 0.00, 180.00);
	CreateDynamicObject(3860, 1705.25, -4914.32, 4.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(3861, 1698.04, -4914.25, 4.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(1342, 1692.17, -4914.87, 4.77,   0.00, 0.00, -90.00);
	CreateDynamicObject(3860, 1691.15, -4925.03, 4.89,   0.00, 0.00, 180.00);
	CreateDynamicObject(3861, 1686.78, -4925.23, 4.89,   0.00, 0.00, -90.00);
	CreateDynamicObject(3862, 1686.35, -4914.13, 4.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(3863, 1680.25, -4914.15, 4.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(3860, 1676.52, -4919.96, 4.89,   0.00, 0.00, 90.00);
	CreateDynamicObject(12947, 1692.52, -4941.93, 3.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(6959, 1595.21, -5172.47, 3.55,   -0.25, 0.00, -1.00);
	CreateDynamicObject(6959, 1636.31, -5172.90, 3.51,   -0.25, 0.00, -0.46);
	CreateDynamicObject(6959, 1649.75, -5174.21, 3.51,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1589.62, -5227.96, 3.84,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1630.96, -5232.47, 3.86,   0.00, -0.10, 0.00);
	CreateDynamicObject(6959, 1672.30, -5232.47, 3.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1713.63, -5232.47, 3.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1751.05, -5232.47, 3.85,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1741.28, -5257.98, 3.82,   0.00, 0.00, -38.04);
	CreateDynamicObject(6959, 1713.58, -5272.39, 3.84,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1731.15, -5268.07, 3.83,   0.00, 0.00, -58.62);
	CreateDynamicObject(6959, 1672.30, -5272.47, 3.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1630.96, -5272.47, 3.86,   0.00, -0.10, 0.00);
	CreateDynamicObject(6959, 1589.62, -5267.96, 3.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1702.76, -5277.17, 3.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1661.41, -5274.83, 3.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1620.05, -5274.51, 3.86,   0.00, 0.00, 0.00);
	CreateDynamicObject(19381, 1694.46, -5159.29, 3.79,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1694.46, -5168.93, 3.79,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1694.46, -5178.58, 3.79,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1694.46, -5188.22, 3.79,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1704.99, -5188.20, 3.79,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1704.97, -5159.29, 3.79,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1704.97, -5168.93, 3.79,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1704.97, -5178.56, 3.79,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1711.65, -5156.63, 3.71,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1715.46, -5165.22, 3.71,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1715.46, -5174.83, 3.71,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1715.46, -5184.47, 3.71,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1715.46, -5193.22, 3.73,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1694.46, -5193.22, 3.71,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1704.99, -5193.22, 3.71,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1725.96, -5188.32, 3.79,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1725.90, -5178.68, 3.79,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1725.90, -5169.05, 3.79,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1725.96, -5166.83, 3.71,   0.00, 90.00, 0.00);
	CreateDynamicObject(6959, 1168.47, -4853.45, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1168.47, -4853.41, 9.02,   0.00, 0.00, 0.00);
	CreateDynamicObject(3612, 1177.23, -4864.89, -1.76,   0.00, 180.00, 0.00);
	CreateDynamicObject(3612, 1177.23, -4847.89, -1.74,   0.00, 180.00, 0.00);
	CreateDynamicObject(3612, 1166.21, -4843.25, -1.75,   0.00, 180.00, 90.00);
	CreateDynamicObject(3612, 1155.57, -4864.89, -1.72,   0.00, 180.00, 0.00);
	CreateDynamicObject(3612, 1155.57, -4847.89, -1.74,   0.00, 180.00, 0.00);
	CreateDynamicObject(3612, 1177.89, -4869.72, -1.75,   0.00, 180.00, 90.00);
	CreateDynamicObject(6959, 1156.80, -4893.80, 0.16,   0.00, -10.00, 90.00);
	CreateDynamicObject(12814, 1631.70, -4896.31, 3.33,   0.00, 0.00, -90.00);
	CreateDynamicObject(6959, 1760.28, -4897.38, 3.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1680.97, -4896.62, 3.74,   0.00, 0.00, -90.00);
	CreateDynamicObject(12814, 1632.03, -4925.17, 3.62,   0.00, 0.00, -90.00);
	CreateDynamicObject(12814, 1705.95, -4981.30, 3.55,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1391.88, -4969.13, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1358.48, -4969.34, 3.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1407.36, -5049.94, 4.02,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1366.24, -5049.54, 3.79,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1325.10, -5049.62, 3.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1350.63, -5006.93, 3.70,   0.00, -0.48, 0.00);
	CreateDynamicObject(6959, 1313.70, -5009.92, 3.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1317.65, -4970.22, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(18850, 1324.86, -4992.30, -1.24,   0.00, 0.00, 0.00);
	CreateDynamicObject(7096, 1344.90, -4997.17, 8.97,   0.00, 0.00, -180.00);
	CreateDynamicObject(12814, 1427.60, -4972.44, 3.62,   0.00, 0.00, 180.00);
	CreateDynamicObject(12814, 1457.37, -4972.60, 3.54,   0.00, 0.00, 180.00);
	CreateDynamicObject(12814, 1410.03, -4972.43, -10.76,   0.00, 800.00, 180.00);
	CreateDynamicObject(12814, 1379.31, -4935.62, 3.62,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1379.31, -4952.71, -10.78,   0.00, 800.00, -90.00);
	CreateDynamicObject(12814, 1429.31, -4953.19, -10.78,   0.00, 800.00, -90.00);
	CreateDynamicObject(12814, 1329.40, -4935.63, 3.64,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1329.40, -4905.72, 3.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1329.40, -4875.72, 3.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1329.44, -4845.74, 3.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1379.31, -4875.72, 3.63,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1379.31, -4905.72, 3.63,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1379.31, -4855.49, 3.56,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1363.14, -4840.41, 3.62,   0.00, 0.00, 99.42);
	CreateDynamicObject(12814, 1429.28, -4892.85, 3.53,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1428.93, -4872.06, 3.47,   0.00, 0.00, 78.00);
	CreateDynamicObject(12814, 1427.26, -4857.96, 3.59,   0.00, 0.00, 84.12);
	CreateDynamicObject(12814, 1443.52, -4895.18, 3.61,   0.00, 0.00, 90.00);
	CreateDynamicObject(6959, 1207.11, -4879.35, 3.83,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1207.10, -4808.97, 3.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1262.77, -4922.73, 3.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1212.81, -4923.73, 3.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1163.06, -4923.70, 4.17,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1113.43, -4923.68, 4.21,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1123.61, -4883.69, 4.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1124.38, -4845.58, 3.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1128.52, -4963.67, 3.85,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1098.56, -4963.66, 3.84,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1128.39, -5013.69, 3.83,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1129.37, -5063.69, 3.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1099.61, -5062.78, 3.77,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1262.82, -4892.75, 3.69,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1262.69, -4862.77, 3.68,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1242.78, -4873.91, 3.63,   0.00, 0.00, 180.00);
	CreateDynamicObject(12814, 1224.18, -4923.92, 3.59,   0.00, 0.00, 180.24);
	CreateDynamicObject(12814, 1793.06, -4772.27, 3.42,   0.00, 0.00, 184.14);
	CreateDynamicObject(12814, 1786.59, -4758.16, 3.86,   0.00, 0.00, 184.14);
	CreateDynamicObject(12814, 1765.45, -4749.81, 3.86,   0.00, 0.00, 45.00);
	CreateDynamicObject(12814, 1724.26, -4733.59, 3.80,   0.00, 0.00, 81.78);
	CreateDynamicObject(12814, 1727.58, -4704.00, 3.81,   0.00, 0.00, 81.78);
	CreateDynamicObject(12814, 1676.08, -4730.51, 3.85,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1626.13, -4727.94, 3.84,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1626.15, -4697.95, 3.86,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1676.13, -4700.59, 3.82,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1636.53, -4747.25, -20.76,   80.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1626.03, -4668.02, 3.86,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1581.59, -4736.49, 3.85,   0.00, 0.00, 107.40);
	CreateDynamicObject(12814, 1576.12, -4721.48, 3.86,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1576.05, -4691.48, 3.86,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1576.07, -4661.55, 3.60,   0.00, 0.00, 90.00);
	CreateDynamicObject(19365, 1607.44, -4742.65, 6.54,   0.00, 0.00, 90.00);
	CreateDynamicObject(19438, 1608.96, -4741.91, 6.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(19394, 1610.07, -4740.08, 6.54,   0.00, 0.00, -45.00);
	CreateDynamicObject(19438, 1611.91, -4738.97, 6.54,   0.00, 0.00, 90.00);
	CreateDynamicObject(18767, 1611.32, -4746.29, -0.13,   0.00, 0.00, 225.00);
	CreateDynamicObject(18767, 1612.03, -4745.64, -0.13,   0.00, 0.00, 225.00);
	CreateDynamicObject(19463, 1608.96, -4737.91, 3.05,   0.00, 0.00, 0.00);
	CreateDynamicObject(19371, 1610.10, -4740.00, 3.05,   0.00, 0.00, -45.00);
	CreateDynamicObject(19371, 1611.11, -4738.97, 3.05,   0.00, 0.00, 90.00);
	CreateDynamicObject(3858, 1598.54, -4742.67, 5.38,   0.00, 0.00, 45.00);
	CreateDynamicObject(6959, 1613.68, -4782.61, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1654.83, -4787.14, 3.72,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1696.16, -4787.67, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1722.73, -4788.32, 3.72,   0.00, 0.00, 0.00);
	CreateDynamicObject(19463, 1612.63, -4734.06, 3.05,   0.00, 0.00, 0.00);
	CreateDynamicObject(19457, 1612.62, -4734.06, 6.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(19454, 1610.78, -4734.07, 4.72,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1607.29, -4737.74, 4.72,   0.00, 90.00, 0.00);
	CreateDynamicObject(19435, 1609.63, -4739.38, 4.73,   0.00, 90.00, 45.00);
	CreateDynamicObject(19454, 1603.79, -4737.74, 4.72,   0.00, 90.00, 0.00);
	CreateDynamicObject(12814, 1599.17, -4787.80, 3.31,   0.00, 0.00, 2.82);
	CreateDynamicObject(12814, 1639.12, -4817.11, 3.52,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1689.10, -4817.14, 3.71,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1731.98, -4784.06, 3.57,   0.00, 0.00, 59.40);
	CreateDynamicObject(982, 1674.87, -4925.13, 4.45,   0.00, 0.00, 0.00);
	CreateDynamicObject(982, 1674.87, -4943.52, 4.45,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1656.93, -4902.26, -16.87,   0.00, 90.00, 0.00);
	CreateDynamicObject(12814, 1743.74, -4837.78, 3.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1742.49, -4809.98, 3.68,   0.00, 0.00, 117.42);
	CreateDynamicObject(1676, 1261.38, -4787.49, 5.47,   0.00, 0.00, 0.00);
	CreateDynamicObject(1676, 1263.94, -4787.33, 5.47,   0.00, 0.00, 0.00);
	CreateDynamicObject(1676, 1267.43, -4787.33, 5.47,   0.00, 0.00, 0.00);
	CreateDynamicObject(1676, 1269.99, -4787.33, 5.47,   0.00, 0.00, 0.00);
	CreateDynamicObject(1676, 1269.99, -4798.29, 5.47,   0.00, 0.00, 0.00);
	CreateDynamicObject(1676, 1267.43, -4798.29, 5.47,   0.00, 0.00, 0.00);
	CreateDynamicObject(1676, 1263.94, -4798.29, 5.47,   0.00, 0.00, 0.00);
	CreateDynamicObject(1676, 1261.38, -4798.29, 5.47,   0.00, 0.00, 0.00);
	CreateDynamicObject(19381, 1507.39, -4992.19, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1507.39, -4982.54, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1507.39, -4972.93, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1507.39, -4963.30, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1507.39, -4953.65, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1507.39, -4944.02, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1507.39, -4934.39, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1507.39, -4924.75, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1507.39, -4915.13, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1507.39, -4905.51, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1496.95, -4905.51, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1488.79, -4901.53, 3.88,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1501.57, -4913.95, 3.80,   0.00, 90.00, 21.12);
	CreateDynamicObject(19381, 1505.06, -4922.90, 3.80,   0.00, 90.00, 21.12);
	CreateDynamicObject(19381, 1507.39, -5001.77, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1507.39, -5011.41, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1507.39, -5021.06, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1496.89, -5021.06, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1489.92, -5021.06, 3.80,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1497.39, -5015.69, 3.80,   0.00, 90.00, -33.54);
	CreateDynamicObject(19381, 1503.41, -5008.14, 3.80,   0.00, 90.00, -33.54);
	CreateDynamicObject(19381, 1506.72, -4996.88, 3.80,   0.00, 90.00, -1.80);
	CreateDynamicObject(12814, 1534.57, -4924.51, 3.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1591.22, -4793.44, 3.34,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1587.21, -4802.23, 2.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1574.32, -4837.73, 3.65,   0.00, 0.00, -33.84);
	CreateDynamicObject(12814, 1602.67, -4852.27, 3.58,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1574.75, -4869.54, 3.60,   0.00, 0.00, 122.82);
	CreateDynamicObject(12814, 1550.47, -4894.41, 3.57,   0.00, 0.00, 151.92);
	CreateDynamicObject(19435, 1407.51, -4842.33, 3.74,   -14.00, 90.00, 90.00);
	CreateDynamicObject(19435, 1406.59, -4844.80, 3.50,   0.00, 104.30, 180.00);
	CreateDynamicObject(12814, 1436.56, -4880.78, 3.61,   0.00, 0.00, 125.40);
	CreateDynamicObject(19454, 1607.28, -4728.10, 4.72,   0.00, 90.00, 0.00);
	CreateDynamicObject(19463, 1612.63, -4724.43, 3.05,   0.00, 0.00, 0.00);
	CreateDynamicObject(19457, 1612.62, -4724.43, 6.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(19463, 1607.73, -4719.70, 3.05,   0.00, 0.00, 90.00);
	CreateDynamicObject(19457, 1607.73, -4719.70, 6.54,   0.00, 0.00, 90.00);
	CreateDynamicObject(19454, 1610.78, -4724.44, 4.72,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1604.22, -4721.56, 4.72,   0.00, 90.00, 90.00);
	CreateDynamicObject(19454, 1603.85, -4728.12, 4.72,   0.00, 90.00, 0.00);
	CreateDynamicObject(19438, 1590.49, -4742.65, 6.54,   0.00, 0.00, 90.00);
	CreateDynamicObject(19463, 1604.24, -4742.65, 3.05,   0.00, 0.00, 90.00);
	CreateDynamicObject(19463, 1594.62, -4742.65, 3.04,   0.00, 0.00, 90.00);
	CreateDynamicObject(3859, 1574.84, -4739.94, 5.36,   0.00, 0.00, 17.00);
	CreateDynamicObject(19463, 1574.89, -4737.77, 3.04,   0.00, 0.00, 0.00);
	CreateDynamicObject(19463, 1574.89, -4728.14, 3.04,   0.00, 0.00, 0.00);
	CreateDynamicObject(19454, 1594.60, -4721.56, 4.72,   0.00, 90.00, 90.00);
	CreateDynamicObject(19463, 1598.09, -4719.70, 3.05,   0.00, 0.00, 90.00);
	CreateDynamicObject(19371, 1574.89, -4721.72, 3.05,   0.00, 0.00, 0.00);
	CreateDynamicObject(19463, 1598.10, -4718.00, 4.28,   0.00, -75.00, 90.00);
	CreateDynamicObject(19454, 1600.35, -4728.12, 4.72,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1596.84, -4728.12, 4.72,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1593.35, -4728.12, 4.72,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1589.85, -4728.12, 4.72,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1600.35, -4737.74, 4.72,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1596.86, -4737.74, 4.72,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1593.35, -4737.72, 4.72,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1589.85, -4737.72, 4.70,   0.00, 90.00, 0.00);
	CreateDynamicObject(12814, 1227.85, -4874.21, -11.09,   0.00, 90.00, 180.00);
	CreateDynamicObject(12814, 1226.36, -4884.16, -0.63,   10.00, 0.00, 180.24);
	CreateDynamicObject(736, 1402.16, -4824.26, 15.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(643, 1869.25, -5037.66, 1.53,   0.00, 0.00, -58.20);
	CreateDynamicObject(642, 1870.68, -5041.16, 2.53,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1339.05, -4790.77, 3.76,   0.00, 0.00, 180.00);
	CreateDynamicObject(6959, 1368.90, -4791.29, 3.62,   0.00, 0.00, 180.00);
	CreateDynamicObject(12814, 1357.39, -4825.63, 3.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(3620, 1968.77, -5110.64, 16.79,   0.00, 0.00, 180.00);
	CreateDynamicObject(3623, 1948.29, -5139.21, 7.73,   0.00, 0.00, 0.00);
	CreateDynamicObject(3574, 1968.33, -5140.43, 6.61,   0.00, 0.00, 0.00);
	CreateDynamicObject(3625, 1982.72, -5141.19, 6.48,   0.00, 0.00, 90.00);
	CreateDynamicObject(3406, 1971.02, -5222.14, 0.73,   0.00, 15.00, -90.00);
	CreateDynamicObject(3406, 1968.22, -5227.41, -0.32,   0.00, 0.00, 0.00);
	CreateDynamicObject(3406, 1959.42, -5227.41, -0.32,   0.00, 0.00, 0.00);
	CreateDynamicObject(3406, 1974.72, -5227.41, -0.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(3406, 1983.52, -5227.41, -0.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(3406, 1986.37, -5232.29, -0.31,   0.00, 0.00, 90.00);
	CreateDynamicObject(3406, 1976.38, -5232.29, -0.31,   0.00, 0.00, 90.00);
	CreateDynamicObject(3406, 1965.52, -5232.29, -0.32,   0.00, 0.00, 90.00);
	CreateDynamicObject(3406, 1955.57, -5232.29, -0.32,   0.00, 0.00, 90.00);
	CreateDynamicObject(3406, 1976.38, -5241.09, -0.31,   0.00, 0.00, 90.00);
	CreateDynamicObject(3406, 1976.38, -5249.89, -0.31,   0.00, 0.00, 90.00);
	CreateDynamicObject(3406, 1982.31, -5262.58, -0.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(3406, 1991.10, -5262.58, -0.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(3406, 1992.30, -5236.21, -0.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(3406, 1955.57, -5241.09, -0.32,   0.00, 0.00, 90.00);
	CreateDynamicObject(9697, 1931.07, -5130.94, 3.94,   0.00, 0.00, -90.00);
	CreateDynamicObject(12814, 1879.09, -5239.63, 3.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(3406, 1976.38, -5258.70, -0.31,   0.00, 0.00, 90.00);
	CreateDynamicObject(19381, 1489.92, -5030.67, 3.80,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1500.42, -5030.67, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1489.92, -5040.30, 3.80,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1489.92, -5049.88, 3.80,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1489.92, -5059.50, 3.80,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1489.92, -5069.12, 3.80,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1489.92, -5078.75, 3.80,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1489.92, -5088.36, 3.80,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1491.06, -5097.46, 3.80,   0.00, 90.00, 6.84);
	CreateDynamicObject(19381, 1492.07, -5102.29, 3.71,   0.00, 90.00, 15.90);
	CreateDynamicObject(19381, 1500.42, -5088.36, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1500.42, -5078.75, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1500.42, -5069.12, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1500.42, -5059.50, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1500.42, -5049.88, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1500.42, -5040.30, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1500.42, -5097.99, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1498.71, -5101.45, 3.87,   0.00, 90.00, -53.52);
	CreateDynamicObject(19381, 1493.17, -5105.65, 3.77,   0.00, 90.00, -52.86);
	CreateDynamicObject(12814, 1534.57, -4874.83, 3.57,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1544.59, -4857.05, 3.66,   0.00, 0.00, -90.00);
	CreateDynamicObject(19381, 1496.28, -4803.38, 3.80,   0.00, 90.00, -30.00);
	CreateDynamicObject(19381, 1505.21, -4808.72, 3.80,   0.00, 90.00, -30.00);
	CreateDynamicObject(12814, 1526.12, -4709.67, 3.64,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1526.08, -4679.76, 3.60,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1526.12, -4649.79, 3.62,   0.00, 0.00, 90.00);
	CreateDynamicObject(19381, 1517.81, -4915.13, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1517.81, -5021.06, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1517.81, -5001.77, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1517.81, -5011.41, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1517.81, -4992.19, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1517.81, -4982.54, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1517.81, -4972.93, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1517.81, -4963.30, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1517.81, -4953.65, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1517.81, -4944.02, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1517.81, -4934.39, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1517.81, -4924.75, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1517.81, -4905.51, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1517.80, -4895.89, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1517.80, -4847.79, 3.80,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1517.80, -4857.41, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1517.80, -4867.03, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1517.80, -4876.65, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1517.80, -4886.27, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1507.39, -4847.79, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1507.39, -4857.41, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1507.39, -4867.03, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1507.39, -4876.65, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1507.39, -4886.27, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1507.39, -4895.89, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1496.95, -4847.79, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1496.95, -4857.41, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1496.95, -4867.03, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1496.95, -4876.65, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1496.95, -4886.27, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1496.95, -4895.89, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1486.49, -4843.83, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1486.45, -4853.45, 3.92,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1486.45, -4863.05, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1486.45, -4872.67, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1486.45, -4882.31, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1488.07, -4891.93, 3.88,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1478.28, -4863.11, 3.89,   0.00, 90.00, 3.18);
	CreateDynamicObject(19381, 1483.07, -4872.67, 3.89,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1475.95, -4853.75, 3.89,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1475.99, -4844.13, 3.89,   0.00, 90.00, 0.00);
	CreateDynamicObject(3749, 1501.13, -4961.68, 9.45,   0.00, 0.00, 90.00);
	CreateDynamicObject(736, 1487.28, -4924.20, 15.36,   0.00, 0.00, 0.00);
	CreateDynamicObject(736, 1487.35, -4947.02, 15.36,   0.00, 0.00, 0.00);
	CreateDynamicObject(736, 1487.90, -4977.08, 15.36,   0.00, 0.00, 0.00);
	CreateDynamicObject(736, 1487.94, -4998.97, 15.36,   0.00, 0.00, 0.00);
	CreateDynamicObject(19381, 1469.31, -4851.40, 3.90,   0.00, 90.00, 32.28);
	CreateDynamicObject(19381, 1465.49, -4844.01, 3.89,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1457.48, -4840.07, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1447.15, -4833.77, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1436.64, -4828.05, 3.90,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1426.18, -4826.48, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1415.68, -4823.70, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1405.17, -4824.25, 3.80,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1436.68, -4827.45, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1447.15, -4827.45, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1457.66, -4827.45, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1457.56, -4837.09, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1468.14, -4827.45, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1468.04, -4837.08, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19471, 1275.63, -5026.95, 13.12,   0.00, 0.00, 90.00);
	CreateDynamicObject(19471, 1268.87, -5027.02, 13.12,   0.00, 0.00, 90.00);
	CreateDynamicObject(19471, 1261.75, -5026.95, 13.12,   0.00, 0.00, 90.00);
	CreateDynamicObject(19471, 1186.91, -5027.20, 13.12,   0.00, 0.00, 50.00);
	CreateDynamicObject(19471, 1182.37, -5023.31, 13.12,   0.00, 0.00, 46.94);
	CreateDynamicObject(19471, 1177.96, -5019.08, 13.12,   0.00, 0.00, 46.94);
	CreateDynamicObject(982, 1523.18, -5013.09, 4.56,   0.00, 0.00, 0.00);
	CreateDynamicObject(7525, 1345.39, -4906.77, 7.04,   0.00, 0.00, 0.00);
	CreateDynamicObject(6294, 1436.71, -5165.27, 9.21,   0.00, 0.00, 90.00);
	CreateDynamicObject(6286, 1440.35, -5123.46, 9.05,   0.00, 0.00, 90.00);
	CreateDynamicObject(6285, 1404.43, -5098.43, 9.44,   0.00, 0.00, 180.54);
	CreateDynamicObject(19381, 1445.11, -5097.17, 3.83,   0.00, 90.00, 0.00);
	CreateDynamicObject(3484, 1486.50, -5175.99, 10.57,   0.00, 0.00, -90.00);
	CreateDynamicObject(3466, 1655.86, -5178.10, 6.36,   0.00, 0.00, 90.00);
	CreateDynamicObject(3466, 1629.19, -5178.10, 6.36,   0.00, 0.00, 90.00);
	CreateDynamicObject(3466, 1602.53, -5178.10, 6.36,   0.00, 0.00, 90.00);
	CreateDynamicObject(3466, 1575.86, -5178.09, 6.36,   0.00, 0.00, 90.00);
	CreateDynamicObject(8537, 1725.15, -5212.09, 11.05,   0.00, 0.00, 90.00);
	CreateDynamicObject(8530, 1570.29, -5293.58, 8.67,   0.00, 0.00, -45.00);
	CreateDynamicObject(8530, 1570.32, -5240.75, 8.67,   0.00, 0.00, -130.00);
	CreateDynamicObject(12943, 1280.71, -4820.18, 3.81,   0.00, 0.00, 90.00);
	CreateDynamicObject(12942, 1280.71, -4820.18, 3.81,   0.00, 0.00, 90.00);
	CreateDynamicObject(14826, 1278.95, -4824.00, 4.51,   0.00, 0.00, -75.48);
	CreateDynamicObject(925, 1283.18, -4827.05, 4.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(17951, 1276.84, -4825.16, 5.88,   0.00, 0.00, 0.00);
	CreateDynamicObject(9697, 1650.87, -5216.98, 3.94,   0.00, 0.00, 0.00);
	CreateDynamicObject(5871, 1700.83, -5352.39, 7.12,   0.00, 0.00, 180.00);
	CreateDynamicObject(5715, 1674.35, -5352.50, 14.17,   0.00, 0.00, 180.00);
	CreateDynamicObject(5713, 1714.83, -5337.12, 9.90,   0.00, 0.00, 180.00);
	CreateDynamicObject(5714, 1722.36, -5368.54, 6.73,   0.00, 0.00, 180.00);
	CreateDynamicObject(5711, 1642.15, -5370.83, 7.62,   0.00, 0.00, 180.00);
	CreateDynamicObject(5710, 1761.18, -5344.20, 9.47,   0.00, 0.00, 180.00);
	CreateDynamicObject(8841, 1170.18, -4890.99, 6.88,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1264.35, -4952.03, 3.77,   0.00, 0.00, 90.00);
	CreateDynamicObject(19381, 1445.11, -5087.56, 3.83,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1434.64, -5097.04, 3.83,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1434.60, -5087.40, 3.83,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1424.11, -5087.62, 3.83,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1424.15, -5097.15, 3.83,   0.00, 90.00, 0.00);
	CreateDynamicObject(6959, 1368.63, -5105.97, 3.85,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1371.57, -5145.94, 3.86,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1412.88, -5145.41, 3.86,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1409.43, -5105.57, 3.86,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1330.20, -5067.16, -15.99,   90.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1367.19, -5066.97, -15.99,   90.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1315.16, -5054.21, 3.78,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1321.13, -5086.85, -15.99,   90.00, 0.00, 0.00);
	CreateDynamicObject(19381, 1478.63, -4827.46, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1478.54, -4837.08, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1489.12, -4826.90, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1489.05, -4836.53, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1497.70, -4832.26, 3.82,   0.00, 90.00, -28.08);
	CreateDynamicObject(19381, 1505.68, -4839.60, 3.82,   0.00, 90.00, -28.08);
	CreateDynamicObject(19381, 1514.93, -4844.60, 3.82,   0.00, 90.00, -28.08);
	CreateDynamicObject(19381, 1497.01, -4838.21, 3.80,   0.00, 90.00, 0.00);
	CreateDynamicObject(4882, 1474.41, -4813.65, 8.74,   0.00, 0.00, 0.00);
	CreateDynamicObject(19381, 1489.75, -4798.59, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1479.24, -4798.59, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1468.78, -4798.64, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1514.07, -4814.37, 3.80,   0.00, 90.00, -30.00);
	CreateDynamicObject(19381, 1523.08, -4819.76, 3.80,   0.00, 90.00, -30.00);
	CreateDynamicObject(19381, 1532.47, -4824.47, 3.80,   0.00, 90.00, -30.00);
	CreateDynamicObject(19381, 1541.84, -4825.45, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1548.80, -4821.16, 3.80,   0.00, 90.00, 46.86);
	CreateDynamicObject(19381, 1550.37, -4813.27, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1551.44, -4803.62, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1551.44, -4784.41, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1551.44, -4765.36, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1551.44, -4774.93, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1555.24, -4785.51, 3.80,   0.00, 90.00, -7.32);
	CreateDynamicObject(19381, 1556.45, -4776.13, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1556.41, -4766.50, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1556.40, -4756.93, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(12814, 1540.68, -4762.30, 3.86,   0.00, 0.00, 126.36);
	CreateDynamicObject(19381, 1556.40, -4747.37, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(12814, 1540.68, -4762.30, 3.86,   0.00, 0.00, 126.36);
	CreateDynamicObject(19381, 1556.40, -4737.91, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1545.91, -4737.91, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1535.42, -4737.91, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1482.97, -4737.91, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1493.46, -4737.91, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1503.95, -4737.91, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1514.44, -4737.91, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1524.93, -4737.91, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1545.91, -4747.37, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1535.42, -4747.37, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1524.93, -4747.37, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1514.44, -4747.37, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1503.95, -4747.37, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1493.46, -4747.37, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1482.97, -4747.37, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1545.91, -4756.93, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1535.42, -4756.93, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1524.93, -4756.93, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1514.44, -4756.93, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1503.95, -4756.93, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1493.46, -4756.93, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1482.97, -4756.93, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1545.91, -4765.36, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1535.42, -4765.36, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1524.93, -4765.36, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1514.44, -4765.36, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1503.95, -4765.36, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1493.46, -4765.36, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1482.97, -4765.36, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1545.91, -4774.93, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1535.42, -4774.93, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1524.93, -4774.93, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1514.44, -4774.93, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1503.95, -4774.93, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1493.46, -4774.93, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1482.97, -4774.93, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1545.91, -4784.41, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1535.42, -4784.41, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1524.93, -4784.41, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1514.44, -4784.41, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1503.95, -4784.41, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1493.46, -4784.41, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1482.97, -4784.41, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1551.44, -4794.05, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1545.91, -4794.05, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1535.42, -4794.05, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1524.93, -4794.05, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1514.44, -4794.05, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1503.95, -4794.05, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1493.48, -4794.05, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1482.95, -4794.05, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1545.91, -4803.62, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1535.42, -4803.62, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1524.93, -4803.62, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1514.44, -4803.62, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1503.95, -4803.62, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1493.47, -4802.82, 3.79,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1545.91, -4813.27, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1535.42, -4813.27, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1524.93, -4813.27, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1514.44, -4813.27, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1534.98, -4822.63, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1545.49, -4822.92, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1468.78, -4789.08, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1468.78, -4779.53, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1468.78, -4769.93, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1468.78, -4760.57, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1468.78, -4750.96, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1479.24, -4789.08, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1479.24, -4779.53, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1479.24, -4769.93, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1479.24, -4760.57, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1479.24, -4750.96, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(12814, 1597.07, -4911.38, 3.62,   0.00, 0.00, -42.12);
	CreateDynamicObject(12814, 1594.49, -4937.28, 3.63,   0.00, 0.00, -90.00);
	CreateDynamicObject(12814, 1632.01, -4955.17, 3.57,   0.00, 0.00, -90.00);
	CreateDynamicObject(6959, 1657.05, -4942.45, -16.89,   0.00, 90.00, 0.00);
	CreateDynamicObject(12814, 1666.17, -4971.08, 3.49,   0.00, 0.00, -90.00);
	CreateDynamicObject(6959, 1698.37, -4962.25, -16.89,   0.00, 90.00, 90.00);
	CreateDynamicObject(6959, 1700.93, -4962.26, -16.89,   0.00, 90.00, 90.00);
	CreateDynamicObject(12814, 1626.43, -4995.11, 3.43,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1666.15, -4990.11, 3.51,   0.00, 0.00, -90.00);
	CreateDynamicObject(12814, 1626.43, -5045.00, 3.22,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1537.46, -4946.27, 3.45,   0.00, 0.00, 0.00);
	CreateDynamicObject(6965, 1651.59, -5244.98, 7.62,   0.00, 0.00, 0.00);
	CreateDynamicObject(6964, 1651.59, -5244.98, 3.63,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1626.28, -5094.83, 3.44,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1626.45, -5144.75, 3.48,   0.00, 0.00, 0.00);
	CreateDynamicObject(9361, 1958.63, -5214.53, 6.33,   0.00, 0.00, -225.00);
	CreateDynamicObject(9362, 1960.61, -5214.77, 4.73,   0.00, 0.00, 0.00);
	CreateDynamicObject(8650, 1935.33, -5168.28, 4.99,   0.00, 0.00, 0.00);
	CreateDynamicObject(8650, 1935.33, -5137.78, 4.99,   0.00, 0.00, 0.00);
	CreateDynamicObject(8650, 1935.33, -5107.31, 4.99,   0.00, 0.00, 0.00);
	CreateDynamicObject(8650, 1935.32, -5093.31, 4.99,   0.00, 0.00, 0.00);
	CreateDynamicObject(3037, 1261.56, -5027.87, 14.66,   0.00, 0.00, 90.00);
	CreateDynamicObject(3037, 1271.72, -5027.87, 14.66,   0.00, 0.00, 90.00);
	CreateDynamicObject(3037, 1278.99, -5027.87, 14.66,   90.00, 0.00, 90.00);
	CreateDynamicObject(16280, 1811.56, -5276.73, 7.49,   0.00, 0.00, 146.04);
	CreateDynamicObject(17005, 1837.55, -5238.73, 11.59,   0.00, 0.00, -34.50);
	CreateDynamicObject(3425, 1824.14, -5198.36, 15.15,   0.00, 0.00, -90.00);
	CreateDynamicObject(12814, 1820.18, -5204.01, 3.86,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1799.20, -5177.46, 3.82,   0.00, 0.00, 0.18);
	CreateDynamicObject(12814, 1813.58, -5183.46, 3.74,   0.00, 0.00, 48.66);
	CreateDynamicObject(12814, 1801.27, -5227.44, 3.82,   0.00, 0.00, 0.18);
	CreateDynamicObject(12814, 1819.98, -5254.01, 3.86,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1819.95, -5304.00, 3.51,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1797.10, -5277.46, 3.60,   0.00, 0.00, 0.18);
	CreateDynamicObject(12814, 1777.29, -5295.07, 3.63,   0.00, 0.00, -36.18);
	CreateDynamicObject(12814, 1738.24, -5320.30, 3.59,   0.00, 0.00, -71.82);
	CreateDynamicObject(12814, 1790.20, -5327.47, 3.46,   0.00, 0.00, 0.18);
	CreateDynamicObject(12814, 1760.29, -5345.76, 3.56,   0.00, 0.00, 0.18);
	CreateDynamicObject(12814, 1790.38, -5377.45, 3.65,   0.00, 0.00, 0.18);
	CreateDynamicObject(3409, 1834.81, -5261.52, 4.24,   0.00, 0.00, -31.02);
	CreateDynamicObject(855, 1796.45, -5199.53, 5.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(3409, 1831.90, -5265.79, 4.24,   0.00, 0.00, -31.02);
	CreateDynamicObject(3409, 1829.23, -5269.96, 4.24,   0.00, 0.00, -31.02);
	CreateDynamicObject(3409, 1825.57, -5267.65, 4.24,   0.00, 0.00, -31.02);
	CreateDynamicObject(3409, 1828.57, -5263.24, 4.24,   0.00, 0.00, -31.02);
	CreateDynamicObject(3409, 1830.92, -5259.09, 4.24,   0.00, 0.00, -31.02);
	CreateDynamicObject(3261, 1829.95, -5259.76, 3.84,   0.00, 0.00, -31.02);
	CreateDynamicObject(3261, 1828.32, -5262.36, 3.84,   0.00, 0.00, -31.02);
	CreateDynamicObject(3261, 1826.77, -5264.97, 3.84,   0.00, 0.00, -31.02);
	CreateDynamicObject(3261, 1825.22, -5267.62, 3.84,   0.00, 0.00, -31.02);
	CreateDynamicObject(3261, 1823.67, -5270.27, 3.84,   0.00, 0.00, -31.02);
	CreateDynamicObject(3261, 1828.00, -5272.82, 3.84,   0.00, 0.00, -31.02);
	CreateDynamicObject(3261, 1829.56, -5270.18, 3.84,   0.00, 0.00, -31.02);
	CreateDynamicObject(3261, 1831.13, -5267.55, 3.84,   0.00, 0.00, -31.02);
	CreateDynamicObject(3261, 1832.70, -5264.92, 3.84,   0.00, 0.00, -31.02);
	CreateDynamicObject(3261, 1834.29, -5262.30, 3.84,   0.00, 0.00, -31.02);
	CreateDynamicObject(855, 1796.66, -5196.00, 5.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, 1797.01, -5193.08, 5.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, 1801.98, -5186.34, 5.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, 1796.24, -5187.58, 5.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, 1794.81, -5191.75, 5.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, 1794.72, -5196.24, 5.39,   0.00, 0.00, -0.18);
	CreateDynamicObject(855, 1799.71, -5200.27, 5.39,   0.00, 0.00, -0.18);
	CreateDynamicObject(855, 1800.93, -5196.37, 5.39,   0.00, 0.00, -0.18);
	CreateDynamicObject(855, 1801.04, -5191.43, 5.39,   0.00, 0.00, -0.18);
	CreateDynamicObject(855, 1801.04, -5191.43, 5.39,   0.00, 0.00, -0.18);
	CreateDynamicObject(855, 1798.89, -5183.24, 5.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, 1798.96, -5188.10, 5.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, 1796.97, -5182.47, 5.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, 1801.82, -5181.93, 5.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, 1799.54, -5180.27, 5.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, 1796.31, -5178.00, 5.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, 1794.28, -5183.40, 5.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, 1793.95, -5187.83, 5.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, 1803.93, -5187.63, 5.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, 1803.84, -5181.62, 5.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, 1802.61, -5177.69, 5.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, 1799.18, -5175.98, 5.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, 1796.85, -5174.93, 5.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, 1802.53, -5174.06, 5.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, 1799.46, -5172.59, 5.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, 1796.55, -5171.87, 5.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, 1794.75, -5179.55, 5.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, 1794.88, -5176.09, 5.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, 1804.55, -5190.35, 5.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, 1804.31, -5196.01, 5.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, 1803.94, -5202.08, 5.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, 1799.21, -5202.35, 5.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, 1795.90, -5201.83, 5.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, 1795.89, -5170.13, 5.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(855, 1795.86, -5166.38, 5.39,   0.00, 0.00, 0.12);
	CreateDynamicObject(855, 1795.82, -5163.29, 5.39,   0.00, 0.00, 0.12);
	CreateDynamicObject(855, 1795.80, -5159.70, 5.39,   0.00, 0.00, 0.12);
	CreateDynamicObject(855, 1799.37, -5167.98, 5.39,   0.00, 0.00, 0.12);
	CreateDynamicObject(855, 1798.53, -5166.05, 5.39,   0.00, 0.00, 0.12);
	CreateDynamicObject(855, 1798.59, -5162.95, 5.39,   0.00, 0.00, 0.18);
	CreateDynamicObject(855, 1795.11, -5162.90, 5.39,   0.00, 0.00, 0.18);
	CreateDynamicObject(855, 1801.78, -5170.55, 5.39,   0.00, 0.00, 0.18);
	CreateDynamicObject(855, 1801.20, -5167.56, 5.39,   0.00, 0.00, 0.18);
	CreateDynamicObject(855, 1801.49, -5164.38, 5.39,   0.00, 0.00, 0.18);
	CreateDynamicObject(855, 1803.99, -5165.85, 5.39,   0.00, 0.00, -1.50);
	CreateDynamicObject(827, 1798.36, -5213.80, 7.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(827, 1803.28, -5212.99, 7.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(827, 1802.80, -5218.29, 7.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(827, 1798.50, -5219.37, 7.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(827, 1801.33, -5223.72, 7.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(827, 1800.45, -5216.90, 7.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(827, 1798.37, -5224.42, 7.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(827, 1799.70, -5228.05, 7.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(827, 1802.98, -5228.12, 7.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(827, 1797.99, -5231.75, 7.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(827, 1802.15, -5232.94, 7.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(827, 1805.02, -5223.77, 7.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(827, 1797.21, -5236.50, 7.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(827, 1800.72, -5236.48, 7.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(827, 1804.38, -5236.35, 7.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(827, 1794.87, -5214.52, 7.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(827, 1794.67, -5219.22, 7.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(827, 1796.05, -5224.38, 7.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(827, 1794.77, -5228.66, 7.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(827, 1794.67, -5234.26, 7.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(827, 1794.15, -5238.99, 7.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(827, 1798.42, -5241.25, 7.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(827, 1801.59, -5241.06, 7.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(827, 1804.38, -5241.80, 7.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(818, 1795.66, -5253.69, 7.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(818, 1793.82, -5258.93, 7.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(818, 1791.29, -5264.09, 7.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(818, 1788.38, -5269.84, 7.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(818, 1785.79, -5274.02, 7.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(818, 1784.08, -5278.17, 7.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(818, 1781.86, -5282.18, 7.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(818, 1785.73, -5282.99, 7.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(818, 1787.71, -5287.17, 7.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(818, 1790.14, -5283.66, 7.29,   0.00, 0.00, 0.00);
	CreateDynamicObject(818, 1788.30, -5279.28, 7.29,   0.00, 0.00, 0.06);
	CreateDynamicObject(818, 1793.75, -5281.03, 7.29,   0.00, 0.00, 0.24);
	CreateDynamicObject(818, 1792.08, -5276.82, 7.29,   0.00, 0.00, 0.24);
	CreateDynamicObject(818, 1788.83, -5274.80, 7.29,   0.00, 0.00, 0.24);
	CreateDynamicObject(818, 1792.05, -5271.37, 7.29,   0.00, 0.00, 0.30);
	CreateDynamicObject(818, 1796.21, -5275.29, 7.29,   0.00, 0.00, 0.30);
	CreateDynamicObject(818, 1793.78, -5267.66, 7.29,   0.00, 0.00, 0.30);
	CreateDynamicObject(818, 1794.78, -5272.91, 7.29,   0.00, 0.00, 0.30);
	CreateDynamicObject(818, 1798.64, -5269.19, 7.29,   0.00, 0.00, 0.30);
	CreateDynamicObject(818, 1801.27, -5272.50, 7.29,   0.00, 0.00, 0.30);
	CreateDynamicObject(818, 1796.30, -5264.05, 7.29,   0.00, 0.00, 0.30);
	CreateDynamicObject(818, 1800.50, -5264.37, 7.29,   0.00, 0.00, 0.30);
	CreateDynamicObject(818, 1802.78, -5268.43, 7.29,   0.00, 0.00, 0.30);
	CreateDynamicObject(818, 1798.36, -5259.71, 7.29,   0.00, 0.00, 0.30);
	CreateDynamicObject(818, 1797.95, -5256.04, 7.29,   0.00, 0.00, 0.30);
	CreateDynamicObject(818, 1801.66, -5257.50, 7.29,   0.00, 0.00, 0.54);
	CreateDynamicObject(818, 1805.47, -5259.96, 7.29,   0.00, 0.00, 0.54);
	CreateDynamicObject(818, 1803.21, -5262.01, 7.29,   0.00, 0.00, 0.54);
	CreateDynamicObject(818, 1805.77, -5264.64, 7.29,   0.00, 0.00, 0.54);
	CreateDynamicObject(818, 1798.92, -5276.41, 7.29,   0.00, 0.00, 0.54);
	CreateDynamicObject(818, 1797.14, -5280.65, 7.29,   0.00, 0.00, 0.54);
	CreateDynamicObject(818, 1795.56, -5284.94, 7.29,   0.00, 0.00, 0.54);
	CreateDynamicObject(818, 1792.33, -5288.31, 7.29,   0.00, 0.00, 0.54);
	CreateDynamicObject(19448, 1821.17, -5267.97, 5.55,   0.00, 0.00, -31.68);
	CreateDynamicObject(19448, 1831.35, -5252.74, 5.55,   0.00, 0.00, -31.68);
	CreateDynamicObject(8657, 1795.87, -5301.26, 4.97,   0.00, 0.00, -116.40);
	CreateDynamicObject(8657, 1783.09, -5295.02, 4.97,   0.00, 0.00, -116.40);
	CreateDynamicObject(8657, 1777.49, -5275.22, 4.97,   0.00, 0.00, -210.12);
	CreateDynamicObject(8657, 1787.76, -5246.60, 4.97,   0.00, 0.00, -189.12);
	CreateDynamicObject(8657, 1790.07, -5215.94, 4.97,   0.00, 0.00, -179.58);
	CreateDynamicObject(8657, 1789.84, -5184.96, 4.97,   0.00, 0.00, -179.58);
	CreateDynamicObject(8657, 1789.80, -5169.88, 4.97,   0.00, 0.00, -179.58);
	CreateDynamicObject(8657, 1802.47, -5163.46, 4.97,   0.00, 0.00, -124.86);
	CreateDynamicObject(8657, 1814.12, -5171.54, 4.97,   0.00, 0.00, -124.80);
	CreateDynamicObject(8657, 1834.58, -5195.36, 4.97,   0.00, 0.00, -180.06);
	CreateDynamicObject(8657, 1834.57, -5202.39, 4.97,   0.00, 0.00, -180.06);
	CreateDynamicObject(8657, 1850.46, -5217.70, 4.97,   0.00, 0.00, -271.26);
	CreateDynamicObject(8657, 1881.29, -5218.37, 4.97,   0.00, 0.00, -271.26);
	CreateDynamicObject(19381, 1736.40, -5169.08, 3.79,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1746.89, -5169.09, 3.79,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1757.39, -5169.05, 3.79,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1767.89, -5169.05, 3.75,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1767.89, -5178.68, 3.75,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1757.39, -5178.68, 3.79,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1746.89, -5178.68, 3.79,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1736.40, -5178.68, 3.79,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1767.91, -5188.32, 3.75,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1757.41, -5188.32, 3.79,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1746.91, -5188.32, 3.79,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1736.42, -5188.32, 3.79,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1767.95, -5197.95, 3.75,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1767.95, -5207.57, 3.75,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1767.95, -5217.19, 3.75,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1757.45, -5197.95, 3.75,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1757.45, -5207.57, 3.75,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1757.45, -5217.19, 3.75,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1746.93, -5197.95, 3.75,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1749.40, -5207.54, 3.74,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1749.53, -5217.17, 3.74,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1736.43, -5193.29, 3.75,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1725.85, -5191.64, 3.75,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1767.95, -5159.41, 3.75,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1767.95, -5157.99, 3.74,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1758.93, -5164.66, 3.74,   0.00, 90.00, 19.38);
	CreateDynamicObject(19381, 1748.50, -5169.08, 3.73,   0.00, 90.00, 6.78);
	CreateDynamicObject(1229, 1713.11, -5149.95, 5.32,   0.00, 0.00, -90.00);
	CreateDynamicObject(1229, 1765.09, -5149.86, 5.32,   0.00, 0.00, 90.00);
	CreateDynamicObject(1257, 1746.50, -5153.47, 5.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(1257, 1731.84, -5153.41, 5.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(1257, 1738.93, -5153.55, 5.10,   0.00, 0.00, 90.00);
	CreateDynamicObject(19381, 1479.24, -4737.91, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1468.78, -4737.91, 3.82,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1479.24, -4747.37, 3.80,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1468.78, -4747.37, 3.80,   0.00, 90.00, 0.00);
	CreateDynamicObject(12814, 1432.74, -4744.53, 3.67,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1432.68, -4714.53, 3.59,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1382.68, -4714.53, 3.59,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1332.70, -4714.53, 3.59,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1282.72, -4714.53, 3.59,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1282.72, -4684.54, 3.59,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1332.70, -4684.54, 3.59,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1382.68, -4684.54, 3.59,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1432.68, -4684.54, 3.59,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1282.72, -4654.55, 3.59,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1332.70, -4654.55, 3.59,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1382.68, -4654.55, 3.59,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1432.68, -4654.55, 3.59,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1382.68, -4624.56, 3.59,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1432.68, -4624.56, 3.59,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1482.71, -4744.53, 3.59,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1482.67, -4714.53, 3.59,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1482.67, -4684.54, 3.59,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1482.67, -4654.55, 3.59,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1532.52, -4733.36, 3.59,   0.00, 0.00, 90.00);
	CreateDynamicObject(7380, 2532.97, 2689.18, 12.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(16668, 1316.56, -4697.20, 4.32,   0.00, 0.00, 0.72);
	CreateDynamicObject(16668, 1422.37, -4717.76, 4.32,   0.00, 0.00, 90.54);
	CreateDynamicObject(5837, 1342.30, -4732.76, 5.43,   0.00, 0.00, 0.00);
	CreateDynamicObject(3749, 1349.55, -4739.62, 9.18,   0.00, 0.00, 90.00);
	CreateDynamicObject(1998, 1345.03, -4732.47, 4.00,   0.00, 0.00, 180.00);
	CreateDynamicObject(1806, 1344.36, -4732.37, 4.00,   0.00, 0.00, 163.22);
	CreateDynamicObject(19273, 1346.12, -4732.76, 4.95,   0.00, 0.00, -90.00);
	CreateDynamicObject(16770, 1310.78, -4718.80, 5.06,   0.00, 0.00, 180.00);
	CreateDynamicObject(16770, 1330.65, -4702.31, 5.06,   0.00, 0.00, 180.00);
	CreateDynamicObject(1584, 1285.35, -4727.59, 3.57,   0.00, 0.00, 90.00);
	CreateDynamicObject(1583, 1285.35, -4726.22, 3.57,   0.00, 0.00, 90.00);
	CreateDynamicObject(1584, 1285.35, -4724.59, 3.57,   0.00, 0.00, 90.00);
	CreateDynamicObject(1584, 1285.35, -4721.60, 3.57,   0.00, 0.00, 90.00);
	CreateDynamicObject(1584, 1285.35, -4718.54, 3.57,   0.00, 0.00, 90.00);
	CreateDynamicObject(1584, 1285.35, -4715.63, 3.57,   0.00, 0.00, 90.00);
	CreateDynamicObject(1584, 1285.35, -4712.59, 3.57,   0.00, 0.00, 90.00);
	CreateDynamicObject(1583, 1285.35, -4723.22, 3.57,   0.00, 0.00, 90.00);
	CreateDynamicObject(1583, 1285.35, -4720.22, 3.57,   0.00, 0.00, 90.00);
	CreateDynamicObject(1583, 1285.35, -4717.22, 3.57,   0.00, 0.00, 90.00);
	CreateDynamicObject(1583, 1285.35, -4714.26, 3.57,   0.00, 0.00, 90.00);
	CreateDynamicObject(1583, 1285.35, -4697.14, 3.57,   0.00, 0.00, 90.00);
	CreateDynamicObject(1583, 1285.35, -4700.02, 3.57,   0.00, 0.00, 90.00);
	CreateDynamicObject(1583, 1285.35, -4702.80, 3.57,   0.00, 0.00, 90.00);
	CreateDynamicObject(1583, 1285.35, -4705.62, 3.57,   0.00, 0.00, 90.00);
	CreateDynamicObject(1583, 1285.35, -4708.44, 3.57,   0.00, 0.00, 90.00);
	CreateDynamicObject(1583, 1285.35, -4711.22, 3.57,   0.00, 0.00, 90.00);
	CreateDynamicObject(1584, 1285.35, -4698.53, 3.57,   0.00, 0.00, 90.00);
	CreateDynamicObject(1584, 1285.35, -4701.31, 3.57,   0.00, 0.00, 90.00);
	CreateDynamicObject(1584, 1285.35, -4704.13, 3.57,   0.00, 0.00, 90.00);
	CreateDynamicObject(1584, 1285.35, -4706.95, 3.57,   0.00, 0.00, 90.00);
	CreateDynamicObject(1584, 1285.35, -4709.71, 3.57,   0.00, 0.00, 90.00);
	CreateDynamicObject(982, 1314.64, -4711.92, 4.28,   0.00, 0.00, 90.00);
	CreateDynamicObject(982, 1297.04, -4711.92, 4.28,   0.00, 0.00, 90.00);
	CreateDynamicObject(982, 1297.04, -4695.43, 4.28,   0.00, 0.00, 90.00);
	CreateDynamicObject(982, 1314.64, -4695.43, 4.28,   0.00, 0.00, 90.00);
	CreateDynamicObject(2056, 1284.69, -4724.59, 4.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(2056, 1284.69, -4726.22, 4.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(1584, 1285.35, -4727.59, 3.57,   0.00, 0.00, 90.00);
	CreateDynamicObject(2056, 1284.69, -4727.59, 4.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(2056, 1284.69, -4723.22, 4.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(1584, 1285.35, -4721.60, 3.57,   0.00, 0.00, 90.00);
	CreateDynamicObject(2056, 1284.69, -4721.60, 4.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(2056, 1284.69, -4720.22, 4.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(2056, 1284.69, -4718.54, 4.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(2056, 1284.69, -4717.22, 4.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(2056, 1284.69, -4715.63, 4.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(2056, 1284.69, -4714.26, 4.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(2056, 1284.69, -4712.59, 4.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(2056, 1284.69, -4711.22, 4.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(2056, 1284.69, -4709.71, 4.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(2056, 1284.69, -4708.44, 4.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(2056, 1284.69, -4706.95, 4.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(2056, 1284.69, -4705.62, 4.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(2056, 1284.69, -4704.13, 4.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(2056, 1284.69, -4702.80, 4.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(2056, 1284.69, -4701.31, 4.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(2056, 1284.69, -4700.02, 4.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(2056, 1284.69, -4698.53, 4.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(2056, 1284.69, -4697.14, 4.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(3279, 1437.06, -4658.08, 3.57,   0.00, 0.00, 0.00);
	CreateDynamicObject(3279, 1437.06, -4679.96, 3.57,   0.00, 0.00, 0.00);
	CreateDynamicObject(8657, 1346.27, -4710.69, 4.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(984, 1334.58, -4695.28, 4.24,   0.00, 0.00, 90.00);
	CreateDynamicObject(984, 1339.31, -4695.28, 4.24,   0.00, 0.00, 90.00);
	CreateDynamicObject(11442, 1396.45, -4680.27, 3.57,   0.00, 0.00, 30.06);
	CreateDynamicObject(11457, 1395.86, -4699.89, 3.12,   0.00, 0.00, 0.00);
	CreateDynamicObject(11445, 1390.97, -4661.09, 3.58,   0.00, 0.00, -102.12);
	CreateDynamicObject(11441, 1369.64, -4671.04, 3.58,   0.00, 0.00, 0.00);
	CreateDynamicObject(982, 1359.63, -4726.11, 4.28,   0.00, 0.00, 90.00);
	CreateDynamicObject(982, 1385.24, -4726.11, 4.28,   0.00, 0.00, 90.00);
	CreateDynamicObject(982, 1394.78, -4726.11, 4.28,   0.00, 0.00, 90.00);
	CreateDynamicObject(11457, 1307.67, -4683.90, 3.19,   0.00, 0.00, -93.72);
	CreateDynamicObject(12957, 1383.03, -4670.66, 4.27,   0.00, 0.00, 0.00);
	CreateDynamicObject(11445, 1374.10, -4658.72, 3.58,   0.00, 0.00, -1.92);
	CreateDynamicObject(11442, 1375.23, -4685.07, 3.57,   0.00, 0.00, 91.80);
	CreateDynamicObject(3644, 1381.66, -4641.56, 5.95,   0.00, 0.00, 0.00);
	CreateDynamicObject(3866, 1328.74, -4677.08, 11.47,   0.00, 0.00, -135.78);
	CreateDynamicObject(3887, 1355.28, -4680.04, 11.61,   0.00, 0.00, -181.74);
	CreateDynamicObject(11428, 1373.75, -4715.25, 8.97,   0.00, 0.00, -155.40);
	CreateDynamicObject(1583, 1361.41, -4706.23, 19.60,   0.00, 0.00, 90.00);
	CreateDynamicObject(1584, 1362.54, -4689.60, 14.68,   0.00, 0.00, 90.00);
	CreateDynamicObject(1583, 1362.49, -4686.93, 10.34,   0.00, 0.00, 106.92);
	CreateDynamicObject(1585, 1362.67, -4686.46, 10.42,   0.00, 0.00, 90.00);
	CreateDynamicObject(1585, 1362.79, -4672.94, 14.80,   0.00, 0.00, 90.00);
	CreateDynamicObject(1584, 1362.61, -4675.98, 10.33,   0.00, 0.00, 90.00);
	CreateDynamicObject(1584, 1362.33, -4678.84, 3.59,   0.00, 0.00, -147.30);
	CreateDynamicObject(1585, 1360.94, -4704.89, 3.59,   0.00, 0.00, -120.30);
	CreateDynamicObject(1583, 1356.95, -4695.50, 3.59,   0.00, 0.00, -140.70);
	CreateDynamicObject(1584, 1361.03, -4682.60, 3.59,   0.00, 0.00, -20.10);
	CreateDynamicObject(1583, 1360.50, -4688.20, 3.59,   0.00, 0.00, 1625.10);
	CreateDynamicObject(1585, 1362.98, -4684.39, 3.59,   0.00, 0.00, -91.50);
	CreateDynamicObject(1585, 1362.93, -4685.69, 3.59,   0.00, 0.00, -91.50);
	CreateDynamicObject(1585, 1362.93, -4686.98, 3.59,   0.00, 0.00, -91.50);
	CreateDynamicObject(1583, 1349.85, -4664.06, 9.90,   0.00, 0.00, 2047.98);
	CreateDynamicObject(1583, 1334.61, -4664.67, 11.60,   0.00, 0.00, 1947.48);
	CreateDynamicObject(1584, 1333.64, -4663.89, 11.69,   0.00, 0.00, -249.06);
	CreateDynamicObject(1585, 1334.18, -4664.27, 11.69,   0.00, 0.00, 142.14);
	CreateDynamicObject(1585, 1333.23, -4663.13, 3.61,   0.00, 0.00, 142.14);
	CreateDynamicObject(1583, 1334.49, -4664.32, 3.60,   0.00, 0.00, 134.64);
	CreateDynamicObject(1584, 1341.69, -4672.32, 3.59,   0.00, 0.00, 134.28);
	CreateDynamicObject(1583, 1302.53, -4682.56, 8.50,   0.00, 0.00, 102.24);
	CreateDynamicObject(1584, 1371.06, -4644.09, 3.59,   0.00, 0.00, -231.24);
	CreateDynamicObject(1583, 1391.91, -4638.50, 3.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(1583, 1383.88, -4632.37, 3.60,   0.00, 0.00, -5.88);
	CreateDynamicObject(1585, 1380.97, -4632.28, 3.59,   0.00, 0.00, 27.24);
	CreateDynamicObject(1584, 1379.52, -4650.97, 3.60,   0.00, 0.00, 115.14);
	CreateDynamicObject(1585, 1393.03, -4659.19, 3.59,   0.00, 0.00, 63.54);
	CreateDynamicObject(1583, 1392.61, -4659.68, 3.59,   0.00, 0.00, 68.70);
	CreateDynamicObject(1585, 1375.59, -4655.70, 3.59,   0.00, 0.00, -19.26);
	CreateDynamicObject(1584, 1367.56, -4671.04, 3.60,   0.00, 0.00, -169.92);
	CreateDynamicObject(1583, 1377.78, -4687.43, 3.59,   0.00, 0.00, 74.22);
	CreateDynamicObject(1583, 1373.19, -4681.17, 3.59,   0.00, 0.00, -33.42);
	CreateDynamicObject(1585, 1373.37, -4681.55, 3.59,   0.00, 0.00, -59.58);
	CreateDynamicObject(1583, 1358.99, -4705.99, 14.63,   0.00, 0.00, 9.66);
	CreateDynamicObject(1584, 1398.79, -4676.34, 3.59,   0.00, 0.00, 250.26);
	CreateDynamicObject(1584, 1395.86, -4683.81, 3.59,   0.00, 0.00, 42.90);
	CreateDynamicObject(1583, 1368.92, -4709.89, 3.59,   0.00, 0.00, -4.20);
	CreateDynamicObject(1583, 1377.99, -4714.50, 3.59,   0.00, 0.00, -53.52);
	CreateDynamicObject(1585, 1378.07, -4714.94, 3.59,   0.00, 0.00, -54.48);
	CreateDynamicObject(6959, 1726.86, -5070.41, 3.68,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1768.20, -5070.41, 3.72,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1768.20, -5030.46, 3.71,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1726.92, -5009.51, 3.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1726.93, -5114.59, 3.73,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1768.20, -5110.38, 3.72,   0.00, 0.00, 0.00);
	CreateDynamicObject(4825, 1694.75, -5072.24, 1.24,   0.00, 0.00, 0.00);
	CreateDynamicObject(4826, 1651.85, -5072.24, 13.36,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1656.17, -5110.14, 3.44,   0.00, 0.00, 0.00);
	CreateDynamicObject(4986, 1728.25, -5072.06, 1.56,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1596.46, -5144.73, 3.57,   0.00, 0.00, 0.00);
	CreateDynamicObject(640, 1756.33, -5037.94, 4.49,   0.00, 0.00, 270.00);
	CreateDynamicObject(640, 1748.13, -5037.94, 4.49,   0.00, 0.00, 270.00);
	CreateDynamicObject(640, 1748.17, -5037.95, 4.49,   0.00, 0.00, 270.00);
	CreateDynamicObject(640, 1691.98, -5037.99, 4.49,   0.00, 0.00, 270.00);
	CreateDynamicObject(640, 1698.93, -5037.94, 4.49,   0.00, 0.00, 270.00);
	CreateDynamicObject(640, 1707.13, -5037.94, 4.49,   0.00, 0.00, 270.00);
	CreateDynamicObject(640, 1715.33, -5037.94, 4.49,   0.00, 0.00, 270.00);
	CreateDynamicObject(640, 1723.53, -5037.94, 4.49,   0.00, 0.00, 270.00);
	CreateDynamicObject(640, 1731.73, -5037.94, 4.49,   0.00, 0.00, 270.00);
	CreateDynamicObject(640, 1739.33, -5037.94, 4.49,   0.00, 0.00, 270.00);
	CreateDynamicObject(640, 1756.80, -5106.50, 4.49,   0.00, 0.00, 90.00);
	CreateDynamicObject(640, 1748.13, -5106.50, 4.49,   0.00, 0.00, 90.00);
	CreateDynamicObject(640, 1739.33, -5106.50, 4.49,   0.00, 0.00, 90.00);
	CreateDynamicObject(640, 1731.73, -5106.50, 4.49,   0.00, 0.00, 90.00);
	CreateDynamicObject(640, 1723.53, -5106.50, 4.49,   0.00, 0.00, 90.00);
	CreateDynamicObject(640, 1715.33, -5106.50, 4.49,   0.00, 0.00, 90.00);
	CreateDynamicObject(640, 1707.13, -5106.50, 4.49,   0.00, 0.00, 90.00);
	CreateDynamicObject(640, 1698.93, -5106.50, 4.49,   0.00, 0.00, 90.00);
	CreateDynamicObject(640, 1690.73, -5106.50, 4.49,   0.00, 0.00, 90.00);
	CreateDynamicObject(6959, 1685.61, -5114.94, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1768.08, -5114.58, 3.68,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1768.26, -4990.50, 3.71,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1656.31, -5044.38, 3.52,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1656.29, -4994.35, 3.48,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1685.59, -5008.55, 3.59,   0.00, 0.00, 0.00);
	CreateDynamicObject(9697, 1159.20, -4897.46, 3.81,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1212.73, -4924.12, -0.22,   10.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1534.58, -4996.27, 3.51,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1520.47, -5046.27, 3.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1550.46, -5046.27, 3.55,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1580.38, -5046.34, 3.40,   0.00, 0.60, 0.00);
	CreateDynamicObject(12814, 1596.48, -5047.17, 3.26,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1596.30, -5095.72, 3.49,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1566.47, -5144.70, 3.59,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1542.87, -5124.33, 3.54,   0.00, 0.00, -18.36);
	CreateDynamicObject(12814, 1566.30, -5096.03, 3.57,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1534.47, -5122.69, -4.64,   -20.00, -4.50, 3.96);
	CreateDynamicObject(12814, 1566.92, -5136.54, -17.62,   -45.00, -29.00, -107.76);
	CreateDynamicObject(12814, 1332.53, -4815.79, 3.72,   0.00, 0.00, 90.00);
	CreateDynamicObject(8657, 1670.35, -5278.79, 4.97,   0.00, 0.00, 0.00);
	CreateDynamicObject(8657, 1680.10, -5251.72, 4.97,   0.00, 0.00, -39.78);
	CreateDynamicObject(8657, 1685.43, -5293.81, 4.97,   0.00, 0.00, 90.00);
	CreateDynamicObject(9106, 1541.78, -5100.15, 6.41,   0.00, 0.00, 439.08);
	CreateDynamicObject(4018, 1626.77, -5282.97, 3.78,   0.00, 0.00, 180.00);
	CreateDynamicObject(19381, 1757.45, -5226.81, 3.75,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1749.53, -5226.80, 3.74,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1767.95, -5226.81, 3.75,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1764.46, -5254.93, 3.75,   0.00, 90.00, -19.08);
	CreateDynamicObject(19381, 1766.99, -5245.76, 3.76,   0.00, 90.00, -11.34);
	CreateDynamicObject(19381, 1767.95, -5236.43, 3.75,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1753.39, -5273.68, 3.75,   0.00, 90.00, 42.84);
	CreateDynamicObject(19381, 1757.45, -5265.29, 3.76,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1757.45, -5255.69, 3.76,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1757.45, -5246.05, 3.77,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1757.45, -5236.43, 3.75,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1760.22, -5263.32, 3.75,   0.00, 90.00, -19.08);
	CreateDynamicObject(19381, 1749.53, -5255.67, 3.74,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1749.53, -5246.05, 3.74,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1749.53, -5236.43, 3.74,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1749.53, -5265.29, 3.74,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1749.53, -5274.91, 3.74,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1745.37, -5280.73, 3.75,   0.00, 90.00, 39.30);
	CreateDynamicObject(19381, 1714.93, -5289.78, 3.76,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1714.93, -5280.16, 3.76,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1714.93, -5270.53, 3.76,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1725.41, -5270.53, 3.76,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1725.41, -5280.16, 3.76,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1714.93, -5280.16, 3.76,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1725.41, -5289.78, 3.76,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1735.91, -5270.53, 3.76,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1735.90, -5280.16, 3.76,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1734.75, -5287.31, 3.75,   0.00, 90.00, 21.48);
	CreateDynamicObject(19381, 1740.32, -5282.93, 3.74,   0.00, 90.00, 21.48);
	CreateDynamicObject(19381, 1746.41, -5270.53, 3.76,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1738.97, -5273.43, 3.75,   0.00, 90.00, 36.12);
	CreateDynamicObject(640, 1703.36, -5263.32, 4.49,   0.00, 0.00, 0.00);
	CreateDynamicObject(640, 1703.36, -5256.12, 4.49,   0.00, 0.00, 0.00);
	CreateDynamicObject(640, 1703.36, -5248.69, 4.49,   0.00, 0.00, 0.00);
	CreateDynamicObject(640, 1707.17, -5263.32, 4.49,   0.00, 0.00, 180.00);
	CreateDynamicObject(640, 1707.17, -5256.12, 4.49,   0.00, 0.00, 180.00);
	CreateDynamicObject(640, 1707.17, -5248.69, 4.49,   0.00, 0.00, 180.00);
	CreateDynamicObject(11489, 1672.27, -5264.34, 3.83,   0.00, 0.00, 69.84);
	CreateDynamicObject(3935, 1701.89, -5265.09, 4.95,   0.00, 0.00, 0.00);
	CreateDynamicObject(19511, 1599.22, -5134.08, 6.01,   0.00, 0.00, 98.10);
	CreateDynamicObject(19512, 1599.22, -5134.08, 6.01,   0.00, 0.00, 98.10);
	CreateDynamicObject(3486, 1448.11, -4785.64, 10.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(3486, 1417.93, -4785.64, 10.89,   0.00, 0.00, 0.00);
	CreateDynamicObject(8657, 1402.49, -4784.09, 4.61,   0.00, 0.00, 0.00);
	CreateDynamicObject(8657, 1402.50, -4787.27, 4.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(3308, 1637.53, -4776.23, 5.34,   0.00, 0.00, 90.00);
	CreateDynamicObject(3308, 1662.54, -4776.23, 5.34,   0.00, 0.00, 90.00);
	CreateDynamicObject(3308, 1687.56, -4776.23, 5.34,   0.00, 0.00, 90.00);
	CreateDynamicObject(3308, 1712.52, -4776.23, 5.34,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1743.71, -4819.70, 3.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(19470, 1715.82, -4763.64, 3.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(19470, 1690.59, -4763.64, 3.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(19470, 1665.68, -4763.64, 3.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(19470, 1640.27, -4763.64, 3.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(19470, 1442.28, -4802.67, 3.93,   0.00, 0.00, -90.00);
	CreateDynamicObject(19470, 1412.49, -4802.52, 3.93,   0.00, 0.00, -90.00);
	CreateDynamicObject(19470, 1389.26, -5086.55, 4.03,   0.00, 0.00, 90.00);
	CreateDynamicObject(19470, 1405.97, -5086.72, 4.03,   0.00, 0.00, 90.00);
	CreateDynamicObject(19470, 1420.33, -5086.75, 4.03,   0.00, 0.00, 90.54);
	CreateDynamicObject(19470, 1449.36, -5112.67, 8.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(19470, 1450.08, -5121.35, 4.02,   0.00, 0.00, 0.00);
	CreateDynamicObject(19470, 1450.30, -5135.51, 3.93,   0.00, 0.00, 0.00);
	CreateDynamicObject(19470, 1449.58, -5182.17, 5.98,   0.00, 0.00, 0.00);
	CreateDynamicObject(19470, 1449.77, -5159.79, 3.91,   0.00, 0.00, 0.00);
	CreateDynamicObject(19470, 1449.72, -5171.56, 3.84,   0.00, 0.00, 0.00);
	CreateDynamicObject(19470, 1469.50, -5189.03, 3.94,   0.00, 0.00, 180.00);
	CreateDynamicObject(19470, 1578.65, -5192.51, 3.84,   0.00, 0.00, -90.00);
	CreateDynamicObject(19470, 1605.96, -5192.71, 3.84,   0.00, 0.00, -90.00);
	CreateDynamicObject(19470, 1631.58, -5192.85, 3.84,   0.00, 0.00, -90.00);
	CreateDynamicObject(19470, 1658.54, -5192.72, 3.84,   0.00, 0.00, -90.00);
	CreateDynamicObject(17951, 1594.77, -4719.72, 6.53,   0.00, 0.00, 90.00);
	CreateDynamicObject(17951, 1600.89, -4719.72, 6.53,   0.00, 0.00, 90.00);
	CreateDynamicObject(1494, 1609.54, -4740.59, 4.80,   0.00, 0.00, 45.00);
	CreateDynamicObject(4892, 1692.75, -4732.40, 6.38,   0.00, 0.00, 90.00);
	CreateDynamicObject(8673, 1667.31, -4742.76, 5.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(8673, 1709.41, -4711.95, 5.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(8673, 1639.85, -4700.20, 5.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1599.08, -4698.23, 3.85,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1482.62, -4774.50, 3.59,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1482.70, -4804.49, 3.59,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1432.69, -4774.48, 3.59,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1382.81, -4764.20, 3.59,   0.00, 0.00, 90.00);
	CreateDynamicObject(6959, 1339.04, -4764.46, 3.81,   0.00, 0.00, 180.00);
	CreateDynamicObject(6959, 1326.71, -4792.41, 3.78,   0.00, 0.00, 180.00);
	CreateDynamicObject(17536, 1316.68, -4763.56, 7.27,   0.00, 0.00, 0.00);
	CreateDynamicObject(1556, 1323.96, -4762.28, 3.97,   0.00, 0.00, 90.00);
	CreateDynamicObject(19438, 1323.93, -4759.93, 5.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(19438, 1323.93, -4761.53, 5.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(19438, 1323.93, -4763.11, 5.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(10183, 1339.72, -4754.20, 3.80,   0.00, 0.00, 45.00);
	CreateDynamicObject(10183, 1327.95, -4797.17, 3.80,   0.00, 0.00, -135.00);
	CreateDynamicObject(10183, 1311.74, -4770.31, 3.80,   0.00, 0.00, -225.00);
	CreateDynamicObject(12814, 1414.54, -4794.10, 3.59,   0.00, 0.00, 90.00);
	CreateDynamicObject(11012, 1682.25, -4825.96, 9.22,   0.00, 0.00, -90.00);
	CreateDynamicObject(6959, 1708.35, -4828.34, 3.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1712.69, -4842.50, 3.74,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1689.01, -4847.13, 3.40,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1639.05, -4846.93, 3.43,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1599.27, -4825.43, 3.67,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1689.60, -4847.51, 3.43,   0.00, 0.00, 90.00);
	CreateDynamicObject(6959, 1413.47, -5362.10, 3.72,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1372.14, -5362.10, 3.72,   0.00, 0.00, 0.00);
	CreateDynamicObject(3589, 1411.34, -5379.91, 6.23,   0.00, 0.00, 0.00);
	CreateDynamicObject(3590, 1400.54, -5379.91, 6.23,   0.00, 0.00, 0.00);
	CreateDynamicObject(3639, 1402.28, -5344.79, 7.37,   0.00, 0.00, 0.00);
	CreateDynamicObject(3640, 1368.16, -5347.44, 8.21,   0.00, 0.00, 0.00);
	CreateDynamicObject(3641, 1385.15, -5359.44, 5.86,   0.00, 0.00, 90.00);
	CreateDynamicObject(3642, 1364.12, -5375.04, 6.51,   0.00, 0.00, 543.30);
	CreateDynamicObject(5520, 1421.39, -5344.78, 8.78,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1413.47, -5402.07, 3.72,   0.00, 0.00, 0.00);
	CreateDynamicObject(3588, 1338.85, -5359.70, 6.37,   0.00, 0.00, 180.00);
	CreateDynamicObject(6959, 1330.80, -5362.10, 3.72,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1289.47, -5362.10, 3.72,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1372.14, -5402.07, 3.72,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1330.80, -5402.07, 3.72,   0.00, 0.00, 0.00);
	CreateDynamicObject(3646, 1303.49, -5353.85, 6.05,   0.00, 0.00, 0.00);
	CreateDynamicObject(3661, 1316.82, -5336.86, 7.17,   0.00, 0.00, -90.00);
	CreateDynamicObject(6959, 1413.47, -5322.11, 3.72,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1372.14, -5322.11, 3.72,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1330.80, -5322.11, 3.72,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1289.49, -5322.12, 3.72,   0.00, 0.00, 0.00);
	CreateDynamicObject(17698, 1283.23, -5315.66, 6.61,   0.00, 0.00, 163.44);
	CreateDynamicObject(17697, 1410.98, -5321.57, 8.30,   0.00, 0.00, -90.00);
	CreateDynamicObject(17573, 1332.05, -5312.39, 5.43,   0.00, 0.00, 90.00);
	CreateDynamicObject(3646, 1308.75, -5310.34, 6.05,   0.00, 0.00, 90.00);
	CreateDynamicObject(3641, 1350.39, -5325.92, 5.86,   0.00, 0.00, 90.00);
	CreateDynamicObject(3640, 1368.10, -5309.42, 8.21,   0.00, 0.00, 0.00);
	CreateDynamicObject(5520, 1389.01, -5308.17, 8.78,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1247.75, -5293.73, 3.57,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1297.72, -5293.70, 3.56,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1347.70, -5293.70, 3.57,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1397.69, -5293.70, 3.63,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1199.92, -5264.04, 3.74,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1197.84, -5293.73, 3.67,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1178.00, -5243.98, 3.52,   0.00, 0.00, 46.08);
	CreateDynamicObject(12814, 1177.04, -5208.39, 3.72,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1199.18, -5279.02, -11.10,   0.00, -90.00, 90.00);
	CreateDynamicObject(12814, 1250.23, -5265.43, -19.63,   -90.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1244.54, -5323.66, 3.58,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1409.18, -5437.00, 3.63,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1437.68, -5304.88, 3.63,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1441.64, -5280.30, -10.16,   0.00, -90.00, 90.00);
	CreateDynamicObject(12814, 1438.23, -5280.32, -10.16,   0.00, -90.00, 90.00);
	CreateDynamicObject(12814, 1413.09, -5269.48, -21.07,   90.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1388.12, -5284.58, -10.16,   0.00, -90.00, 90.00);
	CreateDynamicObject(12814, 1338.14, -5284.58, -10.16,   0.00, -90.00, 90.00);
	CreateDynamicObject(12814, 1288.43, -5284.58, -10.16,   0.00, -90.00, 90.00);
	CreateDynamicObject(12814, 1275.21, -5284.53, -10.16,   0.00, -90.00, 90.00);
	CreateDynamicObject(12814, 1250.25, -5269.56, -19.63,   -90.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1275.55, -5262.82, 3.77,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1325.50, -5260.36, 3.77,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1375.38, -5260.31, 3.77,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1437.68, -5354.87, 3.61,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1437.94, -5418.28, 3.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1452.48, -5436.68, 3.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1437.49, -5436.68, -11.19,   0.00, -90.00, 0.00);
	CreateDynamicObject(12814, 1462.48, -5411.69, -11.19,   0.00, -90.00, -90.00);
	CreateDynamicObject(12814, 1467.67, -5354.87, 3.57,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1467.67, -5304.88, 3.53,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1476.35, -5273.46, 3.29,   0.00, 0.00, -13.08);
	CreateDynamicObject(12814, 1492.81, -5282.30, 3.20,   0.00, 0.00, -42.60);
	CreateDynamicObject(12814, 1502.98, -5298.64, 3.64,   0.00, 0.00, -71.40);
	CreateDynamicObject(12814, 1503.97, -5317.03, 3.60,   0.00, 0.00, -99.18);
	CreateDynamicObject(12814, 1496.23, -5332.65, 3.58,   0.00, 0.00, -128.94);
	CreateDynamicObject(12814, 1485.23, -5342.02, 3.53,   0.00, 0.00, -163.62);
	CreateDynamicObject(12814, 1520.47, -5096.03, 3.58,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1517.85, -5120.29, 3.57,   0.00, 0.00, 39.36);
	CreateDynamicObject(12814, 1550.35, -5096.05, 3.51,   0.00, 0.00, 0.00);
	CreateDynamicObject(10183, 1465.32, -5040.96, 4.02,   0.00, 0.00, -44.22);
	CreateDynamicObject(9697, 1360.19, -4979.10, 3.77,   0.00, 0.00, 180.00);
	CreateDynamicObject(10183, 1329.83, -5044.76, 4.36,   0.00, 0.00, -45.00);
	CreateDynamicObject(10183, 1307.70, -5013.61, 3.72,   0.00, 0.00, 45.00);
	CreateDynamicObject(10183, 1392.27, -4954.91, 4.02,   0.00, 0.00, 45.00);
	CreateDynamicObject(7052, 1459.58, -5126.88, -3.01,   0.00, -10.00, 90.06);
	CreateDynamicObject(1315, 1768.98, -5141.80, 7.32,   0.00, 0.00, 90.00);
	CreateDynamicObject(1315, 1781.69, -5154.61, 7.32,   0.00, 0.00, 0.00);
	CreateDynamicObject(9697, 1720.61, -5008.94, 3.72,   0.00, 0.00, 0.00);
	CreateDynamicObject(9697, 1720.36, -5130.53, 3.75,   0.00, 0.00, 180.00);
	CreateDynamicObject(19463, 1212.12, -4789.04, 5.54,   0.00, 0.00, 90.00);
	CreateDynamicObject(6959, 1207.10, -4768.97, 3.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1165.75, -4769.13, 3.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(19463, 1202.50, -4789.04, 5.54,   0.00, 0.00, 90.00);
	CreateDynamicObject(19463, 1192.86, -4789.04, 5.54,   0.00, 0.00, 90.00);
	CreateDynamicObject(19463, 1183.23, -4789.04, 5.54,   0.00, 0.00, 90.00);
	CreateDynamicObject(19463, 1178.35, -4784.31, 5.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(19463, 1178.35, -4774.68, 5.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(19463, 1178.35, -4765.06, 5.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(19371, 1224.70, -4788.98, 5.53,   0.00, 0.00, 90.00);
	CreateDynamicObject(19463, 1226.39, -4784.25, 5.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(19463, 1226.33, -4774.68, 5.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(19463, 1226.39, -4765.06, 5.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(19463, 1226.39, -4755.43, 5.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(19444, 1226.39, -4749.81, 5.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(19463, 1221.65, -4748.92, 5.54,   0.00, 0.00, 90.00);
	CreateDynamicObject(19463, 1212.12, -4748.92, 5.54,   0.00, 0.00, 90.00);
	CreateDynamicObject(19463, 1202.50, -4748.92, 5.54,   0.00, 0.00, 90.00);
	CreateDynamicObject(19463, 1192.86, -4748.92, 5.54,   0.00, 0.00, 90.00);
	CreateDynamicObject(19463, 1183.23, -4748.92, 5.53,   0.00, 0.00, 90.00);
	CreateDynamicObject(6959, 1205.79, -4768.99, 7.34,   0.00, 0.00, 0.00);
	CreateDynamicObject(6959, 1198.96, -4769.09, 7.33,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1234.12, -4807.41, 3.59,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1236.05, -4757.41, 3.59,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1206.05, -4725.35, 3.59,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1236.05, -4707.41, 3.59,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1236.12, -4657.46, 3.58,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1265.94, -4707.41, 3.25,   0.00, 1.20, 0.00);
	CreateDynamicObject(12814, 1266.01, -4657.42, 3.28,   0.00, 1.20, 0.00);
	CreateDynamicObject(12814, 1282.73, -4744.50, 3.59,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1265.94, -4757.40, 3.27,   0.00, 1.20, 0.00);
	CreateDynamicObject(6959, 1300.92, -5205.39, 3.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1261.72, -5085.13, 3.64,   0.00, 0.00, -90.00);
	CreateDynamicObject(12814, 1221.74, -5094.60, 3.58,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1261.69, -5115.11, 3.58,   0.00, 0.00, -90.00);
	CreateDynamicObject(12814, 1298.96, -5111.93, 3.56,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1275.15, -5134.35, 3.67,   0.00, 0.00, -93.72);
	CreateDynamicObject(12814, 1287.06, -5133.31, 3.65,   0.00, 0.00, -93.72);
	CreateDynamicObject(12814, 1159.33, -5063.69, 3.82,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1177.72, -5061.19, 3.82,   0.00, 0.00, -36.18);
	CreateDynamicObject(12814, 1176.17, -5063.69, 3.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(1352, 1623.66, -5314.52, 3.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(1352, 1628.15, -5298.79, 3.80,   0.00, 0.00, 90.00);
	CreateDynamicObject(1352, 1607.78, -5309.89, 3.80,   0.00, 0.00, -90.00);
	CreateDynamicObject(1352, 1684.74, -5155.05, 3.84,   0.00, 0.00, 0.00);
	CreateDynamicObject(1352, 1689.69, -5138.96, 3.84,   0.00, 0.00, 90.00);
	CreateDynamicObject(1352, 1668.66, -5150.00, 3.84,   0.00, 0.00, -90.00);
	CreateDynamicObject(1352, 1673.65, -5192.56, 3.84,   0.00, 0.00, 180.00);
	CreateDynamicObject(1352, 1668.95, -5208.58, 3.84,   0.00, 0.00, -90.00);
	CreateDynamicObject(1352, 1689.78, -5197.53, 3.84,   0.00, 0.00, 90.00);
	CreateDynamicObject(1352, 1564.70, -5212.44, 3.82,   0.00, 0.00, 0.00);
	CreateDynamicObject(1352, 1548.50, -5207.31, 3.82,   0.00, 0.00, -90.00);
	CreateDynamicObject(1352, 1569.87, -5196.39, 3.82,   0.00, 0.00, 90.00);
	CreateDynamicObject(19425, 1461.83, -5088.70, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1461.86, -5090.68, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1461.86, -5092.68, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1461.86, -5095.68, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1461.86, -5098.68, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1461.86, -5102.68, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(1352, 1465.08, -5087.61, 3.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(1352, 1448.90, -5082.55, 3.90,   0.00, 0.00, -90.00);
	CreateDynamicObject(1352, 1484.82, -5087.35, 3.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(1352, 1473.70, -5066.40, 3.90,   0.00, 0.00, 180.00);
	CreateDynamicObject(1352, 1309.29, -5082.55, 4.01,   0.00, 0.00, -90.00);
	CreateDynamicObject(1352, 1324.92, -5107.13, 4.01,   0.00, 0.00, 0.00);
	CreateDynamicObject(1352, 1329.89, -5091.50, 4.01,   0.00, 0.00, 90.00);
	CreateDynamicObject(1352, 1313.76, -5087.08, 4.01,   0.00, 0.00, 180.00);
	CreateDynamicObject(1352, 1329.73, -5071.47, 4.01,   0.00, 0.00, 90.00);
	CreateDynamicObject(1352, 1304.91, -5167.02, 4.01,   0.00, 0.00, 0.00);
	CreateDynamicObject(1352, 1288.73, -5162.43, 4.01,   0.00, 0.00, -90.00);
	CreateDynamicObject(1352, 1309.32, -5151.30, 4.01,   0.00, 0.00, 90.00);
	CreateDynamicObject(19425, 1447.19, -5079.40, 3.86,   0.00, 0.00, 90.00);
	CreateDynamicObject(19425, 1445.19, -5079.40, 3.86,   0.00, 0.00, 90.00);
	CreateDynamicObject(19425, 1443.19, -5079.40, 3.86,   0.00, 0.00, 90.00);
	CreateDynamicObject(19425, 1440.19, -5079.40, 3.86,   0.00, 0.00, 90.00);
	CreateDynamicObject(19425, 1437.19, -5079.40, 3.86,   0.00, 0.00, 90.00);
	CreateDynamicObject(19425, 1433.19, -5079.40, 3.86,   0.00, 0.00, 90.00);
	CreateDynamicObject(1352, 1484.52, -5017.11, 4.01,   0.00, 0.00, 0.00);
	CreateDynamicObject(1352, 1468.86, -5012.86, 4.01,   0.00, 0.00, -90.00);
	CreateDynamicObject(1352, 1473.26, -4997.13, 4.01,   0.00, 0.00, 180.00);
	CreateDynamicObject(1352, 1488.85, -5001.45, 4.01,   0.00, 0.00, 90.00);
	CreateDynamicObject(1352, 1489.10, -4909.88, 4.01,   0.00, 0.00, 90.00);
	CreateDynamicObject(1352, 1472.66, -4904.95, 4.01,   0.00, 0.00, 180.00);
	CreateDynamicObject(1352, 1467.90, -4920.90, 4.01,   0.00, 0.00, -90.00);
	CreateDynamicObject(1352, 1484.02, -4925.53, 4.01,   0.00, 0.00, 0.00);
	CreateDynamicObject(1352, 1773.67, -4862.11, 3.90,   0.00, 0.00, 180.00);
	CreateDynamicObject(1352, 1784.86, -4883.12, 3.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(1352, 1768.94, -4878.44, 3.90,   0.00, 0.00, -90.00);
	CreateDynamicObject(1352, 1708.93, -4878.05, 3.90,   0.00, 0.00, -90.00);
	CreateDynamicObject(1352, 1730.14, -4867.01, 3.90,   0.00, 0.00, 90.00);
	CreateDynamicObject(1352, 1725.06, -4883.14, 3.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(1352, 1714.45, -4862.47, 3.90,   0.00, 0.00, 180.00);
	CreateDynamicObject(19425, 1776.88, -5045.24, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1776.88, -5041.24, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1776.88, -5037.24, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1776.88, -5033.24, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1776.88, -5029.24, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1776.88, -5025.24, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1776.88, -5021.24, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1776.88, -5017.24, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1776.88, -5013.24, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1776.88, -5009.24, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1776.88, -5064.18, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1776.88, -5068.18, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1776.88, -5072.18, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1776.88, -5076.18, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1776.88, -5080.18, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1776.88, -5084.18, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1776.88, -5088.24, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1776.88, -5092.24, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1776.88, -5096.24, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1776.88, -5100.24, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1781.72, -5009.24, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1781.72, -5013.24, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1781.72, -5017.24, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1781.72, -5021.24, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1781.72, -5025.24, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1781.72, -5029.24, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1781.72, -5033.24, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1781.72, -5037.24, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1781.72, -5041.24, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1781.72, -5045.24, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1781.72, -5064.18, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1781.72, -5068.18, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1781.72, -5072.18, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1781.72, -5076.18, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1781.72, -5080.18, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1781.72, -5084.18, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1781.72, -5088.24, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1781.72, -5092.24, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1781.72, -5096.24, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(19425, 1781.72, -5100.24, 3.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1145.31, -5103.69, 3.81,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1175.42, -5113.68, 3.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1173.00, -5163.69, 3.74,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1145.39, -5133.67, 3.83,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1145.41, -5163.66, 3.74,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1219.79, -5137.16, 3.40,   0.00, 0.00, -2.58);
	CreateDynamicObject(12814, 1222.25, -5194.41, 3.57,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1222.22, -5209.19, 3.52,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1252.26, -5207.73, 3.56,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1242.34, -5177.42, 2.36,   0.00, 0.00, 67.56);
	CreateDynamicObject(12814, 1279.42, -5205.91, 3.57,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1264.65, -5177.51, 2.24,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1333.07, -5131.92, 3.56,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1336.81, -5181.91, 3.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1336.75, -5207.68, 3.63,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1329.89, -5176.48, 3.55,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1360.07, -5180.29, 3.63,   0.00, 0.00, 133.56);
	CreateDynamicObject(12814, 1406.15, -5166.44, 3.55,   0.00, 0.00, 83.70);
	CreateDynamicObject(12814, 1536.19, -5233.96, 3.56,   0.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1583.56, -5329.07, 3.61,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1580.29, -5349.39, 3.60,   0.00, 0.00, 67.92);
	CreateDynamicObject(12814, 1567.76, -5363.16, 3.57,   0.00, 0.00, 46.80);
	CreateDynamicObject(12814, 1551.57, -5369.59, 3.54,   0.00, 0.00, 15.18);
	CreateDynamicObject(12814, 1492.39, -5427.19, 3.61,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1542.35, -5427.73, 3.59,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1580.63, -5417.60, 3.52,   0.00, 0.00, 111.24);
	CreateDynamicObject(12814, 1614.05, -5393.97, 3.63,   0.00, 0.00, 139.20);
	CreateDynamicObject(12814, 1638.90, -5347.34, 3.57,   0.00, 0.00, -12.96);
	CreateDynamicObject(12814, 1542.35, -5457.69, 3.59,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1592.34, -5427.73, 3.55,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1592.34, -5457.69, 3.37,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1627.75, -5364.22, -10.00,   4.50, 90.00, 180.06);
	CreateDynamicObject(12814, 1621.97, -5367.26, -8.70,   10.00, 66.42, 180.06);
	CreateDynamicObject(12814, 1646.70, -5356.14, 3.59,   0.00, 0.00, 139.20);
	CreateDynamicObject(12814, 1645.68, -5391.96, -13.43,   -21.00, 83.00, 268.68);
	CreateDynamicObject(12814, 1642.32, -5427.73, 3.55,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1642.32, -5397.75, 3.54,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1692.32, -5427.73, 3.57,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1692.32, -5397.75, 3.65,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1742.32, -5427.73, 3.59,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1742.32, -5397.75, 3.57,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1792.34, -5397.75, 3.61,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1729.29, -5382.59, 3.64,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1779.30, -5382.58, 3.56,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1664.09, -5389.98, -7.85,   0.06, 90.00, 270.00);
	CreateDynamicObject(12814, 1679.77, -5389.97, -7.85,   0.06, 90.00, 270.00);
	CreateDynamicObject(19363, 1708.25, -5377.35, 3.82,   0.00, 0.00, -47.70);
	CreateDynamicObject(19455, 1705.59, -5385.60, 3.82,   0.00, 0.00, -11.88);
	CreateDynamicObject(19455, 1706.14, -5383.00, 3.82,   0.00, 0.00, -11.88);
	CreateDynamicObject(19363, 1710.66, -5375.23, 3.82,   0.00, 0.00, -47.70);
	CreateDynamicObject(19363, 1713.31, -5373.98, 3.82,   0.00, 0.00, -86.70);
	CreateDynamicObject(19455, 1719.72, -5373.89, 3.82,   0.00, 0.00, -90.00);
	CreateDynamicObject(19455, 1729.35, -5373.89, 3.82,   0.00, 0.00, -90.00);
	CreateDynamicObject(19455, 1738.98, -5373.83, 3.82,   0.00, 0.00, -90.00);
	CreateDynamicObject(19363, 1745.01, -5373.88, 3.82,   0.00, 0.00, -90.00);
	CreateDynamicObject(19436, 1746.43, -5374.75, 3.84,   0.00, 0.00, 0.00);
	CreateDynamicObject(19455, 1751.16, -5375.32, 3.82,   0.00, 0.00, -88.02);
	CreateDynamicObject(19455, 1760.69, -5374.68, 3.82,   0.00, 0.00, -84.12);
	CreateDynamicObject(19455, 1769.26, -5373.75, 3.82,   0.00, 0.00, -83.48);
	CreateDynamicObject(19455, 1773.75, -5368.39, 3.82,   0.00, 0.00, 2.38);
	CreateDynamicObject(19455, 1773.31, -5358.80, 3.82,   0.00, 0.00, 2.38);
	CreateDynamicObject(19455, 1772.92, -5349.21, 3.82,   0.00, 0.00, 2.38);
	CreateDynamicObject(19455, 1772.49, -5339.55, 3.82,   0.00, 0.00, 2.38);
	CreateDynamicObject(12814, 1538.13, -5178.88, 3.53,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1537.56, -5176.05, 3.50,   0.00, 0.00, 89.58);
	CreateDynamicObject(12814, 1489.67, -5176.51, 3.59,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1490.78, -5146.37, 3.55,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1490.76, -5116.44, 3.44,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1492.16, -5086.47, 3.56,   0.00, 0.00, 90.24);
	CreateDynamicObject(12814, 1527.71, -5170.01, 3.56,   0.00, 0.00, 90.00);
	CreateDynamicObject(19381, 1372.29, -5225.72, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1372.29, -5216.11, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1376.65, -5207.63, 3.80,   0.00, 90.00, 40.92);
	CreateDynamicObject(19381, 1382.79, -5225.72, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1393.29, -5225.72, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1403.79, -5225.72, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1414.29, -5225.72, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1424.79, -5225.72, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1382.79, -5216.11, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1393.29, -5216.11, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1403.79, -5216.11, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1414.29, -5216.11, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1423.92, -5216.50, 3.80,   0.00, 90.00, 11.52);
	CreateDynamicObject(19381, 1384.71, -5200.99, 3.79,   0.00, 90.00, 36.36);
	CreateDynamicObject(19381, 1394.15, -5197.69, 3.80,   0.00, 90.00, 12.72);
	CreateDynamicObject(19381, 1403.65, -5196.97, 3.81,   0.00, 90.00, -12.90);
	CreateDynamicObject(19381, 1413.09, -5200.49, 3.80,   0.00, 90.00, -28.80);
	CreateDynamicObject(19381, 1419.85, -5208.73, 3.79,   0.00, 90.00, -107.94);
	CreateDynamicObject(19381, 1414.29, -5206.47, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1403.79, -5206.47, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1393.29, -5206.47, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1382.79, -5206.47, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1403.12, -5199.66, 3.79,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1429.60, -5184.16, 3.81,   0.00, 90.00, -35.46);
	CreateDynamicObject(19381, 1444.45, -5190.03, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1437.13, -5188.97, 3.80,   0.00, 90.00, -28.44);
	CreateDynamicObject(19381, 1444.45, -5199.68, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1445.16, -5208.83, 3.80,   0.00, 90.00, 7.68);
	CreateDynamicObject(19381, 1446.65, -5218.37, 3.80,   0.00, 90.00, 7.68);
	CreateDynamicObject(19381, 1447.94, -5227.84, 3.80,   0.00, 90.00, 7.68);
	CreateDynamicObject(19381, 1440.98, -5197.99, 3.79,   0.00, 90.00, 9.90);
	CreateDynamicObject(19381, 1446.08, -5198.34, 3.79,   0.00, 90.00, -76.74);
	CreateDynamicObject(19381, 1449.70, -5205.40, 3.78,   0.00, 90.00, -56.16);
	CreateDynamicObject(19381, 1456.69, -5211.33, 3.77,   0.00, 90.00, -32.58);
	CreateDynamicObject(19381, 1464.03, -5213.71, 3.76,   0.00, 90.00, -2.82);
	CreateDynamicObject(19381, 1457.71, -5226.12, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1457.66, -5216.48, 3.81,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1451.12, -5217.13, 3.81,   0.00, 90.00, 18.42);
	CreateDynamicObject(19381, 1474.27, -5214.04, 3.75,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1484.71, -5214.00, 3.75,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1505.53, -5214.00, 3.75,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1516.02, -5213.97, 3.75,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1468.12, -5225.56, 3.80,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1468.09, -5215.91, 3.80,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1473.84, -5226.29, 3.79,   0.00, 90.00, -5.82);
	CreateDynamicObject(19381, 1478.58, -5217.30, 3.80,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1483.24, -5228.20, 3.78,   0.00, 90.00, -16.08);
	CreateDynamicObject(19381, 1484.56, -5221.83, 3.79,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1495.00, -5223.59, 3.79,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1493.16, -5231.49, 3.78,   0.00, 90.00, -16.08);
	CreateDynamicObject(19381, 1505.43, -5223.59, 3.79,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1515.93, -5223.59, 3.79,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1502.04, -5233.24, 3.79,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1512.55, -5233.22, 3.79,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1516.00, -5233.16, 3.78,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1506.28, -5238.55, 3.78,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1515.97, -5242.80, 3.79,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1521.22, -5248.32, 3.78,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1531.63, -5248.35, 3.78,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1531.61, -5257.97, 3.78,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1542.02, -5248.35, 3.78,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1543.74, -5248.35, 3.77,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1542.05, -5257.99, 3.78,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1543.74, -5257.97, 3.77,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1523.65, -5252.95, 3.79,   0.00, 90.00, -43.62);
	CreateDynamicObject(19381, 1536.17, -5266.84, 3.79,   0.00, 90.00, 8.82);
	CreateDynamicObject(19381, 1543.73, -5267.64, 3.78,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1543.73, -5277.27, 3.73,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1544.64, -5286.32, 3.73,   0.00, 90.00, 13.32);
	CreateDynamicObject(19381, 1546.38, -5295.28, 3.73,   0.00, 90.00, 8.34);
	CreateDynamicObject(19381, 1547.69, -5304.77, 3.75,   0.00, 90.00, 8.34);
	CreateDynamicObject(19381, 1539.85, -5275.27, 3.77,   0.00, 90.00, 33.06);
	CreateDynamicObject(12814, 1555.97, -5332.91, 3.64,   0.00, 0.00, -15.78);
	CreateDynamicObject(19381, 1464.48, -5391.05, 3.75,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1474.96, -5392.35, 3.75,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1485.47, -5391.41, 3.75,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1495.98, -5388.21, 3.75,   0.00, 90.00, 0.00);
	CreateDynamicObject(12814, 1547.72, -5371.13, 3.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(19381, 1506.48, -5388.21, 3.75,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1516.98, -5388.21, 3.75,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1527.48, -5388.21, 3.75,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1504.75, -5382.53, 3.76,   0.00, 90.00, 28.86);
	CreateDynamicObject(19381, 1516.98, -5378.59, 3.75,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1527.48, -5378.59, 3.75,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1513.80, -5377.14, 3.76,   0.00, 90.00, 28.86);
	CreateDynamicObject(19381, 1527.73, -5368.92, 3.75,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1522.60, -5371.43, 3.76,   0.00, 90.00, 28.86);
	CreateDynamicObject(19381, 1531.10, -5361.23, 3.76,   0.00, 90.00, 60.66);
	CreateDynamicObject(982, 1434.11, -5402.15, 4.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(982, 1434.11, -5427.77, 4.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(982, 1434.00, -5337.97, 4.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(982, 1434.00, -5312.36, 4.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(982, 1421.18, -5299.57, 4.38,   0.00, 0.00, 90.00);
	CreateDynamicObject(982, 1395.57, -5299.57, 4.38,   0.00, 0.00, 90.00);
	CreateDynamicObject(982, 1369.95, -5299.57, 4.38,   0.00, 0.00, 90.00);
	CreateDynamicObject(982, 1344.34, -5299.57, 4.38,   0.00, 0.00, 90.00);
	CreateDynamicObject(982, 1318.73, -5299.57, 4.38,   0.00, 0.00, 90.00);
	CreateDynamicObject(982, 1293.13, -5299.57, 4.38,   0.00, 0.00, 90.00);
	CreateDynamicObject(982, 1281.91, -5299.57, 4.38,   0.00, 0.00, 90.00);
	CreateDynamicObject(982, 1269.13, -5312.36, 4.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(982, 1403.42, -5388.54, 4.38,   0.00, 0.00, 90.00);
	CreateDynamicObject(982, 1377.80, -5388.54, 4.38,   0.00, 0.00, 90.00);
	CreateDynamicObject(982, 1352.18, -5388.54, 4.38,   0.00, 0.00, 90.00);
	CreateDynamicObject(18659, 1394.56, -5340.67, 5.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(18659, 1404.62, -5316.25, 6.13,   0.00, 0.00, 0.00);
	CreateDynamicObject(1531, 1388.40, -5311.60, 4.80,   0.00, 0.00, 90.00);
	CreateDynamicObject(1531, 1375.99, -5342.81, 5.52,   0.00, 0.00, 180.00);
	CreateDynamicObject(1528, 1383.68, -5351.05, 5.47,   0.00, 0.00, -90.00);
	CreateDynamicObject(1528, 1387.11, -5367.85, 5.47,   0.00, 0.00, 90.00);
	CreateDynamicObject(5088, 1318.85, -5337.27, 12.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(5088, 1336.01, -5367.96, 12.50,   0.00, 0.00, 125.64);
	CreateDynamicObject(5088, 1356.25, -5375.11, 12.50,   0.00, 0.00, -38.22);
	CreateDynamicObject(3594, 1400.19, -5414.79, 4.12,   0.00, 0.00, 60.78);
	CreateDynamicObject(3594, 1384.70, -5374.24, 4.12,   0.00, 0.00, 129.42);
	CreateDynamicObject(3594, 1293.31, -5341.76, 4.12,   0.00, 0.00, 193.50);
	CreateDynamicObject(3594, 1387.20, -5345.55, 4.12,   0.00, 0.00, 249.42);
	CreateDynamicObject(3037, 1184.96, -5026.18, 14.66,   0.00, 0.00, 48.84);
	CreateDynamicObject(3037, 1177.27, -5019.46, 14.66,   0.00, 0.00, 48.84);
	CreateDynamicObject(3037, 1178.87, -4964.16, 14.66,   0.00, 0.00, -47.76);
	CreateDynamicObject(3037, 1186.42, -4957.30, 14.66,   0.00, 0.00, -47.76);
	CreateDynamicObject(3037, 1256.97, -4958.88, 14.66,   0.00, 0.00, 90.00);
	CreateDynamicObject(3037, 1246.79, -4958.86, 14.66,   0.00, 0.00, 90.00);
	CreateDynamicObject(19471, 1182.52, -4962.26, 13.12,   0.00, 0.00, -46.78);
	CreateDynamicObject(19471, 1177.97, -4966.38, 13.12,   0.00, 0.00, -46.78);
	CreateDynamicObject(19471, 1186.95, -4958.63, 13.12,   0.00, 0.00, -46.78);
	CreateDynamicObject(19471, 1245.29, -4959.74, 13.12,   0.00, 0.00, -90.00);
	CreateDynamicObject(19471, 1252.72, -4959.57, 13.12,   0.00, 0.00, -90.00);
	CreateDynamicObject(19471, 1258.89, -4959.65, 13.12,   0.00, 0.00, -90.00);
	CreateDynamicObject(3037, 1266.85, -4966.38, 7.88,   0.00, 0.00, 90.00);
	CreateDynamicObject(19471, 1263.78, -4966.94, 6.05,   0.00, 0.00, -90.00);
	CreateDynamicObject(3037, 1256.32, -4966.33, 7.88,   0.00, 0.00, 90.00);
	CreateDynamicObject(3037, 1246.83, -4966.28, 7.88,   0.00, 0.00, 90.00);
	CreateDynamicObject(19471, 1246.25, -4966.86, 6.05,   0.00, 0.00, -90.00);
	CreateDynamicObject(3037, 1233.45, -4963.65, 7.88,   0.00, 0.00, 72.18);
	CreateDynamicObject(19471, 1230.37, -4962.96, 6.05,   0.00, 0.00, -108.42);
	CreateDynamicObject(3037, 1224.94, -4960.93, 7.88,   0.00, 0.00, 72.18);
	CreateDynamicObject(3037, 1199.87, -4962.40, 7.88,   0.00, 0.00, 110.88);
	CreateDynamicObject(19471, 1196.71, -4964.02, 6.05,   0.00, 0.00, -67.14);
	CreateDynamicObject(3037, 1181.00, -4979.99, 7.88,   0.00, 0.00, 158.40);
	CreateDynamicObject(19471, 1182.77, -4976.86, 6.05,   0.00, 0.00, -22.68);
	CreateDynamicObject(3037, 1180.81, -5005.31, 7.88,   0.00, 0.00, 200.94);
	CreateDynamicObject(19471, 1182.60, -5008.50, 6.05,   0.00, 0.00, 24.78);
	CreateDynamicObject(3037, 1200.46, -5023.83, 7.88,   0.00, 0.00, 249.60);
	CreateDynamicObject(19471, 1196.96, -5022.01, 6.05,   0.00, 0.00, 64.62);
	CreateDynamicObject(3037, 1227.44, -5024.50, 7.88,   0.00, 0.00, 288.24);
	CreateDynamicObject(19471, 1230.17, -5022.95, 6.05,   0.00, 0.00, 110.64);
	CreateDynamicObject(3037, 1236.94, -5021.49, 7.88,   0.00, 0.00, 288.24);
	CreateDynamicObject(3037, 1249.10, -5019.81, 7.88,   0.00, 0.00, 270.00);
	CreateDynamicObject(3037, 1260.56, -5019.90, 7.88,   0.00, 0.00, 270.00);
	CreateDynamicObject(3037, 1270.67, -5019.98, 7.88,   0.00, 0.00, 270.00);
	CreateDynamicObject(19471, 1245.71, -5019.28, 6.05,   0.00, 0.00, 91.74);
	CreateDynamicObject(19471, 1263.46, -5019.45, 6.05,   0.00, 0.00, 91.74);
	CreateDynamicObject(11015, 1368.68, -4770.29, 5.56,   0.00, 0.00, 180.00);
	CreateDynamicObject(1257, 1399.51, -5179.57, 5.34,   0.00, 0.00, 90.00);
	CreateDynamicObject(1257, 1399.32, -5192.18, 5.34,   0.00, 0.00, -90.00);
	CreateDynamicObject(1257, 1405.63, -5192.98, 5.34,   0.00, 0.00, -105.84);
	CreateDynamicObject(1257, 1392.54, -5192.98, 5.34,   0.00, 0.00, -76.26);
	CreateDynamicObject(1257, 1392.89, -5180.15, 5.34,   0.00, 0.00, -263.34);
	CreateDynamicObject(1257, 1406.43, -5180.31, 5.34,   0.00, 0.00, -278.64);
	CreateDynamicObject(1229, 1442.74, -5230.01, 5.62,   0.00, 0.00, 0.00);
	CreateDynamicObject(1229, 1362.78, -5230.04, 5.62,   0.00, 0.00, 0.00);
	CreateDynamicObject(711, 1790.94, -5132.20, 9.67,   0.00, 0.00, 0.00);
	CreateDynamicObject(621, 1790.94, -5122.20, 3.70,   0.00, 0.00, 180.00);
	CreateDynamicObject(740, 1790.94, -5112.20, 2.78,   0.00, 0.00, 0.00);
	CreateDynamicObject(711, 1790.94, -5092.20, 9.67,   0.00, 0.00, 0.00);
	CreateDynamicObject(621, 1790.94, -5102.20, 3.70,   0.00, 0.00, 180.00);
	CreateDynamicObject(621, 1790.94, -5082.20, 3.70,   0.00, 0.00, 180.00);
	CreateDynamicObject(740, 1790.94, -5072.20, 2.78,   0.00, 0.00, 0.00);
	CreateDynamicObject(621, 1790.94, -5062.20, 3.70,   0.00, 0.00, 180.00);
	CreateDynamicObject(711, 1790.94, -5052.20, 9.67,   0.00, 0.00, 0.00);
	CreateDynamicObject(621, 1790.94, -5042.20, 3.70,   0.00, 0.00, 180.00);
	CreateDynamicObject(740, 1790.94, -5032.20, 2.78,   0.00, 0.00, 0.00);
	CreateDynamicObject(621, 1790.94, -5022.20, 3.70,   0.00, 0.00, 180.00);
	CreateDynamicObject(711, 1790.94, -5012.20, 9.67,   0.00, 0.00, 0.00);
	CreateDynamicObject(621, 1790.94, -5002.20, 3.70,   0.00, 0.00, 180.00);
	CreateDynamicObject(740, 1790.94, -4992.20, 2.78,   0.00, 0.00, 0.00);
	CreateDynamicObject(621, 1790.94, -4982.20, 3.70,   0.00, 0.00, 180.00);
	CreateDynamicObject(711, 1790.94, -4972.20, 9.67,   0.00, 0.00, 0.00);
	CreateDynamicObject(621, 1790.90, -4962.20, 3.70,   0.00, 0.00, 180.00);
	CreateDynamicObject(740, 1790.94, -4952.20, 2.78,   0.00, 0.00, 0.00);
	CreateDynamicObject(621, 1790.94, -4942.20, 3.70,   0.00, 0.00, 180.00);
	CreateDynamicObject(711, 1790.94, -4892.20, 9.67,   0.00, 0.00, 0.00);
	CreateDynamicObject(621, 1790.94, -4922.20, 3.70,   0.00, 0.00, 180.00);
	CreateDynamicObject(740, 1790.94, -4912.20, 2.78,   0.00, 0.00, 0.00);
	CreateDynamicObject(621, 1790.94, -4902.20, 3.70,   0.00, 0.00, 180.00);
	CreateDynamicObject(19381, 1552.93, -4794.16, 3.80,   0.00, 90.00, 0.00);
	CreateDynamicObject(11085, 1681.11, -4828.38, 9.86,   0.00, 0.00, -90.00);
	CreateDynamicObject(11007, 1670.79, -4828.42, 9.14,   0.00, 0.00, -90.00);
	CreateDynamicObject(11103, 1700.74, -4812.16, 6.33,   0.00, 0.00, -90.00);
	CreateDynamicObject(11089, 1654.60, -4807.30, 7.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(621, 1790.94, -4882.20, 3.70,   0.00, 0.00, 180.00);
	CreateDynamicObject(740, 1790.94, -4872.20, 2.78,   0.00, 0.00, 0.00);
	CreateDynamicObject(621, 1790.94, -4862.20, 3.70,   0.00, 0.00, 180.00);
	CreateDynamicObject(711, 1790.94, -4852.20, 9.67,   0.00, 0.00, 0.00);
	CreateDynamicObject(621, 1790.94, -4842.20, 3.70,   0.00, 0.00, 180.00);
	CreateDynamicObject(740, 1790.94, -4832.20, 2.78,   0.00, 0.00, 0.00);
	CreateDynamicObject(621, 1790.94, -4822.20, 3.70,   0.00, 0.00, 180.00);
	CreateDynamicObject(711, 1790.94, -4812.20, 9.67,   0.00, 0.00, 0.00);
	CreateDynamicObject(711, 1790.94, -4932.20, 9.67,   0.00, 0.00, 0.00);
	CreateDynamicObject(3615, 1833.10, -4992.66, 5.21,   0.00, 0.00, 90.00);
	CreateDynamicObject(3615, 1833.10, -4928.10, 5.21,   0.00, 0.00, 90.00);
	CreateDynamicObject(3615, 1833.10, -4865.70, 5.21,   0.00, 0.00, 90.00);
	CreateDynamicObject(1461, 1834.54, -4865.01, 4.63,   0.00, 0.00, 90.00);
	CreateDynamicObject(1461, 1834.71, -4927.37, 4.63,   0.00, 0.00, 90.00);
	CreateDynamicObject(1461, 1834.70, -4992.19, 4.63,   0.00, 0.00, 90.00);
	CreateDynamicObject(10830, 1963.41, -5149.41, 11.98,   0.00, 0.00, 45.00);
	CreateDynamicObject(10773, 1971.32, -5166.59, 6.71,   0.00, 0.00, 0.00);
	CreateDynamicObject(10773, 1971.32, -5166.59, 6.71,   0.00, 0.00, 0.00);
	CreateDynamicObject(10773, 1976.40, -5152.67, 6.71,   0.00, 0.00, 180.00);
	CreateDynamicObject(6959, 1207.10, -4839.72, 0.32,   -10.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1213.34, -4912.26, -0.65,   10.00, 0.00, -90.00);
	CreateDynamicObject(12814, 1242.83, -4923.52, -0.65,   10.00, 0.00, 0.00);
	CreateDynamicObject(12814, 1227.85, -4920.89, -15.21,   -10.00, 90.00, 180.00);
	CreateDynamicObject(12945, 1498.76, -5217.60, 3.41,   0.00, 0.00, -90.00);
	CreateDynamicObject(983, 1206.94, -4890.71, 4.26,   0.00, 0.00, 0.00);
	CreateDynamicObject(983, 1206.73, -4875.46, 4.26,   0.00, 0.00, 0.00);
	CreateDynamicObject(982, 1523.18, -4987.47, 4.56,   0.00, 0.00, 0.00);
	CreateDynamicObject(982, 1523.18, -4961.84, 4.56,   0.00, 0.00, 0.00);
	CreateDynamicObject(982, 1523.18, -4936.22, 4.56,   0.00, 0.00, 0.00);
	CreateDynamicObject(982, 1523.18, -4910.62, 4.56,   0.00, 0.00, 0.00);
	CreateDynamicObject(982, 1523.20, -4885.05, 4.56,   0.00, 0.00, 0.00);
	CreateDynamicObject(982, 1523.18, -4859.38, 4.56,   0.00, 0.00, 0.00);
	CreateDynamicObject(983, 1523.18, -4848.17, 4.56,   0.00, 0.00, 0.00);
	CreateDynamicObject(982, 1561.65, -4745.90, 4.56,   0.00, 0.00, 0.00);
	CreateDynamicObject(983, 1561.65, -4760.76, 4.56,   0.00, 0.00, 0.00);
	CreateDynamicObject(983, 1560.48, -4766.98, 4.56,   0.00, 0.00, -21.90);
	CreateDynamicObject(983, 1558.57, -4773.03, 4.56,   0.00, 0.00, -13.02);
	CreateDynamicObject(983, 1557.47, -4779.31, 4.56,   0.00, 0.00, -6.46);
	CreateDynamicObject(984, 1556.89, -4788.89, 4.56,   0.00, 0.00, -2.22);
	CreateDynamicObject(983, 1556.64, -4798.48, 4.56,   0.00, 0.00, 0.00);
	CreateDynamicObject(983, 1556.18, -4804.84, 4.56,   0.00, 0.00, -7.92);
	CreateDynamicObject(983, 1555.03, -4811.13, 4.56,   0.00, 0.00, -12.96);
	CreateDynamicObject(983, 1553.18, -4817.26, 4.56,   0.00, 0.00, -20.76);
	CreateDynamicObject(983, 1549.92, -4822.63, 4.56,   0.00, 0.00, -41.64);
	CreateDynamicObject(983, 1544.77, -4826.04, 4.56,   0.00, 0.00, -71.52);
	CreateDynamicObject(983, 1538.58, -4827.26, 4.56,   0.00, 0.00, -86.46);
	CreateDynamicObject(983, 1532.26, -4826.96, 4.56,   0.00, 0.00, -98.94);
	CreateDynamicObject(983, 1526.09, -4825.47, 4.56,   0.00, 0.00, -107.94);
	CreateDynamicObject(983, 1520.15, -4823.11, 4.56,   0.00, 0.00, -115.98);
	CreateDynamicObject(983, 1514.35, -4820.03, 4.56,   0.00, 0.00, -120.24);
	CreateDynamicObject(984, 1506.39, -4814.70, 4.56,   0.00, 0.00, 54.66);
	CreateDynamicObject(984, 1497.22, -4808.22, 4.56,   0.00, 0.00, 54.66);
	CreateDynamicObject(982, 1476.04, -4802.70, 4.56,   0.00, 0.00, 90.00);
	CreateDynamicObject(982, 1463.26, -4755.71, 4.56,   0.00, 0.00, 0.00);
	CreateDynamicObject(984, 1463.24, -4739.70, 4.56,   0.00, 0.00, 0.00);
	CreateDynamicObject(982, 1476.12, -4733.31, 4.56,   0.00, 0.00, 90.00);
	CreateDynamicObject(982, 1501.79, -4733.31, 4.56,   0.00, 0.00, 90.00);
	CreateDynamicObject(982, 1527.35, -4733.31, 4.56,   0.00, 0.00, 90.30);
	CreateDynamicObject(982, 1548.91, -4733.21, 4.56,   0.00, 0.00, 90.30);
	CreateDynamicObject(982, 1505.68, -5038.67, 4.56,   0.00, 0.00, 0.00);
	CreateDynamicObject(982, 1505.68, -5064.28, 4.56,   0.00, 0.00, 0.00);
	CreateDynamicObject(982, 1505.68, -5089.90, 4.56,   0.00, 0.00, 0.00);
	CreateDynamicObject(983, 1503.19, -5104.68, 4.56,   0.00, 0.00, 127.74);
	CreateDynamicObject(983, 1497.08, -5109.24, 4.56,   0.00, 0.00, 127.08);
	CreateDynamicObject(983, 1502.15, -5105.45, 4.56,   0.00, 0.00, 127.08);
	CreateDynamicObject(984, 1512.07, -5025.86, 4.56,   0.00, 0.00, 90.00);
	CreateDynamicObject(983, 1519.99, -5025.91, 4.56,   0.00, 0.00, 90.00);
	CreateDynamicObject(982, 1489.01, -5029.73, 4.56,   0.00, 0.00, 0.24);
	CreateDynamicObject(982, 1489.16, -5055.35, 4.56,   0.00, 0.00, 0.24);
	CreateDynamicObject(982, 1489.56, -5080.96, 4.56,   0.00, 0.00, 1.50);
	CreateDynamicObject(984, 1491.39, -5100.06, 4.56,   0.00, 0.00, 13.38);
	CreateDynamicObject(983, 1493.49, -5108.11, 4.56,   0.00, 0.00, 18.42);
	CreateDynamicObject(736, 1205.02, -4853.01, 15.36,   0.00, 0.00, 0.00);
	CreateDynamicObject(620, 1205.58, -4850.16, 4.11,   0.00, 0.00, 0.00);
	CreateDynamicObject(620, 1210.78, -4867.36, 4.11,   0.00, 0.00, 0.00);
	CreateDynamicObject(620, 1205.91, -4821.41, 4.11,   0.00, 0.00, 0.00);
	CreateDynamicObject(620, 1211.07, -4804.01, 4.11,   0.00, 0.00, 0.00);
	CreateDynamicObject(647, 1205.43, -4852.99, 5.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(647, 1205.71, -4847.29, 5.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(736, 1205.14, -4847.31, 15.36,   0.00, 0.00, 0.00);
	CreateDynamicObject(647, 1210.19, -4863.22, 5.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(647, 1210.34, -4871.32, 5.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(736, 1210.11, -4871.46, 15.36,   0.00, 0.00, 0.00);
	CreateDynamicObject(736, 1209.70, -4863.27, 15.36,   0.00, 0.00, 0.00);
	CreateDynamicObject(647, 1205.74, -4824.63, 5.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(647, 1205.26, -4818.03, 5.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(736, 1205.21, -4824.84, 15.36,   0.00, 0.00, 0.00);
	CreateDynamicObject(736, 1204.67, -4817.87, 15.36,   0.00, 0.00, 0.00);
	CreateDynamicObject(647, 1210.64, -4807.94, 5.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(647, 1210.56, -4798.94, 5.50,   0.00, 0.00, 0.00);
	CreateDynamicObject(736, 1210.06, -4807.96, 15.36,   0.00, 0.00, 0.00);
	CreateDynamicObject(736, 1210.08, -4798.97, 15.36,   0.00, 0.00, 0.00);
	CreateDynamicObject(4192, 1159.94, -4836.55, 11.73,   0.00, 0.00, 180.00);
	CreateDynamicObject(2614, 1196.65, -4835.79, 12.62,   0.00, 0.00, 90.00);
	CreateDynamicObject(7091, 1197.45, -4828.83, 13.71,   0.00, 0.00, 0.00);
	CreateDynamicObject(7091, 1197.45, -4842.77, 13.71,   0.00, 0.00, 0.00);
	CreateDynamicObject(7091, 1193.19, -4835.75, 37.32,   0.00, 0.00, 0.00);
	CreateDynamicObject(1536, 1195.76, -4837.28, 6.40,   0.00, 0.00, 90.00);
	CreateDynamicObject(1536, 1195.73, -4834.26, 6.40,   0.00, 0.00, -90.00);
	CreateDynamicObject(12814, 1128.81, -4884.17, -0.13,   10.00, 0.00, 180.00);
	CreateDynamicObject(12814, 1098.88, -4884.15, -0.11,   10.00, 0.00, 180.00);
	CreateDynamicObject(12814, 1163.24, -4893.04, -0.18,   10.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1163.24, -4873.70, -0.18,   10.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1113.61, -4858.70, -10.83,   0.00, 90.00, 90.00);
	CreateDynamicObject(12814, 1160.66, -4858.71, -14.94,   10.00, 90.00, 90.00);
	CreateDynamicObject(982, 1707.79, -4956.29, 4.45,   0.00, 0.00, 90.00);
	CreateDynamicObject(982, 1687.62, -4956.29, 4.45,   0.00, 0.00, 90.00);
	CreateDynamicObject(19463, 1466.54, -5275.25, 2.68,   0.00, 0.00, 0.00);
	CreateDynamicObject(19463, 1466.54, -5265.61, 2.68,   0.00, 0.00, 0.00);
	CreateDynamicObject(19463, 1466.54, -5254.62, 2.39,   -3.40, 0.00, 0.00);
	CreateDynamicObject(19463, 1466.52, -5264.17, 2.68,   0.00, 0.00, 0.00);
	CreateDynamicObject(646, 1197.13, -4833.32, 7.81,   0.00, 0.00, 0.00);
	CreateDynamicObject(646, 1197.07, -4838.01, 7.81,   0.00, 0.00, 0.00);
	CreateDynamicObject(646, 1205.89, -4838.81, 5.23,   0.00, 0.00, 0.00);
	CreateDynamicObject(646, 1205.79, -4832.57, 5.23,   0.00, 0.00, 0.00);
	CreateDynamicObject(870, 1521.07, -5012.92, 4.25,   0.00, 0.00, 0.00);
	CreateDynamicObject(877, 1518.82, -5020.24, 5.79,   0.00, 0.00, 0.00);
	CreateDynamicObject(878, 1509.66, -5019.10, 5.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(870, 1518.71, -5013.06, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1516.49, -5012.67, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1514.13, -5012.62, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1511.75, -5012.24, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1509.16, -5012.18, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1506.54, -5011.83, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1521.39, -4999.20, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(878, 1519.81, -5005.85, 5.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(877, 1510.81, -5006.34, 5.79,   0.00, 0.00, 0.00);
	CreateDynamicObject(870, 1518.89, -4998.79, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1516.35, -4998.55, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1513.67, -4999.06, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1510.56, -4999.21, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1507.86, -4999.33, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(673, 1518.37, -5019.08, 4.03,   0.00, 0.00, 0.00);
	CreateDynamicObject(700, 1519.03, -5005.01, 4.67,   0.00, 0.00, 0.00);
	CreateDynamicObject(713, 1512.53, -4899.63, 4.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(620, 1509.06, -5017.74, 3.98,   0.00, 0.00, 180.00);
	CreateDynamicObject(620, 1510.31, -5004.14, 3.98,   0.00, 0.00, 180.00);
	CreateDynamicObject(673, 1514.60, -5010.63, 4.03,   0.00, 0.00, 0.24);
	CreateDynamicObject(700, 1513.89, -5016.26, 4.67,   0.00, 0.00, 0.00);
	CreateDynamicObject(700, 1506.93, -5008.71, 4.67,   0.00, 0.00, 0.00);
	CreateDynamicObject(878, 1519.31, -4991.63, 5.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(877, 1519.02, -4980.28, 5.79,   0.00, 0.00, 0.06);
	CreateDynamicObject(878, 1519.17, -4969.92, 5.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(878, 1518.94, -4959.54, 5.70,   0.00, 0.00, -5.46);
	CreateDynamicObject(877, 1519.56, -4949.60, 5.79,   0.00, 0.00, 0.06);
	CreateDynamicObject(877, 1519.07, -4939.31, 5.79,   0.00, 0.00, 0.06);
	CreateDynamicObject(620, 1513.87, -4995.00, 3.98,   0.00, 0.00, 180.00);
	CreateDynamicObject(620, 1514.06, -4968.84, 3.98,   0.00, 0.00, 180.00);
	CreateDynamicObject(870, 1514.43, -4991.97, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1514.43, -4988.33, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1514.43, -4984.46, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1514.43, -4980.37, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1514.43, -4975.93, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1514.43, -4971.65, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(673, 1514.43, -4982.59, 4.03,   0.00, 0.00, 0.24);
	CreateDynamicObject(673, 1514.43, -4986.56, 4.03,   0.00, 0.00, 0.24);
	CreateDynamicObject(673, 1514.43, -4990.33, 4.03,   0.00, 0.00, 0.24);
	CreateDynamicObject(673, 1514.43, -4978.05, 4.03,   0.00, 0.00, 0.24);
	CreateDynamicObject(673, 1514.43, -4973.58, 4.03,   0.00, 0.00, 0.24);
	CreateDynamicObject(870, 1514.43, -4965.82, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1514.43, -4962.40, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1514.43, -4958.64, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1514.43, -4954.62, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1514.43, -4950.07, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1514.43, -4946.14, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(620, 1513.78, -4943.76, 3.98,   0.00, 0.00, 180.00);
	CreateDynamicObject(673, 1514.43, -4964.10, 4.03,   0.00, 0.00, 0.24);
	CreateDynamicObject(673, 1514.43, -4960.38, 4.03,   0.00, 0.00, 0.24);
	CreateDynamicObject(673, 1514.43, -4956.27, 4.03,   0.00, 0.00, 0.24);
	CreateDynamicObject(673, 1514.43, -4952.23, 4.03,   0.00, 0.00, 0.24);
	CreateDynamicObject(673, 1514.43, -4948.22, 4.03,   0.00, 0.00, 0.24);
	CreateDynamicObject(870, 1514.43, -4941.42, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1514.43, -4938.09, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1514.43, -4934.02, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1514.43, -4930.35, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1514.43, -4926.75, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1514.43, -4922.98, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(620, 1513.79, -4920.68, 3.98,   0.00, 0.00, 180.00);
	CreateDynamicObject(673, 1514.43, -4939.87, 4.03,   0.00, 0.00, 0.24);
	CreateDynamicObject(673, 1514.43, -4935.92, 4.03,   0.00, 0.00, 0.24);
	CreateDynamicObject(673, 1514.43, -4932.10, 4.03,   0.00, 0.00, 0.24);
	CreateDynamicObject(673, 1514.43, -4928.38, 4.03,   0.00, 0.00, 0.24);
	CreateDynamicObject(673, 1514.43, -4924.89, 4.03,   0.00, 0.00, 0.24);
	CreateDynamicObject(870, 1516.65, -4920.25, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1519.05, -4920.34, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1521.50, -4920.22, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(878, 1519.17, -4928.49, 5.70,   0.00, 0.00, -5.46);
	CreateDynamicObject(713, 1482.00, -4826.84, 4.17,   0.00, 0.00, -158.10);
	CreateDynamicObject(713, 1460.58, -5390.71, 4.17,   0.00, 0.00, -158.10);
	CreateDynamicObject(713, 1708.38, -5175.24, 4.17,   0.00, 0.00, -158.10);
	CreateDynamicObject(713, 1472.92, -4739.38, 4.17,   0.00, 0.00, -158.10);
	CreateDynamicObject(620, 1424.57, -4825.08, 3.98,   0.00, 0.00, 180.00);
	CreateDynamicObject(736, 1445.57, -4825.65, 15.36,   0.00, 0.00, 0.00);
	CreateDynamicObject(736, 1444.52, -4833.29, 15.36,   0.00, 0.00, 0.00);
	CreateDynamicObject(620, 1445.16, -4829.07, 3.98,   0.00, 0.00, 180.00);
	CreateDynamicObject(705, 1517.17, -4859.01, 3.96,   0.00, 0.00, 0.00);
	CreateDynamicObject(705, 1484.69, -4868.95, 3.96,   0.00, 0.00, 0.00);
	CreateDynamicObject(705, 1553.14, -4743.78, 3.96,   0.00, 0.00, 0.00);
	CreateDynamicObject(706, 1509.91, -4772.03, 3.63,   0.00, 0.00, 0.00);
	CreateDynamicObject(707, 1547.71, -4783.51, 3.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(709, 1531.28, -4818.08, 3.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(709, 1757.68, -5187.25, 3.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(709, 1438.55, -5094.12, 3.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(648, 1468.63, -4786.29, 3.87,   0.00, 0.00, 0.00);
	CreateDynamicObject(715, 1509.45, -4737.58, 12.27,   0.00, 0.00, 0.00);
	CreateDynamicObject(715, 1469.89, -4767.65, 12.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(705, 1385.73, -5218.03, 3.96,   0.00, 0.00, 0.00);
	CreateDynamicObject(705, 1417.82, -5216.36, 3.96,   0.00, 0.00, 0.00);
	CreateDynamicObject(705, 1534.77, -5254.94, 3.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(691, 1447.42, -5200.03, 3.84,   0.00, 0.00, 0.00);
	CreateDynamicObject(691, 1516.44, -5382.72, 3.84,   0.00, 0.00, 0.00);
	CreateDynamicObject(620, 1491.68, -5052.31, 3.98,   0.00, 0.00, 180.00);
	CreateDynamicObject(620, 1491.68, -5072.31, 3.98,   0.00, 0.00, 180.00);
	CreateDynamicObject(711, 1501.75, -5092.31, 9.91,   0.00, 0.00, 0.00);
	CreateDynamicObject(620, 1491.68, -5092.31, 3.98,   0.00, 0.00, 180.00);
	CreateDynamicObject(711, 1501.75, -5072.31, 9.91,   0.00, 0.00, 0.00);
	CreateDynamicObject(711, 1501.75, -5052.31, 9.91,   0.00, 0.00, 0.00);
	CreateDynamicObject(620, 1491.68, -5032.31, 3.98,   0.00, 0.00, 180.00);
	CreateDynamicObject(711, 1501.75, -5032.31, 9.91,   0.00, 0.00, 0.00);
	CreateDynamicObject(700, 1497.16, -5042.31, 4.67,   0.00, 0.00, 0.00);
	CreateDynamicObject(700, 1497.16, -5062.31, 4.67,   0.00, 0.00, 0.00);
	CreateDynamicObject(700, 1497.16, -5082.31, 4.67,   0.00, 0.00, 0.00);
	CreateDynamicObject(700, 1497.64, -5102.60, 4.67,   0.00, 0.00, 0.00);
	CreateDynamicObject(11414, 1511.09, -4773.37, 5.62,   0.00, 0.00, 0.00);
	CreateDynamicObject(11414, 1511.09, -4773.37, 5.62,   0.00, 0.00, 49.14);
	CreateDynamicObject(877, 1514.40, -4874.16, 5.79,   0.00, 0.00, 0.06);
	CreateDynamicObject(877, 1514.65, -4886.70, 5.79,   0.00, 0.00, 0.06);
	CreateDynamicObject(870, 1512.69, -4916.93, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1513.21, -4912.68, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1510.10, -4901.84, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1513.41, -4902.18, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1497.70, -4902.91, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1493.70, -4903.40, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1491.31, -4903.65, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(4172, 1497.80, -4844.91, 6.05,   0.00, 0.00, -35.28);
	CreateDynamicObject(4172, 1524.04, -4815.65, 6.05,   0.00, 0.00, 1.74);
	CreateDynamicObject(4172, 1488.75, -4744.84, 6.05,   0.00, 0.00, 0.00);
	CreateDynamicObject(870, 1501.15, -4902.74, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1513.27, -4905.80, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1513.49, -4909.16, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(878, 1517.47, -4913.63, 5.70,   0.00, 0.00, -5.46);
	CreateDynamicObject(877, 1518.07, -4902.69, 5.79,   0.00, 0.00, 0.06);
	CreateDynamicObject(878, 1493.45, -4897.48, 5.70,   0.00, 0.00, -71.94);
	CreateDynamicObject(877, 1490.49, -4882.16, 5.79,   0.00, 0.00, 4.86);
	CreateDynamicObject(877, 1478.80, -4857.98, 5.79,   0.00, 0.00, 24.42);
	CreateDynamicObject(878, 1471.24, -4847.80, 5.70,   0.00, 0.00, -71.94);
	CreateDynamicObject(870, 1486.43, -4874.48, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1464.96, -4841.98, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1461.97, -4839.53, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1458.55, -4837.07, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1455.21, -4834.81, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1451.80, -4832.55, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1448.04, -4831.85, 4.25,   0.00, 0.00, -167.76);
	CreateDynamicObject(870, 1463.13, -4844.61, 4.25,   0.00, 0.00, -169.32);
	CreateDynamicObject(870, 1460.36, -4842.85, 4.25,   0.00, 0.00, -169.32);
	CreateDynamicObject(870, 1457.10, -4840.48, 4.25,   0.00, 0.00, -169.32);
	CreateDynamicObject(870, 1453.80, -4838.14, 4.25,   0.00, 0.00, -169.32);
	CreateDynamicObject(870, 1450.52, -4836.31, 4.25,   0.00, 0.00, -169.32);
	CreateDynamicObject(870, 1447.12, -4834.42, 4.25,   0.00, 0.00, -169.32);
	CreateDynamicObject(870, 1440.22, -4830.49, 4.25,   0.00, 0.00, -169.32);
	CreateDynamicObject(870, 1441.14, -4825.18, 4.25,   0.00, 0.00, -169.32);
	CreateDynamicObject(870, 1436.28, -4824.59, 4.25,   0.00, 0.00, -169.32);
	CreateDynamicObject(870, 1432.11, -4824.22, 4.25,   0.00, 0.00, -169.32);
	CreateDynamicObject(878, 1468.06, -4795.73, 5.70,   0.00, 0.00, -7.14);
	CreateDynamicObject(877, 1468.04, -4777.36, 5.79,   0.00, 0.00, 0.66);
	CreateDynamicObject(1280, 1492.26, -5047.31, 4.31,   0.00, 0.00, 180.00);
	CreateDynamicObject(1280, 1492.24, -5037.31, 4.31,   0.00, 0.00, 180.00);
	CreateDynamicObject(1280, 1492.24, -5042.31, 4.31,   0.00, 0.00, 180.00);
	CreateDynamicObject(1280, 1492.24, -5057.31, 4.31,   0.00, 0.00, 180.00);
	CreateDynamicObject(1280, 1492.24, -5062.31, 4.31,   0.00, 0.00, 180.00);
	CreateDynamicObject(1280, 1492.24, -5067.31, 4.31,   0.00, 0.00, 180.00);
	CreateDynamicObject(1280, 1492.24, -5077.31, 4.31,   0.00, 0.00, 180.00);
	CreateDynamicObject(1280, 1492.24, -5082.31, 4.31,   0.00, 0.00, 180.00);
	CreateDynamicObject(1280, 1492.24, -5087.31, 4.31,   0.00, 0.00, 180.00);
	CreateDynamicObject(1280, 1501.75, -5087.31, 4.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(1280, 1501.75, -5082.31, 4.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(1280, 1501.75, -5077.31, 4.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(1280, 1501.75, -5067.31, 4.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(1280, 1501.75, -5062.31, 4.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(1280, 1501.75, -5057.31, 4.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(1280, 1501.75, -5047.31, 4.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(1280, 1501.75, -5042.31, 4.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(1280, 1501.75, -5037.31, 4.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(878, 1495.15, -5019.81, 5.70,   0.00, 0.00, -64.14);
	CreateDynamicObject(1280, 1510.35, -4996.86, 4.31,   0.00, 0.00, -90.00);
	CreateDynamicObject(1280, 1512.51, -4988.33, 4.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(1280, 1512.51, -4978.33, 4.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(1280, 1512.51, -4968.33, 4.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(1280, 1512.51, -4958.33, 4.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(1280, 1512.51, -4948.33, 4.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(1280, 1512.51, -4938.33, 4.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(19381, 1507.39, -4963.28, 3.88,   0.00, 90.00, 0.00);
	CreateDynamicObject(19381, 1517.81, -4963.28, 3.88,   0.00, 90.00, 0.00);
	CreateDynamicObject(1280, 1512.51, -4928.30, 4.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(1280, 1512.47, -4920.20, 4.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(1280, 1511.12, -4912.39, 4.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(1280, 1511.08, -4905.38, 4.31,   0.00, 0.00, 0.00);
	CreateDynamicObject(1280, 1500.54, -4905.43, 4.31,   0.00, 0.00, 90.00);
	CreateDynamicObject(1280, 1494.47, -4905.75, 4.31,   0.00, 0.00, 90.00);
	CreateDynamicObject(1280, 1504.70, -4805.96, 4.25,   0.00, 0.00, -90.00);
	CreateDynamicObject(1280, 1514.70, -4805.32, 4.25,   0.00, 0.00, -90.00);
	CreateDynamicObject(1280, 1524.70, -4805.96, 4.25,   0.00, 0.00, -90.00);
	CreateDynamicObject(1280, 1534.16, -4805.95, 4.25,   0.00, 0.00, -90.00);
	CreateDynamicObject(1280, 1544.59, -4815.15, 4.25,   0.00, 0.00, 180.00);
	CreateDynamicObject(1280, 1544.75, -4822.51, 4.25,   0.00, 0.00, 180.00);
	CreateDynamicObject(1280, 1472.73, -4798.45, 4.25,   0.00, 0.00, 180.00);
	CreateDynamicObject(1280, 1472.73, -4788.45, 4.25,   0.00, 0.00, 180.00);
	CreateDynamicObject(1280, 1472.73, -4778.45, 4.25,   0.00, 0.00, 180.00);
	CreateDynamicObject(1280, 1472.73, -4768.45, 4.25,   0.00, 0.00, 180.00);
	CreateDynamicObject(1280, 1465.37, -4762.68, 4.25,   0.00, 0.00, 180.00);
	CreateDynamicObject(1280, 1465.37, -4752.68, 4.25,   0.00, 0.00, 180.00);
	CreateDynamicObject(1280, 1465.37, -4742.68, 4.25,   0.00, 0.00, 180.00);
	CreateDynamicObject(1280, 1501.71, -4743.73, 4.25,   0.00, 0.00, 180.00);
	CreateDynamicObject(1280, 1501.71, -4749.80, 4.25,   0.00, 0.00, 180.00);
	CreateDynamicObject(1280, 1501.06, -4743.73, 4.25,   0.00, 0.00, 0.00);
	CreateDynamicObject(1280, 1501.06, -4749.80, 4.25,   0.00, 0.00, 0.00);
	CreateDynamicObject(1280, 1516.71, -4743.73, 4.25,   0.00, 0.00, 180.00);
	CreateDynamicObject(1280, 1516.71, -4749.80, 4.25,   0.00, 0.00, 180.00);
	CreateDynamicObject(1280, 1516.06, -4743.73, 4.25,   0.00, 0.00, 0.00);
	CreateDynamicObject(1280, 1516.06, -4749.80, 4.25,   0.00, 0.00, 0.00);
	CreateDynamicObject(983, 1491.98, -5015.89, 4.56,   0.00, 0.00, 110.58);
	CreateDynamicObject(983, 1497.10, -5012.38, 4.56,   0.00, 0.00, 138.06);
	CreateDynamicObject(983, 1500.41, -5006.97, 4.56,   0.00, 0.00, 158.22);
	CreateDynamicObject(983, 1502.00, -5000.78, 4.56,   0.00, 0.00, 172.32);
	CreateDynamicObject(982, 1502.38, -4984.80, 4.56,   0.00, 0.00, 0.24);
	CreateDynamicObject(983, 1502.33, -4971.99, 4.56,   0.00, 0.00, 0.00);
	CreateDynamicObject(4882, 1513.00, -4998.90, 8.74,   0.00, 0.00, -84.66);
	CreateDynamicObject(982, 1502.22, -4939.07, 4.56,   0.00, 0.00, 0.24);
	CreateDynamicObject(983, 1501.77, -4923.09, 4.62,   0.00, 0.00, 7.32);
	CreateDynamicObject(983, 1500.35, -4916.88, 4.62,   0.00, 0.00, 18.54);
	CreateDynamicObject(983, 1497.49, -4911.26, 4.62,   0.00, 0.00, 35.52);
	CreateDynamicObject(983, 1492.81, -4907.18, 4.62,   0.00, 0.00, 61.80);
	CreateDynamicObject(983, 1488.94, -4902.61, 4.62,   0.00, 0.00, 16.92);
	CreateDynamicObject(983, 1487.74, -4896.36, 4.62,   0.00, 0.00, 4.20);
	CreateDynamicObject(984, 1485.99, -4886.95, 4.62,   0.00, 0.00, 13.74);
	CreateDynamicObject(984, 1481.96, -4874.87, 4.62,   0.00, 0.00, 23.16);
	CreateDynamicObject(984, 1476.02, -4863.62, 4.62,   0.00, 0.00, 32.52);
	CreateDynamicObject(984, 1468.31, -4853.35, 4.62,   0.00, 0.00, 41.04);
	CreateDynamicObject(984, 1459.24, -4844.35, 4.62,   0.00, 0.00, 49.44);
	CreateDynamicObject(984, 1448.86, -4836.93, 4.62,   0.00, 0.00, 59.46);
	CreateDynamicObject(984, 1437.49, -4831.27, 4.62,   0.00, 0.00, 68.10);
	CreateDynamicObject(984, 1425.28, -4827.53, 4.62,   0.00, 0.00, 78.18);
	CreateDynamicObject(983, 1405.50, -4825.19, 4.62,   0.00, 0.00, 80.88);
	CreateDynamicObject(983, 1405.38, -4823.28, 4.62,   0.00, 0.00, 98.16);
	CreateDynamicObject(983, 1411.81, -4825.87, 4.62,   0.00, 0.00, 86.16);
	CreateDynamicObject(983, 1416.58, -4826.18, 4.62,   0.00, 0.00, 86.16);
	CreateDynamicObject(982, 1421.34, -4822.79, 4.62,   0.00, 0.00, 90.00);
	CreateDynamicObject(982, 1446.92, -4822.78, 4.62,   0.00, 0.00, 90.00);
	CreateDynamicObject(982, 1472.50, -4822.78, 4.62,   0.00, 0.00, 90.00);
	CreateDynamicObject(983, 1488.34, -4823.71, 4.62,   0.00, 0.00, 73.44);
	CreateDynamicObject(984, 1496.25, -4828.80, 4.62,   0.00, 0.00, 48.96);
	CreateDynamicObject(984, 1506.36, -4836.55, 4.62,   0.00, 0.00, 56.22);
	CreateDynamicObject(984, 1517.31, -4842.45, 4.62,   0.00, 0.00, 67.26);
	CreateDynamicObject(19435, 1227.02, -4846.23, 3.63,   -14.00, 90.00, 90.00);
	CreateDynamicObject(19435, 1226.99, -4847.72, 3.63,   -14.00, 90.00, 90.00);
	CreateDynamicObject(19435, 1226.98, -4832.70, 3.63,   -14.00, 90.00, 90.00);
	CreateDynamicObject(19435, 1226.96, -4831.22, 3.63,   -14.00, 90.00, 90.00);
	CreateDynamicObject(19435, 1408.62, -4746.22, 3.59,   -14.00, 90.00, -90.00);
	CreateDynamicObject(12814, 1432.72, -4714.76, 1.05,   0.00, 10.00, 90.00);
	CreateDynamicObject(19435, 1408.63, -4748.62, 3.59,   -14.00, 90.00, -90.00);
	CreateDynamicObject(19435, 1408.60, -4732.72, 3.59,   -14.00, 90.00, -90.00);
	CreateDynamicObject(19435, 1408.60, -4731.24, 3.59,   -14.00, 90.00, -90.00);
	CreateDynamicObject(19435, 1368.42, -4953.58, 3.59,   -14.00, 90.00, -90.00);
	CreateDynamicObject(19435, 1368.42, -4951.93, 3.59,   -14.00, 90.00, -90.00);
	CreateDynamicObject(19435, 1368.37, -4967.07, 3.59,   -14.00, 90.00, -90.00);
	CreateDynamicObject(19435, 1368.41, -4968.60, 3.59,   -14.00, 90.00, -90.00);
	CreateDynamicObject(19435, 1411.66, -4999.10, 3.73,   -14.00, 90.00, 90.00);
	CreateDynamicObject(19435, 1411.60, -5000.60, 3.73,   -14.00, 90.00, 90.00);
	CreateDynamicObject(19435, 1411.68, -5014.08, 3.73,   -14.00, 90.00, 90.00);
	CreateDynamicObject(19435, 1411.67, -5015.56, 3.73,   -14.00, 90.00, 90.00);
	CreateDynamicObject(19435, 1348.87, -5090.32, 3.73,   -14.00, 90.00, -90.00);
	CreateDynamicObject(19435, 1348.90, -5086.84, 3.73,   -14.00, 90.00, -90.00);
	CreateDynamicObject(19435, 1348.75, -5103.86, 3.73,   -14.00, 90.00, -90.00);
	CreateDynamicObject(19435, 1348.75, -5107.35, 3.73,   -14.00, 90.00, -90.00);
	CreateDynamicObject(19435, 1306.16, -5186.27, 3.70,   -14.00, 90.00, 180.00);
	CreateDynamicObject(19435, 1307.70, -5186.26, 3.70,   -14.00, 90.00, 180.00);
	CreateDynamicObject(19435, 1292.66, -5186.26, 3.70,   -14.00, 90.00, 180.00);
	CreateDynamicObject(19435, 1291.15, -5186.25, 3.70,   -14.00, 90.00, 180.00);
	CreateDynamicObject(6959, 1642.42, -5154.95, -16.43,   4.00, 90.00, 96.30);
	CreateDynamicObject(19435, 1735.82, -5211.74, 3.54,   -14.00, 90.00, 0.00);
	CreateDynamicObject(19435, 1739.31, -5211.77, 3.54,   -14.00, 90.00, 0.00);
	CreateDynamicObject(19435, 1742.82, -5211.76, 3.54,   -14.00, 90.00, 0.00);
	CreateDynamicObject(19435, 1726.29, -4861.83, 3.62,   -14.00, 90.00, 0.00);
	CreateDynamicObject(19435, 1727.01, -4861.81, 3.62,   -14.00, 90.00, 0.00);
	CreateDynamicObject(12814, 1684.39, -4896.72, 3.78,   0.00, 0.00, -90.00);
	CreateDynamicObject(19435, 1722.83, -4863.20, 3.55,   -14.00, 90.00, 180.00);
	CreateDynamicObject(19435, 1719.33, -4863.20, 3.55,   -14.00, 90.00, 180.00);
	CreateDynamicObject(19435, 1715.86, -4863.18, 3.55,   -14.00, 90.00, 180.00);
	CreateDynamicObject(19435, 1726.13, -4903.28, 3.62,   -14.00, 90.00, 180.00);
	CreateDynamicObject(19435, 1727.64, -4903.31, 3.62,   -14.00, 90.00, 180.00);
	CreateDynamicObject(19435, 1712.61, -4903.24, 3.62,   -14.00, 90.00, 180.00);
	CreateDynamicObject(19435, 1711.15, -4903.24, 3.62,   -14.00, 90.00, 180.00);
	CreateDynamicObject(6959, 1749.33, -5134.47, -16.82,   0.00, 90.00, -90.00);
	CreateDynamicObject(6959, 1709.35, -5134.50, -16.82,   0.00, 90.00, -90.00);
	CreateDynamicObject(6959, 1669.43, -5134.52, -16.82,   0.00, 90.00, -90.00);
	CreateDynamicObject(19435, 1566.39, -4942.94, 3.57,   -14.00, 90.00, 180.00);
	CreateDynamicObject(19435, 1552.85, -4942.88, 3.56,   -14.00, 90.00, 180.00);
	CreateDynamicObject(762, 1400.95, -5216.35, 7.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(762, 1453.57, -5222.35, 5.82,   0.00, 0.00, 0.00);
	CreateDynamicObject(762, 1527.91, -5372.13, 5.82,   0.00, 0.00, 0.00);
	CreateDynamicObject(691, 1721.49, -5286.72, 3.84,   0.00, 0.00, 0.00);
	CreateDynamicObject(620, 1732.77, -5284.66, 3.98,   0.00, 0.00, 180.00);
	CreateDynamicObject(620, 1750.10, -5273.78, 3.98,   0.00, 0.00, 180.00);
	CreateDynamicObject(620, 1762.29, -5251.87, 3.98,   0.00, 0.00, 180.00);
	CreateDynamicObject(620, 1764.33, -5226.45, 3.98,   0.00, 0.00, 180.00);
	CreateDynamicObject(1265, 1434.79, -5349.23, 4.04,   0.00, 0.00, 0.00);
	CreateDynamicObject(1498, 1406.45, -5321.20, 5.00,   0.00, 0.00, 90.00);
	CreateDynamicObject(1498, 1289.46, -5316.53, 4.38,   0.00, 0.00, 73.20);
	CreateDynamicObject(1498, 1329.64, -5316.34, 3.68,   0.00, 0.00, 0.00);
	CreateDynamicObject(2890, 1318.02, -5310.19, 3.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(1501, 1313.31, -5340.69, 3.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(1531, 1359.24, -5331.61, 5.52,   0.00, 0.00, 180.00);
	CreateDynamicObject(18659, 1376.41, -5362.74, 5.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(18659, 1395.46, -5378.30, 5.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(18659, 1358.85, -5374.94, 5.16,   0.00, 0.00, 0.00);
	CreateDynamicObject(18659, 1336.70, -5368.87, 7.08,   0.00, 0.00, 0.00);
	CreateDynamicObject(5088, 1363.31, -5384.36, 12.50,   0.00, 0.00, -142.20);
	CreateDynamicObject(5088, 1365.20, -5361.19, 12.48,   0.00, 0.00, 30.12);
	CreateDynamicObject(1299, 1405.79, -5332.95, 4.20,   0.00, 0.00, -33.00);
	CreateDynamicObject(1299, 1377.26, -5349.30, 4.10,   0.00, 0.00, -33.00);
	CreateDynamicObject(1299, 1391.19, -5361.53, 4.06,   0.00, 0.00, -8.70);
	CreateDynamicObject(1299, 1352.21, -5376.93, 4.10,   0.00, 0.00, -8.70);
	CreateDynamicObject(1299, 1332.29, -5354.31, 4.11,   0.00, 0.00, -8.70);
	CreateDynamicObject(1299, 1290.94, -5309.21, 4.11,   0.00, 0.00, -8.70);
	CreateDynamicObject(1299, 1316.90, -5317.73, 4.09,   0.00, 0.00, -8.70);
	CreateDynamicObject(1299, 1418.97, -5353.20, 4.06,   0.00, 0.00, -8.70);
	CreateDynamicObject(1299, 1418.41, -5386.78, 4.06,   0.00, 0.00, -8.70);
	CreateDynamicObject(1362, 1377.27, -5329.58, 4.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(1442, 1387.85, -5329.21, 4.28,   0.00, 0.00, 0.00);
	CreateDynamicObject(1331, 1436.65, -5349.21, 4.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(1299, 1434.78, -5347.38, 4.06,   0.00, 0.00, -23.34);
	CreateDynamicObject(1265, 1437.01, -5348.05, 4.04,   0.00, 0.00, 7.86);
	CreateDynamicObject(1265, 1438.02, -5347.34, 4.04,   0.00, 0.00, 0.00);
	CreateDynamicObject(1265, 1437.91, -5349.45, 4.04,   0.00, 0.00, 0.00);
	CreateDynamicObject(1265, 1438.52, -5348.55, 4.04,   0.00, 0.00, 0.00);
	CreateDynamicObject(1265, 1435.07, -5350.26, 4.04,   0.00, 0.00, 0.00);
	CreateDynamicObject(1331, 1612.80, -5293.76, 4.76,   0.00, 0.00, 0.00);
	CreateDynamicObject(1331, 1470.08, -5157.77, 4.70,   0.00, 0.00, -90.42);
	CreateDynamicObject(1331, 1373.48, -5087.51, 4.67,   0.00, 0.00, 180.00);
	CreateDynamicObject(1331, 1263.42, -5229.67, 4.67,   0.00, 0.00, 0.00);
	CreateDynamicObject(1331, 1287.19, -4932.62, 4.67,   0.00, 0.00, 81.54);
	CreateDynamicObject(706, 1284.80, -4939.83, 3.89,   0.00, 0.00, 67.38);
	CreateDynamicObject(715, 1283.95, -5032.64, 13.99,   0.00, 0.00, 0.00);
	CreateDynamicObject(1331, 1288.87, -4769.71, 4.67,   0.00, 0.00, 81.54);
	CreateDynamicObject(1331, 1469.67, -4934.43, 4.94,   0.00, 0.00, 90.00);
	CreateDynamicObject(1331, 1461.19, -4890.09, 4.94,   0.00, 0.00, 90.00);
	CreateDynamicObject(1331, 1613.25, -4766.39, 4.94,   0.00, 0.00, 90.00);
	CreateDynamicObject(3657, 1240.42, -4990.30, 6.57,   0.00, 0.00, 0.00);
	CreateDynamicObject(3657, 1240.42, -4996.23, 6.57,   0.00, 0.00, 180.00);
	CreateDynamicObject(3657, 1250.42, -4990.30, 6.57,   0.00, 0.00, 0.00);
	CreateDynamicObject(3657, 1250.42, -4996.23, 6.57,   0.00, 0.00, 180.00);
	CreateDynamicObject(3657, 1260.42, -4996.23, 6.57,   0.00, 0.00, 180.00);
	CreateDynamicObject(3657, 1270.42, -4996.23, 6.57,   0.00, 0.00, 180.00);
	CreateDynamicObject(3657, 1260.42, -4990.30, 6.57,   0.00, 0.00, 0.00);
	CreateDynamicObject(3657, 1270.42, -4990.30, 6.57,   0.00, 0.00, 0.00);
	CreateDynamicObject(716, 1255.42, -4990.30, 6.06,   0.00, 0.00, 0.00);
	CreateDynamicObject(716, 1265.42, -4990.30, 6.06,   0.00, 0.00, 0.00);
	CreateDynamicObject(716, 1245.42, -4990.30, 6.06,   0.00, 0.00, 0.00);
	CreateDynamicObject(716, 1235.42, -4990.30, 6.06,   0.00, 0.00, 0.00);
	CreateDynamicObject(716, 1265.42, -4996.23, 6.06,   0.00, 0.00, 0.00);
	CreateDynamicObject(716, 1255.42, -4996.23, 6.06,   0.00, 0.00, 0.00);
	CreateDynamicObject(716, 1245.42, -4996.23, 6.06,   0.00, 0.00, 0.00);
	CreateDynamicObject(716, 1235.42, -4996.23, 6.06,   0.00, 0.00, 0.00);
	CreateDynamicObject(620, 1223.81, -4998.17, 6.34,   0.00, 0.00, 0.00);
	CreateDynamicObject(620, 1206.45, -4998.78, 6.34,   0.00, 0.00, 0.00);
	CreateDynamicObject(620, 1206.45, -4989.06, 6.34,   0.00, 0.00, 0.00);
	CreateDynamicObject(620, 1223.32, -4990.87, 6.34,   0.00, 0.00, 0.00);
	CreateDynamicObject(19463, 1584.98, -4742.65, 3.04,   0.00, 0.00, 90.00);
	CreateDynamicObject(3858, 1582.37, -4742.67, 5.38,   0.00, 0.00, 45.00);
	CreateDynamicObject(19463, 1579.62, -4742.66, 3.04,   0.00, 0.00, 90.00);
	CreateDynamicObject(19438, 1575.61, -4742.66, 6.54,   0.00, 0.00, 90.00);
	CreateDynamicObject(19463, 1588.45, -4719.69, 3.05,   0.00, 0.00, 90.00);
	CreateDynamicObject(19463, 1579.60, -4719.68, 3.05,   0.00, 0.00, 90.00);
	CreateDynamicObject(19371, 1574.88, -4721.27, 3.05,   0.00, 0.00, 0.00);
	CreateDynamicObject(19454, 1586.35, -4737.72, 4.70,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1582.86, -4737.72, 4.70,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1579.37, -4737.72, 4.70,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1576.61, -4737.72, 4.71,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1586.35, -4728.12, 4.70,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1582.86, -4728.12, 4.70,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1579.37, -4728.12, 4.70,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1576.61, -4728.12, 4.71,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1584.98, -4721.56, 4.72,   0.00, 90.00, 90.00);
	CreateDynamicObject(19454, 1579.66, -4721.56, 4.71,   0.00, 90.00, 90.00);
	CreateDynamicObject(19457, 1586.87, -4719.70, 6.54,   0.00, 0.00, 90.00);
	CreateDynamicObject(19457, 1579.63, -4719.70, 6.54,   0.00, 0.00, 90.00);
	CreateDynamicObject(19457, 1574.90, -4724.43, 6.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(19457, 1574.90, -4734.06, 6.54,   0.00, 0.00, 0.00);
	CreateDynamicObject(19454, 1584.98, -4721.56, 8.23,   0.00, 90.00, 90.00);
	CreateDynamicObject(19454, 1610.78, -4734.07, 8.23,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1610.78, -4724.44, 8.23,   0.00, 90.00, 0.00);
	CreateDynamicObject(19435, 1609.63, -4739.38, 8.23,   0.00, 90.00, 45.00);
	CreateDynamicObject(19454, 1607.29, -4737.74, 8.23,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1607.28, -4728.10, 8.23,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1604.22, -4721.56, 8.23,   0.00, 90.00, 90.00);
	CreateDynamicObject(19454, 1594.60, -4721.56, 8.23,   0.00, 90.00, 90.00);
	CreateDynamicObject(19454, 1596.84, -4728.12, 8.23,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1600.35, -4728.12, 8.23,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1603.85, -4728.12, 8.23,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1603.79, -4737.74, 8.23,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1600.35, -4737.74, 8.23,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1596.86, -4737.74, 8.23,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1593.35, -4737.72, 8.23,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1589.85, -4737.72, 8.23,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1586.35, -4737.72, 8.23,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1582.86, -4737.72, 8.23,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1579.37, -4737.72, 8.23,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1576.61, -4737.72, 8.24,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1576.61, -4728.12, 8.24,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1579.66, -4721.56, 8.24,   0.00, 90.00, 90.00);
	CreateDynamicObject(19454, 1582.86, -4728.12, 8.23,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1579.37, -4728.12, 8.23,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1586.35, -4728.12, 8.23,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1589.85, -4728.12, 8.23,   0.00, 90.00, 0.00);
	CreateDynamicObject(19454, 1593.35, -4728.12, 8.23,   0.00, 90.00, 0.00);
	CreateDynamicObject(2008, 1610.13, -4733.84, 4.80,   0.00, 0.00, 90.00);
	CreateDynamicObject(1806, 1609.00, -4733.78, 4.80,   0.00, 0.00, -54.90);
	CreateDynamicObject(1806, 1611.18, -4733.81, 4.80,   0.00, 0.00, 46.32);
	CreateDynamicObject(19273, 1603.30, -4719.79, 6.66,   0.00, 0.00, 0.00);
	CreateDynamicObject(11086, 1681.36, -4828.37, 11.87,   0.00, 0.00, -90.00);
	CreateDynamicObject(11090, 1652.29, -4834.01, 4.63,   0.00, 0.00, 0.00);
	CreateDynamicObject(11087, 1657.43, -4849.56, 6.55,   0.00, 0.00, -90.00);
	CreateDynamicObject(11233, 1663.36, -4828.35, 6.58,   0.00, 0.00, -90.00);
	CreateDynamicObject(11234, 1667.26, -4812.38, 6.44,   0.00, 0.00, -90.00);
	CreateDynamicObject(11235, 1657.45, -4812.38, 6.45,   0.00, 0.00, -90.00);
	CreateDynamicObject(11236, 1663.37, -4828.38, 6.58,   0.00, 0.00, -90.00);
	CreateDynamicObject(939, 1681.16, -4811.40, 6.42,   0.00, 0.00, 0.00);
	CreateDynamicObject(939, 1681.45, -4825.67, 6.42,   0.00, 0.00, 0.00);
	CreateDynamicObject(939, 1689.71, -4820.07, 6.42,   0.00, 0.00, 0.00);
	CreateDynamicObject(939, 1689.88, -4835.78, 6.42,   0.00, 0.00, 0.00);
	CreateDynamicObject(943, 1691.70, -4851.29, 4.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(944, 1690.48, -4841.12, 4.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(944, 1687.63, -4852.39, 4.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(939, 1681.08, -4852.55, 6.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(939, 1681.07, -4835.50, 6.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(944, 1691.59, -4844.91, 4.90,   0.00, 0.00, -92.52);
	CreateDynamicObject(941, 1670.37, -4838.46, 4.45,   0.00, 0.00, -90.00);
	CreateDynamicObject(941, 1670.37, -4828.46, 4.45,   0.00, 0.00, -90.00);
	CreateDynamicObject(941, 1670.37, -4833.46, 4.45,   0.00, 0.00, -90.00);
	CreateDynamicObject(941, 1670.37, -4843.46, 4.45,   0.00, 0.00, -90.00);
	CreateDynamicObject(941, 1670.37, -4823.46, 4.45,   0.00, 0.00, -90.00);
	CreateDynamicObject(1432, 1675.57, -4850.40, 4.12,   0.00, 0.00, 0.00);
	CreateDynamicObject(936, 1675.94, -4853.41, 4.44,   0.00, 0.00, 180.00);
	CreateDynamicObject(1518, 1675.52, -4853.41, 5.19,   0.00, 0.00, 163.68);
	CreateDynamicObject(2035, 1670.40, -4838.54, 4.92,   0.00, 0.00, -114.96);
	CreateDynamicObject(2035, 1670.32, -4843.87, 4.92,   0.00, 0.00, -67.14);
	CreateDynamicObject(2035, 1670.43, -4833.77, 4.92,   0.00, 0.00, -68.10);
	CreateDynamicObject(2035, 1670.63, -4828.71, 4.92,   0.00, 0.00, -89.16);
	CreateDynamicObject(2035, 1670.40, -4823.41, 4.92,   0.00, 0.00, -119.70);
	CreateDynamicObject(944, 1653.05, -4809.32, 4.85,   0.00, 0.00, 0.00);
	CreateDynamicObject(939, 1658.01, -4808.49, 6.38,   0.00, 0.00, 0.00);
	CreateDynamicObject(943, 1651.67, -4822.11, 4.75,   0.00, 0.00, 0.00);
	CreateDynamicObject(3859, 1596.85, -5129.20, 3.84,   0.00, 0.00, -64.98);
	CreateDynamicObject(3859, 1593.49, -5135.77, 3.84,   0.00, 0.00, 25.32);
	CreateDynamicObject(3859, 1602.33, -5132.07, 3.84,   0.00, 0.00, 25.32);
	CreateDynamicObject(3859, 1599.66, -5128.79, 3.84,   0.00, 0.00, -64.98);
	CreateDynamicObject(19466, 1605.55, -5136.27, 5.73,   0.00, 0.00, 8.16);
	CreateDynamicObject(1492, 1603.15, -5134.65, 3.98,   0.00, 0.00, 8.16);
	CreateDynamicObject(1492, 1592.76, -5130.66, 4.01,   0.00, 0.00, -82.08);
	CreateDynamicObject(937, 1601.34, -5129.59, 4.54,   0.00, 0.00, -82.02);
	CreateDynamicObject(1518, 1601.43, -5129.08, 5.29,   0.00, 0.00, -30.42);
	CreateDynamicObject(936, 1599.04, -5138.55, 4.54,   0.00, 0.00, -172.80);
	CreateDynamicObject(2035, 1599.13, -5138.43, 5.02,   0.00, 0.00, -26.34);
	CreateDynamicObject(1432, 1596.98, -5131.25, 4.15,   0.00, 0.00, 0.00);
	CreateDynamicObject(941, 1595.48, -5136.60, 4.51,   0.00, 0.00, 5.34);
	CreateDynamicObject(941, 1600.70, -5134.57, 4.51,   0.00, 0.00, 5.34);
	CreateDynamicObject(944, 1601.63, -5132.34, 4.76,   0.00, 0.00, 97.68);
	CreateDynamicObject(2035, 1595.77, -5136.52, 4.98,   0.00, 0.00, -157.62);
	CreateDynamicObject(1575, 1601.08, -5134.52, 4.99,   0.00, 0.00, -32.34);
	CreateDynamicObject(1566, 1524.42, -5133.28, 5.00,   0.00, 0.00, -10.98);
	CreateDynamicObject(19463, 1832.37, -5118.05, 3.55,   0.00, 80.00, 0.00);
	CreateDynamicObject(19463, 1832.40, -5169.75, 3.56,   0.00, 80.00, 0.00);
	CreateDynamicObject(1226, 1826.93, -5126.67, 7.71,   0.00, 0.00, 329.64);
	CreateDynamicObject(1226, 1824.16, -5144.78, 7.71,   0.00, 0.00, 357.96);
	CreateDynamicObject(1226, 1827.17, -5162.69, 7.71,   0.00, 0.00, 383.28);
	CreateDynamicObject(1226, 1789.06, -5149.01, 7.71,   0.00, 0.00, -90.00);
	CreateDynamicObject(1226, 1767.01, -5148.63, 7.71,   0.00, 0.00, -90.00);
	CreateDynamicObject(1226, 1739.61, -5157.45, 7.71,   0.00, 0.00, 90.00);
	CreateDynamicObject(1226, 1709.06, -5149.10, 7.71,   0.00, 0.00, -90.00);
	CreateDynamicObject(1226, 1809.26, -5148.94, 7.71,   0.00, 0.00, -90.00);
	CreateDynamicObject(1226, 1738.74, -5148.85, 7.71,   0.00, 0.00, -90.00);
	CreateDynamicObject(1226, 1660.14, -5149.10, 7.71,   0.00, 0.00, -90.00);
	CreateDynamicObject(1226, 1611.22, -5152.66, 10.25,   0.00, 0.00, -90.00);
	CreateDynamicObject(1226, 1562.30, -5157.90, 9.54,   0.00, 0.00, -90.00);
	CreateDynamicObject(1226, 1513.37, -5151.85, 7.90,   0.00, 0.00, -117.66);
	CreateDynamicObject(1226, 1489.18, -5131.08, 7.90,   0.00, 0.00, -144.66);
	CreateDynamicObject(1226, 1475.36, -5097.12, 7.90,   0.00, 0.00, -180.54);
	CreateDynamicObject(1226, 1474.68, -5048.19, 7.90,   0.00, 0.00, -180.00);
	CreateDynamicObject(1226, 1473.64, -4999.28, 7.90,   0.00, 0.00, -180.00);
	CreateDynamicObject(1226, 1474.12, -4947.97, 7.90,   0.00, 0.00, -180.00);
	CreateDynamicObject(1226, 1473.66, -4901.46, 7.90,   0.00, 0.00, -180.00);
	CreateDynamicObject(1226, 1493.13, -4961.54, 7.90,   0.00, 0.00, -180.00);
	CreateDynamicObject(1226, 1454.32, -4859.55, 7.90,   0.00, 0.00, -135.90);
	CreateDynamicObject(1226, 1409.27, -4839.98, 7.90,   0.00, 0.00, -94.68);
	CreateDynamicObject(1226, 1385.60, -4819.77, 7.90,   0.00, 0.00, -143.76);
	CreateDynamicObject(1226, 1404.97, -4808.30, 7.90,   0.00, 0.00, 90.00);
	CreateDynamicObject(1226, 1453.90, -4808.30, 7.90,   0.00, 0.00, 90.00);
	CreateDynamicObject(1226, 1500.71, -4817.02, 7.90,   0.00, 0.00, 61.44);
	CreateDynamicObject(1226, 1556.06, -4823.31, 7.90,   0.00, 0.00, 142.86);
	CreateDynamicObject(1226, 1565.43, -4768.78, 7.90,   0.00, 0.00, 144.54);
	CreateDynamicObject(1226, 1556.06, -4823.31, 7.90,   0.00, 0.00, 142.86);
	CreateDynamicObject(1226, 1609.90, -4748.40, 7.90,   0.00, 0.00, 87.18);
	CreateDynamicObject(1226, 1669.76, -4748.16, 7.90,   0.00, 0.00, 87.18);
	CreateDynamicObject(1226, 1716.11, -4749.18, 7.90,   0.00, 0.00, 71.94);
	CreateDynamicObject(1226, 1764.68, -4773.40, 7.90,   0.00, 0.00, 45.48);
	CreateDynamicObject(1226, 1783.52, -4824.34, 7.90,   0.00, 0.00, 1.20);
	CreateDynamicObject(1226, 1783.52, -4873.26, 7.90,   0.00, 0.00, 1.20);
	CreateDynamicObject(1226, 1783.52, -4922.18, 7.90,   0.00, 0.00, 1.20);
	CreateDynamicObject(1226, 1783.52, -4971.11, 7.90,   0.00, 0.00, 1.20);
	CreateDynamicObject(1226, 1783.52, -5020.03, 7.90,   0.00, 0.00, 1.20);
	CreateDynamicObject(1226, 1783.52, -5068.95, 7.90,   0.00, 0.00, 1.20);
	CreateDynamicObject(1226, 1783.52, -5117.87, 7.90,   0.00, 0.00, 1.20);
	CreateDynamicObject(1226, 1783.52, -5166.79, 7.90,   0.00, 0.00, 1.20);
	CreateDynamicObject(1226, 1783.72, -5215.71, 7.90,   0.00, 0.00, 1.20);
	CreateDynamicObject(1226, 1758.74, -4877.26, 7.90,   0.00, 0.00, -90.00);
	CreateDynamicObject(1226, 1709.82, -4877.26, 7.90,   0.00, 0.00, -90.00);
	CreateDynamicObject(1226, 1660.90, -4877.26, 7.90,   0.00, 0.00, -90.00);
	CreateDynamicObject(1226, 1611.76, -4879.35, 7.90,   0.00, 0.00, -71.64);
	CreateDynamicObject(1226, 1580.39, -4899.93, 7.90,   0.00, 0.00, -36.96);
	CreateDynamicObject(1226, 1564.76, -4933.58, 7.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(1226, 1776.52, -5266.73, 7.90,   0.00, 0.00, -26.16);
	CreateDynamicObject(1226, 1739.88, -5302.40, 7.90,   0.00, 0.00, -65.28);
	CreateDynamicObject(1226, 1687.04, -5309.03, 7.90,   0.00, 0.00, -90.00);
	CreateDynamicObject(1226, 1636.80, -5308.97, 7.90,   0.00, 0.00, -90.00);
	CreateDynamicObject(1226, 1587.46, -5308.61, 7.90,   0.00, 0.00, -90.00);
	CreateDynamicObject(1226, 1553.68, -5293.65, 7.90,   0.00, 0.00, 180.00);
	CreateDynamicObject(1226, 1554.42, -5240.89, 7.90,   0.00, 0.00, 180.00);
	CreateDynamicObject(1226, 1538.09, -5206.19, 7.90,   0.00, 0.00, -90.00);
	CreateDynamicObject(1226, 1488.63, -5205.64, 7.90,   0.00, 0.00, -90.00);
	CreateDynamicObject(1226, 1587.89, -5206.97, 7.90,   0.00, 0.00, -90.00);
	CreateDynamicObject(1226, 1638.03, -5207.46, 7.90,   0.00, 0.00, -90.00);
	CreateDynamicObject(1226, 1688.00, -5207.95, 7.90,   0.00, 0.00, -90.00);
	CreateDynamicObject(1226, 1734.68, -5212.34, 7.90,   0.00, 0.00, -183.66);
	CreateDynamicObject(1226, 1683.78, -5175.01, 7.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(1226, 1454.82, -5190.09, 7.90,   0.00, 0.00, 180.00);
	CreateDynamicObject(1226, 1455.12, -5139.26, 7.90,   0.00, 0.00, 180.00);
	CreateDynamicObject(1226, 1408.92, -5081.48, 7.90,   0.00, 0.00, -90.00);
	CreateDynamicObject(1226, 1358.37, -5081.59, 7.90,   0.00, 0.00, -90.00);
	CreateDynamicObject(1226, 1308.60, -5081.47, 7.90,   0.00, 0.00, -90.00);
	CreateDynamicObject(1226, 1323.94, -5086.92, 7.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(1226, 1347.86, -5092.38, 7.90,   0.00, 0.00, 90.00);
	CreateDynamicObject(1226, 1265.92, -5098.10, 7.90,   0.00, 0.00, -43.92);
	CreateDynamicObject(1226, 1244.66, -5138.25, 7.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(1226, 1280.19, -5152.40, 7.90,   0.00, 0.00, 90.00);
	CreateDynamicObject(1226, 1314.67, -5135.95, 7.90,   0.00, 0.00, 180.00);
	CreateDynamicObject(1226, 1304.10, -5185.10, 7.90,   0.00, 0.00, 1.26);
	CreateDynamicObject(1226, 1619.36, -5354.03, 7.90,   0.00, 0.00, -33.60);
	CreateDynamicObject(1226, 1588.68, -5395.16, 7.90,   0.00, 0.00, -58.26);
	CreateDynamicObject(1226, 1537.56, -5407.38, 7.90,   0.00, 0.00, -89.40);
	CreateDynamicObject(1226, 1486.87, -5407.48, 7.90,   0.00, 0.00, -89.40);
	CreateDynamicObject(1226, 1447.70, -5400.86, 7.90,   0.00, 0.00, -151.02);
	CreateDynamicObject(1226, 1422.37, -5378.13, 7.90,   0.00, 0.00, -151.02);
	CreateDynamicObject(1226, 1454.78, -5366.00, 7.90,   0.00, 0.00, -342.30);
	CreateDynamicObject(1226, 1486.54, -5372.62, 7.77,   0.00, 0.00, -260.28);
	CreateDynamicObject(1226, 1522.14, -5344.98, 7.77,   0.00, 0.00, -210.42);
	CreateDynamicObject(1226, 1531.18, -5299.76, 7.77,   0.00, 0.00, -163.62);
	CreateDynamicObject(1226, 1508.81, -5260.58, 7.77,   0.00, 0.00, -123.90);
	CreateDynamicObject(1226, 1465.80, -5245.24, 7.77,   0.00, 0.00, -90.00);
	CreateDynamicObject(1226, 1365.59, -5245.18, 7.77,   0.00, 0.00, -90.00);
	CreateDynamicObject(1226, 1430.88, -5233.68, 7.77,   0.00, 0.00, -225.06);
	CreateDynamicObject(1226, 1413.32, -5193.63, 7.77,   0.00, 0.00, -120.54);
	CreateDynamicObject(1226, 1375.92, -5199.22, 7.77,   0.00, 0.00, -51.84);
	CreateDynamicObject(1226, 1362.78, -5233.03, 7.77,   0.00, 0.00, 19.74);
	CreateDynamicObject(1226, 1265.93, -5245.11, 7.77,   0.00, 0.00, -90.00);
	CreateDynamicObject(1226, 1216.11, -5244.52, 7.77,   0.00, 0.00, -90.00);
	CreateDynamicObject(1226, 1192.67, -5218.99, 7.77,   0.00, 0.00, 180.00);
	CreateDynamicObject(1226, 1192.93, -5168.93, 7.77,   0.00, 0.00, 180.00);
	CreateDynamicObject(1226, 1193.38, -5118.83, 7.77,   0.00, 0.00, 180.00);
	CreateDynamicObject(1226, 1193.92, -5068.67, 7.77,   0.00, 0.00, 180.00);
	CreateDynamicObject(1226, 1229.33, -5055.38, 7.77,   0.00, 0.00, 90.00);
	CreateDynamicObject(1226, 1278.55, -5055.79, 7.77,   0.00, 0.00, 90.00);
	CreateDynamicObject(1226, 1293.22, -5020.45, 7.77,   0.00, 0.00, 180.00);
	CreateDynamicObject(1226, 1293.21, -4970.41, 7.77,   0.00, 0.00, 180.00);
	CreateDynamicObject(1226, 1308.63, -4955.76, 7.77,   0.00, 0.00, 90.00);
	CreateDynamicObject(1226, 1358.73, -4955.67, 7.77,   0.00, 0.00, 90.00);
	CreateDynamicObject(1226, 1293.19, -4919.36, 7.77,   0.00, 0.00, 180.00);
	CreateDynamicObject(1226, 1293.25, -4869.59, 7.77,   0.00, 0.00, 180.00);
	CreateDynamicObject(1226, 1293.33, -4819.28, 7.77,   0.00, 0.00, 180.00);
	CreateDynamicObject(1226, 1267.77, -4844.09, 7.77,   0.00, 0.00, -90.00);
	CreateDynamicObject(1226, 1293.33, -4769.49, 7.77,   0.00, 0.00, 180.00);
	CreateDynamicObject(1226, 1307.67, -4734.85, 7.77,   0.00, 0.00, 90.00);
	CreateDynamicObject(1226, 1352.66, -4734.98, 7.77,   0.00, 0.00, 90.00);
	CreateDynamicObject(1226, 1407.72, -4734.73, 7.77,   0.00, 0.00, 90.00);
	CreateDynamicObject(1226, 1448.66, -4919.88, 7.90,   0.00, 0.00, -90.00);
	CreateDynamicObject(1226, 1411.99, -4919.88, 7.90,   0.00, 0.00, -90.00);
	CreateDynamicObject(1226, 1459.53, -5011.59, 7.90,   0.00, 0.00, -90.00);
	CreateDynamicObject(1226, 1412.77, -5012.15, 7.90,   0.00, 0.00, -90.00);
	CreateDynamicObject(18688, 1387.81, -5329.18, 4.41,   0.00, 0.00, 0.00);
	CreateDynamicObject(18688, 1377.27, -5329.59, 4.44,   0.00, 0.00, 0.00);
	CreateDynamicObject(1532, 1366.38, -4779.02, 3.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(1532, 1369.55, -4761.54, 3.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(11305, 1176.20, -5113.24, 9.09,   0.00, 0.00, 180.00);
	CreateDynamicObject(10932, 1149.41, -5112.12, 9.95,   0.00, 0.00, 180.00);
	CreateDynamicObject(11353, 1129.83, -5111.98, 6.99,   0.00, 0.00, 0.00);
	CreateDynamicObject(11352, 1180.12, -5110.48, 7.94,   0.00, 0.00, 180.00);
	CreateDynamicObject(1216, 1174.95, -5137.01, 4.58,   0.00, 0.00, 180.00);
	CreateDynamicObject(1216, 1173.95, -5137.01, 4.58,   0.00, 0.00, 180.00);
	CreateDynamicObject(1216, 1172.95, -5137.01, 4.58,   0.00, 0.00, 180.00);
	CreateDynamicObject(1216, 1171.95, -5137.01, 4.58,   0.00, 0.00, 180.00);
	CreateDynamicObject(1216, 1170.95, -5137.01, 4.58,   0.00, 0.00, 180.00);
	CreateDynamicObject(1289, 1186.52, -5114.70, 4.44,   0.00, 0.00, 90.00);
	CreateDynamicObject(1289, 1186.52, -5116.71, 4.44,   0.00, 0.00, 90.00);
	CreateDynamicObject(1289, 1186.52, -5109.50, 4.44,   0.00, 0.00, 90.00);
	CreateDynamicObject(1289, 1186.52, -5107.50, 4.44,   0.00, 0.00, 90.00);
	CreateDynamicObject(625, 1183.55, -5108.47, 4.77,   0.00, 0.00, 180.00);
	CreateDynamicObject(625, 1183.40, -5115.65, 4.77,   0.00, 0.00, 180.00);
	CreateDynamicObject(625, 1183.09, -5089.56, 4.77,   0.00, 0.00, 180.00);
	CreateDynamicObject(11324, 1177.38, -5112.05, 11.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(1256, 1176.92, -5097.19, 4.58,   0.00, 0.00, 0.00);
	CreateDynamicObject(1256, 1177.73, -5097.19, 4.58,   0.00, 0.00, 180.00);
	CreateDynamicObject(1256, 1176.92, -5107.19, 4.58,   0.00, 0.00, 0.00);
	CreateDynamicObject(1256, 1176.92, -5117.19, 4.58,   0.00, 0.00, 0.00);
	CreateDynamicObject(1256, 1176.92, -5127.19, 4.58,   0.00, 0.00, 0.00);
	CreateDynamicObject(1256, 1176.92, -5122.19, 4.58,   0.00, 0.00, 0.00);
	CreateDynamicObject(1256, 1176.92, -5112.19, 4.58,   0.00, 0.00, 0.00);
	CreateDynamicObject(1256, 1176.92, -5102.19, 4.58,   0.00, 0.00, 0.00);
	CreateDynamicObject(1256, 1177.77, -5107.19, 4.58,   0.00, 0.00, 180.00);
	CreateDynamicObject(1256, 1177.73, -5102.19, 4.58,   0.00, 0.00, 180.00);
	CreateDynamicObject(1256, 1177.73, -5117.19, 4.58,   0.00, 0.00, 180.00);
	CreateDynamicObject(1256, 1177.77, -5112.19, 4.58,   0.00, 0.00, 180.00);
	CreateDynamicObject(1256, 1177.77, -5127.19, 4.58,   0.00, 0.00, 180.00);
	CreateDynamicObject(1256, 1177.77, -5122.19, 4.58,   0.00, 0.00, 180.00);
	CreateDynamicObject(625, 1175.48, -5124.69, 4.77,   0.00, 0.00, 180.00);
	CreateDynamicObject(625, 1175.48, -5129.69, 4.77,   0.00, 0.00, 180.00);
	CreateDynamicObject(625, 1175.48, -5119.69, 4.77,   0.00, 0.00, 180.00);
	CreateDynamicObject(625, 1175.48, -5114.69, 4.77,   0.00, 0.00, 180.00);
	CreateDynamicObject(625, 1175.48, -5109.69, 4.77,   0.00, 0.00, 180.00);
	CreateDynamicObject(625, 1175.48, -5104.69, 4.77,   0.00, 0.00, 180.00);
	CreateDynamicObject(625, 1175.48, -5099.69, 4.77,   0.00, 0.00, 180.00);
	CreateDynamicObject(625, 1175.48, -5094.69, 4.77,   0.00, 0.00, 180.00);
	CreateDynamicObject(12814, 1219.79, -5179.50, 3.56,   0.00, 0.00, 0.00);
	CreateDynamicObject(5778, 1669.19, -5376.04, 4.39,   0.00, 182.72, 90.00);
	CreateDynamicObject(5778, 1694.75, -5367.89, 4.26,   0.00, 180.00, 0.42);
	CreateDynamicObject(5778, 1692.72, -5368.40, 4.24,   0.00, 180.00, 90.00);
	CreateDynamicObject(5778, 1695.62, -5368.21, 4.25,   0.00, 180.00, 0.00);
	CreateDynamicObject(5712, 1767.15, -5346.44, 7.61,   0.00, 0.00, 180.00);
	CreateDynamicObject(3092, 1770.66, -5344.10, 6.16,   -90.00, 90.00, -16.02);
	CreateDynamicObject(19435, 1212.82, -4876.71, 3.46,   -14.00, 90.00, -90.00);
	CreateDynamicObject(19435, 1212.83, -4890.18, 3.46,   -14.00, 90.00, -90.00);
	CreateDynamicObject(19435, 1212.82, -4893.62, 3.46,   -14.00, 90.00, -90.00);
	CreateDynamicObject(8613, 1161.72, -4793.48, 6.72,   0.00, 0.00, 180.00);
	CreateDynamicObject(877, 1755.36, -5219.50, 5.79,   0.00, 0.00, 0.00);
	CreateDynamicObject(877, 1755.77, -5233.95, 5.79,   0.00, 0.00, -66.42);
	CreateDynamicObject(877, 1753.04, -5246.04, 5.79,   0.00, 0.00, 13.68);
	CreateDynamicObject(877, 1750.60, -5258.84, 5.79,   0.00, 0.00, 146.34);
	CreateDynamicObject(877, 1744.00, -5271.45, 5.79,   0.00, 0.00, 127.08);
	CreateDynamicObject(877, 1730.67, -5272.83, 5.79,   0.00, 0.00, 199.50);
	CreateDynamicObject(877, 1721.95, -5278.12, 5.79,   0.00, 0.00, 207.18);
	CreateDynamicObject(877, 1713.73, -5283.45, 5.79,   0.00, 0.00, 162.24);
	CreateDynamicObject(7091, 1670.55, -5075.97, 9.80,   0.00, -30.00, 0.00);
	CreateDynamicObject(7091, 1670.61, -5068.59, 9.80,   0.00, -30.00, 0.00);
	CreateDynamicObject(7091, 1669.17, -5106.09, 9.80,   0.00, -30.00, 0.00);
	CreateDynamicObject(7091, 1669.18, -5038.77, 9.80,   0.00, -30.00, 0.00);
	CreateDynamicObject(642, 1870.68, -5046.16, 2.53,   0.00, 0.00, 0.00);
	CreateDynamicObject(642, 1870.68, -5051.16, 2.53,   0.00, 0.00, 0.00);
	CreateDynamicObject(642, 1870.68, -5056.16, 2.53,   0.00, 0.00, 0.00);
	CreateDynamicObject(643, 1872.40, -5043.66, 1.42,   0.00, 0.00, 0.00);
	CreateDynamicObject(643, 1872.40, -5053.66, 1.42,   0.00, 0.00, 0.00);
	CreateDynamicObject(643, 1869.25, -5047.66, 1.53,   0.00, 0.00, -58.20);
	CreateDynamicObject(643, 1869.25, -5057.66, 1.53,   0.00, 0.00, -58.20);
	CreateDynamicObject(4289, 1540.16, -4697.04, -11.45,   0.00, 0.00, 0.00);
	CreateDynamicObject(4289, 1390.29, -4682.93, -11.65,   0.00, 0.00, 0.00);
	CreateDynamicObject(4289, 1486.81, -4737.03, -11.43,   0.00, 0.00, 23.28);
	CreateDynamicObject(4289, 1240.05, -4683.16, -11.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(4289, 1478.18, -4716.93, -11.46,   0.00, 0.00, 23.28);
	CreateDynamicObject(4289, 1090.18, -4722.37, -11.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(4289, 1082.86, -4823.73, -11.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(4289, 982.92, -4959.41, -11.45,   0.00, 0.00, 0.00);
	CreateDynamicObject(4289, 1082.62, -4925.02, -11.56,   0.00, 0.00, 0.00);
	CreateDynamicObject(4289, 1092.14, -4994.10, -11.08,   0.00, 0.00, 90.00);
	CreateDynamicObject(4289, 1141.71, -5215.34, -11.46,   0.00, 0.00, 90.00);
	CreateDynamicObject(12814, 1119.51, -4953.38, 1.34,   0.00, -11.00, 90.00);
	CreateDynamicObject(4289, 1051.94, -5152.29, -11.48,   0.00, 0.00, 49.62);
	CreateDynamicObject(4289, 1137.30, -5113.95, -11.06,   0.00, 0.00, 90.00);
	CreateDynamicObject(4289, 1235.36, -5114.38, -19.64,   10.00, 0.00, 90.00);
	CreateDynamicObject(8859, 1105.21, -4849.87, -5.80,   0.00, 0.00, 196.21);
	CreateDynamicObject(4289, 1184.40, -5365.24, -11.55,   0.00, 0.00, 90.00);
	CreateDynamicObject(8859, 1238.83, -5317.63, -5.80,   0.00, 0.00, 263.68);
	CreateDynamicObject(4289, 1285.04, -5370.96, -11.71,   0.00, 0.00, 90.00);
	CreateDynamicObject(4289, 1252.30, -5214.81, -11.59,   0.00, 0.00, 90.00);
	CreateDynamicObject(4289, 1353.40, -5291.27, -11.59,   0.00, 0.00, 90.00);
	CreateDynamicObject(4289, 1391.89, -5291.80, -11.57,   0.00, 0.00, 90.18);
	CreateDynamicObject(4289, 1418.33, -5051.55, -11.66,   0.00, 0.00, 90.18);
	CreateDynamicObject(4289, 1413.34, -4934.81, -11.60,   0.00, 0.00, 90.18);
	CreateDynamicObject(4289, 1316.71, -5005.37, -11.56,   0.00, 0.00, 90.18);
	CreateDynamicObject(4289, 1379.12, -5365.75, -11.63,   0.00, 0.00, 90.00);
	CreateDynamicObject(4289, 1345.61, -5429.72, -11.63,   0.00, 0.00, 0.00);
	CreateDynamicObject(4289, 1374.28, -5328.30, -11.64,   0.00, 0.00, 0.00);
	CreateDynamicObject(4289, 1395.64, -5226.91, -11.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(4289, 1393.44, -5125.31, -11.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(4289, 1495.82, -5429.79, -11.63,   0.00, 0.00, 0.00);
	CreateDynamicObject(4289, 1465.42, -5331.52, -11.64,   0.00, 0.00, 0.00);
	CreateDynamicObject(4289, 1645.33, -5387.93, -11.63,   0.00, 0.00, 0.00);
	CreateDynamicObject(8859, 1805.09, -5366.38, -10.03,   0.00, 0.00, 363.58);
	CreateDynamicObject(4289, 1450.30, -5023.95, -11.69,   0.00, 0.00, 0.00);
	CreateDynamicObject(4289, 1515.27, -4954.13, -11.66,   0.00, 0.00, 0.00);
	CreateDynamicObject(4289, 1459.55, -4991.54, -11.72,   0.00, 0.00, 0.00);
	CreateDynamicObject(4289, 1534.86, -4911.66, -11.66,   0.00, 0.00, 90.00);
	CreateDynamicObject(4289, 1424.39, -4890.02, -11.62,   0.00, 0.00, 0.00);
	CreateDynamicObject(4289, 1503.88, -4788.69, -11.62,   0.00, 0.00, 0.00);
	CreateDynamicObject(4289, 1574.90, -4871.80, -11.72,   0.00, 0.00, 0.00);
	CreateDynamicObject(4289, 1408.57, -4774.80, -11.58,   0.00, 0.00, 0.00);
	CreateDynamicObject(4289, 1508.72, -4852.91, -11.57,   0.00, 0.00, 0.00);
	CreateDynamicObject(4289, 1508.71, -4865.91, -11.58,   0.00, 0.00, 0.00);
	CreateDynamicObject(4289, 1779.76, -4925.69, -11.57,   0.00, 0.00, 90.00);
	CreateDynamicObject(4289, 1775.14, -4847.88, -11.58,   0.00, 0.00, 90.00);
	CreateDynamicObject(8859, 1822.81, -4763.36, -5.80,   0.00, 0.00, 63.83);
	CreateDynamicObject(8859, 1729.22, -4653.49, -5.80,   0.00, 0.00, 115.33);
	CreateDynamicObject(4289, 1712.97, -4641.69, -11.43,   0.00, 0.00, -47.22);
	CreateDynamicObject(4289, 1783.63, -4724.54, -11.58,   0.00, 0.00, -90.00);
	CreateDynamicObject(4289, 1785.20, -4874.22, -11.58,   0.00, 0.00, -90.00);
	CreateDynamicObject(4289, 1785.53, -4930.37, -11.66,   0.00, 0.00, -90.00);
	CreateDynamicObject(4289, 1659.88, -5296.17, -11.63,   0.00, 0.00, -25.26);
	CreateDynamicObject(4289, 1543.11, -5125.22, -11.69,   0.00, 0.00, 0.00);

	//Race Track by XRVX

	CreateDynamicObject(8355, -521.8544921875, -3704.3779296875, 2.6500000953674, 0, 0, 0);
	CreateDynamicObject(8355, -521.8779296875, -3842.361328125, 2.6750001907349, 0, 0, 0);
	CreateDynamicObject(8355, -521.98620605469, -3980.0322265625, 2.6750001907349, 0, 0, 0);
	CreateDynamicObject(8343, -545.935546875, -4089.380859375, 2.6765270233154, 0, 0, 179.9560546875);
	CreateDynamicObject(8344, -589.86560058594, -4074.4279785156, 2.6862099170685, 0, 0, 0);
	CreateDynamicObject(8344, -545.8984375, -3575.6259765625, 2.6759014129639, 0, 0, 179.95056152344);
	CreateDynamicObject(8355, -630.6826171875, -3552.56640625, 2.6609013080597, 0, 0, 290.44555664063);
	CreateDynamicObject(8355, -873.19140625, -3882.1455078125, 2.6700000762939, 0, 0, 235.85998535156);
	CreateDynamicObject(8343, -954.8603515625, -3796.7392578125, 2.672000169754, 0, 0, 54.7998046875);
	CreateDynamicObject(8355, -895.87109375, -3710.12890625, 2.6700000762939, 0, 0, 306.13952636719);
	CreateDynamicObject(8355, -790.1328125, -3635.9248046875, 2.2000002861023, 0, 0, 304.13452148438);
	CreateDynamicObject(8355, -790.1328125, -3635.9248046875, 2.6719999313354, 0, 0, 304.12902832031);
	CreateDynamicObject(8355, -675.173828125, -3566.5244140625, 2.3469986915588, 359.54406738281, 0, 297.62512207031);
	CreateDynamicObject(4810, -610.4404296875, -4120.970703125, -6, 0, 0, 205.16418457031);
	CreateDynamicObject(4810, -514.40234375, -4136.3515625, -7.5, 0, 0, 175.38024902344);
	CreateDynamicObject(4810, -484.326171875, -4096.8349609375, -6, 0, 0, 215.08483886719);
	CreateDynamicObject(4876, -568.47241210938, -4058.9448242188, -3.4285669326782, 0, 0, 0);
	CreateDynamicObject(4876, -558.90393066406, -4076.3586425781, -4.3785705566406, 0, 0, 264.67498779297);
	CreateDynamicObject(4876, -558.91241455078, -4058.6188964844, -4.3785705566406, 0, 0, 262.42163085938);
	CreateDynamicObject(4876, -557.984375, -4039.259765625, -4.3785705566406, 0, 0, 262.41943359375);
	CreateDynamicObject(4876, -557.52215576172, -4020.5595703125, -4.3785705566406, 0, 0, 262.41943359375);
	CreateDynamicObject(4876, -557.25537109375, -4003.2868652344, -4.3785705566406, 0, 0, 262.41943359375);
	CreateDynamicObject(4876, -557.1201171875, -3984.05078125, -4.3785705566406, 0, 0, 262.41943359375);
	CreateDynamicObject(4876, -556.7275390625, -3966.5634765625, -4.3785705566406, 0, 0, 262.41943359375);
	CreateDynamicObject(4876, -557.03375244141, -3946.7399902344, -4.3785705566406, 0, 0, 262.41943359375);
	CreateDynamicObject(4876, -556.658203125, -3930.001953125, -3.1285676956177, 0, 0, 262.41943359375);
	CreateDynamicObject(689, -606.66833496094, -4145.48828125, 0.61639595031738, 0, 0, 276.62738037109);
	CreateDynamicObject(689, -585.05969238281, -4149.525390625, -1.8836040496826, 0, 0, 252.80474853516);
	CreateDynamicObject(689, -578.49597167969, -4177.6655273438, 5.8663959503174, 0, 0, 252.80090332031);
	CreateDynamicObject(689, -550.50158691406, -4171.8129882813, 4.3663959503174, 0, 0, 230.96589660645);
	CreateDynamicObject(689, -564.44702148438, -4159.0092773438, -1.1336040496826, 0, 0, 230.96557617188);
	CreateDynamicObject(689, -523.7861328125, -4155.6396484375, 1.8663959503174, 0, 0, 230.96557617188);
	CreateDynamicObject(689, -499.58233642578, -4146.0844726563, 0.86639595031738, 0, 0, 183.32556152344);
	CreateDynamicObject(4810, -769.265625, -3974.11328125, -6, 0, 0, 165.45959472656);
	CreateDynamicObject(4810, -782.82025146484, -3984.6403808594, -6.25, 0, 0, 127.1750793457);
	CreateDynamicObject(4810, -822.41613769531, -3940.1381835938, -6.25, 0, 0, 152.97723388672);
	CreateDynamicObject(4810, -866.240234375, -3905.673828125, -6.25, 0, 0, 188.701171875);
	CreateDynamicObject(689, -586.30554199219, -4084.2495117188, -2.1336040496826, 0, 0, 276.62475585938);
	CreateDynamicObject(689, -572.48089599609, -4091.8647460938, -2.1336040496826, 0, 0, 276.62475585938);
	CreateDynamicObject(689, -557.83996582031, -4080.2202148438, -2.1336040496826, 0, 0, 248.83474731445);
	CreateDynamicObject(689, -564.81439208984, -4061.5903320313, -2.1336040496826, 0, 0, 248.82934570313);
	CreateDynamicObject(689, -584.8134765625, -4065.1518554688, -2.1336040496826, 0, 0, 248.82934570313);
	CreateDynamicObject(689, -559.1376953125, -4043.484375, -2.1336040496826, 0, 0, 205.15869140625);
	CreateDynamicObject(689, -562.54638671875, -4016.8408203125, -2.1336040496826, 0, 0, 205.15869140625);
	CreateDynamicObject(689, -551.93560791016, -3990.3276367188, -2.1336040496826, 0, 0, 205.15869140625);
	CreateDynamicObject(689, -573.4140625, -4005.3193359375, -2.1336040496826, 0, 0, 205.15319824219);
	CreateDynamicObject(689, -554.25659179688, -4006.84765625, -3.8836040496826, 0, 0, 177.36328125);
	CreateDynamicObject(689, -550.08074951172, -3972.8894042969, -3.1336040496826, 0, 0, 92.005004882813);
	CreateDynamicObject(689, -549.9833984375, -3953.6015625, -3.1336040496826, 0, 0, 135.67016601563);
	CreateDynamicObject(689, -548.9931640625, -3932.5078125, -3.1336040496826, 0, 0, 171.39770507813);
	CreateDynamicObject(4810, -609.31640625, -3901.4501953125, -6.25, 0, 0, 42.687377929688);
	CreateDynamicObject(4810, -720.8291015625, -3888.884765625, -4.25, 0, 0, 42.687377929688);
	CreateDynamicObject(4876, -732.990234375, -3937.3232421875, -3.9535689353943, 0, 0, 155.20935058594);
	CreateDynamicObject(4876, -779.8310546875, -3915.94140625, -3.9535689353943, 0, 0, 65.879516601563);
	CreateDynamicObject(4876, -799.6201171875, -3898.8671875, -3.5035672187805, 0, 0, 60.869750976563);
	CreateDynamicObject(4876, -824.05151367188, -3881.208984375, -3.5035672187805, 0, 0, 60.875244140625);
	CreateDynamicObject(4876, -860.63348388672, -3855.6064453125, -3.5035672187805, 0, 0, 60.875244140625);
	CreateDynamicObject(4876, -893.14672851563, -3833.8688964844, -3.5035672187805, 0, 0, 60.875244140625);
	CreateDynamicObject(4876, -925.3623046875, -3812.0517578125, -3.5035672187805, 0, 0, 60.869750976563);
	CreateDynamicObject(5002, -571.234375, -3647.0185546875, 2.625, 0, 0, 269.67041015625);
	CreateDynamicObject(5002, -571.98809814453, -3780.908203125, 2.5999999046326, 0, 0, 269.67041015625);
	CreateDynamicObject(3452, -494.91809082031, -3611.2023925781, 5.5253233909607, 0, 0, 91.075012207031);
	CreateDynamicObject(3452, -495.0758972168, -3640.8078613281, 5.5253233909607, 0, 0, 91.071166992188);
	CreateDynamicObject(3452, -494.57455444336, -3670.3276367188, 5.5253233909607, 0, 0, 91.071166992188);
	CreateDynamicObject(7021, -578.52734375, -3635.3125, 6.07621717453, 0, 0, 0);
	CreateDynamicObject(7021, -578.47595214844, -3684.0151367188, 6.07621717453, 0, 0, 0);
	CreateDynamicObject(7021, -578.30224609375, -3732.3557128906, 6.07621717453, 0, 0, 0);
	CreateDynamicObject(4876, -557.0791015625, -3902.30859375, -3.1285676956177, 0, 0, 262.41943359375);
	CreateDynamicObject(4876, -555.44519042969, -3890.4377441406, -2.7785701751709, 0, 5.5, 269.66943359375);
	CreateDynamicObject(4810, -547.4501953125, -3745.5400390625, -12.75, 0, 0, 155.83557128906);
	CreateDynamicObject(689, -550.50994873047, -3913.3117675781, -3.1336040496826, 0, 0, 95.970153808594);
	CreateDynamicObject(689, -553.60681152344, -3895.7526855469, -3.1336040496826, 0, 0, 95.965576171875);
	CreateDynamicObject(689, -564.76818847656, -3879.6164550781, -3.1336040496826, 0, 0, 58.250579833984);
	CreateDynamicObject(689, -575.83874511719, -3863.2478027344, -3.1336040496826, 0, 0, 26.489501953125);
	CreateDynamicObject(689, -574.09399414063, -3842.2075195313, -3.1336040496826, 0, 0, 26.488037109375);
	CreateDynamicObject(689, -573.5009765625, -3826.88671875, -4.0586066246033, 0, 358.01501464844, 350.75802612305);
	CreateDynamicObject(689, -577.78173828125, -3808.6945800781, -4.0586066246033, 0, 358.01147460938, 350.75500488281);
	CreateDynamicObject(689, -570.90185546875, -3790.0368652344, -4.0586066246033, 0, 358.01147460938, 340.56500244141);
	CreateDynamicObject(689, -569.388671875, -3774.3503417969, -4.0586066246033, 0, 358.01147460938, 340.55969238281);
	CreateDynamicObject(689, -573.5615234375, -3757.76953125, -5.8086066246033, 0, 358.01147460938, 340.55969238281);
	CreateDynamicObject(4810, -480.22836303711, -4050.875, -6, 0, 0, 236.91983032227);
	CreateDynamicObject(4810, -505.28298950195, -4028.0539550781, -6, 0, 0, 285.86465454102);
	CreateDynamicObject(4810, -505.5632019043, -3996.673828125, -6, 0, 0, 285.8642578125);
	CreateDynamicObject(4810, -497.86444091797, -3982.7746582031, -4.350004196167, 0, 0, 321.08438110352);
	CreateDynamicObject(4810, -454.71124267578, -3952.017578125, 5.9049935340881, 0, 0, 334.36093139648);
	CreateDynamicObject(4810, -488.04092407227, -3853.9604492188, -3.0950064659119, 0, 0, 334.35791015625);
	CreateDynamicObject(4810, -501.607421875, -3722.7607421875, -5.0950064659119, 0, 0, 302.59643554688);
	CreateDynamicObject(18362, -402.99630737305, -3635.8291015625, 37.413177490234, 0, 0, 284.56997680664);
	CreateDynamicObject(18362, -431.70611572266, -3835.0688476563, 35.413177490234, 0, 0, 310.37292480469);
	CreateDynamicObject(18362, -406.060546875, -3995.3603515625, 35.413177490234, 0, 0, 297.86682128906);
	CreateDynamicObject(13651, -442.56149291992, -3611.4665527344, 1.1758992671967, 0, 0, 270.67498779297);
	CreateDynamicObject(13651, -441.5302734375, -3662.8791503906, 1.1758992671967, 0, 0, 270.67016601563);
	CreateDynamicObject(3452, -494.11090087891, -3699.8723144531, 5.6253237724304, 0, 0, 91.071166992188);
	CreateDynamicObject(5005, -503.60562133789, -3669.6772460938, 6.1015181541443, 0, 0, 90.269927978516);
	CreateDynamicObject(5005, -503.29025268555, -3733.6923828125, 6.1015181541443, 0, 0, 90.269165039063);
	CreateDynamicObject(5005, -539.9345703125, -3663.6298828125, 6.1015181541443, 0, 0, 270.19775390625);
	CreateDynamicObject(5005, -539.68218994141, -3727.8752441406, 6.1015181541443, 0, 0, 270.19775390625);
	CreateDynamicObject(689, -458.78930664063, -3728.5825195313, 5.9363956451416, 0, 3.9990234375, 171.39770507813);
	CreateDynamicObject(689, -488.16949462891, -3754.1572265625, -5.6336040496826, 0, 3.9990234375, 139.6376953125);
	CreateDynamicObject(689, -478.51361083984, -3770.2644042969, 1.8663959503174, 0, 3.9935302734375, 119.78622436523);
	CreateDynamicObject(689, -492.0032043457, -3783.0100097656, 1.8663959503174, 0, 3.988037109375, 119.78393554688);
	CreateDynamicObject(689, -478.50921630859, -3811.2368164063, 1.8663959503174, 0, 3.988037109375, 119.78393554688);
	CreateDynamicObject(689, -494.13888549805, -3819.9401855469, 1.8663959503174, 0, 3.988037109375, 119.78393554688);
	CreateDynamicObject(689, -491.85772705078, -3836.9545898438, -0.38360404968262, 0, 3.988037109375, 90.008911132813);
	CreateDynamicObject(689, -489.69946289063, -3868.8771972656, -2.8836040496826, 0, 3.988037109375, 90.005493164063);
	CreateDynamicObject(689, -483.29055786133, -3884.9196777344, -2.8836040496826, 0, 3.988037109375, 90.005493164063);
	CreateDynamicObject(689, -486.64019775391, -3908.2036132813, -2.8836040496826, 0, 3.988037109375, 90.005493164063);
	CreateDynamicObject(689, -478.48645019531, -3917.0693359375, -2.8836040496826, 0, 3.988037109375, 90.005493164063);
	CreateDynamicObject(689, -479.12350463867, -3938.3664550781, -2.8836040496826, 0, 3.988037109375, 90.005493164063);
	CreateDynamicObject(689, -493.07983398438, -3939.7197265625, -2.8836040496826, 0, 3.988037109375, 90.005493164063);
	CreateDynamicObject(689, -489.80426025391, -3952.1137695313, -2.8836040496826, 0, 3.988037109375, 90.005493164063);
	CreateDynamicObject(689, -494.7060546875, -3968.0537109375, -2.8836040496826, 0, 3.988037109375, 90.005493164063);
	CreateDynamicObject(689, -495.44165039063, -3987.8330078125, -2.8836040496826, 0, 3.988037109375, 90.005493164063);
	CreateDynamicObject(689, -479.40460205078, -4002.4497070313, -0.13360404968262, 0, 3.988037109375, 90.005493164063);
	CreateDynamicObject(689, -472.3974609375, -4020.193359375, 5.1163959503174, 0, 3.988037109375, 90.005493164063);
	CreateDynamicObject(689, -475.24291992188, -4033.4765625, 3.1163959503174, 0, 3.988037109375, 58.245483398438);
	CreateDynamicObject(689, -471.46984863281, -4045.9208984375, 7.6163959503174, 0, 3.988037109375, 58.244018554688);
	CreateDynamicObject(689, -469.88781738281, -4060.154296875, 5.3663959503174, 0, 3.988037109375, 42.364013671875);
	CreateDynamicObject(689, -470.96505737305, -4070.8518066406, 5.3663959503174, 0, 3.988037109375, 42.36328125);
	CreateDynamicObject(689, -469.73010253906, -4083.5419921875, 5.3663959503174, 0, 3.988037109375, 42.36328125);
	CreateDynamicObject(689, -474.81188964844, -4094.0859375, 5.3663959503174, 0, 3.988037109375, 20.528289794922);
	CreateDynamicObject(689, -484.49487304688, -4102.908203125, 5.3663959503174, 0, 3.988037109375, 20.527954101563);
	CreateDynamicObject(689, -498.57260131836, -4100.4946289063, -0.63360404968262, 0, 3.988037109375, 20.527954101563);
	CreateDynamicObject(689, -484.74542236328, -4118.7768554688, 3.1163959503174, 0, 3.988037109375, 354.72296142578);
	CreateDynamicObject(689, -486.92984008789, -4132.9736328125, 3.1163959503174, 0, 3.988037109375, 354.72106933594);
	CreateDynamicObject(4810, -419.47827148438, -4148.9150390625, 17.209999084473, 0, 0, 238.90484619141);
	CreateDynamicObject(4810, -464.51553344727, -4198.7993164063, 13.209999084473, 0, 0, 242.87319946289);
	CreateDynamicObject(4810, -463.4342956543, -4268.8237304688, 26.820003509521, 0, 0, 210.82214355469);
	CreateDynamicObject(4810, -587.11053466797, -3688.3740234375, -12.75, 0, 359.75, 161.08557128906);
	CreateDynamicObject(4810, -608.498046875, -3642.3271484375, -12.75, 0, 359.74731445313, 161.08154296875);
	CreateDynamicObject(4022, -531.99212646484, -4177.1235351563, 15.955074310303, 0, 0, 320.29998779297);
	CreateDynamicObject(689, -747.34197998047, -3926.5654296875, -3.3836040496826, 0, 0, 336.15966796875);
	CreateDynamicObject(689, -764.27893066406, -3923.841796875, -3.3836040496826, 0, 0, 278.59826660156);
	CreateDynamicObject(689, -781.92150878906, -3911.1115722656, -4.8836040496826, 0, 0, 248.82179260254);
	CreateDynamicObject(4810, -814.984375, -3868.6484375, -5.5, 0, 0, 6.954345703125);
	CreateDynamicObject(4810, -892.94439697266, -3786.7307128906, -5.5, 0, 0, 309.38934326172);
	CreateDynamicObject(4810, -953.79663085938, -3743.1359863281, -15, 0, 359.75, 271.55096435547);
	CreateDynamicObject(689, -589.71868896484, -3762.9841308594, -3.5586066246033, 0, 358.01147460938, 340.55969238281);
	CreateDynamicObject(689, -600.23181152344, -3757.1806640625, -3.5586066246033, 0, 358.01147460938, 340.55969238281);
	CreateDynamicObject(689, -614.2099609375, -3753.2810058594, -3.5586066246033, 0, 358.01147460938, 340.55969238281);
	CreateDynamicObject(689, -620.59527587891, -3736.9677734375, -3.5586066246033, 0, 358.01147460938, 340.55969238281);
	CreateDynamicObject(689, -623.51000976563, -3726.0170898438, -3.5586066246033, 0, 358.01147460938, 290.93466186523);
	CreateDynamicObject(689, -628.66070556641, -3715.6267089844, -3.5586066246033, 0, 358.01147460938, 290.93444824219);
	CreateDynamicObject(689, -632.35729980469, -3705.6818847656, -3.5586066246033, 0, 358.01147460938, 290.93444824219);
	CreateDynamicObject(689, -635.27557373047, -3689.7014160156, -3.5586066246033, 0, 358.01147460938, 290.93444824219);
	CreateDynamicObject(689, -632.37921142578, -3675.0883789063, -5.5586066246033, 0, 358.01147460938, 267.11444091797);
	CreateDynamicObject(689, -635.04455566406, -3663.529296875, -3.8086066246033, 0, 358.01147460938, 310.78060913086);
	CreateDynamicObject(689, -649.01037597656, -3662.6904296875, -3.8086066246033, 0, 358.01147460938, 310.77575683594);
	CreateDynamicObject(4876, -657.533203125, -3629.66796875, -0.9135684967041, 0, 357.08862304688, 179.08813476563);
	CreateDynamicObject(4876, -661.41741943359, -3652.9262695313, -0.9135684967041, 0, 357.08862304688, 179.08813476563);
	CreateDynamicObject(4876, -695.0712890625, -3652.8876953125, -0.9135684967041, 0, 357.08862304688, 188.525390625);
	CreateDynamicObject(689, -787.08697509766, -3896.6508789063, -3.3836040496826, 0, 0, 278.59680175781);
	CreateDynamicObject(689, -800.30682373047, -3896.8764648438, -3.3836040496826, 0, 0, 278.59680175781);
	CreateDynamicObject(689, -804.87890625, -3886.4287109375, -3.3836040496826, 0, 0, 278.59680175781);
	CreateDynamicObject(689, -833.66650390625, -3865.4619140625, -3.3836040496826, 0, 4.2462158203125, 278.59680175781);
	CreateDynamicObject(689, -840.03283691406, -3868.4992675781, -3.3836040496826, 0, 2.26123046875, 248.82179260254);
	CreateDynamicObject(689, -853.82373046875, -3851.8803710938, -3.3836040496826, 0, 2.2576904296875, 248.818359375);
	CreateDynamicObject(689, -869.67749023438, -3853.8364257813, -3.3836040496826, 0, 2.2576904296875, 209.11834716797);
	CreateDynamicObject(689, -874.31280517578, -3837.3623046875, -3.3836040496826, 0, 2.252197265625, 209.11376953125);
	CreateDynamicObject(689, -895.34765625, -3831.8420410156, -3.3836040496826, 0, 2.252197265625, 209.11376953125);
	CreateDynamicObject(689, -909.83660888672, -3824.6223144531, -3.3836040496826, 0, 2.252197265625, 185.29376220703);
	CreateDynamicObject(689, -920.439453125, -3813.9443359375, -3.3836040496826, 0, 2.2412109375, 163.45458984375);
	CreateDynamicObject(4876, -937.22009277344, -3790.0556640625, -3.5035672187805, 0, 0, 60.869750976563);
	CreateDynamicObject(4876, -975.8876953125, -3795.9580078125, -6.7785720825195, 0, 0, 84.715576171875);
	CreateDynamicObject(4810, -902.7080078125, -3770.4208984375, -5.5, 358.74755859375, 359.74731445313, 303.14025878906);
	CreateDynamicObject(4810, -492.70379638672, -3609.0632324219, -7.8450064659119, 0, 0, 302.59643554688);
	CreateDynamicObject(4810, -501.50149536133, -3622.7634277344, -7.8450064659119, 0, 0, 338.32641601563);
	CreateDynamicObject(4810, -509.8603515625, -3565.24609375, -7.8450064659119, 0, 359.74731445313, 356.49536132813);
	CreateDynamicObject(4810, -501.8759765625, -3527.9560546875, -7.8450064659119, 0, 359.74731445313, 52.0751953125);
	CreateDynamicObject(4810, -566.1396484375, -3518.2958984375, -7.8450064659119, 0, 359.74731445313, 76.849365234375);
	CreateDynamicObject(4810, -625.8203125, -3538.70703125, -7.8450064659119, 359.24743652344, 359.74182128906, 79.34326171875);
	CreateDynamicObject(7021, -584.87084960938, -3617.3374023438, 6.07621717453, 0, 0, 89.765014648438);
	CreateDynamicObject(689, -514.47454833984, -4142.861328125, -1.1336040496826, 0, 0, 230.96557617188);
	CreateDynamicObject(689, -831.43878173828, -3977.4020996094, 10.176394462585, 0, 2.252197265625, 209.11376953125);
	CreateDynamicObject(689, -834.83050537109, -3961.5151367188, 6.9263944625854, 0, 2.252197265625, 185.29376220703);
	CreateDynamicObject(689, -825.1806640625, -3948.6884765625, -0.57360553741455, 0, 2.2357177734375, 185.28991699219);
	CreateDynamicObject(689, -843.33459472656, -3954.4013671875, -0.57360553741455, 0, 2.2467041015625, 185.28991699219);
	CreateDynamicObject(689, -860.19537353516, -3956.0913085938, 5.6763944625854, 0, 2.2467041015625, 185.28991699219);
	CreateDynamicObject(689, -875.14178466797, -3932.8410644531, 0.42639446258545, 0, 2.2467041015625, 185.28991699219);
	CreateDynamicObject(689, -891.89916992188, -3936.9008789063, 0.42639446258545, 0, 2.2467041015625, 185.28991699219);
	CreateDynamicObject(689, -909.5859375, -3932.373046875, 3.4263944625854, 0, 2.2412109375, 185.28991699219);
	CreateDynamicObject(17323, -515.24005126953, -3740.2111816406, 7.5047478675842, 0, 0, 272.15997314453);
	CreateDynamicObject(4810, -603.87072753906, -3715.453125, -8, 0, 359.74731445313, 161.08154296875);
	CreateDynamicObject(4569, -554.88269042969, -3434.5708007813, 29.907905578613, 0, 0, 0);
	CreateDynamicObject(4079, -457.80813598633, -3650.2785644531, 25.966438293457, 0, 0, 223.62997436523);
	CreateDynamicObject(3873, -454.89135742188, -3702.5073242188, 26.935352325439, 0, 0, 0);
	CreateDynamicObject(3873, -459.58685302734, -3602.2465820313, 26.935352325439, 0, 0, 0);
	CreateDynamicObject(689, -492.61865234375, -3721.056640625, -3.1336040496826, 0, 3.9990234375, 171.39770507813);
	CreateDynamicObject(689, -493.76943969727, -3587.3295898438, 0.6863956451416, 0, 3.9990234375, 171.39770507813);
	CreateDynamicObject(689, -467.88803100586, -3572.3537597656, 6.4363956451416, 0, 3.9990234375, 171.39770507813);
	CreateDynamicObject(689, -444.66946411133, -3557.9755859375, 9.1863956451416, 0, 3.9990234375, 171.39770507813);
	CreateDynamicObject(689, -473.04876708984, -3545.8061523438, 9.1863956451416, 0, 3.9990234375, 171.39770507813);
	CreateDynamicObject(689, -483.90087890625, -3532.5856933594, 9.1863956451416, 0, 3.9990234375, 171.39770507813);
	CreateDynamicObject(689, -506.91412353516, -3522.4943847656, 5.9363956451416, 0, 3.9990234375, 171.39770507813);
	CreateDynamicObject(689, -488.34600830078, -3519.9848632813, 5.9363956451416, 0, 3.9990234375, 171.39770507813);
	CreateDynamicObject(689, -453.85760498047, -3533.3173828125, 5.9363956451416, 0, 3.9990234375, 171.39770507813);
	CreateDynamicObject(689, -483.11376953125, -3500.2885742188, 10.186395645142, 0, 3.9990234375, 171.39770507813);
	CreateDynamicObject(689, -508.7174987793, -3498.1479492188, 6.6863956451416, 0, 3.9990234375, 171.39770507813);
	CreateDynamicObject(689, -528.81903076172, -3503.5334472656, 6.6863956451416, 0, 3.9990234375, 171.39770507813);
	CreateDynamicObject(689, -528.96801757813, -3486.9626464844, 6.6863956451416, 0, 3.9990234375, 171.39770507813);
	CreateDynamicObject(689, -575.70196533203, -3471.4011230469, 6.6863956451416, 0, 3.9990234375, 171.39770507813);
	CreateDynamicObject(689, -586.91967773438, -3472.0336914063, 6.6863956451416, 0, 3.9990234375, 171.39770507813);
	CreateDynamicObject(689, -597.81323242188, -3485.9938964844, 6.6863956451416, 0, 3.9990234375, 171.39770507813);
	CreateDynamicObject(689, -612.79931640625, -3476.5786132813, 6.6863956451416, 0, 3.9990234375, 171.39770507813);
	CreateDynamicObject(689, -613.16265869141, -3477.2336425781, 6.6863956451416, 0, 3.9990234375, 171.39770507813);
	CreateDynamicObject(689, -610.52551269531, -3510.318359375, 1.6863956451416, 0, 3.9990234375, 171.39770507813);
	CreateDynamicObject(689, -589.19995117188, -3501.0969238281, 1.6863956451416, 0, 3.9990234375, 171.39770507813);
	CreateDynamicObject(689, -557.59716796875, -3496.7497558594, 1.6863956451416, 0, 3.9990234375, 171.39770507813);
	CreateDynamicObject(689, -543.69055175781, -3506.1264648438, -0.8136043548584, 0, 3.9990234375, 171.39770507813);
	CreateDynamicObject(689, -624.24877929688, -3496.4609375, -0.8136043548584, 0, 3.9990234375, 147.57769775391);
	CreateDynamicObject(689, -640.28381347656, -3493.8266601563, 16.936395645142, 0, 3.9935302734375, 147.57385253906);
	CreateDynamicObject(689, -645.79302978516, -3508.8898925781, 14.186395645142, 0, 3.9935302734375, 147.57385253906);
	CreateDynamicObject(689, -649.82904052734, -3524.4279785156, 4.9363956451416, 0, 3.9935302734375, 147.57385253906);
	CreateDynamicObject(689, -670.50592041016, -3516.6672363281, 4.9363956451416, 0, 3.9935302734375, 147.57385253906);
	CreateDynamicObject(689, -673.07751464844, -3535.3896484375, 2.1863956451416, 0, 3.9935302734375, 147.57385253906);
	CreateDynamicObject(689, -695.56109619141, -3542.1591796875, 2.1863956451416, 0, 3.9935302734375, 197.19886779785);
	CreateDynamicObject(689, -707.21606445313, -3516.931640625, 9.6863956451416, 0, 3.988037109375, 197.19360351563);
	CreateDynamicObject(973, -647.43774414063, -3580.9912109375, 3.5011215209961, 0, 0, 21.085021972656);
	CreateDynamicObject(973, -638.99157714844, -3577.7299804688, 3.5011215209961, 0, 0, 21.082763671875);
	CreateDynamicObject(973, -630.56921386719, -3574.4689941406, 3.5011215209961, 0, 0, 21.082763671875);
	CreateDynamicObject(973, -622.38555908203, -3571.2844238281, 3.5011215209961, 0, 0, 21.082763671875);
	CreateDynamicObject(973, -613.72589111328, -3567.9377441406, 3.5011215209961, 0, 0, 21.082763671875);
	CreateDynamicObject(973, -605.00396728516, -3564.853515625, 3.5011215209961, 0, 0, 17.832763671875);
	CreateDynamicObject(973, -595.95623779297, -3563.1376953125, 3.5011215209961, 0, 0, 3.580810546875);
	CreateDynamicObject(973, -587.28845214844, -3565.1694335938, 3.5011215209961, 0, 0.5, 330.50604248047);
	CreateDynamicObject(973, -579.96551513672, -3570.4462890625, 3.5011215209961, 0, 0.4998779296875, 318.50173950195);
	CreateDynamicObject(973, -573.26519775391, -3576.3415527344, 3.5011215209961, 0, 0.4998779296875, 318.49914550781);
	CreateDynamicObject(973, -566.31274414063, -3582.4858398438, 3.5011215209961, 0, 0.4998779296875, 318.49914550781);
	CreateDynamicObject(973, -559.61676025391, -3588.3876953125, 3.5011215209961, 0, 0.4998779296875, 318.49914550781);
	CreateDynamicObject(12932, -597.93005371094, -3591.4072265625, 6.0824499130249, 0, 0, 4);
	CreateDynamicObject(973, -540.9482421875, -3580.4892578125, 3.5011215209961, 0, 0.4998779296875, 271.80667114258);
	CreateDynamicObject(973, -542.01989746094, -3571.6242675781, 3.5011215209961, 0, 0.4998779296875, 280.5517578125);
	CreateDynamicObject(973, -545.07086181641, -3563.1848144531, 3.5011215209961, 0, 0.4998779296875, 297.98687744141);
	CreateDynamicObject(973, -550.81518554688, -3556.2805175781, 3.5011215209961, 0, 0.4998779296875, 321.58212280273);
	CreateDynamicObject(973, -558.69940185547, -3551.689453125, 3.5011215209961, 0, 0.4998779296875, 336.83081054688);
	CreateDynamicObject(973, -567.42138671875, -3550.361328125, 3.5011215209961, 0, 0.4998779296875, 5.019775390625);
	CreateDynamicObject(973, -576.37139892578, -3551.4313964844, 3.551121711731, 0, 0.4998779296875, 9.5152587890625);
	CreateDynamicObject(4810, -536.05438232422, -3362.4978027344, 29.414993286133, 0, 359.74731445313, 356.49536132813);
	CreateDynamicObject(4810, -444.43246459961, -3392.6296386719, 34.664993286133, 7.7499084472656, 359.74499511719, 332.70971679688);
	CreateDynamicObject(4810, -433.29742431641, -3460.4799804688, 16.464996337891, 0, 359.74731445313, 325.67150878906);
	CreateDynamicObject(4810, -615.041015625, -3456.9184570313, 7.2549934387207, 0, 359.74731445313, 52.0751953125);
	CreateDynamicObject(4810, -673.06884765625, -3457.2470703125, 37.704963684082, 359.28039550781, 342.24060058594, 88.472900390625);
	CreateDynamicObject(4810, -736.16418457031, -3565.3752441406, -3.0950050354004, 0, 359.51232910156, 88.173614501953);
	CreateDynamicObject(4810, -858.03680419922, -3549.7680664063, 14.795015335083, 0, 359.51110839844, 18.075744628906);
	CreateDynamicObject(4810, -890.60504150391, -3622.3220214844, 1.4200139045715, 0, 359.51110839844, 16.572509765625);
	CreateDynamicObject(4810, -942.32092285156, -3658.2985839844, 1.4200139045715, 0, 359.51110839844, 24.8173828125);
	CreateDynamicObject(4810, -1018.9013061523, -3669.8432617188, 15.420013427734, 0, 359.51110839844, 24.54345703125);
	CreateDynamicObject(4586, -794.90911865234, -3483.3562011719, 41.851371765137, 0, 0, 0);
	CreateDynamicObject(4810, -1003.4428100586, -3558.9880371094, 37.720008850098, 0, 359.51110839844, 24.812622070313);
	CreateDynamicObject(4810, -967.77331542969, -3495.6508789063, 46.970008850098, 0, 359.51110839844, 24.812622070313);
	CreateDynamicObject(689, -722.49133300781, -3513.2531738281, 9.6863956451416, 0, 3.988037109375, 167.41857910156);
	CreateDynamicObject(689, -735.43725585938, -3512.0595703125, 9.6863956451416, 0, 3.988037109375, 167.41516113281);
	CreateDynamicObject(689, -745.89294433594, -3511.095703125, 8.9363956451416, 0, 3.988037109375, 167.41516113281);
	CreateDynamicObject(689, -725.22912597656, -3534.8200683594, 5.6863956451416, 0, 3.988037109375, 167.41516113281);
	CreateDynamicObject(689, -715.02105712891, -3535.7602539063, 5.6863956451416, 0, 3.988037109375, 167.41516113281);
	CreateDynamicObject(689, -726.06652832031, -3565.6323242188, 1.1863956451416, 0, 3.988037109375, 167.41516113281);
	CreateDynamicObject(689, -748.58087158203, -3571.798828125, 1.1863956451416, 0, 2.0030517578125, 147.5651550293);
	CreateDynamicObject(689, -763.62042236328, -3563.3803710938, 1.1863956451416, 0, 1.99951171875, 147.56286621094);
	CreateDynamicObject(689, -767.31042480469, -3578.8618164063, 1.1863956451416, 0, 1.99951171875, 147.56286621094);
	CreateDynamicObject(689, -780.32464599609, -3578.4150390625, 1.1863956451416, 0, 1.99951171875, 147.56286621094);
	CreateDynamicObject(689, -797.48376464844, -3579.3447265625, 1.1863956451416, 0, 1.99951171875, 147.56286621094);
	CreateDynamicObject(689, -811.92321777344, -3578.013671875, 1.1863956451416, 0, 1.99951171875, 147.56286621094);
	CreateDynamicObject(689, -827.91491699219, -3585.3295898438, 6.9363956451416, 0, 1.99951171875, 147.56286621094);
	CreateDynamicObject(689, -831.47045898438, -3602.0791015625, 3.4363956451416, 0, 1.99951171875, 147.56286621094);
	CreateDynamicObject(689, -833.21850585938, -3621.0048828125, -0.5636043548584, 0, 1.99951171875, 147.56286621094);
	CreateDynamicObject(689, -847.80395507813, -3626.6923828125, -0.5636043548584, 0, 1.99951171875, 147.56286621094);
	CreateDynamicObject(689, -861.60772705078, -3633.7043457031, -0.5636043548584, 0, 1.99951171875, 147.56286621094);
	CreateDynamicObject(689, -874.1181640625, -3644.103515625, -1.8136043548584, 0, 1.99951171875, 147.56286621094);
	CreateDynamicObject(689, -890.54968261719, -3642.5888671875, -1.8136043548584, 0, 1.99951171875, 115.80285644531);
	CreateDynamicObject(689, -901.17236328125, -3662.4545898438, -1.8136043548584, 0, 1.99951171875, 115.80139160156);
	CreateDynamicObject(689, -914.99645996094, -3673.4858398438, -1.8136043548584, 0, 1.99951171875, 84.041381835938);
	CreateDynamicObject(689, -928.24957275391, -3681.0537109375, 1.4363956451416, 0, 1.99951171875, 84.039916992188);
	CreateDynamicObject(689, -942.15734863281, -3687.5571289063, 1.4363956451416, 0, 1.99951171875, 84.039916992188);
	CreateDynamicObject(689, -949.83923339844, -3708.1958007813, -0.5636043548584, 0, 1.99951171875, 52.279907226563);
	CreateDynamicObject(4876, -966.72888183594, -3809.7973632813, -6.4785709381104, 0, 0, 84.715576171875);
	CreateDynamicObject(4810, -843.85601806641, -3715.1633300781, -8.5, 358.74755859375, 359.74731445313, 299.14025878906);
	CreateDynamicObject(4810, -696.29553222656, -3653.2473144531, 0.2149982303381, 359.49234008789, 1.9974670410156, 193.95391845703);
	CreateDynamicObject(4810, -857.74639892578, -3731.2690429688, -5.75, 358.74206542969, 359.74731445313, 299.1357421875);
	CreateDynamicObject(4876, -702.85870361328, -3674.1838378906, 4.5864315032959, 0, 357.08862304688, 188.525390625);
	CreateDynamicObject(689, -658.44567871094, -3643.80078125, -0.8136043548584, 0, 3.9990234375, 171.39770507813);
	CreateDynamicObject(689, -651.72650146484, -3627.8239746094, -0.8136043548584, 0, 3.9990234375, 171.39770507813);
	CreateDynamicObject(689, -647.80426025391, -3611.2082519531, -0.8136043548584, 0, 3.9990234375, 133.68267822266);
	CreateDynamicObject(689, -645.76312255859, -3600.2990722656, -0.8136043548584, 0, 5.978515625, 113.83160400391);
	CreateDynamicObject(689, -645.56640625, -3588.0073242188, -0.8136043548584, 0, 13.916564941406, 86.039337158203);
	CreateDynamicObject(689, -659.88323974609, -3587.4421386719, -0.8136043548584, 0, 13.914184570313, 117.7939453125);
	CreateDynamicObject(689, -668.66265869141, -3602.5510253906, -0.8136043548584, 0, 13.914184570313, 117.78991699219);
	CreateDynamicObject(689, -675.81848144531, -3592.74609375, -0.8136043548584, 0, 13.914184570313, 117.78991699219);
	CreateDynamicObject(689, -688.08416748047, -3603.0239257813, -0.8136043548584, 0, 13.914184570313, 117.78991699219);
	CreateDynamicObject(689, -700.69018554688, -3613.1000976563, -0.8136043548584, 0, 13.914184570313, 80.074920654297);
	CreateDynamicObject(689, -715.41430664063, -3619.2368164063, -0.8136043548584, 0, 13.914184570313, 46.328826904297);
	CreateDynamicObject(689, -728.04858398438, -3625.01171875, -0.8136043548584, 0, 11.92919921875, 12.578857421875);
	CreateDynamicObject(689, -738.74499511719, -3633.6813964844, -0.8136043548584, 0, 11.925659179688, 12.573852539063);
	CreateDynamicObject(689, -751.37347412109, -3644.6584472656, -2.8136043548584, 0, 11.925659179688, 334.85885620117);
	CreateDynamicObject(689, -766.84094238281, -3652.7182617188, -2.8136043548584, 0, 11.920166015625, 334.85778808594);
	CreateDynamicObject(689, -780.52947998047, -3661.7258300781, -2.8136043548584, 0, 11.920166015625, 287.2177734375);
	CreateDynamicObject(689, -762.34234619141, -3675.7607421875, -2.8136043548584, 0, 11.914672851563, 287.21557617188);
	CreateDynamicObject(689, -780.99664306641, -3680.9633789063, 7.6863956451416, 0, 11.914672851563, 287.21557617188);
	CreateDynamicObject(689, -796.32659912109, -3670.1596679688, 0.4363956451416, 0, 11.914672851563, 287.21557617188);
	CreateDynamicObject(689, -805.59246826172, -3679.8371582031, 0.4363956451416, 0, 11.914672851563, 287.21557617188);
	CreateDynamicObject(689, -825.96545410156, -3684.4399414063, 0.4363956451416, 0, 11.914672851563, 287.21557617188);
	CreateDynamicObject(689, -836.71722412109, -3697.9631347656, 0.4363956451416, 0, 11.914672851563, 287.21557617188);
	CreateDynamicObject(689, -846.45233154297, -3707.0043945313, -1.5636043548584, 0, 11.914672851563, 287.21557617188);
	CreateDynamicObject(689, -857.14031982422, -3712.6218261719, -1.5636043548584, 0, 11.914672851563, 243.54556274414);
	CreateDynamicObject(689, -869.17510986328, -3716.6779785156, -1.5636043548584, 0, 25.804168701172, 301.10995483398);
	CreateDynamicObject(689, -879.42065429688, -3732.0874023438, -1.5636043548584, 0, 25.801391601563, 301.10778808594);
	CreateDynamicObject(689, -884.681640625, -3745.1984863281, -1.5636043548584, 0, 25.801391601563, 301.10778808594);
	CreateDynamicObject(689, -905.37536621094, -3754.1628417969, -1.5636043548584, 0, 25.801391601563, 301.10778808594);
	CreateDynamicObject(689, -918.66229248047, -3756.5148925781, -1.5636043548584, 0, 25.801391601563, 301.10778808594);
	CreateDynamicObject(689, -925.26141357422, -3768.8515625, -1.5636043548584, 0, 25.801391601563, 301.10778808594);
	CreateDynamicObject(689, -936.35479736328, -3781.7299804688, -3.0636043548584, 0, 25.801391601563, 301.10778808594);
	CreateDynamicObject(689, -943.09686279297, -3791.2746582031, -3.0636043548584, 0, 25.801391601563, 301.10778808594);
	CreateDynamicObject(689, -934.25390625, -3801.6276855469, -3.0636043548584, 0, 25.801391601563, 273.31777954102);
	CreateDynamicObject(689, -937.59912109375, -3666.7436523438, 6.4363956451416, 0, 1.99951171875, 84.039916992188);
	CreateDynamicObject(689, -941.45935058594, -3665.3649902344, 6.4363956451416, 0, 1.99951171875, 84.039916992188);
	CreateDynamicObject(689, -957.05090332031, -3677.470703125, 6.4363956451416, 0, 1.99951171875, 84.039916992188);
	CreateDynamicObject(689, -970.83465576172, -3688.1728515625, 10.436395645142, 0, 1.99951171875, 84.039916992188);
	CreateDynamicObject(689, -895.69647216797, -3625.9184570313, 6.1863956451416, 0, 1.99951171875, 147.56286621094);
	CreateDynamicObject(689, -909.72967529297, -3644.568359375, 6.1863956451416, 0, 1.99951171875, 147.56286621094);
	CreateDynamicObject(689, -923.58453369141, -3652.61328125, 6.1863956451416, 0, 1.99951171875, 147.56286621094);
	CreateDynamicObject(4810, -398.04602050781, -3504.5874023438, 16.464996337891, 0, 359.74731445313, 325.66772460938);
	CreateDynamicObject(4810, -391.10437011719, -3475.9604492188, 27.024993896484, 10.704895019531, 359.74285888672, 325.71548461914);
	CreateDynamicObject(12972, -841.3642578125, -3908.2568359375, 12.064252853394, 0, 0, 53.355102539063);
	CreateDynamicObject(18450, -805.38726806641, -3855.6770019531, 24.312713623047, 0.99581909179688, 5.2507934570313, 54.70849609375);
	CreateDynamicObject(18450, -879.16546630859, -3957.6987304688, 21.562713623047, 0.98199462890625, 349.58364868164, 54.978210449219);
	CreateDynamicObject(4810, -911.89910888672, -3875.3371582031, -6.25, 0, 0, 188.701171875);
	CreateDynamicObject(4810, -996.07659912109, -3813.27734375, -9.75, 0, 0, 211.08116149902);
	CreateDynamicObject(4810, -983.71710205078, -3801.8322753906, -7.8000030517578, 0, 0, 161.76531982422);
	CreateDynamicObject(4810, -992.76440429688, -3761.3500976563, -4.1250042915344, 0, 0, 127.50268554688);
	CreateDynamicObject(689, -909.71948242188, -3916.1723632813, 3.4263944625854, 0, 2.2412109375, 185.28991699219);
	CreateDynamicObject(689, -905.8466796875, -3900.6501464844, -0.073605537414551, 0, 2.2412109375, 185.28991699219);
	CreateDynamicObject(689, -912.70874023438, -3887.2021484375, -2.5736055374146, 0, 2.2412109375, 161.46990966797);
	CreateDynamicObject(689, -927.08557128906, -3902.0654296875, -2.5736055374146, 0, 2.2357177734375, 161.46606445313);
	CreateDynamicObject(689, -942.384765625, -3896.1845703125, -2.5736055374146, 0, 2.2357177734375, 161.46606445313);
	CreateDynamicObject(689, -943.04248046875, -3877.1884765625, 0.67639446258545, 0, 2.2357177734375, 161.46606445313);
	CreateDynamicObject(689, -945.38122558594, -3866.4560546875, 0.67639446258545, 0, 2.2357177734375, 161.46606445313);
	CreateDynamicObject(689, -957.947265625, -3858.5537109375, 0.67639446258545, 0, 0.250732421875, 125.7360534668);
	CreateDynamicObject(689, -962.05432128906, -3875.8974609375, 0.67639446258545, 0, 0.2471923828125, 125.73303222656);
	CreateDynamicObject(689, -972.20727539063, -3857.4755859375, 0.67639446258545, 0, 0.2471923828125, 125.73303222656);
	CreateDynamicObject(689, -972.2900390625, -3847.4755859375, 0.67639446258545, 0, 0.2471923828125, 125.73303222656);
	CreateDynamicObject(689, -981.85852050781, -3839.2998046875, 0.67639446258545, 0, 0.2471923828125, 95.9580078125);
	CreateDynamicObject(689, -992.82727050781, -3843.1357421875, 0.67639446258545, 0, 0.2471923828125, 95.95458984375);
	CreateDynamicObject(689, -996.96618652344, -3826.4169921875, 0.67639446258545, 0, 0.2471923828125, 72.134582519531);
	CreateDynamicObject(689, -998.04052734375, -3817.4248046875, 0.67639446258545, 0, 0.2471923828125, 72.130737304688);
	CreateDynamicObject(689, -1021.1273193359, -3818.5146484375, 2.6763944625854, 0, 0.2471923828125, 72.130737304688);
	CreateDynamicObject(689, -1028.0894775391, -3812.4208984375, 2.6763944625854, 0, 0.2471923828125, 48.310729980469);
	CreateDynamicObject(689, -1029.7091064453, -3809.6025390625, 2.6763944625854, 0, 0.2471923828125, 48.306884765625);
	CreateDynamicObject(689, -1028.1359863281, -3794.2802734375, 2.6763944625854, 0, 0.2471923828125, 48.306884765625);
	CreateDynamicObject(689, -1016.1544799805, -3786.5327148438, 2.6763944625854, 0, 0.2471923828125, 48.306884765625);
	CreateDynamicObject(689, -1004.3583984375, -3779.4672851563, 2.6763944625854, 0, 0.2471923828125, 48.306884765625);
	CreateDynamicObject(689, -997.18383789063, -3771.884765625, 2.6763944625854, 0, 358.26220703125, 24.486877441406);
	CreateDynamicObject(689, -993.83331298828, -3760.1557617188, 2.6763944625854, 0, 358.25866699219, 24.483032226563);
	CreateDynamicObject(689, -980.41564941406, -3744.373046875, 2.6763944625854, 0, 358.25866699219, 24.483032226563);
	CreateDynamicObject(689, -972.44342041016, -3733.1611328125, 2.6763944625854, 359.26507568359, 359.25860595703, 324.92343139648);
	CreateDynamicObject(689, -980.78540039063, -3717.0229492188, 8.4263944625854, 359.26391601563, 359.25842285156, 324.92065429688);
	CreateDynamicObject(689, -980.81286621094, -3700.5180664063, 9.4263944625854, 359.26391601563, 359.25842285156, 324.92065429688);
	CreateDynamicObject(4810, -581.54406738281, -3499.46875, -1.560001373291, 0, 359.74731445313, 82.099365234375);
	CreateDynamicObject(4810, -641.85107421875, -3446.2834472656, 28.704963684082, 359.28039550781, 342.24060058594, 88.472900390625);
	CreateDynamicObject(4810, -641.8505859375, -3446.283203125, 35.704963684082, 359.28039550781, 342.24060058594, 88.472900390625);
	CreateDynamicObject(11556, -1011.0522460938, -3756.68359375, 1.3085842132568, 0, 0, 324.26998901367);
	CreateDynamicObject(18362, -570.79150390625, -4230.1455078125, 35.413177490234, 0, 0, 164.35504150391);
	CreateDynamicObject(689, -762.11547851563, -3994.396484375, 2.5987496376038, 0, 0, 0);
	CreateDynamicObject(689, -792.5234375, -3999.947265625, 2.5987496376038, 0, 0, 0);
	CreateDynamicObject(8355, -763.14001464844, -3963.1765136719, 2.6700000762939, 0, 0, 231.36000061035);
	CreateDynamicObject(8355, -657.11022949219, -4047.8247070313, 2.6200008392334, 0, 0, 231.35559082031);
	CreateDynamicObject(8355, -645.18310546875, -4064.2316894531, 2.6950011253357, 0, 0, 227.10559082031);
	CreateDynamicObject(4876, -699.95489501953, -3952.9572753906, -2.1535725593567, 0, 0, 151.70935058594);
	CreateDynamicObject(4876, -666.76611328125, -3954.5495605469, 0.096427440643311, 0, 0, 151.70471191406);
	CreateDynamicObject(4876, -638.41430664063, -3978.1174316406, 0.096427440643311, 0, 0, 147.45471191406);
	CreateDynamicObject(4876, -620.31927490234, -4001.9548339844, -0.27857258915901, 0, 0, 139.95300292969);
	CreateDynamicObject(4876, -573.07415771484, -4056.4899902344, -2.1785755157471, 0, 0, 247.1393737793);
	CreateDynamicObject(4876, -586.11706542969, -4045.1381835938, -2.1785755157471, 0, 0, 247.13745117188);
	CreateDynamicObject(4876, -597.32366943359, -4035.1716308594, -2.1785755157471, 0, 0, 247.13745117188);
	CreateDynamicObject(4876, -606.61602783203, -4026.2878417969, -2.1785755157471, 0, 0, 240.13748168945);
	CreateDynamicObject(4876, -591.12512207031, -4013.6997070313, -2.1785755157471, 0, 0, 240.13366699219);
	CreateDynamicObject(4810, -634.47259521484, -3934.4741210938, -14.5, 0, 0, 42.687377929688);
	CreateDynamicObject(4810, -677.64471435547, -4061.6591796875, -8.25, 0, 0, 203.41418457031);
	CreateDynamicObject(4810, -394.65042114258, -4316.2255859375, 54.950000762939, 2.5, 0, 210.82214355469);
	CreateDynamicObject(689, -733.70404052734, -3936.3395996094, -3.3836040496826, 0, 0, 298.44464111328);
	CreateDynamicObject(689, -726.47180175781, -3948.9438476563, -3.3836040496826, 0, 0, 298.44360351563);
	CreateDynamicObject(689, -718.36126708984, -3960.955078125, -3.3836040496826, 0, 0, 298.44360351563);
	CreateDynamicObject(689, -707.70788574219, -3971.677734375, -3.3836040496826, 0, 0, 298.44360351563);
	CreateDynamicObject(689, -694.98529052734, -3975.6730957031, -3.3836040496826, 0, 0, 298.44360351563);
	CreateDynamicObject(689, -682.87414550781, -3984.1323242188, -3.3836040496826, 0, 0, 298.44360351563);
	CreateDynamicObject(689, -674.36798095703, -3996.7294921875, -3.3836040496826, 0, 0, 298.44360351563);
	CreateDynamicObject(689, -663.67449951172, -4005.9323730469, -3.3836040496826, 0, 0, 298.44360351563);
	CreateDynamicObject(689, -652.75048828125, -4012.6333007813, -3.3836040496826, 0, 0, 298.44360351563);
	CreateDynamicObject(689, -640.23120117188, -4022.89453125, -3.3836040496826, 0, 0, 270.6535949707);
	CreateDynamicObject(689, -602.73150634766, -4068.5500488281, -0.88360404968262, 0, 0, 270.64819335938);
	CreateDynamicObject(10843, -612.08831787109, -4028.3044433594, 14.46747303009, 0, 0, 62.065002441406);
	CreateDynamicObject(689, -511.15728759766, -4175.65625, 8.1163959503174, 0, 0, 230.96557617188);
	CreateDynamicObject(689, -512.55108642578, -4193.447265625, 8.1163959503174, 0, 0, 230.96557617188);
	CreateDynamicObject(689, -520.16864013672, -4206.3798828125, 8.1163959503174, 0, 0, 230.96557617188);
	CreateDynamicObject(4810, -713.66168212891, -4054.1682128906, 2.0699994564056, 0, 346.35504150391, 210.91186523438);
	CreateDynamicObject(18317, -781.44940185547, -4072.015625, 2.0373659133911, 358.01501464844, 0, 216.32998657227);
	CreateDynamicObject(18317, -886.63708496094, -4082.9096679688, 31.017362594604, 358.01147460938, 0, 207.93127441406);
	CreateDynamicObject(689, -806.15814208984, -3993.7976074219, 2.5987496376038, 0, 0, 0);
	CreateDynamicObject(689, -817.98236083984, -3985.8508300781, 2.5987496376038, 0, 0, 0);
	CreateDynamicObject(689, -778.42095947266, -4000.3894042969, 2.5987496376038, 0, 0, 0);
	CreateDynamicObject(689, -753.0078125, -4008.9133300781, -1.1512503623962, 0, 0, 0);
	CreateDynamicObject(689, -741.82592773438, -4021.8491210938, -1.1512503623962, 0, 0, 0);
	CreateDynamicObject(689, -730.00006103516, -4029.7946777344, 1.8487496376038, 0, 0, 0);
	CreateDynamicObject(689, -717.6884765625, -4037.4643554688, 1.8487496376038, 0, 356.0299987793, 320.29998779297);
	CreateDynamicObject(689, -704.11492919922, -4046.8859863281, 0.09874963760376, 0, 359.27844238281, 318.31042480469);
	CreateDynamicObject(689, -697.10241699219, -4062.4418945313, 0.09874963760376, 0, 359.27490234375, 318.30688476563);
	CreateDynamicObject(689, -686.39910888672, -4073.8503417969, 3.8487496376038, 0, 359.27490234375, 318.30688476563);
	CreateDynamicObject(689, -679.03967285156, -4089.3376464844, 7.0987496376038, 0, 359.27490234375, 318.30688476563);
	CreateDynamicObject(689, -667.02734375, -4102.8403320313, 7.0987496376038, 0, 359.27490234375, 318.30688476563);
	CreateDynamicObject(689, -655.015625, -4116.3505859375, 7.0987496376038, 0, 359.27490234375, 290.51690673828);
	CreateDynamicObject(689, -645.34350585938, -4125.2724609375, 8.8487491607666, 0, 359.27490234375, 290.51147460938);
	CreateDynamicObject(689, -652.45550537109, -4135.8559570313, 8.8487491607666, 0, 359.27490234375, 290.51147460938);
	CreateDynamicObject(689, -666.89245605469, -4131.5834960938, 20.098749160767, 0, 359.27490234375, 290.51147460938);
	CreateDynamicObject(689, -679.9609375, -4134.7841796875, 20.098749160767, 0, 359.27490234375, 290.51147460938);

}
#endif

stock SendErrorMessage(playerid, text[])
{
	new str[160];
	format(str,sizeof(str),"{FFFFFF}ERROR:"COL_PRIM" %s",text);
    SendClientMessage(playerid,-1,str);
	return 1;
}

stock SendUsageMessage(playerid, text[])
{
	new str[160];
    format(str,sizeof(str),"{FFFFFF}USAGE:"COL_PRIM" %s",text);
    SendClientMessage(playerid,-1,str);
	return 1;
}

#define AIMBOT_BAN_OFFSET       10000

stock AddAimbotBan(playerid) {
    new post[128], IP[MAX_PLAYER_NAME];
    GetPlayerIp(playerid, IP, sizeof(IP));
	format(post, sizeof(post), "IP=%s&Name=%s", IP, Player[playerid][Name]);
	HTTP(playerid + AIMBOT_BAN_OFFSET, HTTP_POST, "gator3016.hostgator.com/~maarij94/attdef-api/aimbot_bans.php", post, "OnAimbotResponse");
}

forward OnAimbotResponse(index, response_code, data[]);
public OnAimbotResponse(index, response_code, data[]) {
	new i = index - AIMBOT_BAN_OFFSET;

	BanEx(i, "Aimbot");

	new iString[256];
	format(iString, sizeof(iString), "{FFFFFF}** System ** "COL_PRIM"has banned {FFFFFF}%s "COL_PRIM"| Reason: {FFFFFF}Aimbot (Not a bug)", Player[i][Name]);
	SendClientMessageToAll(-1, iString);
}

stock udb_hash(buf[]) {
    new length=strlen(buf);
    new s1 = 1;
    new s2 = 0;
    new n;
    for (n=0; n<length; n++)
    {
       s1 = (s1 + buf[n]) % 65521;
       s2 = (s2 + s1)     % 65521;
    }
    return (s2 << 16) + s1;
}

forward akaResponse(index, response_code, data[]);
public akaResponse(index, response_code, data[]) {
	if(response_code != 200) {
	    UpdateAKA = false;
	}

	if(!strcmp(data, "turnoff", true)) {
		UpdateAKA = false;
	}
}

CreateDuelArena()
{
	new tmpobjid;

	tmpobjid = CreateObject(13607,-2927.660,1767.998,15.176,0.000,0.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 3904, "libertyfar", "newtenmt1", 0);
	SetObjectMaterial(tmpobjid, 1, 4003, "cityhall_tr_lan", "sl_griddyfence_sml", 0);
	SetObjectMaterial(tmpobjid, 2, 9583, "bigshap_sfw", "shipfloor_sfw", 0);
	tmpobjid = CreateObject(18981,-2880.877,1802.644,20.637,0.000,0.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2880.877,1777.644,20.637,0.000,0.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2880.877,1752.644,20.637,0.000,0.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2880.877,1732.644,20.637,0.000,0.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2973.877,1802.644,20.637,0.000,0.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2973.877,1777.644,20.637,0.000,0.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2973.877,1752.644,20.637,0.000,0.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2973.877,1732.644,20.637,0.000,0.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2960.877,1814.644,20.637,0.000,-0.000,90.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2935.877,1814.644,20.637,0.000,-0.000,90.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2910.877,1814.644,20.637,0.000,-0.000,90.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2893.877,1814.644,20.637,0.000,-0.000,90.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2960.877,1720.644,20.637,0.000,-0.000,90.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2935.877,1720.644,20.637,0.000,-0.000,90.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2910.877,1720.644,20.637,0.000,-0.000,90.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2893.877,1720.644,20.637,0.000,-0.000,90.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2961.889,1732.635,33.137,0.000,-90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2961.889,1757.635,33.137,0.000,-90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2961.889,1782.635,33.137,0.000,-90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2961.889,1802.635,33.137,0.000,-90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2936.889,1732.635,33.137,0.000,-90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2936.889,1757.635,33.137,0.000,-90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2936.889,1782.635,33.137,0.000,-90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2936.889,1802.635,33.137,0.000,-90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2911.889,1732.635,33.137,0.000,-90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2911.889,1757.635,33.137,0.000,-90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2911.889,1782.635,33.137,0.000,-90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2911.889,1802.635,33.137,0.000,-90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2892.888,1732.635,33.137,0.000,-90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2892.888,1757.635,33.137,0.000,-90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2892.888,1782.635,33.137,0.000,-90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2892.888,1802.635,33.137,0.000,-90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2961.889,1732.635,8.137,0.000,-90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2961.889,1757.635,8.137,0.000,-90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2961.889,1782.635,8.137,0.000,-90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2961.889,1802.635,8.137,0.000,-90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2936.889,1732.635,8.137,0.000,-90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2936.889,1757.635,8.137,0.000,-90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2936.889,1782.635,8.137,0.000,-90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2936.889,1802.635,8.137,0.000,-90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2911.889,1732.635,8.137,0.000,-90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2911.889,1757.635,8.137,0.000,-90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2911.889,1782.635,8.137,0.000,-90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2911.889,1802.635,8.137,0.000,-90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2892.888,1732.635,8.137,0.000,-90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2892.888,1757.635,8.137,0.000,-90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2892.888,1782.635,8.137,0.000,-90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(18981,-2892.888,1802.635,8.137,0.000,-90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 8399, "vgs_shops", "vgsclubwall08_256", -10066330);
	tmpobjid = CreateObject(19458,-2922.751,1722.603,18.637,0.000,90.000,90.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0);
	tmpobjid = CreateObject(19458,-2932.351,1722.603,18.637,0.000,90.000,90.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0);
	tmpobjid = CreateObject(19458,-2922.751,1726.103,18.637,0.000,90.000,90.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0);
	tmpobjid = CreateObject(19458,-2932.351,1726.103,18.637,0.000,90.000,90.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0);
	tmpobjid = CreateObject(19458,-2922.751,1809.203,18.637,0.000,90.000,90.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0);
	tmpobjid = CreateObject(19458,-2932.351,1809.203,18.637,0.000,90.000,90.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0);
	tmpobjid = CreateObject(19458,-2922.751,1812.703,18.637,0.000,90.000,90.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0);
	tmpobjid = CreateObject(19458,-2932.351,1812.703,18.637,0.000,90.000,90.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0);
	tmpobjid = CreateObject(19458,-2968.201,1772.753,18.637,-0.000,90.000,-179.999,300.0000);
	SetObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0);
	tmpobjid = CreateObject(19458,-2968.201,1763.153,18.637,-0.000,90.000,-179.999,300.0000);
	SetObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0);
	tmpobjid = CreateObject(19458,-2971.701,1772.753,18.637,-0.000,90.000,-179.999,300.0000);
	SetObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0);
	tmpobjid = CreateObject(19458,-2971.701,1763.153,18.637,-0.000,90.000,-179.999,300.0000);
	SetObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0);
	tmpobjid = CreateObject(19458,-2883.201,1772.753,18.637,-0.000,90.000,-179.999,300.0000);
	SetObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0);
	tmpobjid = CreateObject(19458,-2883.201,1763.153,18.637,-0.000,90.000,-179.999,300.0000);
	SetObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0);
	tmpobjid = CreateObject(19458,-2886.701,1772.753,18.637,-0.000,90.000,-179.999,300.0000);
	SetObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0);
	tmpobjid = CreateObject(19458,-2886.701,1763.153,18.637,-0.000,90.000,-179.999,300.0000);
	SetObjectMaterial(tmpobjid, 0, 14581, "ab_mafiasuitea", "walp45S", 0);
	tmpobjid = CreateObject(19458,-2922.751,1722.603,22.137,0.000,90.000,90.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 2591, "ab_partition1", "ab_fabricCheck2", 0);
	tmpobjid = CreateObject(19458,-2932.351,1722.603,22.137,0.000,90.000,90.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 2591, "ab_partition1", "ab_fabricCheck2", 0);
	tmpobjid = CreateObject(19458,-2922.751,1726.103,22.137,0.000,90.000,90.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 2591, "ab_partition1", "ab_fabricCheck2", 0);
	tmpobjid = CreateObject(19458,-2932.351,1726.103,22.137,0.000,90.000,90.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 2591, "ab_partition1", "ab_fabricCheck2", 0);
	tmpobjid = CreateObject(19458,-2922.751,1809.203,22.137,0.000,90.000,90.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 2591, "ab_partition1", "ab_fabricCheck2", 0);
	tmpobjid = CreateObject(19458,-2932.351,1809.203,22.137,0.000,90.000,90.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 2591, "ab_partition1", "ab_fabricCheck2", 0);
	tmpobjid = CreateObject(19458,-2922.751,1812.703,22.137,0.000,90.000,90.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 2591, "ab_partition1", "ab_fabricCheck2", 0);
	tmpobjid = CreateObject(19458,-2932.351,1812.703,22.137,0.000,90.000,90.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 2591, "ab_partition1", "ab_fabricCheck2", 0);
	tmpobjid = CreateObject(19458,-2968.201,1772.753,22.137,-0.000,90.000,-179.999,300.0000);
	SetObjectMaterial(tmpobjid, 0, 2591, "ab_partition1", "ab_fabricCheck2", 0);
	tmpobjid = CreateObject(19458,-2968.201,1763.153,22.137,-0.000,90.000,-179.999,300.0000);
	SetObjectMaterial(tmpobjid, 0, 2591, "ab_partition1", "ab_fabricCheck2", 0);
	tmpobjid = CreateObject(19458,-2971.701,1772.753,22.137,-0.000,90.000,-179.999,300.0000);
	SetObjectMaterial(tmpobjid, 0, 2591, "ab_partition1", "ab_fabricCheck2", 0);
	tmpobjid = CreateObject(19458,-2971.701,1763.153,22.137,-0.000,90.000,-179.999,300.0000);
	SetObjectMaterial(tmpobjid, 0, 2591, "ab_partition1", "ab_fabricCheck2", 0);
	tmpobjid = CreateObject(19458,-2883.201,1772.753,22.137,-0.000,90.000,-179.999,300.0000);
	SetObjectMaterial(tmpobjid, 0, 2591, "ab_partition1", "ab_fabricCheck2", 0);
	tmpobjid = CreateObject(19458,-2883.201,1763.153,22.137,-0.000,90.000,-179.999,300.0000);
	SetObjectMaterial(tmpobjid, 0, 2591, "ab_partition1", "ab_fabricCheck2", 0);
	tmpobjid = CreateObject(19458,-2886.701,1772.753,22.137,-0.000,90.000,-179.999,300.0000);
	SetObjectMaterial(tmpobjid, 0, 2591, "ab_partition1", "ab_fabricCheck2", 0);
	tmpobjid = CreateObject(19458,-2886.701,1763.153,22.137,-0.000,90.000,-179.999,300.0000);
	SetObjectMaterial(tmpobjid, 0, 2591, "ab_partition1", "ab_fabricCheck2", 0);
	tmpobjid = CreateObject(19458,-2888.351,1772.739,20.423,0.000,0.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 16640, "a51", "a51_glass", 0);
	tmpobjid = CreateObject(19458,-2888.351,1763.139,20.423,0.000,0.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 16640, "a51", "a51_glass", 0);
	tmpobjid = CreateObject(19458,-2966.561,1772.739,20.423,0.000,0.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 16640, "a51", "a51_glass", 0);
	tmpobjid = CreateObject(19458,-2966.561,1763.139,20.423,0.000,0.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 16640, "a51", "a51_glass", 0);
	tmpobjid = CreateObject(19458,-2922.748,1807.547,20.323,0.000,0.000,90.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 16640, "a51", "a51_glass", 0);
	tmpobjid = CreateObject(19458,-2932.347,1807.547,20.323,0.000,0.000,90.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 16640, "a51", "a51_glass", 0);
	tmpobjid = CreateObject(19366,-2968.259,1758.453,20.323,0.000,0.000,90.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 16640, "a51", "a51_glass", 0);
	tmpobjid = CreateObject(19458,-2922.748,1727.747,20.323,0.000,0.000,90.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 16640, "a51", "a51_glass", 0);
	tmpobjid = CreateObject(19458,-2932.347,1727.747,20.323,0.000,0.000,90.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 16640, "a51", "a51_glass", 0);
	tmpobjid = CreateObject(19366,-2968.259,1777.483,20.323,0.000,0.000,90.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 16640, "a51", "a51_glass", 0);
	tmpobjid = CreateObject(19366,-2886.858,1777.453,20.323,-0.000,0.000,-89.999,300.0000);
	SetObjectMaterial(tmpobjid, 0, 16640, "a51", "a51_glass", 0);
	tmpobjid = CreateObject(19366,-2886.858,1758.423,20.323,-0.000,0.000,-89.999,300.0000);
	SetObjectMaterial(tmpobjid, 0, 16640, "a51", "a51_glass", 0);
	tmpobjid = CreateObject(19366,-2937.079,1809.063,20.323,0.000,0.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 16640, "a51", "a51_glass", 0);
	tmpobjid = CreateObject(19366,-2918.029,1809.063,20.323,0.000,0.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 16640, "a51", "a51_glass", 0);
	tmpobjid = CreateObject(19366,-2918.029,1726.234,20.323,0.000,-0.000,-179.999,300.0000);
	SetObjectMaterial(tmpobjid, 0, 16640, "a51", "a51_glass", 0);
	tmpobjid = CreateObject(19366,-2937.079,1726.234,20.323,0.000,-0.000,-179.999,300.0000);
	SetObjectMaterial(tmpobjid, 0, 16640, "a51", "a51_glass", 0);
	tmpobjid = CreateObject(13607,-2927.660,1767.998,3.976,0.000,180.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 16640, "a51", "a51_glass", 16711680);
	SetObjectMaterial(tmpobjid, 1, 4003, "cityhall_tr_lan", "sl_griddyfence_sml", 16711680);
	SetObjectMaterial(tmpobjid, 2, -1, "none", "none", 16711680);
	tmpobjid = CreateObject(19377,-2924.969,1766.626,27.037,0.000,90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, -1, "none", "none", -10066330);
	tmpobjid = CreateObject(19377,-2931.169,1766.626,27.037,0.000,90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, -1, "none", "none", -10066330);
	tmpobjid = CreateObject(19377,-2924.969,1773.726,27.037,0.000,90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, -1, "none", "none", -10066330);
	tmpobjid = CreateObject(19377,-2931.169,1773.726,27.037,0.000,90.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, -1, "none", "none", -10066330);
	tmpobjid = CreateObject(13607,-2927.660,1767.998,15.176,0.000,0.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 3904, "libertyfar", "newtenmt1", 0);
	SetObjectMaterial(tmpobjid, 1, 4003, "cityhall_tr_lan", "sl_griddyfence_sml", 0);
	SetObjectMaterial(tmpobjid, 2, 9583, "bigshap_sfw", "shipfloor_sfw", 0);
	tmpobjid = CreateObject(13607,-2927.660,1767.998,15.176,0.000,0.000,0.000,300.0000);
	SetObjectMaterial(tmpobjid, 0, 3555, "comedhos1_la", "comptwindo1", 0);
	SetObjectMaterial(tmpobjid, 1, 4003, "cityhall_tr_lan", "sl_griddyfence_sml", 0);
	SetObjectMaterial(tmpobjid, 2, 9583, "bigshap_sfw", "shipfloor_sfw", 0);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateObject(19366,-2971.458,1758.423,20.323,0.000,0.000,90.000,300.0000);
	tmpobjid = CreateObject(19366,-2974.658,1758.423,20.323,0.000,0.000,90.000,300.0000);
	tmpobjid = CreateObject(19366,-2971.458,1777.483,20.323,0.000,0.000,90.000,300.0000);
	tmpobjid = CreateObject(19366,-2883.658,1777.483,20.323,-0.000,0.000,-89.999,300.0000);
	tmpobjid = CreateObject(19366,-2974.658,1777.483,20.323,0.000,0.000,90.000,300.0000);
	tmpobjid = CreateObject(19366,-2880.458,1777.483,20.323,-0.000,0.000,-89.999,300.0000);
	tmpobjid = CreateObject(19366,-2883.658,1758.423,20.323,-0.000,0.000,-89.999,300.0000);
	tmpobjid = CreateObject(19366,-2880.458,1758.423,20.323,-0.000,0.000,-89.999,300.0000);
	tmpobjid = CreateObject(19366,-2937.079,1812.263,20.323,0.000,0.000,0.000,300.0000);
	tmpobjid = CreateObject(19366,-2937.079,1815.463,20.323,0.000,0.000,0.000,300.0000);
	tmpobjid = CreateObject(19366,-2918.029,1812.263,20.323,0.000,0.000,0.000,300.0000);
	tmpobjid = CreateObject(19366,-2918.029,1815.463,20.323,0.000,0.000,0.000,300.0000);
	tmpobjid = CreateObject(19366,-2918.029,1723.034,20.323,0.000,-0.000,-179.999,300.0000);
	tmpobjid = CreateObject(19366,-2918.029,1719.834,20.323,0.000,-0.000,-179.999,300.0000);
	tmpobjid = CreateObject(19366,-2937.079,1723.034,20.323,0.000,-0.000,-179.999,300.0000);
	tmpobjid = CreateObject(19366,-2937.079,1719.834,20.323,0.000,-0.000,-179.999,300.0000);
	tmpobjid = CreateObject(18980,-2969.200,1763.359,6.057,0.000,0.000,0.000,300.0000);
	tmpobjid = CreateObject(18980,-2969.200,1773.159,6.057,0.000,0.000,0.000,300.0000);
	tmpobjid = CreateObject(18980,-2886.100,1763.359,6.057,0.000,0.000,0.000,300.0000);
	tmpobjid = CreateObject(18980,-2886.100,1773.159,6.057,0.000,0.000,0.000,300.0000);
	tmpobjid = CreateObject(18980,-2922.304,1725.525,6.137,0.000,0.000,0.000,300.0000);
	tmpobjid = CreateObject(18980,-2932.304,1725.525,6.137,0.000,0.000,0.000,300.0000);
	tmpobjid = CreateObject(18980,-2922.804,1810.525,6.137,0.000,0.000,0.000,300.0000);
	tmpobjid = CreateObject(18980,-2932.804,1810.525,6.137,0.000,0.000,0.000,300.0000);
	tmpobjid = CreateObject(1723,-2922.851,1809.339,18.723,0.000,0.000,0.000,300.0000);
	tmpobjid = CreateObject(1723,-2929.051,1809.339,18.723,0.000,0.000,0.000,300.0000);
	tmpobjid = CreateObject(1723,-2934.851,1809.339,18.723,0.000,0.000,0.000,300.0000);
	tmpobjid = CreateObject(1775,-2918.581,1812.546,19.723,0.000,0.000,270.000,300.0000);
	tmpobjid = CreateObject(1723,-2922.851,1811.439,18.723,0.000,0.000,0.000,300.0000);
	tmpobjid = CreateObject(1723,-2929.051,1811.439,18.723,0.000,0.000,0.000,300.0000);
	tmpobjid = CreateObject(1723,-2934.851,1811.439,18.723,0.000,0.000,0.000,300.0000);
	tmpobjid = CreateObject(1723,-2932.381,1726.046,18.723,0.000,-0.000,-179.999,300.0000);
	tmpobjid = CreateObject(1723,-2926.181,1726.046,18.723,0.000,-0.000,-179.999,300.0000);
	tmpobjid = CreateObject(1723,-2920.381,1726.046,18.723,0.000,-0.000,-179.999,300.0000);
	tmpobjid = CreateObject(1775,-2936.651,1722.839,19.723,0.000,0.000,90.000,300.0000);
	tmpobjid = CreateObject(1723,-2932.381,1723.946,18.723,0.000,-0.000,-179.999,300.0000);
	tmpobjid = CreateObject(1723,-2926.181,1723.946,18.723,0.000,-0.000,-179.999,300.0000);
	tmpobjid = CreateObject(1723,-2920.381,1723.946,18.723,0.000,-0.000,-179.999,300.0000);
	tmpobjid = CreateObject(1723,-2968.404,1772.996,18.723,0.000,0.000,90.000,300.0000);
	tmpobjid = CreateObject(1723,-2968.404,1766.896,18.723,0.000,0.000,90.000,300.0000);
	tmpobjid = CreateObject(1723,-2968.404,1760.996,18.723,0.000,0.000,90.000,300.0000);
	tmpobjid = CreateObject(1723,-2970.904,1772.996,18.723,0.000,0.000,90.000,300.0000);
	tmpobjid = CreateObject(1723,-2970.904,1766.896,18.723,0.000,0.000,90.000,300.0000);
	tmpobjid = CreateObject(1723,-2970.904,1760.996,18.723,0.000,0.000,90.000,300.0000);
	tmpobjid = CreateObject(955,-2971.947,1758.860,19.123,0.000,0.000,180.000,300.0000);
	tmpobjid = CreateObject(1723,-2886.747,1762.860,18.723,-0.000,0.000,-89.999,300.0000);
	tmpobjid = CreateObject(1723,-2886.747,1768.961,18.723,-0.000,0.000,-89.999,300.0000);
	tmpobjid = CreateObject(1723,-2886.747,1774.861,18.723,-0.000,0.000,-89.999,300.0000);
	tmpobjid = CreateObject(1723,-2884.247,1762.860,18.723,-0.000,0.000,-89.999,300.0000);
	tmpobjid = CreateObject(1723,-2884.247,1768.961,18.723,-0.000,0.000,-89.999,300.0000);
	tmpobjid = CreateObject(1723,-2884.247,1774.861,18.723,-0.000,0.000,-89.999,300.0000);
	tmpobjid = CreateObject(955,-2883.203,1776.996,19.123,0.000,0.000,0.000,300.0000);

	//////////  Duelists names /////////
	g_oSignText[0] = CreateObject(7301,-2928.018,1762.422,29.537,0.000,0.000,135.000,300.0000);
	g_oSignText[1] = CreateObject(7301,-2920.318,1770.202,29.537,0.000,0.000,225.000,300.0000);
	g_oSignText[2] = CreateObject(7301,-2935.819,1770.102,29.537,0.000,0.000,405.000,300.0000);
	g_oSignText[3] = CreateObject(7301,-2928.138,1777.882,29.537,0.000,0.000,315.000,300.0000);
}

SetDuelSignText(playerid, duelerid)
{
	// create our string to tell who is fighting vs who.
	new string[90];
	// format it so it's not empty
	format(string, sizeof(string), "%s vs %s", Player[playerid][Name], Player[duelerid][Name]);

	// Set all the object text to our new formatted string.
	for(new i = 0; i < sizeof(g_oSignText); i ++)
	{
		SetObjectMaterialText(g_oSignText[i], string, 0, 110, "Ariel", 30, 1, -16711936, -10066330, 1);
	}
}
